/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/style-loader/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ajv-keywords/index.js":
/*!********************************************!*\
  !*** ./node_modules/ajv-keywords/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KEYWORDS = __webpack_require__(/*! ./keywords */ "./node_modules/ajv-keywords/keywords/index.js");

module.exports = defineKeywords;

/**
 * Defines one or several keywords in ajv instance
 * @param  {Ajv} ajv validator instance
 * @param  {String|Array<String>|undefined} keyword keyword(s) to define
 * @return {Ajv} ajv instance (for chaining)
 */
function defineKeywords(ajv, keyword) {
  if (Array.isArray(keyword)) {
    for (var i = 0; i < keyword.length; i++) {
      get(keyword[i])(ajv);
    }return ajv;
  }
  if (keyword) {
    get(keyword)(ajv);
    return ajv;
  }
  for (keyword in KEYWORDS) {
    get(keyword)(ajv);
  }return ajv;
}

defineKeywords.get = get;

function get(keyword) {
  var defFunc = KEYWORDS[keyword];
  if (!defFunc) throw new Error('Unknown keyword ' + keyword);
  return defFunc;
}

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/_formatLimit.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/_formatLimit.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var DATE_TIME_SEPARATOR = /t|\s/i;

var COMPARE_FORMATS = {
  date: compareDate,
  time: compareTime,
  'date-time': compareDateTime
};

module.exports = function (minMax) {
  var keyword = 'format' + minMax;
  return function defFunc(ajv) {
    defFunc.definition = {
      type: 'string',
      inline: __webpack_require__(/*! ./dotjs/_formatLimit */ "./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js"),
      statements: true,
      errors: 'full',
      metaSchema: {
        anyOf: [{ type: 'string' }, {
          type: 'object',
          required: ['$data'],
          properties: {
            $data: {
              type: 'string',
              anyOf: [{ format: 'relative-json-pointer' }, { format: 'json-pointer' }]
            }
          },
          additionalProperties: false
        }]
      }
    };

    ajv.addKeyword(keyword, defFunc.definition);
    ajv.addKeyword('formatExclusive' + minMax);
    extendFormats(ajv);
    return ajv;
  };
};

function extendFormats(ajv) {
  var formats = ajv._formats;
  for (var name in COMPARE_FORMATS) {
    var format = formats[name];
    // the last condition is needed if it's RegExp from another window
    if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) != 'object' || format instanceof RegExp || !format.validate) format = formats[name] = { validate: format };
    if (!format.compare) format.compare = COMPARE_FORMATS[name];
  }
}

function compareDate(d1, d2) {
  if (!(d1 && d2)) return;
  if (d1 > d2) return 1;
  if (d1 < d2) return -1;
  if (d1 === d2) return 0;
}

function compareTime(t1, t2) {
  if (!(t1 && t2)) return;
  t1 = t1.match(TIME);
  t2 = t2.match(TIME);
  if (!(t1 && t2)) return;
  t1 = t1[1] + t1[2] + t1[3] + (t1[4] || '');
  t2 = t2[1] + t2[2] + t2[3] + (t2[4] || '');
  if (t1 > t2) return 1;
  if (t1 < t2) return -1;
  if (t1 === t2) return 0;
}

function compareDateTime(dt1, dt2) {
  if (!(dt1 && dt2)) return;
  dt1 = dt1.split(DATE_TIME_SEPARATOR);
  dt2 = dt2.split(DATE_TIME_SEPARATOR);
  var res = compareDate(dt1[0], dt2[0]);
  if (res === undefined) return;
  return res || compareTime(dt1[1], dt2[1]);
}

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/_util.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/_util.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  metaSchemaRef: metaSchemaRef
};

var META_SCHEMA_ID = 'http://json-schema.org/draft-06/schema';

function metaSchemaRef(ajv) {
  var defaultMeta = ajv._opts.defaultMeta;
  if (typeof defaultMeta == 'string') return { $ref: defaultMeta };
  if (ajv.getSchema(META_SCHEMA_ID)) return { $ref: META_SCHEMA_ID };
  console.warn('meta schema not defined');
  return {};
}

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/deepProperties.js":
/*!**************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/deepProperties.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      var schemas = [];
      for (var pointer in schema) {
        schemas.push(getSchema(pointer, schema[pointer]));
      }return { 'allOf': schemas };
    },
    metaSchema: {
      type: 'object',
      propertyNames: {
        type: 'string',
        format: 'json-pointer'
      },
      additionalProperties: util.metaSchemaRef(ajv)
    }
  };

  ajv.addKeyword('deepProperties', defFunc.definition);
  return ajv;
};

function getSchema(jsonPointer, schema) {
  var segments = jsonPointer.split('/');
  var rootSchema = {};
  var pointerSchema = rootSchema;
  for (var i = 1; i < segments.length; i++) {
    var segment = segments[i];
    var isLast = i == segments.length - 1;
    segment = unescapeJsonPointer(segment);
    var properties = pointerSchema.properties = {};
    var items = undefined;
    if (/[0-9]+/.test(segment)) {
      var count = +segment;
      items = pointerSchema.items = [];
      while (count--) {
        items.push({});
      }
    }
    pointerSchema = isLast ? schema : {};
    properties[segment] = pointerSchema;
    if (items) items.push(pointerSchema);
  }
  return rootSchema;
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/deepRequired.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/deepRequired.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: function inline(it, keyword, schema) {
      var expr = '';
      for (var i = 0; i < schema.length; i++) {
        if (i) expr += ' && ';
        expr += '(' + getData(schema[i], it.dataLevel) + ' !== undefined)';
      }
      return expr;
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'json-pointer'
      }
    }
  };

  ajv.addKeyword('deepRequired', defFunc.definition);
  return ajv;
};

function getData(jsonPointer, lvl) {
  var data = 'data' + (lvl || '');
  if (!jsonPointer) return data;

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i = 1; i < segments.length; i++) {
    var segment = segments[i];
    data += getProperty(unescapeJsonPointer(segment));
    expr += ' && ' + data;
  }
  return expr;
}

var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var INTEGER = /^[0-9]+$/;
var SINGLE_QUOTE = /'|\\/g;
function getProperty(key) {
  return INTEGER.test(key) ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + key.replace(SINGLE_QUOTE, '\\$&') + "']";
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js":
/*!******************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate__formatLimit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  out += 'var ' + $valid + ' = undefined;';
  if (it.opts.format === false) {
    out += ' ' + $valid + ' = true; ';
    return out;
  }
  var $schemaFormat = it.schema.format,
      $isDataFormat = it.opts.$data && $schemaFormat.$data,
      $closingBraces = '';
  if ($isDataFormat) {
    var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),
        $format = 'format' + $lvl,
        $compare = 'compare' + $lvl;
    out += ' var ' + $format + ' = formats[' + $schemaValueFormat + '] , ' + $compare + ' = ' + $format + ' && ' + $format + '.compare;';
  } else {
    var $format = it.formats[$schemaFormat];
    if (!($format && $format.compare)) {
      out += '  ' + $valid + ' = true; ';
      return out;
    }
    var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';
  }
  var $isMax = $keyword == 'formatMaximum',
      $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $result = 'result' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' if (typeof ' + $schemaValueExcl + ' != \'boolean\' && ' + $schemaValueExcl + ' !== undefined) { ' + $valid + ' = false; ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_formatExclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }  ';
    if ($breakOnError) {
      $closingBraces += '}';
      out += ' else { ';
    }
    if ($isData) {
      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
      $closingBraces += '}';
    }
    if ($isDataFormat) {
      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
      $closingBraces += '}';
    }
    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; var ' + $exclusive + ' = ' + $schemaValueExcl + ' === true; if (' + $valid + ' === undefined) { ' + $valid + ' = ' + $exclusive + ' ? ' + $result + ' ' + $op + ' 0 : ' + $result + ' ' + $op + '= 0; } if (!' + $valid + ') var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\';';
  } else {
    var $exclusive = $schemaExcl === true,
        $opStr = $op;
    if (!$exclusive) $opStr += '=';
    var $opExpr = '\'' + $opStr + '\'';
    if ($isData) {
      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
      $closingBraces += '}';
    }
    if ($isDataFormat) {
      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
      $closingBraces += '}';
    }
    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; if (' + $valid + ' === undefined) ' + $valid + ' = ' + $result + ' ' + $op;
    if (!$exclusive) {
      out += '=';
    }
    out += ' 0;';
  }
  out += '' + $closingBraces + 'if (!' + $valid + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_formatLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit:  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += ' , exclusive: ' + $exclusive + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + $opStr + ' "';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '}';
  return out;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_patternRequired(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $matched = 'patternMatched' + $lvl,
      $dataProperties = 'dataProperties' + $lvl,
      $closingBraces = '',
      $ownProperties = it.opts.ownProperties;
  out += 'var ' + $valid + ' = true;';
  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }
  var arr1 = $schema;
  if (arr1) {
    var $pProperty,
        i1 = -1,
        l1 = arr1.length - 1;
    while (i1 < l1) {
      $pProperty = arr1[i1 += 1];
      out += ' var ' + $matched + ' = false;  ';
      if ($ownProperties) {
        out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
      } else {
        out += ' for (var ' + $key + ' in ' + $data + ') { ';
      }
      out += ' ' + $matched + ' = ' + it.usePattern($pProperty) + '.test(' + $key + '); if (' + $matched + ') break; } ';
      var $missingPattern = it.util.escapeQuotes($pProperty);
      out += ' if (!' + $matched + ') { ' + $valid + ' = false;  var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + 'patternRequired' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingPattern: \'' + $missingPattern + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should have property matching pattern \\\'' + $missingPattern + '\\\'\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  out += '' + $closingBraces;
  return out;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/switch.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/switch.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_switch(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $ifPassed = 'ifPassed' + it.level,
      $currentBaseId = $it.baseId,
      $shouldContinue;
  out += 'var ' + $ifPassed + ';';
  var arr1 = $schema;
  if (arr1) {
    var $sch,
        $caseIndex = -1,
        l1 = arr1.length - 1;
    while ($caseIndex < l1) {
      $sch = arr1[$caseIndex += 1];
      if ($caseIndex && !$shouldContinue) {
        out += ' if (!' + $ifPassed + ') { ';
        $closingBraces += '}';
      }
      if ($sch.if && it.util.schemaHasRules($sch.if, it.RULES.all)) {
        out += ' var ' + $errs + ' = errors;   ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        $it.createErrors = false;
        $it.schema = $sch.if;
        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';
        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        $it.createErrors = true;
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + $ifPassed + ' = ' + $nextValid + '; if (' + $ifPassed + ') {  ';
        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + __err + ']); ';
              } else {
                out += ' validate.errors = [' + __err + ']; return false; ';
              }
            } else {
              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }
          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + it.validate($it) + ' ';
          $it.baseId = $currentBaseId;
        }
        out += '  } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } } ';
      } else {
        out += ' ' + $ifPassed + ' = true;  ';
        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + __err + ']); ';
              } else {
                out += ' validate.errors = [' + __err + ']; return false; ';
              }
            } else {
              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }
          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + it.validate($it) + ' ';
          $it.baseId = $currentBaseId;
        }
      }
      $shouldContinue = $sch.continue;
    }
  }
  out += '' + $closingBraces + 'var ' + $valid + ' = ' + $nextValid + '; ';
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dynamicDefaults.js":
/*!***************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dynamicDefaults.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var sequences = {};

var DEFAULTS = {
  timestamp: function timestamp() {
    return Date.now();
  },
  datetime: function datetime() {
    return new Date().toISOString();
  },
  date: function date() {
    return new Date().toISOString().slice(0, 10);
  },
  time: function time() {
    return new Date().toISOString().slice(11);
  },
  random: function random() {
    return Math.random();
  },
  randomint: function randomint(args) {
    var limit = args && args.max || 2;
    return function () {
      return Math.floor(Math.random() * limit);
    };
  },
  seq: function seq(args) {
    var name = args && args.name || '';
    sequences[name] = sequences[name] || 0;
    return function () {
      return sequences[name]++;
    };
  }
};

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    compile: function compile(schema, parentSchema, it) {
      var funcs = {};

      for (var key in schema) {
        var d = schema[key];
        var func = getDefault(typeof d == 'string' ? d : d.func);
        funcs[key] = func.length ? func(d.args) : func;
      }

      return it.opts.useDefaults && !it.compositeRule ? assignDefaults : noop;

      function assignDefaults(data) {
        for (var prop in schema) {
          if (data[prop] === undefined) data[prop] = funcs[prop]();
        }return true;
      }

      function noop() {
        return true;
      }
    },
    DEFAULTS: DEFAULTS,
    metaSchema: {
      type: 'object',
      additionalProperties: {
        type: ['string', 'object'],
        additionalProperties: false,
        required: ['func', 'args'],
        properties: {
          func: { type: 'string' },
          args: { type: 'object' }
        }
      }
    }
  };

  ajv.addKeyword('dynamicDefaults', defFunc.definition);
  return ajv;

  function getDefault(d) {
    var def = DEFAULTS[d];
    if (def) return def;
    throw new Error('invalid "dynamicDefaults" keyword property value: ' + d);
  }
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/formatMaximum.js":
/*!*************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/formatMaximum.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./_formatLimit */ "./node_modules/ajv-keywords/keywords/_formatLimit.js")('Maximum');

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/formatMinimum.js":
/*!*************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/formatMinimum.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./_formatLimit */ "./node_modules/ajv-keywords/keywords/_formatLimit.js")('Minimum');

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  'instanceof': __webpack_require__(/*! ./instanceof */ "./node_modules/ajv-keywords/keywords/instanceof.js"),
  range: __webpack_require__(/*! ./range */ "./node_modules/ajv-keywords/keywords/range.js"),
  regexp: __webpack_require__(/*! ./regexp */ "./node_modules/ajv-keywords/keywords/regexp.js"),
  'typeof': __webpack_require__(/*! ./typeof */ "./node_modules/ajv-keywords/keywords/typeof.js"),
  dynamicDefaults: __webpack_require__(/*! ./dynamicDefaults */ "./node_modules/ajv-keywords/keywords/dynamicDefaults.js"),
  prohibited: __webpack_require__(/*! ./prohibited */ "./node_modules/ajv-keywords/keywords/prohibited.js"),
  uniqueItemProperties: __webpack_require__(/*! ./uniqueItemProperties */ "./node_modules/ajv-keywords/keywords/uniqueItemProperties.js"),
  deepProperties: __webpack_require__(/*! ./deepProperties */ "./node_modules/ajv-keywords/keywords/deepProperties.js"),
  deepRequired: __webpack_require__(/*! ./deepRequired */ "./node_modules/ajv-keywords/keywords/deepRequired.js"),
  formatMinimum: __webpack_require__(/*! ./formatMinimum */ "./node_modules/ajv-keywords/keywords/formatMinimum.js"),
  formatMaximum: __webpack_require__(/*! ./formatMaximum */ "./node_modules/ajv-keywords/keywords/formatMaximum.js"),
  patternRequired: __webpack_require__(/*! ./patternRequired */ "./node_modules/ajv-keywords/keywords/patternRequired.js"),
  'switch': __webpack_require__(/*! ./switch */ "./node_modules/ajv-keywords/keywords/switch.js"),
  select: __webpack_require__(/*! ./select */ "./node_modules/ajv-keywords/keywords/select.js"),
  transform: __webpack_require__(/*! ./transform */ "./node_modules/ajv-keywords/keywords/transform.js")
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/instanceof.js":
/*!**********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/instanceof.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var CONSTRUCTORS = {
  Object: Object,
  Array: Array,
  Function: Function,
  Number: Number,
  String: String,
  Date: Date,
  RegExp: RegExp
};

module.exports = function defFunc(ajv) {
  /* istanbul ignore else */
  if (typeof Buffer != 'undefined') CONSTRUCTORS.Buffer = Buffer;

  /* istanbul ignore else */
  if (typeof Promise != 'undefined') CONSTRUCTORS.Promise = Promise;

  defFunc.definition = {
    compile: function compile(schema) {
      if (typeof schema == 'string') {
        var Constructor = getConstructor(schema);
        return function (data) {
          return data instanceof Constructor;
        };
      }

      var constructors = schema.map(getConstructor);
      return function (data) {
        for (var i = 0; i < constructors.length; i++) {
          if (data instanceof constructors[i]) return true;
        }return false;
      };
    },
    CONSTRUCTORS: CONSTRUCTORS,
    metaSchema: {
      anyOf: [{ type: 'string' }, {
        type: 'array',
        items: { type: 'string' }
      }]
    }
  };

  ajv.addKeyword('instanceof', defFunc.definition);
  return ajv;

  function getConstructor(c) {
    var Constructor = CONSTRUCTORS[c];
    if (Constructor) return Constructor;
    throw new Error('invalid "instanceof" keyword value ' + c);
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/patternRequired.js":
/*!***************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/patternRequired.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: __webpack_require__(/*! ./dotjs/patternRequired */ "./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js"),
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'regex'
      },
      uniqueItems: true
    }
  };

  ajv.addKeyword('patternRequired', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/prohibited.js":
/*!**********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/prohibited.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      if (schema.length == 0) return {};
      if (schema.length == 1) return { not: { required: schema } };
      var schemas = schema.map(function (prop) {
        return { required: [prop] };
      });
      return { not: { anyOf: schemas } };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };

  ajv.addKeyword('prohibited', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/range.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/range.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'number',
    macro: function macro(schema, parentSchema) {
      var min = schema[0],
          max = schema[1],
          exclusive = parentSchema.exclusiveRange;

      validateRangeSchema(min, max, exclusive);

      return exclusive === true ? { exclusiveMinimum: min, exclusiveMaximum: max } : { minimum: min, maximum: max };
    },
    metaSchema: {
      type: 'array',
      minItems: 2,
      maxItems: 2,
      items: { type: 'number' }
    }
  };

  ajv.addKeyword('range', defFunc.definition);
  ajv.addKeyword('exclusiveRange');
  return ajv;

  function validateRangeSchema(min, max, exclusive) {
    if (exclusive !== undefined && typeof exclusive != 'boolean') throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');

    if (min > max || exclusive && min == max) throw new Error('There are no numbers in range');
  }
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/regexp.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/regexp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'string',
    inline: function inline(it, keyword, schema) {
      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';

      function getRegExp() {
        try {
          if ((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) == 'object') return new RegExp(schema.pattern, schema.flags);

          var rx = schema.match(/^\/(.*)\/([gimy]*)$/);
          if (rx) return new RegExp(rx[1], rx[2]);
          throw new Error('cannot parse string into RegExp');
        } catch (e) {
          console.error('regular expression', schema, 'is invalid');
          throw e;
        }
      }
    },
    metaSchema: {
      type: ['string', 'object'],
      properties: {
        pattern: { type: 'string' },
        flags: { type: 'string' }
      },
      required: ['pattern'],
      additionalProperties: false
    }
  };

  ajv.addKeyword('regexp', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/select.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/select.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  if (!ajv._opts.$data) {
    console.warn('keyword select requires $data option');
    return ajv;
  }
  var metaSchemaRef = util.metaSchemaRef(ajv);
  var compiledCaseSchemas = [];

  defFunc.definition = {
    validate: function v(schema, data, parentSchema) {
      if (parentSchema.selectCases === undefined) throw new Error('keyword "selectCases" is absent');
      var compiled = getCompiledSchemas(parentSchema, false);
      var validate = compiled.cases[schema];
      if (validate === undefined) validate = compiled.default;
      if (typeof validate == 'boolean') return validate;
      var valid = validate(data);
      if (!valid) v.errors = validate.errors;
      return valid;
    },
    $data: true,
    metaSchema: { type: ['string', 'number', 'boolean', 'null'] }
  };

  ajv.addKeyword('select', defFunc.definition);
  ajv.addKeyword('selectCases', {
    compile: function compile(schemas, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);
      for (var value in schemas) {
        compiled.cases[value] = compileOrBoolean(schemas[value]);
      }return function () {
        return true;
      };
    },
    valid: true,
    metaSchema: {
      type: 'object',
      additionalProperties: metaSchemaRef
    }
  });
  ajv.addKeyword('selectDefault', {
    compile: function compile(schema, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);
      compiled.default = compileOrBoolean(schema);
      return function () {
        return true;
      };
    },
    valid: true,
    metaSchema: metaSchemaRef
  });
  return ajv;

  function getCompiledSchemas(parentSchema, create) {
    var compiled;
    compiledCaseSchemas.some(function (c) {
      if (c.parentSchema === parentSchema) {
        compiled = c;
        return true;
      }
    });
    if (!compiled && create !== false) {
      compiled = {
        parentSchema: parentSchema,
        cases: {},
        default: true
      };
      compiledCaseSchemas.push(compiled);
    }
    return compiled;
  }

  function compileOrBoolean(schema) {
    return typeof schema == 'boolean' ? schema : ajv.compile(schema);
  }
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/switch.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/switch.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  if (ajv.RULES.keywords.switch && ajv.RULES.keywords.if) return;

  var metaSchemaRef = util.metaSchemaRef(ajv);

  defFunc.definition = {
    inline: __webpack_require__(/*! ./dotjs/switch */ "./node_modules/ajv-keywords/keywords/dotjs/switch.js"),
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        required: ['then'],
        properties: {
          'if': metaSchemaRef,
          'then': {
            anyOf: [{ type: 'boolean' }, metaSchemaRef]
          },
          'continue': { type: 'boolean' }
        },
        additionalProperties: false,
        dependencies: {
          'continue': ['if']
        }
      }
    }
  };

  ajv.addKeyword('switch', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/transform.js":
/*!*********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/transform.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'string',
    errors: false,
    modifying: true,
    valid: true,
    compile: function compile(schema, parentSchema) {

      // build hash table to enum values
      var hashtable = {};

      if (schema.indexOf('toEnumCase') !== -1) {
        // requires `enum` in schema
        if (!parentSchema.enum) throw new Error('Missing enum. To use `transform:["toEnumCase"]`, `enum:[...]` is required.');
        for (var i = parentSchema.enum.length; i--; i) {
          var v = parentSchema.enum[i];
          if (typeof v !== 'string') continue;
          var k = makeHashTableKey(v);
          // requires all `enum` values have unique keys
          if (hashtable[k]) throw new Error('Invalid enum uniqueness. To use `transform:["toEnumCase"]`, all values must be unique when case insensitive.');
          hashtable[k] = v;
        }
      }

      var transform = {
        trimLeft: function trimLeft(value) {
          return value.replace(/^[\s]+/, '');
        },
        trimRight: function trimRight(value) {
          return value.replace(/[\s]+$/, '');
        },
        trim: function trim(value) {
          return value.trim();
        },
        toLowerCase: function toLowerCase(value) {
          return value.toLowerCase();
        },
        toUpperCase: function toUpperCase(value) {
          return value.toUpperCase();
        },
        toEnumCase: function toEnumCase(value) {
          return hashtable[makeHashTableKey(value)] || value;
        }
      };

      return function (value, objectKey, object, key) {
        // skip if value only
        if (!object) return;

        // apply transform in order provided
        for (var j = 0, l = schema.length; j < l; j++) {
          if (typeof object[key] !== 'string') continue;
          object[key] = transform[schema[j]](object[key]);
        }
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        enum: ['trimLeft', 'trimRight', 'trim', 'toLowerCase', 'toUpperCase', 'toEnumCase']
      }
    }
  };

  ajv.addKeyword('transform', defFunc.definition);
  return ajv;

  function makeHashTableKey(value) {
    return value.toLowerCase();
  }
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/typeof.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/typeof.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KNOWN_TYPES = ['undefined', 'string', 'number', 'object', 'function', 'boolean', 'symbol'];

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    inline: function inline(it, keyword, schema) {
      var data = 'data' + (it.dataLevel || '');
      if (typeof schema == 'string') return 'typeof ' + data + ' == "' + schema + '"';
      schema = 'validate.schema' + it.schemaPath + '.' + keyword;
      return schema + '.indexOf(typeof ' + data + ') >= 0';
    },
    metaSchema: {
      anyOf: [{
        type: 'string',
        enum: KNOWN_TYPES
      }, {
        type: 'array',
        items: {
          type: 'string',
          enum: KNOWN_TYPES
        }
      }]
    }
  };

  ajv.addKeyword('typeof', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/uniqueItemProperties.js":
/*!********************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/uniqueItemProperties.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'array',
    compile: function compile(keys, parentSchema, it) {
      var equal = it.util.equal;
      return function (data) {
        if (data.length > 1) {
          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];
            for (var i = data.length; i--;) {
              if (_typeof(data[i]) != 'object') continue;
              for (var j = i; j--;) {
                if (_typeof(data[j]) == 'object' && equal(data[i][key], data[j][key])) return false;
              }
            }
          }
        }
        return true;
      };
    },
    metaSchema: {
      type: 'array',
      items: { type: 'string' }
    }
  };

  ajv.addKeyword('uniqueItemProperties', defFunc.definition);
  return ajv;
};

/***/ }),

/***/ "./node_modules/ajv/lib/ajv.js":
/*!*************************************!*\
  !*** ./node_modules/ajv/lib/ajv.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var compileSchema = __webpack_require__(/*! ./compile */ "./node_modules/ajv/lib/compile/index.js"),
    resolve = __webpack_require__(/*! ./compile/resolve */ "./node_modules/ajv/lib/compile/resolve.js"),
    Cache = __webpack_require__(/*! ./cache */ "./node_modules/ajv/lib/cache.js"),
    SchemaObject = __webpack_require__(/*! ./compile/schema_obj */ "./node_modules/ajv/lib/compile/schema_obj.js"),
    stableStringify = __webpack_require__(/*! fast-json-stable-stringify */ "./node_modules/fast-json-stable-stringify/index.js"),
    formats = __webpack_require__(/*! ./compile/formats */ "./node_modules/ajv/lib/compile/formats.js"),
    rules = __webpack_require__(/*! ./compile/rules */ "./node_modules/ajv/lib/compile/rules.js"),
    $dataMetaSchema = __webpack_require__(/*! ./data */ "./node_modules/ajv/lib/data.js"),
    util = __webpack_require__(/*! ./compile/util */ "./node_modules/ajv/lib/compile/util.js");

module.exports = Ajv;

Ajv.prototype.validate = validate;
Ajv.prototype.compile = compile;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;

Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;

Ajv.prototype.compileAsync = __webpack_require__(/*! ./compile/async */ "./node_modules/ajv/lib/compile/async.js");
var customKeyword = __webpack_require__(/*! ./keyword */ "./node_modules/ajv/lib/keyword.js");
Ajv.prototype.addKeyword = customKeyword.add;
Ajv.prototype.getKeyword = customKeyword.get;
Ajv.prototype.removeKeyword = customKeyword.remove;

var errorClasses = __webpack_require__(/*! ./compile/error_classes */ "./node_modules/ajv/lib/compile/error_classes.js");
Ajv.ValidationError = errorClasses.Validation;
Ajv.MissingRefError = errorClasses.MissingRef;
Ajv.$dataMetaSchema = $dataMetaSchema;

var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes'];
var META_SUPPORT_DATA = ['/properties'];

/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */
function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats(opts.format);
  var schemaUriFormat = this._schemaUriFormat = this._formats['uri-reference'];
  this._schemaUriFormatFunc = function (str) {
    return schemaUriFormat.test(str);
  };

  this._cache = opts.cache || new Cache();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);

  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = stableStringify;
  this._metaOpts = getMetaSchemaOptions(this);

  if (opts.formats) addInitialFormats(this);
  addDraft6MetaSchema(this);
  if (_typeof(opts.meta) == 'object') this.addMetaSchema(opts.meta);
  addInitialSchemas(this);
}

/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */
function validate(schemaKeyRef, data) {
  var v;
  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);
    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}

/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */
function compile(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);
  return schemaObj.validate || this._compile(schemaObj);
}

/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */
function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      this.addSchema(schema[i], undefined, _skipValidation, _meta);
    }return this;
  }
  var id = this._getId(schema);
  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');
  key = resolve.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}

/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */
function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}

/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */
function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }
  var currentUriFormat = this._formats.uri;
  this._formats.uri = typeof currentUriFormat == 'function' ? this._schemaUriFormatFunc : this._schemaUriFormat;
  var valid;
  try {
    valid = this.validate($schema, schema);
  } finally {
    this._formats.uri = currentUriFormat;
  }
  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);
  }
  return valid;
}

function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = (typeof meta === 'undefined' ? 'undefined' : _typeof(meta)) == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
  return self._opts.defaultMeta;
}

/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */
function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);
  switch (typeof schemaObj === 'undefined' ? 'undefined' : _typeof(schemaObj)) {
    case 'object':
      return schemaObj.validate || this._compile(schemaObj);
    case 'string':
      return this.getSchema(schemaObj);
    case 'undefined':
      return _getSchemaFragment(this, keyRef);
  }
}

function _getSchemaFragment(self, ref) {
  var res = resolve.schema.call(self, { schema: {} }, ref);
  if (res) {
    var schema = res.schema,
        root = res.root,
        baseId = res.baseId;
    var v = compileSchema.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new SchemaObject({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}

function _getSchemaObj(self, keyRef) {
  keyRef = resolve.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}

/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */
function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);
    _removeAllSchemas(this, this._refs, schemaKeyRef);
    return this;
  }
  switch (typeof schemaKeyRef === 'undefined' ? 'undefined' : _typeof(schemaKeyRef)) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);
      _removeAllSchemas(this, this._refs);
      this._cache.clear();
      return this;
    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);
      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;
    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
      this._cache.del(cacheKey);
      var id = this._getId(schemaKeyRef);
      if (id) {
        id = resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }
  }
  return this;
}

function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];
    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);
      delete schemas[keyRef];
    }
  }
}

/* @this   Ajv */
function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if ((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;
  var cached = this._cache.get(cacheKey);
  if (cached) return cached;

  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

  var id = resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);

  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema))) this.validateSchema(schema, true);

  var localRefs = resolve.ids.call(this, schema);

  var schemaObj = new SchemaObject({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });

  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);

  return schemaObj;
}

/* @this   Ajv */
function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true) callValidate.$async = true;
    return callValidate;
  }
  schemaObj.compiling = true;

  var currentOpts;
  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;
  try {
    v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;

  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;
    var result = _validate.apply(this, arguments);
    callValidate.errors = _validate.errors;
    return result;
  }
}

function chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto':
      return _get$IdOrId;
    case 'id':
      return _getId;
    default:
      return _get$Id;
  }
}

/* @this   Ajv */
function _getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}

/* @this   Ajv */
function _get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}

function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}

/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */
function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

  var text = '';
  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }
  return text.slice(0, -separator.length);
}

/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */
function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}

function addDraft6MetaSchema(self) {
  var $dataSchema;
  if (self._opts.$data) {
    $dataSchema = __webpack_require__(/*! ./refs/data.json */ "./node_modules/ajv/lib/refs/data.json");
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }
  if (self._opts.meta === false) return;
  var metaSchema = __webpack_require__(/*! ./refs/json-schema-draft-07.json */ "./node_modules/ajv/lib/refs/json-schema-draft-07.json");
  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
}

function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) {
    self.addSchema(optsSchemas[key], key);
  }
}

function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}

function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
}

function getMetaSchemaOptions(self) {
  var metaOpts = util.copy(self._opts);
  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) {
    delete metaOpts[META_IGNORE_OPTIONS[i]];
  }return metaOpts;
}

function setLogger(self) {
  var logger = self._opts.logger;
  if (logger === false) {
    self.logger = { log: noop, warn: noop, error: noop };
  } else {
    if (logger === undefined) logger = console;
    if (!((typeof logger === 'undefined' ? 'undefined' : _typeof(logger)) == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}

function noop() {}

/***/ }),

/***/ "./node_modules/ajv/lib/cache.js":
/*!***************************************!*\
  !*** ./node_modules/ajv/lib/cache.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cache = module.exports = function Cache() {
  this._cache = {};
};

Cache.prototype.put = function Cache_put(key, value) {
  this._cache[key] = value;
};

Cache.prototype.get = function Cache_get(key) {
  return this._cache[key];
};

Cache.prototype.del = function Cache_del(key) {
  delete this._cache[key];
};

Cache.prototype.clear = function Cache_clear() {
  this._cache = {};
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/async.js":
/*!***********************************************!*\
  !*** ./node_modules/ajv/lib/compile/async.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MissingRefError = __webpack_require__(/*! ./error_classes */ "./node_modules/ajv/lib/compile/error_classes.js").MissingRef;

module.exports = compileAsync;

/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
 * @this  Ajv
 * @param {Object}   schema schema object
 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
 * @return {Promise} promise that resolves with a validating function.
 */
function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */
  /* global Promise */
  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function () {
    var schemaObj = self._addSchema(schema, undefined, meta);
    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(function (v) {
      callback(null, v);
    }, callback);
  }

  return p;

  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema) ? compileAsync.call(self, { $ref: $schema }, true) : Promise.resolve();
  }

  function _compileAsync(schemaObj) {
    try {
      return self._compile(schemaObj);
    } catch (e) {
      if (e instanceof MissingRefError) return loadMissingSchema(e);
      throw e;
    }

    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

      var schemaPromise = self._loadingSchemas[ref];
      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise.then(function (sch) {
        if (!added(ref)) {
          return loadMetaSchemaOf(sch).then(function () {
            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
          });
        }
      }).then(function () {
        return _compileAsync(schemaObj);
      });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/error_classes.js":
/*!*******************************************************!*\
  !*** ./node_modules/ajv/lib/compile/error_classes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var resolve = __webpack_require__(/*! ./resolve */ "./node_modules/ajv/lib/compile/resolve.js");

module.exports = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
};

function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
}

MissingRefError.message = function (baseId, ref) {
  return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
};

function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve.url(baseId, ref);
  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
}

function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/formats.js":
/*!*************************************************!*\
  !*** ./node_modules/ajv/lib/compile/formats.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./util */ "./node_modules/ajv/lib/compile/util.js");

var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;

module.exports = formats;

function formats(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util.copy(formats[mode]);
}

formats.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER
};

formats.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: hostname,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  uuid: UUID,
  'json-pointer': JSON_POINTER,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  'relative-json-pointer': RELATIVE_JSON_POINTER
};

function isLeapYear(year) {
  // https://tools.ietf.org/html/rfc3339#appendix-C
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;

  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];

  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}

function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;

  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
}

var DATE_TIME_SEPARATOR = /t|\s/i;
function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}

function hostname(str) {
  // https://tools.ietf.org/html/rfc1034#section-3.5
  // https://tools.ietf.org/html/rfc1123#section-2
  return str.length <= 255 && HOSTNAME.test(str);
}

var NOT_URI_FRAGMENT = /\/|:/;
function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}

var Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
  if (Z_ANCHOR.test(str)) return false;
  try {
    new RegExp(str);
    return true;
  } catch (e) {
    return false;
  }
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ajv/lib/compile/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var resolve = __webpack_require__(/*! ./resolve */ "./node_modules/ajv/lib/compile/resolve.js"),
    util = __webpack_require__(/*! ./util */ "./node_modules/ajv/lib/compile/util.js"),
    errorClasses = __webpack_require__(/*! ./error_classes */ "./node_modules/ajv/lib/compile/error_classes.js"),
    stableStringify = __webpack_require__(/*! fast-json-stable-stringify */ "./node_modules/fast-json-stable-stringify/index.js");

var validateGenerator = __webpack_require__(/*! ../dotjs/validate */ "./node_modules/ajv/lib/dotjs/validate.js");

/**
 * Functions below are used inside compiled validations function
 */

var ucs2length = util.ucs2length;
var equal = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js");

// this error is thrown by async schemas to return validation errors via exception
var ValidationError = errorClasses.Validation;

module.exports = compile;

/**
 * Compiles schema to validation function
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Object} root object with information about the root schema for this schema
 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
 * @param  {String} baseId base ID for IDs in the schema
 * @return {Function} validation function
 */
function compile(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */
  /* eslint no-shadow: 0 */
  var self = this,
      opts = this._opts,
      refVal = [undefined],
      refs = {},
      patterns = [],
      patternsHash = {},
      defaults = [],
      defaultsHash = {},
      customRules = [];

  root = root || { schema: schema, refVal: refVal, refs: refs };

  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return compilation.callValidate = callValidate;

  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;
    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }
    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }

  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var validate = compilation.validate;
    var result = validate.apply(this, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || _root && _root.schema == _schema;
    if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);

    var $async = _schema.$async === true;

    var sourceCode = validateGenerator({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '""',
      MissingRefError: errorClasses.MissingRef,
      RULES: RULES,
      validate: validateGenerator,
      util: util,
      resolve: resolve,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      logger: self.logger,
      self: self
    });

    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;

    if (opts.processCode) sourceCode = opts.processCode(sourceCode);
    // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
    var validate;
    try {
      var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'equal', 'ucs2length', 'ValidationError', sourceCode);

      validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, equal, ucs2length, ValidationError);

      refVal[0] = validate;
    } catch (e) {
      self.logger.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate.schema = _schema;
    validate.errors = null;
    validate.refs = refs;
    validate.refVal = refVal;
    validate.root = isRoot ? validate : _root;
    if ($async) validate.$async = true;
    if (opts.sourceCode === true) {
      validate.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve.url(baseId, ref);
    var refIndex = refs[ref];
    var _refVal, refCode;
    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }
    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];
      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve.call(self, localCompile, root, ref);
    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];
      if (localSchema) {
        v = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return (typeof refVal === 'undefined' ? 'undefined' : _typeof(refVal)) == 'object' || typeof refVal == 'boolean' ? { code: code, schema: refVal, inline: true } : { code: code, $async: refVal && !!refVal.$async };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];
    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }
    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'boolean':
      case 'number':
        return '' + value;
      case 'string':
        return util.toQuotedString(value);
      case 'object':
        if (value === null) return 'null';
        var valueStr = stableStringify(value);
        var index = defaultsHash[valueStr];
        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }
        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    var validateSchema = rule.definition.validateSchema;
    if (validateSchema && self._opts.validateSchema !== false) {
      var valid = validateSchema(schema);
      if (!valid) {
        var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
        if (self._opts.validateSchema == 'log') self.logger.error(message);else throw new Error(message);
      }
    }

    var compile = rule.definition.compile,
        inline = rule.definition.inline,
        macro = rule.definition.macro;

    var validate;
    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined) throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

    var index = customRules.length;
    customRules[index] = validate;

    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
}

/**
 * Checks if the schema is currently compiled
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
 */
function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return { index: index, compiling: true };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return { index: index, compiling: false };
}

/**
 * Removes the schema from the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 */
function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
}

/**
 * Index of schema compilation in the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Integer} compilation index
 */
function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i = 0; i < this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }
  return -1;
}

function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
}

function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
}

function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
}

function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
}

function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';
  for (var i = 0; i < arr.length; i++) {
    code += statement(i, arr);
  }return code;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/resolve.js":
/*!*************************************************!*\
  !*** ./node_modules/ajv/lib/compile/resolve.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var URI = __webpack_require__(/*! uri-js */ "./node_modules/uri-js/dist/es5/uri.all.js"),
    equal = __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js"),
    util = __webpack_require__(/*! ./util */ "./node_modules/ajv/lib/compile/util.js"),
    SchemaObject = __webpack_require__(/*! ./schema_obj */ "./node_modules/ajv/lib/compile/schema_obj.js"),
    traverse = __webpack_require__(/*! json-schema-traverse */ "./node_modules/json-schema-traverse/index.js");

module.exports = resolve;

resolve.normalizeId = normalizeId;
resolve.fullPath = getFullPath;
resolve.url = resolveUrl;
resolve.ids = resolveIds;
resolve.inlineRef = inlineRef;
resolve.schema = resolveSchema;

/**
 * [resolve and compile the references ($ref)]
 * @this   Ajv
 * @param  {Function} compile reference to schema compilation funciton (localCompile)
 * @param  {Object} root object with information about the root schema for the current schema
 * @param  {String} ref reference to resolve
 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
 */
function resolve(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];
  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];
  if (refVal instanceof SchemaObject) {
    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;
  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof SchemaObject) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
}

/**
 * Resolve schema, its root and baseId
 * @this Ajv
 * @param  {Object} root root object with properties schema, refVal, refs
 * @param  {String} ref  reference to resolve
 * @return {Object} object with properties schema, root, baseId
 */
function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = URI.parse(ref),
      refPath = _getFullPath(p),
      baseId = getFullPath(this._getId(root.schema));
  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];
    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof SchemaObject) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];
      if (refVal instanceof SchemaObject) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref)) return { schema: refVal, root: root, baseId: baseId };
        root = refVal;
      } else {
        return;
      }
    }
    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }
  return getJsonPointer.call(this, p, baseId, root.schema, root);
}

/* @this Ajv */
function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);
  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;
    var id = this._getId(schema);
    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}

var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
/* @this Ajv */
function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.fragment = parsedRef.fragment || '';
  if (parsedRef.fragment.slice(0, 1) != '/') return;
  var parts = parsedRef.fragment.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];
    if (part) {
      part = util.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;
      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);
        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }
  if (schema !== undefined && schema !== root.schema) return { schema: schema, root: root, baseId: baseId };
}

var SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);
function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;
}

function checkNoRef(schema) {
  var item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object' && !checkNoRef(item)) return false;
    }
  }
  return true;
}

function countKeys(schema) {
  var count = 0,
      item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;
      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }
  return count;
}

function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = URI.parse(id);
  return _getFullPath(p);
}

function _getFullPath(p) {
  return URI.serialize(p).split('#')[0] + '#';
}

var TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
}

function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return URI.resolve(baseId, id);
}

/* @this Ajv */
function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = { '': schemaId };
  var fullPaths = { '': getFullPath(schemaId, false) };
  var localRefs = {};
  var self = this;

  traverse(schema, { allKeys: true }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === '') return;
    var id = self._getId(sch);
    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined) fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);

      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];
      if (refVal && refVal.schema) {
        if (!equal(sch, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !equal(sch, localRefs[id])) throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }
    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });

  return localRefs;
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/rules.js":
/*!***********************************************!*\
  !*** ./node_modules/ajv/lib/compile/rules.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ruleModules = __webpack_require__(/*! ../dotjs */ "./node_modules/ajv/lib/dotjs/index.js"),
    toHash = __webpack_require__(/*! ./util */ "./node_modules/ajv/lib/compile/util.js").toHash;

module.exports = function rules() {
  var RULES = [{ type: 'number',
    rules: [{ 'maximum': ['exclusiveMaximum'] }, { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] }, { type: 'string',
    rules: ['maxLength', 'minLength', 'pattern', 'format'] }, { type: 'array',
    rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems'] }, { type: 'object',
    rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', { 'properties': ['additionalProperties', 'patternProperties'] }] }, { rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if'] }];

  var ALL = ['type', '$comment'];
  var KEYWORDS = ['$schema', '$id', 'id', '$data', 'title', 'description', 'default', 'definitions', 'examples', 'readOnly', 'writeOnly', 'contentMediaType', 'contentEncoding', 'additionalItems', 'then', 'else'];
  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
  RULES.all = toHash(ALL);
  RULES.types = toHash(TYPES);

  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      var implKeywords;
      if ((typeof keyword === 'undefined' ? 'undefined' : _typeof(keyword)) == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function (k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }
      ALL.push(keyword);
      var rule = RULES.all[keyword] = {
        keyword: keyword,
        code: ruleModules[keyword],
        implements: implKeywords
      };
      return rule;
    });

    RULES.all.$comment = {
      keyword: '$comment',
      code: ruleModules.$comment
    };

    if (group.type) RULES.types[group.type] = group;
  });

  RULES.keywords = toHash(ALL.concat(KEYWORDS));
  RULES.custom = {};

  return RULES;
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/schema_obj.js":
/*!****************************************************!*\
  !*** ./node_modules/ajv/lib/compile/schema_obj.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var util = __webpack_require__(/*! ./util */ "./node_modules/ajv/lib/compile/util.js");

module.exports = SchemaObject;

function SchemaObject(obj) {
  util.copy(obj, this);
}

/***/ }),

/***/ "./node_modules/ajv/lib/compile/ucs2length.js":
/*!****************************************************!*\
  !*** ./node_modules/ajv/lib/compile/ucs2length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode

module.exports = function ucs2length(str) {
  var length = 0,
      len = str.length,
      pos = 0,
      value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }
  return length;
};

/***/ }),

/***/ "./node_modules/ajv/lib/compile/util.js":
/*!**********************************************!*\
  !*** ./node_modules/ajv/lib/compile/util.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  copy: copy,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty,
  escapeQuotes: escapeQuotes,
  equal: __webpack_require__(/*! fast-deep-equal */ "./node_modules/fast-deep-equal/index.js"),
  ucs2length: __webpack_require__(/*! ./ucs2length */ "./node_modules/ajv/lib/compile/ucs2length.js"),
  varOccurences: varOccurences,
  varReplace: varReplace,
  cleanUpCode: cleanUpCode,
  finalCleanUpCode: finalCleanUpCode,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
};

function copy(o, to) {
  to = to || {};
  for (var key in o) {
    to[key] = o[key];
  }return to;
}

function checkDataType(dataType, data, negate) {
  var EQUAL = negate ? ' !== ' : ' === ',
      AND = negate ? ' || ' : ' && ',
      OK = negate ? '!' : '',
      NOT = negate ? '' : '!';
  switch (dataType) {
    case 'null':
      return data + EQUAL + 'null';
    case 'array':
      return OK + 'Array.isArray(' + data + ')';
    case 'object':
      return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';
    case 'integer':
      return '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')';
    default:
      return 'typeof ' + data + EQUAL + '"' + dataType + '"';
  }
}

function checkDataTypes(dataTypes, data) {
  switch (dataTypes.length) {
    case 1:
      return checkDataType(dataTypes[0], data, true);
    default:
      var code = '';
      var types = toHash(dataTypes);
      if (types.array && types.object) {
        code = types.null ? '(' : '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }
      if (types.number) delete types.integer;
      for (var t in types) {
        code += (code ? ' && ' : '') + checkDataType(t, data, true);
      }return code;
  }
}

var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);
function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];
    for (var i = 0; i < dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }
    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
}

function toHash(arr) {
  var hash = {};
  for (var i = 0; i < arr.length; i++) {
    hash[arr[i]] = true;
  }return hash;
}

var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;
function getProperty(key) {
  return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
}

function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, '\\$&').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\f/g, '\\f').replace(/\t/g, '\\t');
}

function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
}

function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
}

var EMPTY_ELSE = /else\s*{\s*}/g,
    EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
    EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
function cleanUpCode(out) {
  return out.replace(EMPTY_ELSE, '').replace(EMPTY_IF_NO_ELSE, '').replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
}

var ERRORS_REGEXP = /[^v.]errors/g,
    REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
    REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,
    RETURN_VALID = 'return errors === 0;',
    RETURN_TRUE = 'validate.errors = null; return true;',
    RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,
    RETURN_DATA_ASYNC = 'return data;',
    ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,
    REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

function finalCleanUpCode(out, async) {
  var matches = out.match(ERRORS_REGEXP);
  if (matches && matches.length == 2) {
    out = async ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_DATA_ASYNC) : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);
  }

  matches = out.match(ROOTDATA_REGEXP);
  if (!matches || matches.length !== 3) return out;
  return out.replace(REMOVE_ROOTDATA, '');
}

function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;
  for (var key in schema) {
    if (rules[key]) return true;
  }
}

function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
  for (var key in schema) {
    if (key != exceptKeyword && rules[key]) return true;
  }
}

function toQuotedString(str) {
  return '\'' + escapeQuotes(str) + '\'';
}

function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
  ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')') : isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'';
  return joinPaths(currentPath, path);
}

function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
  ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
}

var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';
  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];
    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + (lvl - up || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment) {
      data += getProperty(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }
  return expr;
}

function joinPaths(a, b) {
  if (a == '""') return b;
  return (a + ' + ' + b).replace(/' \+ '/g, '');
}

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

/***/ }),

/***/ "./node_modules/ajv/lib/data.js":
/*!**************************************!*\
  !*** ./node_modules/ajv/lib/data.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KEYWORDS = ['multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum', 'maxLength', 'minLength', 'pattern', 'additionalItems', 'maxItems', 'minItems', 'uniqueItems', 'maxProperties', 'minProperties', 'required', 'additionalProperties', 'enum', 'format', 'const'];

module.exports = function (metaSchema, keywordsJsonPointers) {
  for (var i = 0; i < keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;
    for (j = 1; j < segments.length; j++) {
      keywords = keywords[segments[j]];
    }for (j = 0; j < KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];
      if (schema) {
        keywords[key] = {
          anyOf: [schema, { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }]
        };
      }
    }
  }

  return metaSchema;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limit.js":
/*!**********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/_limit.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $isMax = $keyword == 'maximum',
      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $notOp = $isMax ? '>' : '<',
      $errorKeyword = undefined;
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $exclType = 'exclType' + $lvl,
        $exclIsNumber = 'exclIsNumber' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' var ' + $exclusive + '; var ' + $exclType + ' = typeof ' + $schemaValueExcl + '; if (' + $exclType + ' != \'boolean\' && ' + $exclType + ' != \'undefined\' && ' + $exclType + ' != \'number\') { ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else if ( ';
    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
    }
    out += ' ' + $exclType + ' == \'number\' ? ( (' + $exclusive + ' = ' + $schemaValue + ' === undefined || ' + $schemaValueExcl + ' ' + $op + '= ' + $schemaValue + ') ? ' + $data + ' ' + $notOp + '= ' + $schemaValueExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) : ( (' + $exclusive + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\'; ';
    if ($schema === undefined) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
        $opStr = $op;
    if ($exclIsNumber && $isData) {
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }
      out += ' ( ' + $schemaValue + ' === undefined || ' + $schemaExcl + ' ' + $op + '= ' + $schemaValue + ' ? ' + $data + ' ' + $notOp + '= ' + $schemaExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';
      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }
      out += ' ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') { ';
    }
  }
  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + $opStr + ' ';
      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitItems.js":
/*!***************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/_limitItems.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }
  out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';
      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'less';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }
      out += ' items\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitLength.js":
/*!****************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/_limitLength.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }
  if (it.opts.unicode === false) {
    out += ' ' + $data + '.length ';
  } else {
    out += ' ucs2length(' + $data + ') ';
  }
  out += ' ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT be ';
      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }
      out += ' characters\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/_limitProperties.js":
/*!********************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/_limitProperties.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }
  out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';
      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'less';
      }
      out += ' than ';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }
      out += ' properties\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/allOf.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/allOf.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $allSchemasEmpty = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + $closingBraces.slice(0, -1) + ' ';
    }
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/anyOf.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/anyOf.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function ($sch) {
    return it.util.schemaHasRules($sch, it.RULES.all);
  });
  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
        $closingBraces += '}';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'anyOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match some schema in anyOf\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/comment.js":
/*!***********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/comment.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_comment(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema);
  if (it.opts.$comment === true) {
    out += ' console.log(' + $comment + ');';
  } else if (typeof it.opts.$comment == 'function') {
    out += ' self._opts.$comment(' + $comment + ', ' + it.util.toQuotedString($errSchemaPath) + ', validate.root.schema);';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/const.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/const.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (!$isData) {
    out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
  }
  out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'const' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValue: schema' + $lvl + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to constant\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/contains.js":
/*!************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/contains.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId,
      $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $nextValid + ' = false; for (var ' + $idx + ' = 0; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    out += ' if (' + $nextValid + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $nextValid + ') {';
  } else {
    out += ' if (' + $data + '.length == 0) {';
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'contains' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should contain a valid item\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } else { ';
  if ($nonEmptySchema) {
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
  }
  if (it.opts.allErrors) {
    out += ' } ';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/custom.js":
/*!**********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/custom.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $rule = this,
      $definition = 'definition' + $lvl,
      $rDef = $rule.definition,
      $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += ' var ' + $definition + ' = RULES.custom[\'' + $keyword + '\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }
  var $ruleErrs = $validateCode + '.errors',
      $i = 'i' + $lvl,
      $ruleErr = 'ruleErr' + $lvl,
      $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
  if (!($inline || $macro)) {
    out += '' + $ruleErrs + ' = null;';
  }
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + $schemaValue + ' === undefined) { ' + $valid + ' = true; } else { ';
    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') { ';
    }
  }
  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + $ruleValidate.validate + ' ';
    } else {
      out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $code;
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + $validateCode + '.call( ';
    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }
    if ($compile || $rDef.schema === false) {
      out += ' , ' + $data + ' ';
    } else {
      out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
    }
    out += ' , (dataPath || \'\')';
    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }
    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();
    if ($rDef.errors === false) {
      out += ' ' + $valid + ' = ';
      if ($asyncKeyword) {
        out += 'await ';
      }
      out += '' + def_callRuleValidate + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = await ' + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
      }
    }
  }
  if ($rDef.modifying) {
    out += ' if (' + $parentData + ') ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
  }
  out += '' + $closingBraces;
  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';
    if ($rDef.valid === undefined) {
      out += ' !';
      if ($macro) {
        out += '' + $nextValid;
      } else {
        out += '' + $valid;
      }
    } else {
      out += ' ' + !$rDef.valid + ' ';
    }
    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    var def_customError = out;
    out = $$outStack.pop();
    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }
          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + def_customError + ' ';
        } else {
          out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }
          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + def_customError + ' ';
      } else {
        out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
        if (it.opts.verbose) {
          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
        }
        out += ' } } else { ' + def_customError + ' } ';
      }
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/dependencies.js":
/*!****************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/dependencies.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
      $propertyDeps = {},
      $ownProperties = it.opts.ownProperties;
  for ($property in $schema) {
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }
  out += 'var ' + $errs + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + $lvl + ';';
  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];
    if ($deps.length) {
      out += ' if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }
      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;
        if (arr1) {
          var $propertyKey,
              $i = -1,
              l1 = arr1.length - 1;
          while ($i < l1) {
            $propertyKey = arr1[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }
            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }
        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should have ';
            if ($deps.length == 1) {
              out += 'property ' + it.util.escapeQuotes($deps[0]);
            } else {
              out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
            }
            out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;
        if (arr2) {
          var $propertyKey,
              i2 = -1,
              l2 = arr2.length - 1;
          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should have ';
                if ($deps.length == 1) {
                  out += 'property ' + it.util.escapeQuotes($deps[0]);
                } else {
                  out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
                }
                out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
      out += ' }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;
  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];
    if (it.util.schemaHasRules($sch, it.RULES.all)) {
      out += ' ' + $nextValid + ' = true; if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }
      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  }
  if ($breakOnError) {
    out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/enum.js":
/*!********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/enum.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $i = 'i' + $lvl,
      $vSchema = 'schema' + $lvl;
  if (!$isData) {
    out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
  }
  out += 'var ' + $valid + ';';
  if ($isData) {
    out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
  }
  out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';
  if ($isData) {
    out += '  }  ';
  }
  out += ' if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'enum' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to one of the allowed values\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/format.js":
/*!**********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/format.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
    return out;
  }
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $unknownFormats = it.opts.unknownFormats,
      $allowUnknown = Array.isArray($unknownFormats);
  if ($isData) {
    var $format = 'format' + $lvl,
        $isObject = 'isObject' + $lvl,
        $formatType = 'formatType' + $lvl;
    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var ' + $isObject + ' = typeof ' + $format + ' == \'object\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; var ' + $formatType + ' = ' + $isObject + ' && ' + $format + '.type || \'string\'; if (' + $isObject + ') { ';
    if (it.async) {
      out += ' var async' + $lvl + ' = ' + $format + '.async; ';
    }
    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';
    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
    }
    out += ' (';
    if ($unknownFormats != 'ignore') {
      out += ' (' + $schemaValue + ' && !' + $format + ' ';
      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
      }
      out += ') || ';
    }
    out += ' (' + $format + ' && ' + $formatType + ' == \'' + $ruleType + '\' && !(typeof ' + $format + ' == \'function\' ? ';
    if (it.async) {
      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
    } else {
      out += ' ' + $format + '(' + $data + ') ';
    }
    out += ' : ' + $format + '.test(' + $data + '))))) {';
  } else {
    var $format = it.formats[$schema];
    if (!$format) {
      if ($unknownFormats == 'ignore') {
        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else {
        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }
    var $isObject = (typeof $format === 'undefined' ? 'undefined' : _typeof($format)) == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || 'string';
    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }
    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';
      if (typeof $format == 'function') {
        out += ' ' + $formatRef + '(' + $data + ') ';
      } else {
        out += ' ' + $formatRef + '.test(' + $data + ') ';
      }
      out += ') { ';
    }
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'format' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match format "';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/if.js":
/*!******************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/if.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_if(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $thenSch = it.schema['then'],
      $elseSch = it.schema['else'],
      $thenPresent = $thenSch !== undefined && it.util.schemaHasRules($thenSch, it.RULES.all),
      $elsePresent = $elseSch !== undefined && it.util.schemaHasRules($elseSch, it.RULES.all),
      $currentBaseId = $it.baseId;
  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = true;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += '  ' + it.validate($it) + ' ';
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    if ($thenPresent) {
      out += ' if (' + $nextValid + ') {  ';
      $it.schema = it.schema['then'];
      $it.schemaPath = it.schemaPath + '.then';
      $it.errSchemaPath = it.errSchemaPath + '/then';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'then\'; ';
      } else {
        $ifClause = '\'then\'';
      }
      out += ' } ';
      if ($elsePresent) {
        out += ' else { ';
      }
    } else {
      out += ' if (!' + $nextValid + ') { ';
    }
    if ($elsePresent) {
      $it.schema = it.schema['else'];
      $it.schemaPath = it.schemaPath + '.else';
      $it.errSchemaPath = it.errSchemaPath + '/else';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'else\'; ';
      } else {
        $ifClause = '\'else\'';
      }
      out += ' } ';
    }
    out += ' if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'if' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { failingKeyword: ' + $ifClause + ' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should match "\' + ' + $ifClause + ' + \'" schema\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' }   ';
    if ($breakOnError) {
      out += ' else { ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//all requires must be explicit because browserify won't work with dynamic requires

module.exports = {
  '$ref': __webpack_require__(/*! ./ref */ "./node_modules/ajv/lib/dotjs/ref.js"),
  allOf: __webpack_require__(/*! ./allOf */ "./node_modules/ajv/lib/dotjs/allOf.js"),
  anyOf: __webpack_require__(/*! ./anyOf */ "./node_modules/ajv/lib/dotjs/anyOf.js"),
  '$comment': __webpack_require__(/*! ./comment */ "./node_modules/ajv/lib/dotjs/comment.js"),
  const: __webpack_require__(/*! ./const */ "./node_modules/ajv/lib/dotjs/const.js"),
  contains: __webpack_require__(/*! ./contains */ "./node_modules/ajv/lib/dotjs/contains.js"),
  dependencies: __webpack_require__(/*! ./dependencies */ "./node_modules/ajv/lib/dotjs/dependencies.js"),
  'enum': __webpack_require__(/*! ./enum */ "./node_modules/ajv/lib/dotjs/enum.js"),
  format: __webpack_require__(/*! ./format */ "./node_modules/ajv/lib/dotjs/format.js"),
  'if': __webpack_require__(/*! ./if */ "./node_modules/ajv/lib/dotjs/if.js"),
  items: __webpack_require__(/*! ./items */ "./node_modules/ajv/lib/dotjs/items.js"),
  maximum: __webpack_require__(/*! ./_limit */ "./node_modules/ajv/lib/dotjs/_limit.js"),
  minimum: __webpack_require__(/*! ./_limit */ "./node_modules/ajv/lib/dotjs/_limit.js"),
  maxItems: __webpack_require__(/*! ./_limitItems */ "./node_modules/ajv/lib/dotjs/_limitItems.js"),
  minItems: __webpack_require__(/*! ./_limitItems */ "./node_modules/ajv/lib/dotjs/_limitItems.js"),
  maxLength: __webpack_require__(/*! ./_limitLength */ "./node_modules/ajv/lib/dotjs/_limitLength.js"),
  minLength: __webpack_require__(/*! ./_limitLength */ "./node_modules/ajv/lib/dotjs/_limitLength.js"),
  maxProperties: __webpack_require__(/*! ./_limitProperties */ "./node_modules/ajv/lib/dotjs/_limitProperties.js"),
  minProperties: __webpack_require__(/*! ./_limitProperties */ "./node_modules/ajv/lib/dotjs/_limitProperties.js"),
  multipleOf: __webpack_require__(/*! ./multipleOf */ "./node_modules/ajv/lib/dotjs/multipleOf.js"),
  not: __webpack_require__(/*! ./not */ "./node_modules/ajv/lib/dotjs/not.js"),
  oneOf: __webpack_require__(/*! ./oneOf */ "./node_modules/ajv/lib/dotjs/oneOf.js"),
  pattern: __webpack_require__(/*! ./pattern */ "./node_modules/ajv/lib/dotjs/pattern.js"),
  properties: __webpack_require__(/*! ./properties */ "./node_modules/ajv/lib/dotjs/properties.js"),
  propertyNames: __webpack_require__(/*! ./propertyNames */ "./node_modules/ajv/lib/dotjs/propertyNames.js"),
  required: __webpack_require__(/*! ./required */ "./node_modules/ajv/lib/dotjs/required.js"),
  uniqueItems: __webpack_require__(/*! ./uniqueItems */ "./node_modules/ajv/lib/dotjs/uniqueItems.js"),
  validate: __webpack_require__(/*! ./validate */ "./node_modules/ajv/lib/dotjs/validate.js")
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/items.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/items.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId;
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;
    if ($additionalItems === false) {
      out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + $valid + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + 'additionalItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have more than ' + $schema.length + ' items\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
    var arr1 = $schema;
    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if ((typeof $additionalItems === 'undefined' ? 'undefined' : _typeof($additionalItems)) == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
      } else {
        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + $nextValid + ') break; ';
      }
      out += ' } }  ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    if ($breakOnError) {
      out += ' if (!' + $nextValid + ') break; ';
    }
    out += ' }';
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/multipleOf.js":
/*!**************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/multipleOf.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  out += 'var division' + $lvl + ';if (';
  if ($isData) {
    out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \'number\' || ';
  }
  out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';
  if (it.opts.multipleOfPrecision) {
    out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
  } else {
    out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
  }
  out += ' ) ';
  if ($isData) {
    out += '  )  ';
  }
  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'multipleOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be multiple of ';
      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/not.js":
/*!*******************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/not.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;
    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }
    out += ' ' + it.validate($it) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + $nextValid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/oneOf.js":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/oneOf.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $prevValid = 'prevValid' + $lvl,
      $passingSchemas = 'passingSchemas' + $lvl;
  out += 'var ' + $errs + ' = errors , ' + $prevValid + ' = false , ' + $valid + ' = false , ' + $passingSchemas + ' = null; ';
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[$i += 1];
      if (it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + $nextValid + ' = true; ';
      }
      if ($i) {
        out += ' if (' + $nextValid + ' && ' + $prevValid + ') { ' + $valid + ' = false; ' + $passingSchemas + ' = [' + $passingSchemas + ', ' + $i + ']; } else { ';
        $closingBraces += '}';
      }
      out += ' if (' + $nextValid + ') { ' + $valid + ' = ' + $prevValid + ' = true; ' + $passingSchemas + ' = ' + $i + '; }';
    }
  }
  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + $closingBraces + 'if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'oneOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { passingSchemas: ' + $passingSchemas + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match exactly one schema in oneOf\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }
  out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';
  if (it.opts.allErrors) {
    out += ' } ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/pattern.js":
/*!***********************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/pattern.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
  }
  out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'pattern' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match pattern "';
      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/properties.js":
/*!**************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/properties.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = (typeof $aProperties === 'undefined' ? 'undefined' : _typeof($aProperties)) == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';
  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }
  if ($checkAdditional) {
    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }
    if ($someProperties) {
      out += ' var isAdditional' + $lvl + ' = !(false ';
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += ' || validate.schema' + $schemaPath + '.hasOwnProperty(' + $key + ') ';
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey,
                i1 = -1,
                l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty,
              $i = -1,
              l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
          }
        }
      }
      out += ' ); if (isAdditional' + $lvl + ') { ';
    }
    if ($removeAdditional == 'all') {
      out += ' delete ' + $data + '[' + $key + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = '\' + ' + $key + ' + \'';
      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }
      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + $data + '[' + $key + ']; ';
        } else {
          out += ' ' + $nextValid + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'additionalProperties' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \'' + $additionalProperty + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is an invalid additional property';
              } else {
                out += 'should NOT have additional properties';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + __err + ']); ';
            } else {
              out += ' validate.errors = [' + __err + ']; return false; ';
            }
          } else {
            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + $errs + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += ' } ';
    }
    out += ' }  ';
    if ($breakOnError) {
      out += ' if (' + $nextValid + ') { ';
      $closingBraces += '}';
    }
  }
  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;
    if (arr3) {
      var $propertyKey,
          i3 = -1,
          l3 = arr3.length - 1;
      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema[$propertyKey];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop,
              $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + $nextData + ' = ' + $passData + '; ';
          }
          if ($hasDefault) {
            out += ' ' + $code + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + $useData + ' === undefined ';
              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
              }
              out += ') { ' + $nextValid + ' = false; ';
              var $currentErrorPath = it.errorPath,
                  $currErrSchemaPath = $errSchemaPath,
                  $missingProperty = it.util.escapeQuotes($propertyKey);
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'';
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + $useData + ' === undefined ';
                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }
                out += ') { ' + $nextValid + ' = true; } else { ';
              } else {
                out += ' if (' + $useData + ' !== undefined ';
                if ($ownProperties) {
                  out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }
                out += ' ) { ';
              }
            }
            out += ' ' + $code + ' } ';
          }
        }
        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;
    if (arr4) {
      var $pProperty,
          i4 = -1,
          l4 = arr4.length - 1;
      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];
        if (it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
          if ($ownProperties) {
            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
          } else {
            out += ' for (var ' + $key + ' in ' + $data + ') { ';
          }
          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else ' + $nextValid + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/propertyNames.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/propertyNames.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $i = 'i' + $lvl,
        $invalidName = '\' + ' + $key + ' + \'',
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;
    out += ' var ' + $errs + ' = errors; ';
    if ($ownProperties) {
      out += ' var ' + $dataProperties + ' = undefined; ';
    }
    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }
    out += ' var startErrs' + $lvl + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + $nextValid + ') { for (var ' + $i + '=startErrs' + $lvl + '; ' + $i + '<errors; ' + $i + '++) { vErrors[' + $i + '].propertyName = ' + $key + '; }   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'propertyNames' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { propertyName: \'' + $invalidName + '\' } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'property name \\\'' + $invalidName + '\\\' is invalid\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    if ($breakOnError) {
      out += ' break; ';
    }
    out += ' } }';
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/ref.js":
/*!*******************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/ref.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;
  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);
      if (it.opts.missingRefs == 'fail') {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + '$ref' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \'' + it.util.escapeQuotes($schema) + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'can\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        it.logger.warn($message);
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += ' ' + $code + ' ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
      }
    } else {
      $async = $refVal.$async === true || it.async && $refVal.$async !== false;
      $refCode = $refVal.code;
    }
  }
  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    if (it.opts.passContext) {
      out += ' ' + $refCode + '.call(this, ';
    } else {
      out += ' ' + $refCode + '( ';
    }
    out += ' ' + $data + ', (dataPath || \'\')';
    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }
    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();
    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');
      if ($breakOnError) {
        out += ' var ' + $valid + '; ';
      }
      out += ' try { await ' + __callValidate + '; ';
      if ($breakOnError) {
        out += ' ' + $valid + ' = true; ';
      }
      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
      if ($breakOnError) {
        out += ' ' + $valid + ' = false; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' if (' + $valid + ') { ';
      }
    } else {
      out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/required.js":
/*!************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/required.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $vSchema = 'schema' + $lvl;
  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;
      if (arr1) {
        var $property,
            i1 = -1,
            l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];
          if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }
  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
        $loopRequired = $isData || $required.length >= it.opts.loopRequired,
        $ownProperties = it.opts.ownProperties;
    if ($breakOnError) {
      out += ' var missing' + $lvl + '; ';
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }
        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        out += ' var ' + $valid + ' = true; ';
        if ($isData) {
          out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
        }
        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined ';
        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }
        out += '; if (!' + $valid + ') break; } ';
        if ($isData) {
          out += '  }  ';
        }
        out += '  if (!' + $valid + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;
        if (arr2) {
          var $propertyKey,
              $i = -1,
              l2 = arr2.length - 1;
          while ($i < l2) {
            $propertyKey = arr2[$i += 1];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }
            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }
        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }
        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        if ($isData) {
          out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
            if (it.opts.messages !== false) {
              out += ' , message: \'';
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + $missingProperty + '\\\'';
              }
              out += '\' ';
            }
            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';
        }
        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined ';
        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }
        out += ') {  var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'';
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;
        if (arr3) {
          var $propertyKey,
              i3 = -1,
              l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'';
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + $missingProperty + '\\\'';
                }
                out += '\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/uniqueItems.js":
/*!***************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/uniqueItems.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'boolean\') ' + $valid + ' = false; else { ';
    }
    out += ' var i = ' + $data + '.length , ' + $valid + ' = true , j; if (i > 1) { ';
    var $itemType = it.schema.items && it.schema.items.type,
        $typeIsArray = Array.isArray($itemType);
    if (!$itemType || $itemType == 'object' || $itemType == 'array' || $typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0)) {
      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } ';
    } else {
      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + $data + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + it.util[$method]($itemType, 'item', true) + ') continue; ';
      if ($typeIsArray) {
        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
      }
      out += ' if (typeof itemIndices[item] == \'number\') { ' + $valid + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
    }
    out += ' } ';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + $valid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'uniqueItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';
      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + $schemaPath;
        } else {
          out += '' + $schema;
        }
        out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/dotjs/validate.js":
/*!************************************************!*\
  !*** ./node_modules/ajv/lib/dotjs/validate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function generate_validate(it, $keyword, $ruleType) {
  var out = '';
  var $async = it.schema.$async === true,
      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
      $id = it.self._getId(it.schema);
  if (it.isTop) {
    out += ' var validate = ';
    if ($async) {
      it.async = true;
      out += 'async ';
    }
    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
    }
  }
  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + $valid + ' = false; ';
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
        if (it.opts.messages !== false) {
          out += ' , message: \'boolean schema is false\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + $valid + ' = true; ';
      }
    }
    if (it.isTop) {
      out += ' }; return validate; ';
    }
    return out;
  }
  if (it.isTop) {
    var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [undefined];
    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + $lvl + ' = errors;';
  }
  var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
      $typeIsArray = Array.isArray($typeSchema);
  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }
  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }
  if (it.schema.$comment && it.opts.$comment) {
    out += ' ' + it.RULES.all.$comment.code(it, '$comment');
  }
  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }
    var $rulesGroup = it.RULES.types[$typeSchema];
    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type',
          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') { ';
      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
            $coerced = 'coerced' + $lvl;
        out += ' var ' + $dataType + ' = typeof ' + $data + '; ';
        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + $dataType + ' == \'object\' && Array.isArray(' + $data + ')) ' + $dataType + ' = \'array\'; ';
        }
        out += ' var ' + $coerced + ' = undefined; ';
        var $bracesCoercion = '';
        var arr1 = $coerceToTypes;
        if (arr1) {
          var $type,
              $i = -1,
              l1 = arr1.length - 1;
          while ($i < l1) {
            $type = arr1[$i += 1];
            if ($i) {
              out += ' if (' + $coerced + ' === undefined) { ';
              $bracesCoercion += '}';
            }
            if (it.opts.coerceTypes == 'array' && $type != 'array') {
              out += ' if (' + $dataType + ' == \'array\' && ' + $data + '.length == 1) { ' + $coerced + ' = ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + ';  } ';
            }
            if ($type == 'string') {
              out += ' if (' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\') ' + $coerced + ' = \'\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \'\'; ';
            } else if ($type == 'number' || $type == 'integer') {
              out += ' if (' + $dataType + ' == \'boolean\' || ' + $data + ' === null || (' + $dataType + ' == \'string\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';
              if ($type == 'integer') {
                out += ' && !(' + $data + ' % 1)';
              }
              out += ')) ' + $coerced + ' = +' + $data + '; ';
            } else if ($type == 'boolean') {
              out += ' if (' + $data + ' === \'false\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \'true\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';
            } else if ($type == 'null') {
              out += ' if (' + $data + ' === \'\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out += ' if (' + $dataType + ' == \'string\' || ' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';
            }
          }
        }
        out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }
          out += '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';
            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else {  ';
        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + $data + ' = ' + $coerced + '; ';
        if (!$dataLvl) {
          out += 'if (' + $parentData + ' !== undefined)';
        }
        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }
          out += '\' } ';
          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';
            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }
            out += '\' ';
          }
          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }
      out += ' } ';
    }
  }
  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';
    if ($breakOnError) {
      out += ' } if (errors === ';
      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + $lvl;
      }
      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    var arr2 = it.RULES;
    if (arr2) {
      var $rulesGroup,
          i2 = -1,
          l2 = arr2.length - 1;
      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';
          }
          if (it.opts.useDefaults && !it.compositeRule) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                  $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;
              if (arr3) {
                var $propertyKey,
                    i3 = -1,
                    l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema[$propertyKey];
                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);
                    out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
                    if (it.opts.useDefaults == 'shared') {
                      out += ' ' + it.useDefault($sch.default) + ' ';
                    } else {
                      out += ' ' + JSON.stringify($sch.default) + ' ';
                    }
                    out += '; ';
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;
              if (arr4) {
                var $sch,
                    $i = -1,
                    l4 = arr4.length - 1;
                while ($i < l4) {
                  $sch = arr4[$i += 1];
                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';
                    out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
                    if (it.opts.useDefaults == 'shared') {
                      out += ' ' + it.useDefault($sch.default) + ' ';
                    } else {
                      out += ' ' + JSON.stringify($sch.default) + ' ';
                    }
                    out += '; ';
                  }
                }
              }
            }
          }
          var arr5 = $rulesGroup.rules;
          if (arr5) {
            var $rule,
                i5 = -1,
                l5 = arr5.length - 1;
            while (i5 < l5) {
              $rule = arr5[i5 += 1];
              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                if ($code) {
                  out += ' ' + $code + ' ';
                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }
          if ($breakOnError) {
            out += ' ' + $closingBraces1 + ' ';
            $closingBraces1 = '';
          }
          if ($rulesGroup.type) {
            out += ' } ';
            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                  $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
                if ($typeIsArray) {
                  out += '' + $typeSchema.join(",");
                } else {
                  out += '' + $typeSchema;
                }
                out += '\' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';
                  if ($typeIsArray) {
                    out += '' + $typeSchema.join(",");
                  } else {
                    out += '' + $typeSchema;
                  }
                  out += '\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (errors === ';
            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + $lvl;
            }
            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces2 + ' ';
  }
  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }
    out += ' }; return validate;';
  } else {
    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
  }
  out = it.util.cleanUpCode(out);
  if ($top) {
    out = it.util.finalCleanUpCode(out, $async);
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;
    for (var i = 0; i < rules.length; i++) {
      if ($shouldUseRule(rules[i])) return true;
    }
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);
  }

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;
    for (var i = 0; i < impl.length; i++) {
      if (it.schema[impl[i]] !== undefined) return true;
    }
  }
  return out;
};

/***/ }),

/***/ "./node_modules/ajv/lib/keyword.js":
/*!*****************************************!*\
  !*** ./node_modules/ajv/lib/keyword.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
var customRuleCode = __webpack_require__(/*! ./dotjs/custom */ "./node_modules/ajv/lib/dotjs/custom.js");

module.exports = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword
};

/**
 * Define custom keyword
 * @this  Ajv
 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
 * @return {Ajv} this for method chaining
 */
function addKeyword(keyword, definition) {
  /* jshint validthis: true */
  /* eslint no-shadow: 0 */
  var RULES = this.RULES;

  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');

  if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    if (definition.macro && definition.valid !== undefined) throw new Error('"valid" option cannot be used with macro keywords');

    var dataType = definition.type;
    if (Array.isArray(dataType)) {
      var i,
          len = dataType.length;
      for (i = 0; i < len; i++) {
        checkDataType(dataType[i]);
      }for (i = 0; i < len; i++) {
        _addRule(keyword, dataType[i], definition);
      }
    } else {
      if (dataType) checkDataType(dataType);
      _addRule(keyword, dataType, definition);
    }

    var $data = definition.$data === true && this._opts.$data;
    if ($data && !definition.validate) throw new Error('$data support: "validate" function is not defined');

    var metaSchema = definition.metaSchema;
    if (metaSchema) {
      if ($data) {
        metaSchema = {
          anyOf: [metaSchema, { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }]
        };
      }
      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;

  function _addRule(keyword, dataType, definition) {
    var ruleGroup;
    for (var i = 0; i < RULES.length; i++) {
      var rg = RULES[i];
      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = { type: dataType, rules: [] };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: customRuleCode,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }

  function checkDataType(dataType) {
    if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);
  }

  return this;
}

/**
 * Get keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
 */
function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}

/**
 * Remove keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Ajv} this for method chaining
 */
function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];
  for (var i = 0; i < RULES.length; i++) {
    var rules = RULES[i].rules;
    for (var j = 0; j < rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }
  return this;
}

/***/ }),

/***/ "./node_modules/ajv/lib/refs/data.json":
/*!*********************************************!*\
  !*** ./node_modules/ajv/lib/refs/data.json ***!
  \*********************************************/
/*! exports provided: $schema, $id, description, type, required, properties, additionalProperties, default */
/***/ (function(module) {

module.exports = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON Schema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false};

/***/ }),

/***/ "./node_modules/ajv/lib/refs/json-schema-draft-07.json":
/*!*************************************************************!*\
  !*** ./node_modules/ajv/lib/refs/json-schema-draft-07.json ***!
  \*************************************************************/
/*! exports provided: $schema, $id, title, definitions, type, properties, default */
/***/ (function(module) {

module.exports = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1.js":
/*!******************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var asn1 = exports;

asn1.bignum = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

asn1.define = __webpack_require__(/*! ./asn1/api */ "./node_modules/asn1.js/lib/asn1/api.js").define;
asn1.base = __webpack_require__(/*! ./asn1/base */ "./node_modules/asn1.js/lib/asn1/base/index.js");
asn1.constants = __webpack_require__(/*! ./asn1/constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");
asn1.decoders = __webpack_require__(/*! ./asn1/decoders */ "./node_modules/asn1.js/lib/asn1/decoders/index.js");
asn1.encoders = __webpack_require__(/*! ./asn1/encoders */ "./node_modules/asn1.js/lib/asn1/encoders/index.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/api.js":
/*!**********************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/api.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var asn1 = __webpack_require__(/*! ../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = __webpack_require__(/*! vm */ "./node_modules/vm-browserify/index.js").runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
  } catch (e) {
    named = function named(entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = new Buffer(this.length);
  if (!offset) offset = 0;

  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base = exports;

base.Reporter = __webpack_require__(/*! ./reporter */ "./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
base.DecoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
base.EncoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
base.Node = __webpack_require__(/*! ./node */ "./node_modules/asn1.js/lib/asn1/base/node.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/node.js":
/*!****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/node.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;
var EncoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;
var DecoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

// Supported tags
var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];

// Public methods list
var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);

// Overrided methods list
var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) !== 'object' || arg.constructor !== Object) return arg;

      var res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0) this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present)) return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any) var save = input.save();
      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
      if (input.isError(body)) return body;

      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);

    if (input.isError(result)) return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present) result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function (key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value)) return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match) return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined) return;

  if (this._skipDefault(result, reporter, parent)) return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);

      if (child._baseState.key === null) return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return (/^[0-9 ]*$/.test(str)
  );
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return (/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str)
  );
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;

  if (!inherited) state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial) return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/der.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = __webpack_require__(/*! ../constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/constants/der.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res)) return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;

    var res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res)) return res;

    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd)) return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80) identifiers.push(ident);

  var first = identifiers[0] / 40 | 0;
  var second = identifiers[0] % 40;

  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values) res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len)) return len;

  // Indefinite form
  if (!primitive && len === 0x80) return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4) return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var decoders = exports;

decoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");
decoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/decoders/pem.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var DERDecoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null) continue;

    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8) {
    lenOctets++;
  }var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) {
    header[i] = j & 0xff;
  }return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7) {
      size++;
    }
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0) {
      objid[offset--] = 0x80 | ident & 0x7f;
    }
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0) size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);

  if (num < 0x100) return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8) {
    size++;
  }var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null) return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) {
    if (data[i] !== state.defaultBuffer[i]) return false;
  }return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';

  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive) res |= 0x20;

  res |= der.tagClassByName[cls || 'universal'] << 6;

  return res;
}

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encoders = exports;

encoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");
encoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/encoders/pem.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var DEREncoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = ['-----BEGIN ' + options.label + '-----'];
  for (var i = 0; i < p.length; i += 64) {
    out.push(p.slice(i, i + 64));
  }out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

  return [validLen, placeHoldersLen];
}

// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/big.js/big.js":
/*!************************************!*\
  !*** ./node_modules/big.js/big.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */
;(function (global) {
    'use strict';

    /*
      big.js v3.1.3
      A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
      https://github.com/MikeMcl/big.js/
      Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

    /***************************** EDITABLE DEFAULTS ******************************/

    // The default values below must be integers within the stated ranges.

    /*
     * The maximum number of decimal places of the results of operations
     * involving division: div and sqrt, and pow with negative exponents.
     */

    var DP = 20,
        // 0 to MAX_DP

    /*
     * The rounding mode used when rounding to the above decimal places.
     *
     * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
     * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
     * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
     * 3 Away from zero.                                  (ROUND_UP)
     */
    RM = 1,
        // 0, 1, 2 or 3

    // The maximum value of DP and Big.DP.
    MAX_DP = 1E6,
        // 0 to 1000000

    // The maximum magnitude of the exponent argument to the pow method.
    MAX_POWER = 1E6,
        // 1 to 1000000

    /*
     * The exponent value at and beneath which toString returns exponential
     * notation.
     * JavaScript's Number type: -7
     * -1000000 is the minimum recommended exponent value of a Big.
     */
    E_NEG = -7,
        // 0 to -1000000

    /*
     * The exponent value at and above which toString returns exponential
     * notation.
     * JavaScript's Number type: 21
     * 1000000 is the maximum recommended exponent value of a Big.
     * (This limit is not enforced or checked.)
     */
    E_POS = 21,
        // 0 to 1000000

    /******************************************************************************/

    // The shared prototype object.
    P = {},
        isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        Big;

    /*
     * Create and return a Big constructor.
     *
     */
    function bigFactory() {

        /*
         * The Big constructor and exported function.
         * Create and return a new instance of a Big number object.
         *
         * n {number|string|Big} A numeric value.
         */
        function Big(n) {
            var x = this;

            // Enable constructor usage without new.
            if (!(x instanceof Big)) {
                return n === void 0 ? bigFactory() : new Big(n);
            }

            // Duplicate.
            if (n instanceof Big) {
                x.s = n.s;
                x.e = n.e;
                x.c = n.c.slice();
            } else {
                parse(x, n);
            }

            /*
             * Retain a reference to this Big constructor, and shadow
             * Big.prototype.constructor which points to Object.
             */
            x.constructor = Big;
        }

        Big.prototype = P;
        Big.DP = DP;
        Big.RM = RM;
        Big.E_NEG = E_NEG;
        Big.E_POS = E_POS;

        return Big;
    }

    // Private functions


    /*
     * Return a string representing the value of Big x in normal or exponential
     * notation to dp fixed decimal places or significant digits.
     *
     * x {Big} The Big to format.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).
     */
    function format(x, dp, toE) {
        var Big = x.constructor,


        // The index (normal notation) of the digit that may be rounded up.
        i = dp - (x = new Big(x)).e,
            c = x.c;

        // Round?
        if (c.length > ++dp) {
            rnd(x, i, Big.RM);
        }

        if (!c[0]) {
            ++i;
        } else if (toE) {
            i = dp;

            // toFixed
        } else {
            c = x.c;

            // Recalculate i as x.e may have changed if value rounded up.
            i = x.e + i + 1;
        }

        // Append zeros?
        for (; c.length < i; c.push(0)) {}
        i = x.e;

        /*
         * toPrecision returns exponential notation if the number of
         * significant digits specified is less than the number of digits
         * necessary to represent the integer part of the value in normal
         * notation.
         */
        return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ?

        // Exponential notation.
        (x.s < 0 && c[0] ? '-' : '') + (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) + (i < 0 ? 'e' : 'e+') + i

        // Normal notation.
        : x.toString();
    }

    /*
     * Parse the number or string value passed to a Big constructor.
     *
     * x {Big} A Big number instance.
     * n {number|string} A numeric value.
     */
    function parse(x, n) {
        var e, i, nL;

        // Minus zero?
        if (n === 0 && 1 / n < 0) {
            n = '-0';

            // Ensure n is string and check validity.
        } else if (!isValid.test(n += '')) {
            throwErr(NaN);
        }

        // Determine sign.
        x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

        // Decimal point?
        if ((e = n.indexOf('.')) > -1) {
            n = n.replace('.', '');
        }

        // Exponential form?
        if ((i = n.search(/e/i)) > 0) {

            // Determine exponent.
            if (e < 0) {
                e = i;
            }
            e += +n.slice(i + 1);
            n = n.substring(0, i);
        } else if (e < 0) {

            // Integer.
            e = n.length;
        }

        nL = n.length;

        // Determine leading zeros.
        for (i = 0; i < nL && n.charAt(i) == '0'; i++) {}

        if (i == nL) {

            // Zero.
            x.c = [x.e = 0];
        } else {

            // Determine trailing zeros.
            for (; nL > 0 && n.charAt(--nL) == '0';) {}

            x.e = e - i - 1;
            x.c = [];

            // Convert string to array of digits without leading/trailing zeros.
            //for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {
            for (; i <= nL; x.c.push(+n.charAt(i++))) {}
        }

        return x;
    }

    /*
     * Round Big x to a maximum of dp decimal places using rounding mode rm.
     * Called by div, sqrt and round.
     *
     * x {Big} The Big to round.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
     * [more] {boolean} Whether the result of division was truncated.
     */
    function rnd(x, dp, rm, more) {
        var u,
            xc = x.c,
            i = x.e + dp + 1;

        if (rm === 1) {

            // xc[i] is the digit after the digit that may be rounded up.
            more = xc[i] >= 5;
        } else if (rm === 2) {
            more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);
        } else if (rm === 3) {
            more = more || xc[i] !== u || i < 0;
        } else {
            more = false;

            if (rm !== 0) {
                throwErr('!Big.RM!');
            }
        }

        if (i < 1 || !xc[0]) {

            if (more) {

                // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                x.e = -dp;
                x.c = [1];
            } else {

                // Zero.
                x.c = [x.e = 0];
            }
        } else {

            // Remove any digits after the required decimal places.
            xc.length = i--;

            // Round up?
            if (more) {

                // Rounding up may mean the previous digit has to be rounded up.
                for (; ++xc[i] > 9;) {
                    xc[i] = 0;

                    if (!i--) {
                        ++x.e;
                        xc.unshift(1);
                    }
                }
            }

            // Remove trailing zeros.
            for (i = xc.length; !xc[--i]; xc.pop()) {}
        }

        return x;
    }

    /*
     * Throw a BigError.
     *
     * message {string} The error message.
     */
    function throwErr(message) {
        var err = new Error(message);
        err.name = 'BigError';

        throw err;
    }

    // Prototype/instance methods


    /*
     * Return a new Big whose value is the absolute value of this Big.
     */
    P.abs = function () {
        var x = new this.constructor(this);
        x.s = 1;

        return x;
    };

    /*
     * Return
     * 1 if the value of this Big is greater than the value of Big y,
     * -1 if the value of this Big is less than the value of Big y, or
     * 0 if they have the same value.
    */
    P.cmp = function (y) {
        var xNeg,
            x = this,
            xc = x.c,
            yc = (y = new x.constructor(y)).c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either zero?
        if (!xc[0] || !yc[0]) {
            return !xc[0] ? !yc[0] ? 0 : -j : i;
        }

        // Signs differ?
        if (i != j) {
            return i;
        }
        xNeg = i < 0;

        // Compare exponents.
        if (k != l) {
            return k > l ^ xNeg ? 1 : -1;
        }

        i = -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (; ++i < j;) {

            if (xc[i] != yc[i]) {
                return xc[i] > yc[i] ^ xNeg ? 1 : -1;
            }
        }

        // Compare lengths.
        return k == l ? 0 : k > l ^ xNeg ? 1 : -1;
    };

    /*
     * Return a new Big whose value is the value of this Big divided by the
     * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal
     * places using rounding mode Big.RM.
     */
    P.div = function (y) {
        var x = this,
            Big = x.constructor,

        // dividend
        dvd = x.c,

        //divisor
        dvs = (y = new Big(y)).c,
            s = x.s == y.s ? 1 : -1,
            dp = Big.DP;

        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throwErr('!Big.DP!');
        }

        // Either 0?
        if (!dvd[0] || !dvs[0]) {

            // If both are 0, throw NaN
            if (dvd[0] == dvs[0]) {
                throwErr(NaN);
            }

            // If dvs is 0, throw +-Infinity.
            if (!dvs[0]) {
                throwErr(s / 0);
            }

            // dvd is 0, return +-0.
            return new Big(s * 0);
        }

        var dvsL,
            dvsT,
            next,
            cmp,
            remI,
            u,
            dvsZ = dvs.slice(),
            dvdI = dvsL = dvs.length,
            dvdL = dvd.length,

        // remainder
        rem = dvd.slice(0, dvsL),
            remL = rem.length,

        // quotient
        q = y,
            qc = q.c = [],
            qi = 0,
            digits = dp + (q.e = x.e - y.e) + 1;

        q.s = s;
        s = digits < 0 ? 0 : digits;

        // Create version of divisor with leading zero.
        dvsZ.unshift(0);

        // Add zeros to make remainder as long as divisor.
        for (; remL++ < dvsL; rem.push(0)) {}

        do {

            // 'next' is how many times the divisor goes into current remainder.
            for (next = 0; next < 10; next++) {

                // Compare divisor and remainder.
                if (dvsL != (remL = rem.length)) {
                    cmp = dvsL > remL ? 1 : -1;
                } else {

                    for (remI = -1, cmp = 0; ++remI < dvsL;) {

                        if (dvs[remI] != rem[remI]) {
                            cmp = dvs[remI] > rem[remI] ? 1 : -1;
                            break;
                        }
                    }
                }

                // If divisor < remainder, subtract divisor from remainder.
                if (cmp < 0) {

                    // Remainder can't be more than 1 digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {

                        if (rem[--remL] < dvsT[remL]) {
                            remI = remL;

                            for (; remI && !rem[--remI]; rem[remI] = 9) {}
                            --rem[remI];
                            rem[remL] += 10;
                        }
                        rem[remL] -= dvsT[remL];
                    }
                    for (; !rem[0]; rem.shift()) {}
                } else {
                    break;
                }
            }

            // Add the 'next' digit to the result array.
            qc[qi++] = cmp ? next : ++next;

            // Update the remainder.
            if (rem[0] && cmp) {
                rem[remL] = dvd[dvdI] || 0;
            } else {
                rem = [dvd[dvdI]];
            }
        } while ((dvdI++ < dvdL || rem[0] !== u) && s--);

        // Leading zero? Do not remove if result is simply zero (qi == 1).
        if (!qc[0] && qi != 1) {

            // There can't be more than one zero.
            qc.shift();
            q.e--;
        }

        // Round?
        if (qi > digits) {
            rnd(q, dp, Big.RM, rem[0] !== u);
        }

        return q;
    };

    /*
     * Return true if the value of this Big is equal to the value of Big y,
     * otherwise returns false.
     */
    P.eq = function (y) {
        return !this.cmp(y);
    };

    /*
     * Return true if the value of this Big is greater than the value of Big y,
     * otherwise returns false.
     */
    P.gt = function (y) {
        return this.cmp(y) > 0;
    };

    /*
     * Return true if the value of this Big is greater than or equal to the
     * value of Big y, otherwise returns false.
     */
    P.gte = function (y) {
        return this.cmp(y) > -1;
    };

    /*
     * Return true if the value of this Big is less than the value of Big y,
     * otherwise returns false.
     */
    P.lt = function (y) {
        return this.cmp(y) < 0;
    };

    /*
     * Return true if the value of this Big is less than or equal to the value
     * of Big y, otherwise returns false.
     */
    P.lte = function (y) {
        return this.cmp(y) < 1;
    };

    /*
     * Return a new Big whose value is the value of this Big minus the value
     * of Big y.
     */
    P.sub = P.minus = function (y) {
        var i,
            j,
            t,
            xLTy,
            x = this,
            Big = x.constructor,
            a = x.s,
            b = (y = new Big(y)).s;

        // Signs differ?
        if (a != b) {
            y.s = -b;
            return x.plus(y);
        }

        var xc = x.c.slice(),
            xe = x.e,
            yc = y.c,
            ye = y.e;

        // Either zero?
        if (!xc[0] || !yc[0]) {

            // y is non-zero? x is non-zero? Or both are zero.
            return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
        }

        // Determine which is the bigger number.
        // Prepend zeros to equalise exponents.
        if (a = xe - ye) {

            if (xLTy = a < 0) {
                a = -a;
                t = xc;
            } else {
                ye = xe;
                t = yc;
            }

            t.reverse();
            for (b = a; b--; t.push(0)) {}
            t.reverse();
        } else {

            // Exponents equal. Check digit by digit.
            j = ((xLTy = xc.length < yc.length) ? xc : yc).length;

            for (a = b = 0; b < j; b++) {

                if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
        }

        // x < y? Point xc to the array of the bigger number.
        if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
        }

        /*
         * Append zeros to xc if shorter. No need to add zeros to yc if shorter
         * as subtraction only needs to start at yc.length.
         */
        if ((b = (j = yc.length) - (i = xc.length)) > 0) {

            for (; b--; xc[i++] = 0) {}
        }

        // Subtract yc from xc.
        for (b = i; j > a;) {

            if (xc[--j] < yc[j]) {

                for (i = j; i && !xc[--i]; xc[i] = 9) {}
                --xc[i];
                xc[j] += 10;
            }
            xc[j] -= yc[j];
        }

        // Remove trailing zeros.
        for (; xc[--b] === 0; xc.pop()) {}

        // Remove leading zeros and adjust exponent accordingly.
        for (; xc[0] === 0;) {
            xc.shift();
            --ye;
        }

        if (!xc[0]) {

            // n - n = +0
            y.s = 1;

            // Result must be zero.
            xc = [ye = 0];
        }

        y.c = xc;
        y.e = ye;

        return y;
    };

    /*
     * Return a new Big whose value is the value of this Big modulo the
     * value of Big y.
     */
    P.mod = function (y) {
        var yGTx,
            x = this,
            Big = x.constructor,
            a = x.s,
            b = (y = new Big(y)).s;

        if (!y.c[0]) {
            throwErr(NaN);
        }

        x.s = y.s = 1;
        yGTx = y.cmp(x) == 1;
        x.s = a;
        y.s = b;

        if (yGTx) {
            return new Big(x);
        }

        a = Big.DP;
        b = Big.RM;
        Big.DP = Big.RM = 0;
        x = x.div(y);
        Big.DP = a;
        Big.RM = b;

        return this.minus(x.times(y));
    };

    /*
     * Return a new Big whose value is the value of this Big plus the value
     * of Big y.
     */
    P.add = P.plus = function (y) {
        var t,
            x = this,
            Big = x.constructor,
            a = x.s,
            b = (y = new Big(y)).s;

        // Signs differ?
        if (a != b) {
            y.s = -b;
            return x.minus(y);
        }

        var xe = x.e,
            xc = x.c,
            ye = y.e,
            yc = y.c;

        // Either zero?
        if (!xc[0] || !yc[0]) {

            // y is non-zero? x is non-zero? Or both are zero.
            return yc[0] ? y : new Big(xc[0] ? x : a * 0);
        }
        xc = xc.slice();

        // Prepend zeros to equalise exponents.
        // Note: Faster to use reverse then do unshifts.
        if (a = xe - ye) {

            if (a > 0) {
                ye = xe;
                t = yc;
            } else {
                a = -a;
                t = xc;
            }

            t.reverse();
            for (; a--; t.push(0)) {}
            t.reverse();
        }

        // Point xc to the longer array.
        if (xc.length - yc.length < 0) {
            t = yc;
            yc = xc;
            xc = t;
        }
        a = yc.length;

        /*
         * Only start adding at yc.length - 1 as the further digits of xc can be
         * left as they are.
         */
        for (b = 0; a;) {
            b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
            xc[a] %= 10;
        }

        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

        if (b) {
            xc.unshift(b);
            ++ye;
        }

        // Remove trailing zeros.
        for (a = xc.length; xc[--a] === 0; xc.pop()) {}

        y.c = xc;
        y.e = ye;

        return y;
    };

    /*
     * Return a Big whose value is the value of this Big raised to the power n.
     * If n is negative, round, if necessary, to a maximum of Big.DP decimal
     * places using rounding mode Big.RM.
     *
     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
     */
    P.pow = function (n) {
        var x = this,
            one = new x.constructor(1),
            y = one,
            isNeg = n < 0;

        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
            throwErr('!pow!');
        }

        n = isNeg ? -n : n;

        for (;;) {

            if (n & 1) {
                y = y.times(x);
            }
            n >>= 1;

            if (!n) {
                break;
            }
            x = x.times(x);
        }

        return isNeg ? one.div(y) : y;
    };

    /*
     * Return a new Big whose value is the value of this Big rounded to a
     * maximum of dp decimal places using rounding mode rm.
     * If dp is not specified, round to 0 decimal places.
     * If rm is not specified, use Big.RM.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
     */
    P.round = function (dp, rm) {
        var x = this,
            Big = x.constructor;

        if (dp == null) {
            dp = 0;
        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throwErr('!round!');
        }
        rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);

        return x;
    };

    /*
     * Return a new Big whose value is the square root of the value of this Big,
     * rounded, if necessary, to a maximum of Big.DP decimal places using
     * rounding mode Big.RM.
     */
    P.sqrt = function () {
        var estimate,
            r,
            approx,
            x = this,
            Big = x.constructor,
            xc = x.c,
            i = x.s,
            e = x.e,
            half = new Big('0.5');

        // Zero?
        if (!xc[0]) {
            return new Big(x);
        }

        // If negative, throw NaN.
        if (i < 0) {
            throwErr(NaN);
        }

        // Estimate.
        i = Math.sqrt(x.toString());

        // Math.sqrt underflow/overflow?
        // Pass x to Math.sqrt as integer, then adjust the result exponent.
        if (i === 0 || i === 1 / 0) {
            estimate = xc.join('');

            if (!(estimate.length + e & 1)) {
                estimate += '0';
            }

            r = new Big(Math.sqrt(estimate).toString());
            r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        } else {
            r = new Big(i.toString());
        }

        i = r.e + (Big.DP += 4);

        // Newton-Raphson iteration.
        do {
            approx = r;
            r = half.times(approx.plus(x.div(approx)));
        } while (approx.c.slice(0, i).join('') !== r.c.slice(0, i).join(''));

        rnd(r, Big.DP -= 4, Big.RM);

        return r;
    };

    /*
     * Return a new Big whose value is the value of this Big times the value of
     * Big y.
     */
    P.mul = P.times = function (y) {
        var c,
            x = this,
            Big = x.constructor,
            xc = x.c,
            yc = (y = new Big(y)).c,
            a = xc.length,
            b = yc.length,
            i = x.e,
            j = y.e;

        // Determine sign of result.
        y.s = x.s == y.s ? 1 : -1;

        // Return signed 0 if either 0.
        if (!xc[0] || !yc[0]) {
            return new Big(y.s * 0);
        }

        // Initialise exponent of result as x.e + y.e.
        y.e = i + j;

        // If array xc has fewer digits than yc, swap xc and yc, and lengths.
        if (a < b) {
            c = xc;
            xc = yc;
            yc = c;
            j = a;
            a = b;
            b = j;
        }

        // Initialise coefficient array of result with zeros.
        for (c = new Array(j = a + b); j--; c[j] = 0) {}

        // Multiply.

        // i is initially xc.length.
        for (i = b; i--;) {
            b = 0;

            // a is yc.length.
            for (j = a + i; j > i;) {

                // Current sum of products at this digit position, plus carry.
                b = c[j] + yc[i] * xc[j - i - 1] + b;
                c[j--] = b % 10;

                // carry
                b = b / 10 | 0;
            }
            c[j] = (c[j] + b) % 10;
        }

        // Increment result exponent if there is a final carry.
        if (b) {
            ++y.e;
        }

        // Remove any leading zero.
        if (!c[0]) {
            c.shift();
        }

        // Remove trailing zeros.
        for (i = c.length; !c[--i]; c.pop()) {}
        y.c = c;

        return y;
    };

    /*
     * Return a string representing the value of this Big.
     * Return exponential notation if this Big has a positive exponent equal to
     * or greater than Big.E_POS, or a negative exponent equal to or less than
     * Big.E_NEG.
     */
    P.toString = P.valueOf = P.toJSON = function () {
        var x = this,
            Big = x.constructor,
            e = x.e,
            str = x.c.join(''),
            strL = str.length;

        // Exponential notation?
        if (e <= Big.E_NEG || e >= Big.E_POS) {
            str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

            // Negative exponent?
        } else if (e < 0) {

            // Prepend zeros.
            for (; ++e; str = '0' + str) {}
            str = '0.' + str;

            // Positive exponent?
        } else if (e > 0) {

            if (++e > strL) {

                // Append zeros.
                for (e -= strL; e--; str += '0') {}
            } else if (e < strL) {
                str = str.slice(0, e) + '.' + str.slice(e);
            }

            // Exponent zero.
        } else if (strL > 1) {
            str = str.charAt(0) + '.' + str.slice(1);
        }

        // Avoid '-0'
        return x.s < 0 && x.c[0] ? '-' + str : str;
    };

    /*
     ***************************************************************************
     * If toExponential, toFixed, toPrecision and format are not required they
     * can safely be commented-out or deleted. No redundant code will be left.
     * format is used only by toExponential, toFixed and toPrecision.
     ***************************************************************************
     */

    /*
     * Return a string representing the value of this Big in exponential
     * notation to dp fixed decimal places and rounded, if necessary, using
     * Big.RM.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P.toExponential = function (dp) {

        if (dp == null) {
            dp = this.c.length - 1;
        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throwErr('!toExp!');
        }

        return format(this, dp, 1);
    };

    /*
     * Return a string representing the value of this Big in normal notation
     * to dp fixed decimal places and rounded, if necessary, using Big.RM.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P.toFixed = function (dp) {
        var str,
            x = this,
            Big = x.constructor,
            neg = Big.E_NEG,
            pos = Big.E_POS;

        // Prevent the possibility of exponential notation.
        Big.E_NEG = -(Big.E_POS = 1 / 0);

        if (dp == null) {
            str = x.toString();
        } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {
            str = format(x, x.e + dp);

            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
            if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {
                //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                str = '-' + str;
            }
        }
        Big.E_NEG = neg;
        Big.E_POS = pos;

        if (!str) {
            throwErr('!toFix!');
        }

        return str;
    };

    /*
     * Return a string representing the value of this Big rounded to sd
     * significant digits using Big.RM. Use exponential notation if sd is less
     * than the number of digits necessary to represent the integer part of the
     * value in normal notation.
     *
     * sd {number} Integer, 1 to MAX_DP inclusive.
     */
    P.toPrecision = function (sd) {

        if (sd == null) {
            return this.toString();
        } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
            throwErr('!toPre!');
        }

        return format(this, sd - 1, 2);
    };

    // Export


    Big = bigFactory();

    //AMD.
    if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return Big;
        }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

        // Node and other CommonJS-like environments that support module.exports.
    } else {}
})(undefined);

/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (module, exports) {
  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(/*! buffer */ 2).Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && (typeof num === 'undefined' ? 'undefined' : _typeof(num)) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if ((typeof number === 'undefined' ? 'undefined' : _typeof(number)) === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

        // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

        // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

        // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

        // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = limbPow / base | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */

  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];

  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

      // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
      // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

      // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff;carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, undefined);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/brorand/index.js":
/*!***************************************!*\
  !*** ./node_modules/brorand/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var r;

module.exports = function rand(len) {
  if (!r) r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes) return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++) {
    res[i] = this.rand.getByte();
  }return res;
};

if ((typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

    // Safari's WebWorkers do not have `crypto`
  } else if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(/*! crypto */ 3);
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {}
}

/***/ }),

/***/ "./node_modules/browserify-aes/aes.js":
/*!********************************************!*\
  !*** ./node_modules/browserify-aes/aes.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function asUInt32Array(buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);

  var len = buf.length / 4 | 0;
  var out = new Array(len);

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4);
  }

  return out;
}

function scrubVec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
}

function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0];
  var SUB_MIX1 = SUB_MIX[1];
  var SUB_MIX2 = SUB_MIX[2];
  var SUB_MIX3 = SUB_MIX[3];

  var s0 = M[0] ^ keySchedule[0];
  var s1 = M[1] ^ keySchedule[1];
  var s2 = M[2] ^ keySchedule[2];
  var s3 = M[3] ^ keySchedule[3];
  var t0, t1, t2, t3;
  var ksRow = 4;

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }

  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  t0 = t0 >>> 0;
  t1 = t1 >>> 0;
  t2 = t2 >>> 0;
  t3 = t3 >>> 0;

  return [t0, t1, t2, t3];
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
var G = function () {
  // Compute double table
  var d = new Array(256);
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1;
    } else {
      d[j] = j << 1 ^ 0x11b;
    }
  }

  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX = [[], [], [], []];
  var INV_SUB_MIX = [[], [], [], []];

  // Walk GF(2^8)
  var x = 0;
  var xi = 0;
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    SBOX[x] = sx;
    INV_SBOX[sx] = x;

    // Compute multiplication
    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4];

    // Compute sub bytes, mix columns tables
    var t = d[sx] * 0x101 ^ sx * 0x1010100;
    SUB_MIX[0][x] = t << 24 | t >>> 8;
    SUB_MIX[1][x] = t << 16 | t >>> 16;
    SUB_MIX[2][x] = t << 8 | t >>> 24;
    SUB_MIX[3][x] = t;

    // Compute inv sub bytes, inv mix columns tables
    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    INV_SUB_MIX[3][sx] = t;

    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  };
}();

function AES(key) {
  this._key = asUInt32Array(key);
  this._reset();
}

AES.blockSize = 4 * 4;
AES.keySize = 256 / 8;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function () {
  var keyWords = this._key;
  var keySize = keyWords.length;
  var nRounds = keySize + 6;
  var ksRows = (nRounds + 1) * 4;

  var keySchedule = [];
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k];
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1];

    if (k % keySize === 0) {
      t = t << 8 | t >>> 24;
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];

      t ^= RCON[k / keySize | 0] << 24;
    } else if (keySize > 6 && k % keySize === 4) {
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t;
  }

  var invKeySchedule = [];
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik;
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt;
    } else {
      invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
  }

  this._nRounds = nRounds;
  this._keySchedule = keySchedule;
  this._invKeySchedule = invKeySchedule;
};

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M);
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M);

  // swap
  var m1 = M[1];
  M[1] = M[3];
  M[3] = m1;

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule);
  scrubVec(this._invKeySchedule);
  scrubVec(this._key);
};

module.exports.AES = AES;

/***/ }),

/***/ "./node_modules/browserify-aes/authCipher.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/authCipher.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var GHASH = __webpack_require__(/*! ./ghash */ "./node_modules/browserify-aes/ghash.js");
var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");
var incr32 = __webpack_require__(/*! ./incr32 */ "./node_modules/browserify-aes/incr32.js");

function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) out++;

  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; ++i) {
    out += a[i] ^ b[i];
  }

  return out;
}

function calcIv(self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
  }
  var ghash = new GHASH(ck);
  var len = iv.length;
  var toPad = len % 16;
  ghash.update(iv);
  if (toPad) {
    toPad = 16 - toPad;
    ghash.update(Buffer.alloc(toPad, 0));
  }
  ghash.update(Buffer.alloc(8, 0));
  var ivBits = len * 8;
  var tail = Buffer.alloc(8);
  tail.writeUIntBE(ivBits, 0, 8);
  ghash.update(tail);
  self._finID = ghash.state;
  var out = Buffer.from(self._finID);
  incr32(out);
  return out;
}
function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);

  var h = Buffer.alloc(4, 0);

  this._cipher = new aes.AES(key);
  var ck = this._cipher.encryptBlock(h);
  this._ghash = new GHASH(ck);
  iv = calcIv(this, iv, ck);

  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  this._mode = mode;

  this._authTag = null;
  this._called = false;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0);
      this._ghash.update(rump);
    }
  }

  this._called = true;
  var out = this._mode.encrypt(this, chunk);
  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }
  this._len += chunk.length;
  return out;
};

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');

  this._authTag = tag;
  this._cipher.scrub();
};

StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');

  return this._authTag;
};

StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');

  this._authTag = tag;
};

StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state');

  this._ghash.update(buf);
  this._alen += buf.length;
};

module.exports = StreamCipher;

/***/ }),

/***/ "./node_modules/browserify-aes/browser.js":
/*!************************************************!*\
  !*** ./node_modules/browserify-aes/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ciphers = __webpack_require__(/*! ./encrypter */ "./node_modules/browserify-aes/encrypter.js");
var deciphers = __webpack_require__(/*! ./decrypter */ "./node_modules/browserify-aes/decrypter.js");
var modes = __webpack_require__(/*! ./modes/list.json */ "./node_modules/browserify-aes/modes/list.json");

function getCiphers() {
  return Object.keys(modes);
}

exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

/***/ }),

/***/ "./node_modules/browserify-aes/decrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/decrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js");
var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js");
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Decipher(mode, key, iv) {
  Transform.call(this);

  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Decipher, Transform);

Decipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};

Decipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }

  return null;
};

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache;
};

function unpad(last) {
  var padded = last[15];
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data');
  }
  var i = -1;
  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }
  if (padded === 16) return;

  return last.slice(0, 16 - padded);
}

function createDecipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true);
  }

  return new Decipher(config.module, password, iv);
}

function createDecipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  var keys = ebtk(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}

exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

/***/ }),

/***/ "./node_modules/browserify-aes/encrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/encrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js");
var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js");
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Cipher(mode, key, iv) {
  Transform.call(this);

  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Cipher, Transform);

Cipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

var PADDING = Buffer.alloc(16, 0x10);

Cipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);
    this._cipher.scrub();
    return chunk;
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub();
    throw new Error('data not multiple of block length');
  }
};

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = Buffer.allocUnsafe(len);

  var i = -1;
  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }

  return Buffer.concat([this.cache, padBuff]);
};

function createCipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv);
  }

  return new Cipher(config.module, password, iv);
}

function createCipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  var keys = ebtk(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

/***/ }),

/***/ "./node_modules/browserify-aes/ghash.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-aes/ghash.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var ZEROES = Buffer.alloc(16, 0);

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}

function fromArray(out) {
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0] >>> 0, 0);
  buf.writeUInt32BE(out[1] >>> 0, 4);
  buf.writeUInt32BE(out[2] >>> 0, 8);
  buf.writeUInt32BE(out[3] >>> 0, 12);
  return buf;
}

function GHASH(key) {
  this.h = key;
  this.state = Buffer.alloc(16, 0);
  this.cache = Buffer.allocUnsafe(0);
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1;
  while (++i < block.length) {
    this.state[i] ^= block[i];
  }
  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsbVi;
  var i = -1;
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0];
      Zi[1] ^= Vi[1];
      Zi[2] ^= Vi[2];
      Zi[3] ^= Vi[3];
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0;

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }
    Vi[0] = Vi[0] >>> 1;

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }
  this.state = fromArray(Zi);
};

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16));
  }

  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

module.exports = GHASH;

/***/ }),

/***/ "./node_modules/browserify-aes/incr32.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-aes/incr32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function incr32(iv) {
  var len = iv.length;
  var item;
  while (len--) {
    item = iv.readUInt8(len);
    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}
module.exports = incr32;

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cbc.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cbc.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);

  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

exports.decrypt = function (self, block) {
  var pad = self._prev;

  self._prev = block;
  var out = self._cipher.decryptBlock(block);

  return xor(out, pad);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
  return out;
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0);
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = Buffer.allocUnsafe(0);
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb1.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb1.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }
  return out;
}

function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = Buffer.allocUnsafe(buffer.length);
  buffer = Buffer.concat([buffer, Buffer.from([value])]);

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb8.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb8.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);
  var out = pad[0] ^ byteParam;

  self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ctr.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ctr.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var incr32 = __webpack_require__(/*! ../incr32 */ "./node_modules/browserify-aes/incr32.js");

function getBlock(self) {
  var out = self._cipher.encryptBlockRaw(self._prev);
  incr32(self._prev);
  return out;
}

var blockSize = 16;
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize);
  var start = self._cache.length;
  self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self);
    var offset = start + i * blockSize;
    self._cache.writeUInt32BE(out[0], offset + 0);
    self._cache.writeUInt32BE(out[1], offset + 4);
    self._cache.writeUInt32BE(out[2], offset + 8);
    self._cache.writeUInt32BE(out[3], offset + 12);
  }
  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ecb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ecb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/index.js":
/*!****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var modeModules = {
  ECB: __webpack_require__(/*! ./ecb */ "./node_modules/browserify-aes/modes/ecb.js"),
  CBC: __webpack_require__(/*! ./cbc */ "./node_modules/browserify-aes/modes/cbc.js"),
  CFB: __webpack_require__(/*! ./cfb */ "./node_modules/browserify-aes/modes/cfb.js"),
  CFB8: __webpack_require__(/*! ./cfb8 */ "./node_modules/browserify-aes/modes/cfb8.js"),
  CFB1: __webpack_require__(/*! ./cfb1 */ "./node_modules/browserify-aes/modes/cfb1.js"),
  OFB: __webpack_require__(/*! ./ofb */ "./node_modules/browserify-aes/modes/ofb.js"),
  CTR: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js"),
  GCM: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js")
};

var modes = __webpack_require__(/*! ./list.json */ "./node_modules/browserify-aes/modes/list.json");

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode];
}

module.exports = modes;

/***/ }),

/***/ "./node_modules/browserify-aes/modes/list.json":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/list.json ***!
  \*****************************************************/
/*! exports provided: aes-128-ecb, aes-192-ecb, aes-256-ecb, aes-128-cbc, aes-192-cbc, aes-256-cbc, aes128, aes192, aes256, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-cfb8, aes-192-cfb8, aes-256-cfb8, aes-128-cfb1, aes-192-cfb1, aes-256-cfb1, aes-128-ofb, aes-192-ofb, aes-256-ofb, aes-128-ctr, aes-192-ctr, aes-256-ctr, aes-128-gcm, aes-192-gcm, aes-256-gcm, default */
/***/ (function(module) {

module.exports = {"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ofb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ofb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-aes/streamCipher.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/streamCipher.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);

  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._mode = mode;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};

StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};

module.exports = StreamCipher;

/***/ }),

/***/ "./node_modules/browserify-cipher/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-cipher/browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var DES = __webpack_require__(/*! browserify-des */ "./node_modules/browserify-des/index.js");
var aes = __webpack_require__(/*! browserify-aes/browser */ "./node_modules/browserify-aes/browser.js");
var aesModes = __webpack_require__(/*! browserify-aes/modes */ "./node_modules/browserify-aes/modes/index.js");
var desModes = __webpack_require__(/*! browserify-des/modes */ "./node_modules/browserify-des/modes.js");
var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");

function createCipher(suite, password) {
  suite = suite.toLowerCase();

  var keyLen, ivLen;
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }

  var keys = ebtk(password, false, keyLen, ivLen);
  return createCipheriv(suite, keys.key, keys.iv);
}

function createDecipher(suite, password) {
  suite = suite.toLowerCase();

  var keyLen, ivLen;
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }

  var keys = ebtk(password, false, keyLen, ivLen);
  return createDecipheriv(suite, keys.key, keys.iv);
}

function createCipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite });

  throw new TypeError('invalid suite type');
}

function createDecipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true });

  throw new TypeError('invalid suite type');
}

function getCiphers() {
  return Object.keys(desModes).concat(aes.getCiphers());
}

exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

/***/ }),

/***/ "./node_modules/browserify-des/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var CipherBase = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var des = __webpack_require__(/*! des.js */ "./node_modules/des.js/lib/des.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
  CipherBase.call(this);
  var modeName = opts.mode.toLowerCase();
  var mode = modes[modeName];
  var type;
  if (opts.decrypt) {
    type = 'decrypt';
  } else {
    type = 'encrypt';
  }
  var key = opts.key;
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key);
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)]);
  }
  var iv = opts.iv;
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv);
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  });
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data));
};
DES.prototype._final = function () {
  return Buffer.from(this._des.final());
};

/***/ }),

/***/ "./node_modules/browserify-des/modes.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/modes.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports['des-ecb'] = {
  key: 8,
  iv: 0
};
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
};
exports['des-ede3'] = {
  key: 24,
  iv: 0
};
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
};
exports['des-ede'] = {
  key: 16,
  iv: 0
};

/***/ }),

/***/ "./node_modules/browserify-rsa/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-rsa/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder: r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/algos.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-sign/algos.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./browser/algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/algorithms.json":
/*!**************************************************************!*\
  !*** ./node_modules/browserify-sign/browser/algorithms.json ***!
  \**************************************************************/
/*! exports provided: sha224WithRSAEncryption, RSA-SHA224, sha256WithRSAEncryption, RSA-SHA256, sha384WithRSAEncryption, RSA-SHA384, sha512WithRSAEncryption, RSA-SHA512, RSA-SHA1, ecdsa-with-SHA1, sha256, sha224, sha384, sha512, DSA-SHA, DSA-SHA1, DSA, DSA-WITH-SHA224, DSA-SHA224, DSA-WITH-SHA256, DSA-SHA256, DSA-WITH-SHA384, DSA-SHA384, DSA-WITH-SHA512, DSA-SHA512, DSA-RIPEMD160, ripemd160WithRSA, RSA-RIPEMD160, md5WithRSAEncryption, RSA-MD5, default */
/***/ (function(module) {

module.exports = {"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}};

/***/ }),

/***/ "./node_modules/browserify-sign/browser/curves.json":
/*!**********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/curves.json ***!
  \**********************************************************/
/*! exports provided: 1.3.132.0.10, 1.3.132.0.33, 1.2.840.10045.3.1.1, 1.2.840.10045.3.1.7, 1.3.132.0.34, 1.3.132.0.35, default */
/***/ (function(module) {

module.exports = {"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"};

/***/ }),

/***/ "./node_modules/browserify-sign/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
var stream = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var sign = __webpack_require__(/*! ./sign */ "./node_modules/browserify-sign/browser/sign.js");
var verify = __webpack_require__(/*! ./verify */ "./node_modules/browserify-sign/browser/verify.js");

var algorithms = __webpack_require__(/*! ./algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json");
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');

  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Sign.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);
  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(hash, key, this._hashType, this._signType, this._tag);

  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');

  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Verify.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);
  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc);

  this.end();
  var hash = this._hash.digest();
  return verify(sig, hash, key, this._signType, this._tag);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/sign.js":
/*!******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/sign.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js");
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");
var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec;
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");
var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json");

function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type');
    return dsaSign(hash, priv, hashType);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
  }
  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));

  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);

  return new Buffer(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  if (s[0] & 0x80) s = [0].concat(s);

  var total = r.length + s.length + 4;
  var res = [0x30, total, 0x02, r.length];
  res = res.concat(r, [0x02, s.length], s);
  return new Buffer(res);
}

function getKey(x, q, hash, algo) {
  x = new Buffer(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length);
    zeros.fill(0);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = new Buffer(hlen);
  v.fill(1);
  var k = new Buffer(hlen);
  k.fill(0);
  k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return { k: k, v: v };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) bits.ishrn(shift);
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = new Buffer(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length);
    zeros.fill(0);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}

function makeKey(q, kv, algo) {
  var t;
  var k;

  do {
    t = new Buffer(0);

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/verify.js":
/*!********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/verify.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec;
var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");
var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json");

function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type');
    return dsaVerify(sig, hash, pub);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
  }
  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum++;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = new Buffer(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);

  sig = sig.redPow(new BN(pub.publicExponent));
  sig = new Buffer(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) out = 1;

  i = -1;
  while (++i < len) {
    out |= sig[i] ^ pad[i];
  }return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));

  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;

  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
  return v.cmp(r) === 0;
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig');
  if (b.cmp(q) >= q) throw new Error('invalid sig');
}

module.exports = verify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer-xor/index.js":
/*!******************************************!*\
  !*** ./node_modules/buffer-xor/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

module.exports = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/cipher-base/index.js":
/*!*******************************************!*\
  !*** ./node_modules/cipher-base/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform;
var StringDecoder = __webpack_require__(/*! string_decoder */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function CipherBase(hashMode) {
  Transform.call(this);
  this.hashMode = typeof hashMode === 'string';
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }
  if (this._final) {
    this.__final = this._final;
    this._final = null;
  }
  this._decoder = null;
  this._encoding = null;
}
inherits(CipherBase, Transform);

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc);
  }

  var outData = this._update(data);
  if (this.hashMode) return this;

  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }

  return outData;
};

CipherBase.prototype.setAutoPadding = function () {};
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
  var err;
  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};
CipherBase.prototype._flush = function (done) {
  var err;
  try {
    this.push(this.__final());
  } catch (e) {
    err = e;
  }

  done(err);
};
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0);
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }
  return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc);
    this._encoding = enc;
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings');

  var out = this._decoder.write(value);
  if (fin) {
    out += this._decoder.end();
  }

  return out;
};

module.exports = CipherBase;

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-ecdh/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-ecdh/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var elliptic = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

module.exports = function createECDH(curve) {
  return new ECDH(curve);
};

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
  this.curveType = aliases[curve];
  if (!this.curveType) {
    this.curveType = {
      name: curve
    };
  }
  this.curve = new elliptic.ec(this.curveType.name); // eslint-disable-line new-cap
  this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair();
  return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8';
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc);
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic();
  var out = otherPub.mul(this.keys.getPrivate()).getX();
  return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true);
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7;
    } else {
      key[0] = 6;
    }
  }
  return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this.keys._importPublic(pub);
  return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }

  var _priv = new BN(priv);
  _priv = _priv.toString(16);
  this.keys = this.curve.genKeyPair();
  this.keys._importPrivate(_priv);
  return this;
};

function formatReturnValue(bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray();
  }
  var buf = new Buffer(bn);
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length);
    zeros.fill(0);
    buf = Buffer.concat([zeros, buf]);
  }
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-hash/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hash/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");
var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");
var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");
var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

function Hash(hash) {
  Base.call(this, 'digest');

  this._hash = hash;
}

inherits(Hash, Base);

Hash.prototype._update = function (data) {
  this._hash.update(data);
};

Hash.prototype._final = function () {
  return this._hash.digest();
};

module.exports = function createHash(alg) {
  alg = alg.toLowerCase();
  if (alg === 'md5') return new MD5();
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();

  return new Hash(sha(alg));
};

/***/ }),

/***/ "./node_modules/create-hash/md5.js":
/*!*****************************************!*\
  !*** ./node_modules/create-hash/md5.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");

module.exports = function (buffer) {
  return new MD5().update(buffer).digest();
};

/***/ }),

/***/ "./node_modules/create-hmac/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hmac/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Legacy = __webpack_require__(/*! ./legacy */ "./node_modules/create-hmac/legacy.js");
var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js");
var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");

var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");

var ZEROS = Buffer.alloc(128);

function Hmac(alg, key) {
  Base.call(this, 'digest');
  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  this._alg = alg;
  this._key = key;
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    key = hash.update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
  this._hash.update(ipad);
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.update(data);
};

Hmac.prototype._final = function () {
  var h = this._hash.digest();
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
  return hash.update(this._opad).update(h).digest();
};

module.exports = function createHmac(alg, key) {
  alg = alg.toLowerCase();
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key);
  }
  if (alg === 'md5') {
    return new Legacy(md5, key);
  }
  return new Hmac(alg, key);
};

/***/ }),

/***/ "./node_modules/create-hmac/legacy.js":
/*!********************************************!*\
  !*** ./node_modules/create-hmac/legacy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var ZEROS = Buffer.alloc(128);
var blocksize = 64;

function Hmac(alg, key) {
  Base.call(this, 'digest');
  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = alg(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = [ipad];
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.push(data);
};

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash));
  return this._alg(Buffer.concat([this._opad, h]));
};
module.exports = Hmac;

/***/ }),

/***/ "./node_modules/crypto-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
exports.createHash = exports.Hash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
exports.createHmac = exports.Hmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js");

var algos = __webpack_require__(/*! browserify-sign/algos */ "./node_modules/browserify-sign/algos.js");
var algoKeys = Object.keys(algos);
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
exports.getHashes = function () {
  return hashes;
};

var p = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js");
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;

var aes = __webpack_require__(/*! browserify-cipher */ "./node_modules/browserify-cipher/browser.js");

exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;

var dh = __webpack_require__(/*! diffie-hellman */ "./node_modules/diffie-hellman/browser.js");

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;

var sign = __webpack_require__(/*! browserify-sign */ "./node_modules/browserify-sign/browser/index.js");

exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;

exports.createECDH = __webpack_require__(/*! create-ecdh */ "./node_modules/create-ecdh/browser.js");

var publicEncrypt = __webpack_require__(/*! public-encrypt */ "./node_modules/public-encrypt/browser.js");

exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(/*! randomfill */ "./node_modules/randomfill/browser.js");

exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;

exports.createCredentials = function () {
  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
};

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
};

/***/ }),

/***/ "./node_modules/des.js/lib/des.js":
/*!****************************************!*\
  !*** ./node_modules/des.js/lib/des.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(/*! ./des/utils */ "./node_modules/des.js/lib/des/utils.js");
exports.Cipher = __webpack_require__(/*! ./des/cipher */ "./node_modules/des.js/lib/des/cipher.js");
exports.DES = __webpack_require__(/*! ./des/des */ "./node_modules/des.js/lib/des/des.js");
exports.CBC = __webpack_require__(/*! ./des/cbc */ "./node_modules/des.js/lib/des/cbc.js");
exports.EDE = __webpack_require__(/*! ./des/ede */ "./node_modules/des.js/lib/des/ede.js");

/***/ }),

/***/ "./node_modules/des.js/lib/des/cbc.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/cbc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++) {
    this.iv[i] = iv[i];
  }
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++) {
      iv[i] ^= inp[inOff + i];
    }superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = out[outOff + i];
    }
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      out[outOff + i] ^= iv[i];
    }for (var i = 0; i < this.blockSize; i++) {
      iv[i] = inp[inOff + i];
    }
  }
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/cipher.js":
/*!***********************************************!*\
  !*** ./node_modules/des.js/lib/des/cipher.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0) return [];

  if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++) {
    this.buffer[this.bufferOff + i] = data[off + i];
  }this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = (this.bufferOff + data.length) / this.blockSize | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - (data.length - inputOff) % this.blockSize;
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++) {
    this.buffer[this.bufferOff] = data[inputOff];
  }return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer) first = this.update(buffer);

  var last;
  if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();

  if (first) return first.concat(last);else return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0) return false;

  while (off < buffer.length) {
    buffer[off++] = 0;
  }return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff)) return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/des.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/des.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__(/*! ../des */ "./node_modules/des.js/lib/des.js");
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++) {
    buffer[i] = value;
  }return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++) {
    assert.equal(buffer[i], pad);
  }return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/ede.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/ede.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__(/*! ../des */ "./node_modules/des.js/lib/des.js");
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [DES.create({ type: 'encrypt', key: k1 }), DES.create({ type: 'decrypt', key: k2 }), DES.create({ type: 'encrypt', key: k3 })];
  } else {
    this.ciphers = [DES.create({ type: 'decrypt', key: k3 }), DES.create({ type: 'encrypt', key: k2 }), DES.create({ type: 'decrypt', key: k1 })];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

/***/ }),

/***/ "./node_modules/des.js/lib/des/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/des.js/lib/des/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = value >>> 16 & 0xff;
  bytes[2 + off] = value >>> 8 & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= inR >> j + i & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= inL >> j + i & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
};

var pc2table = [
// inL => outL
14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26,

// inR => outR
15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> pc2table[i] & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= inR >>> pc2table[i] & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = (r & 1) << 5 | r >>> 27;
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= r >>> i & 0x3f;
    outR <<= 6;
  }
  outR |= (r & 0x1f) << 1 | r >>> 31;

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = inR >>> 18 - i * 6 & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= num >>> permuteTable[i] & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size) {
    str = '0' + str;
  }var out = [];
  for (var i = 0; i < size; i += group) {
    out.push(str.slice(i, i + group));
  }return out.join(' ');
};

/***/ }),

/***/ "./node_modules/diffie-hellman/browser.js":
/*!************************************************!*\
  !*** ./node_modules/diffie-hellman/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var generatePrime = __webpack_require__(/*! ./lib/generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js");
var primes = __webpack_require__(/*! ./lib/primes.json */ "./node_modules/diffie-hellman/lib/primes.json");

var DH = __webpack_require__(/*! ./lib/dh */ "./node_modules/diffie-hellman/lib/dh.js");

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
};

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator);
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/dh.js":
/*!***********************************************!*\
  !*** ./node_modules/diffie-hellman/lib/dh.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = __webpack_require__(/*! ./generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js");
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function get() {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/generatePrime.js":
/*!**********************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/generatePrime.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var TWENTYFOUR = new BN(24);
var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null) return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++) {
      if (k % res[j] === 0) break;
    }if (i !== j && res[j] <= sqrt) continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++) {
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }
  }return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }
}

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/primes.json":
/*!*****************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/primes.json ***!
  \*****************************************************/
/*! exports provided: modp1, modp2, modp5, modp14, modp15, modp16, modp17, modp18, default */
/***/ (function(module) {

module.exports = {"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic.js":
/*!***********************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;

elliptic.version = __webpack_require__(/*! ../package.json */ "./node_modules/elliptic/package.json").version;
elliptic.utils = __webpack_require__(/*! ./elliptic/utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
elliptic.rand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");
elliptic.curve = __webpack_require__(/*! ./elliptic/curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
elliptic.curves = __webpack_require__(/*! ./elliptic/curves */ "./node_modules/elliptic/lib/elliptic/curves.js");

// Protocols
elliptic.ec = __webpack_require__(/*! ./elliptic/ec */ "./node_modules/elliptic/lib/elliptic/ec/index.js");
elliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ "./node_modules/elliptic/lib/elliptic/eddsa/index.js");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }if (i >= 0) k++;
    acc = acc.dblp(k);

    if (i < 0) break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a], /* 1 */
    null, /* 3 */
    null, /* 5 */
    points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3, /* -1 -1 */
    -1, /* -1 0 */
    -5, /* -1 1 */
    -7, /* 0 -1 */
    0, /* 0 0 */
    7, /* 0 1 */
    5, /* 1 -1 */
    1, /* 1 0 */
    3 /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }
      if (!zero) break;
      k++;
      i--;
    }
    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();

      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq() /*other*/{
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);

    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;

  var doubles = this.precomputed.doubles;
  if (!doubles) return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

  var doubles = [this];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }return r;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red) y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');

  if (x.isOdd() !== odd) x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  // Double in extended coordinates
  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;

  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne) return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;

curve.base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");
curve.short = __webpack_require__(/*! ./short */ "./node_modules/elliptic/lib/elliptic/curve/short.js");
curve.mont = __webpack_require__(/*! ./mont */ "./node_modules/elliptic/lib/elliptic/curve/mont.js");
curve.edwards = __webpack_require__(/*! ./edwards */ "./node_modules/elliptic/lib/elliptic/curve/edwards.js");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = curve.base;

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/short.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;

  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];

  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p;

  // P + O = P
  if (p.inf) return this;

  // P + P = 2P
  if (this.eq(p)) return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p)) return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function negate(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p;

  // P + O = P
  if (p.isInfinity()) return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ();

  // P + O = P
  if (p.isInfinity()) return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());

  if (this === p) return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curves.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curves.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var elliptic = __webpack_require__(/*! ../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['9']
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

  // 4/5
  '6666666666666666666666666666666666666666666666666666666666666658']
});

var pre;
try {
  pre = __webpack_require__(/*! ./precomputed/secp256k1 */ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [{
    a: '3086d221a7d46bcde86c90e49284eb15',
    b: '-e4437ed6010e88286f547fa90abfe4c3'
  }, {
    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    b: '3086d221a7d46bcde86c90e49284eb15'
  }],

  gRed: false,
  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
});

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/index.js":
/*!********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var HmacDRBG = __webpack_require__(/*! hmac-drbg */ "./node_modules/hmac-drbg/lib/hmac-drbg.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/ec/key.js");
var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/ec/signature.js");

function EC(options) {
  if (!(this instanceof EC)) return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve) options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if ((typeof enc === 'undefined' ? 'undefined' : _typeof(enc)) === 'object') {
    options = enc;
    enc = null;
  }
  if (!options) options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/key.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity()) return { result: false, reason: 'Invalid public key' };
  if (!pub.validate()) return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);

  if (!enc) return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;

  if (this._importDER(options, enc)) return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len + p.place !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }
  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  // Pad values
  if (s[0] & 0x80) s = [0].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/eddsa/key.js");
var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js");

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA)) return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature) return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair) return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if ((typeof sig === 'undefined' ? 'undefined' : _typeof(sig)) !== 'object') sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof BN) this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/utils.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var minAssert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << w + 1;
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;
    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [[], []];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = k2.andln(7) + d2 & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

/***/ }),

/***/ "./node_modules/elliptic/package.json":
/*!********************************************!*\
  !*** ./node_modules/elliptic/package.json ***!
  \********************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, dependencies, deprecated, description, devDependencies, files, homepage, keywords, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = {"_from":"elliptic@^6.0.0","_id":"elliptic@6.4.0","_inBundle":false,"_integrity":"sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"elliptic@^6.0.0","name":"elliptic","escapedName":"elliptic","rawSpec":"^6.0.0","saveSpec":null,"fetchSpec":"^6.0.0"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz","_shasum":"cac9af8762c85836187003c8dfe193e5e2eae5df","_spec":"elliptic@^6.0.0","_where":"W:\\cuby-quick-start\\cuby-quick-start\\node_modules\\browserify-sign","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"bundleDependencies":false,"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},"deprecated":false,"description":"EC cryptography","devDependencies":{"brfs":"^1.4.3","coveralls":"^2.11.3","grunt":"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2","istanbul":"^0.4.2","jscs":"^2.9.0","jshint":"^2.6.0","mocha":"^2.1.0"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.4.0"};

/***/ }),

/***/ "./node_modules/emojis-list/index.js":
/*!*******************************************!*\
  !*** ./node_modules/emojis-list/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ["🀄", "🃏", "🅰", "🅱", "🅾", "🅿", "🆎", "🆑", "🆒", "🆓", "🆔", "🆕", "🆖", "🆗", "🆘", "🆙", "🆚", "🇦🇨", "🇦🇩", "🇦🇪", "🇦🇫", "🇦🇬", "🇦🇮", "🇦🇱", "🇦🇲", "🇦🇴", "🇦🇶", "🇦🇷", "🇦🇸", "🇦🇹", "🇦🇺", "🇦🇼", "🇦🇽", "🇦🇿", "🇦", "🇧🇦", "🇧🇧", "🇧🇩", "🇧🇪", "🇧🇫", "🇧🇬", "🇧🇭", "🇧🇮", "🇧🇯", "🇧🇱", "🇧🇲", "🇧🇳", "🇧🇴", "🇧🇶", "🇧🇷", "🇧🇸", "🇧🇹", "🇧🇻", "🇧🇼", "🇧🇾", "🇧🇿", "🇧", "🇨🇦", "🇨🇨", "🇨🇩", "🇨🇫", "🇨🇬", "🇨🇭", "🇨🇮", "🇨🇰", "🇨🇱", "🇨🇲", "🇨🇳", "🇨🇴", "🇨🇵", "🇨🇷", "🇨🇺", "🇨🇻", "🇨🇼", "🇨🇽", "🇨🇾", "🇨🇿", "🇨", "🇩🇪", "🇩🇬", "🇩🇯", "🇩🇰", "🇩🇲", "🇩🇴", "🇩🇿", "🇩", "🇪🇦", "🇪🇨", "🇪🇪", "🇪🇬", "🇪🇭", "🇪🇷", "🇪🇸", "🇪🇹", "🇪🇺", "🇪", "🇫🇮", "🇫🇯", "🇫🇰", "🇫🇲", "🇫🇴", "🇫🇷", "🇫", "🇬🇦", "🇬🇧", "🇬🇩", "🇬🇪", "🇬🇫", "🇬🇬", "🇬🇭", "🇬🇮", "🇬🇱", "🇬🇲", "🇬🇳", "🇬🇵", "🇬🇶", "🇬🇷", "🇬🇸", "🇬🇹", "🇬🇺", "🇬🇼", "🇬🇾", "🇬", "🇭🇰", "🇭🇲", "🇭🇳", "🇭🇷", "🇭🇹", "🇭🇺", "🇭", "🇮🇨", "🇮🇩", "🇮🇪", "🇮🇱", "🇮🇲", "🇮🇳", "🇮🇴", "🇮🇶", "🇮🇷", "🇮🇸", "🇮🇹", "🇮", "🇯🇪", "🇯🇲", "🇯🇴", "🇯🇵", "🇯", "🇰🇪", "🇰🇬", "🇰🇭", "🇰🇮", "🇰🇲", "🇰🇳", "🇰🇵", "🇰🇷", "🇰🇼", "🇰🇾", "🇰🇿", "🇰", "🇱🇦", "🇱🇧", "🇱🇨", "🇱🇮", "🇱🇰", "🇱🇷", "🇱🇸", "🇱🇹", "🇱🇺", "🇱🇻", "🇱🇾", "🇱", "🇲🇦", "🇲🇨", "🇲🇩", "🇲🇪", "🇲🇫", "🇲🇬", "🇲🇭", "🇲🇰", "🇲🇱", "🇲🇲", "🇲🇳", "🇲🇴", "🇲🇵", "🇲🇶", "🇲🇷", "🇲🇸", "🇲🇹", "🇲🇺", "🇲🇻", "🇲🇼", "🇲🇽", "🇲🇾", "🇲🇿", "🇲", "🇳🇦", "🇳🇨", "🇳🇪", "🇳🇫", "🇳🇬", "🇳🇮", "🇳🇱", "🇳🇴", "🇳🇵", "🇳🇷", "🇳🇺", "🇳🇿", "🇳", "🇴🇲", "🇴", "🇵🇦", "🇵🇪", "🇵🇫", "🇵🇬", "🇵🇭", "🇵🇰", "🇵🇱", "🇵🇲", "🇵🇳", "🇵🇷", "🇵🇸", "🇵🇹", "🇵🇼", "🇵🇾", "🇵", "🇶🇦", "🇶", "🇷🇪", "🇷🇴", "🇷🇸", "🇷🇺", "🇷🇼", "🇷", "🇸🇦", "🇸🇧", "🇸🇨", "🇸🇩", "🇸🇪", "🇸🇬", "🇸🇭", "🇸🇮", "🇸🇯", "🇸🇰", "🇸🇱", "🇸🇲", "🇸🇳", "🇸🇴", "🇸🇷", "🇸🇸", "🇸🇹", "🇸🇻", "🇸🇽", "🇸🇾", "🇸🇿", "🇸", "🇹🇦", "🇹🇨", "🇹🇩", "🇹🇫", "🇹🇬", "🇹🇭", "🇹🇯", "🇹🇰", "🇹🇱", "🇹🇲", "🇹🇳", "🇹🇴", "🇹🇷", "🇹🇹", "🇹🇻", "🇹🇼", "🇹🇿", "🇹", "🇺🇦", "🇺🇬", "🇺🇲", "🇺🇳", "🇺🇸", "🇺🇾", "🇺🇿", "🇺", "🇻🇦", "🇻🇨", "🇻🇪", "🇻🇬", "🇻🇮", "🇻🇳", "🇻🇺", "🇻", "🇼🇫", "🇼🇸", "🇼", "🇽🇰", "🇽", "🇾🇪", "🇾🇹", "🇾", "🇿🇦", "🇿🇲", "🇿🇼", "🇿", "🈁", "🈂", "🈚", "🈯", "🈲", "🈳", "🈴", "🈵", "🈶", "🈷", "🈸", "🈹", "🈺", "🉐", "🉑", "🌀", "🌁", "🌂", "🌃", "🌄", "🌅", "🌆", "🌇", "🌈", "🌉", "🌊", "🌋", "🌌", "🌍", "🌎", "🌏", "🌐", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌙", "🌚", "🌛", "🌜", "🌝", "🌞", "🌟", "🌠", "🌡", "🌤", "🌥", "🌦", "🌧", "🌨", "🌩", "🌪", "🌫", "🌬", "🌭", "🌮", "🌯", "🌰", "🌱", "🌲", "🌳", "🌴", "🌵", "🌶", "🌷", "🌸", "🌹", "🌺", "🌻", "🌼", "🌽", "🌾", "🌿", "🍀", "🍁", "🍂", "🍃", "🍄", "🍅", "🍆", "🍇", "🍈", "🍉", "🍊", "🍋", "🍌", "🍍", "🍎", "🍏", "🍐", "🍑", "🍒", "🍓", "🍔", "🍕", "🍖", "🍗", "🍘", "🍙", "🍚", "🍛", "🍜", "🍝", "🍞", "🍟", "🍠", "🍡", "🍢", "🍣", "🍤", "🍥", "🍦", "🍧", "🍨", "🍩", "🍪", "🍫", "🍬", "🍭", "🍮", "🍯", "🍰", "🍱", "🍲", "🍳", "🍴", "🍵", "🍶", "🍷", "🍸", "🍹", "🍺", "🍻", "🍼", "🍽", "🍾", "🍿", "🎀", "🎁", "🎂", "🎃", "🎄", "🎅🏻", "🎅🏼", "🎅🏽", "🎅🏾", "🎅🏿", "🎅", "🎆", "🎇", "🎈", "🎉", "🎊", "🎋", "🎌", "🎍", "🎎", "🎏", "🎐", "🎑", "🎒", "🎓", "🎖", "🎗", "🎙", "🎚", "🎛", "🎞", "🎟", "🎠", "🎡", "🎢", "🎣", "🎤", "🎥", "🎦", "🎧", "🎨", "🎩", "🎪", "🎫", "🎬", "🎭", "🎮", "🎯", "🎰", "🎱", "🎲", "🎳", "🎴", "🎵", "🎶", "🎷", "🎸", "🎹", "🎺", "🎻", "🎼", "🎽", "🎾", "🎿", "🏀", "🏁", "🏂🏻", "🏂🏼", "🏂🏽", "🏂🏾", "🏂🏿", "🏂", "🏃🏻‍♀️", "🏃🏻‍♂️", "🏃🏻", "🏃🏼‍♀️", "🏃🏼‍♂️", "🏃🏼", "🏃🏽‍♀️", "🏃🏽‍♂️", "🏃🏽", "🏃🏾‍♀️", "🏃🏾‍♂️", "🏃🏾", "🏃🏿‍♀️", "🏃🏿‍♂️", "🏃🏿", "🏃‍♀️", "🏃‍♂️", "🏃", "🏄🏻‍♀️", "🏄🏻‍♂️", "🏄🏻", "🏄🏼‍♀️", "🏄🏼‍♂️", "🏄🏼", "🏄🏽‍♀️", "🏄🏽‍♂️", "🏄🏽", "🏄🏾‍♀️", "🏄🏾‍♂️", "🏄🏾", "🏄🏿‍♀️", "🏄🏿‍♂️", "🏄🏿", "🏄‍♀️", "🏄‍♂️", "🏄", "🏅", "🏆", "🏇🏻", "🏇🏼", "🏇🏽", "🏇🏾", "🏇🏿", "🏇", "🏈", "🏉", "🏊🏻‍♀️", "🏊🏻‍♂️", "🏊🏻", "🏊🏼‍♀️", "🏊🏼‍♂️", "🏊🏼", "🏊🏽‍♀️", "🏊🏽‍♂️", "🏊🏽", "🏊🏾‍♀️", "🏊🏾‍♂️", "🏊🏾", "🏊🏿‍♀️", "🏊🏿‍♂️", "🏊🏿", "🏊‍♀️", "🏊‍♂️", "🏊", "🏋🏻‍♀️", "🏋🏻‍♂️", "🏋🏻", "🏋🏼‍♀️", "🏋🏼‍♂️", "🏋🏼", "🏋🏽‍♀️", "🏋🏽‍♂️", "🏋🏽", "🏋🏾‍♀️", "🏋🏾‍♂️", "🏋🏾", "🏋🏿‍♀️", "🏋🏿‍♂️", "🏋🏿", "🏋️‍♀️", "🏋️‍♂️", "🏋", "🏌🏻‍♀️", "🏌🏻‍♂️", "🏌🏻", "🏌🏼‍♀️", "🏌🏼‍♂️", "🏌🏼", "🏌🏽‍♀️", "🏌🏽‍♂️", "🏌🏽", "🏌🏾‍♀️", "🏌🏾‍♂️", "🏌🏾", "🏌🏿‍♀️", "🏌🏿‍♂️", "🏌🏿", "🏌️‍♀️", "🏌️‍♂️", "🏌", "🏍", "🏎", "🏏", "🏐", "🏑", "🏒", "🏓", "🏔", "🏕", "🏖", "🏗", "🏘", "🏙", "🏚", "🏛", "🏜", "🏝", "🏞", "🏟", "🏠", "🏡", "🏢", "🏣", "🏤", "🏥", "🏦", "🏧", "🏨", "🏩", "🏪", "🏫", "🏬", "🏭", "🏮", "🏯", "🏰", "🏳️‍🌈", "🏳", "🏴‍☠️", "🏴", "🏵", "🏷", "🏸", "🏹", "🏺", "🏻", "🏼", "🏽", "🏾", "🏿", "🐀", "🐁", "🐂", "🐃", "🐄", "🐅", "🐆", "🐇", "🐈", "🐉", "🐊", "🐋", "🐌", "🐍", "🐎", "🐏", "🐐", "🐑", "🐒", "🐓", "🐔", "🐕", "🐖", "🐗", "🐘", "🐙", "🐚", "🐛", "🐜", "🐝", "🐞", "🐟", "🐠", "🐡", "🐢", "🐣", "🐤", "🐥", "🐦", "🐧", "🐨", "🐩", "🐪", "🐫", "🐬", "🐭", "🐮", "🐯", "🐰", "🐱", "🐲", "🐳", "🐴", "🐵", "🐶", "🐷", "🐸", "🐹", "🐺", "🐻", "🐼", "🐽", "🐾", "🐿", "👀", "👁‍🗨", "👁", "👂🏻", "👂🏼", "👂🏽", "👂🏾", "👂🏿", "👂", "👃🏻", "👃🏼", "👃🏽", "👃🏾", "👃🏿", "👃", "👄", "👅", "👆🏻", "👆🏼", "👆🏽", "👆🏾", "👆🏿", "👆", "👇🏻", "👇🏼", "👇🏽", "👇🏾", "👇🏿", "👇", "👈🏻", "👈🏼", "👈🏽", "👈🏾", "👈🏿", "👈", "👉🏻", "👉🏼", "👉🏽", "👉🏾", "👉🏿", "👉", "👊🏻", "👊🏼", "👊🏽", "👊🏾", "👊🏿", "👊", "👋🏻", "👋🏼", "👋🏽", "👋🏾", "👋🏿", "👋", "👌🏻", "👌🏼", "👌🏽", "👌🏾", "👌🏿", "👌", "👍🏻", "👍🏼", "👍🏽", "👍🏾", "👍🏿", "👍", "👎🏻", "👎🏼", "👎🏽", "👎🏾", "👎🏿", "👎", "👏🏻", "👏🏼", "👏🏽", "👏🏾", "👏🏿", "👏", "👐🏻", "👐🏼", "👐🏽", "👐🏾", "👐🏿", "👐", "👑", "👒", "👓", "👔", "👕", "👖", "👗", "👘", "👙", "👚", "👛", "👜", "👝", "👞", "👟", "👠", "👡", "👢", "👣", "👤", "👥", "👦🏻", "👦🏼", "👦🏽", "👦🏾", "👦🏿", "👦", "👧🏻", "👧🏼", "👧🏽", "👧🏾", "👧🏿", "👧", "👨🏻‍🌾", "👨🏻‍🍳", "👨🏻‍🎓", "👨🏻‍🎤", "👨🏻‍🎨", "👨🏻‍🏫", "👨🏻‍🏭", "👨🏻‍💻", "👨🏻‍💼", "👨🏻‍🔧", "👨🏻‍🔬", "👨🏻‍🚀", "👨🏻‍🚒", "👨🏻‍⚕️", "👨🏻‍⚖️", "👨🏻‍✈️", "👨🏻", "👨🏼‍🌾", "👨🏼‍🍳", "👨🏼‍🎓", "👨🏼‍🎤", "👨🏼‍🎨", "👨🏼‍🏫", "👨🏼‍🏭", "👨🏼‍💻", "👨🏼‍💼", "👨🏼‍🔧", "👨🏼‍🔬", "👨🏼‍🚀", "👨🏼‍🚒", "👨🏼‍⚕️", "👨🏼‍⚖️", "👨🏼‍✈️", "👨🏼", "👨🏽‍🌾", "👨🏽‍🍳", "👨🏽‍🎓", "👨🏽‍🎤", "👨🏽‍🎨", "👨🏽‍🏫", "👨🏽‍🏭", "👨🏽‍💻", "👨🏽‍💼", "👨🏽‍🔧", "👨🏽‍🔬", "👨🏽‍🚀", "👨🏽‍🚒", "👨🏽‍⚕️", "👨🏽‍⚖️", "👨🏽‍✈️", "👨🏽", "👨🏾‍🌾", "👨🏾‍🍳", "👨🏾‍🎓", "👨🏾‍🎤", "👨🏾‍🎨", "👨🏾‍🏫", "👨🏾‍🏭", "👨🏾‍💻", "👨🏾‍💼", "👨🏾‍🔧", "👨🏾‍🔬", "👨🏾‍🚀", "👨🏾‍🚒", "👨🏾‍⚕️", "👨🏾‍⚖️", "👨🏾‍✈️", "👨🏾", "👨🏿‍🌾", "👨🏿‍🍳", "👨🏿‍🎓", "👨🏿‍🎤", "👨🏿‍🎨", "👨🏿‍🏫", "👨🏿‍🏭", "👨🏿‍💻", "👨🏿‍💼", "👨🏿‍🔧", "👨🏿‍🔬", "👨🏿‍🚀", "👨🏿‍🚒", "👨🏿‍⚕️", "👨🏿‍⚖️", "👨🏿‍✈️", "👨🏿", "👨‍🌾", "👨‍🍳", "👨‍🎓", "👨‍🎤", "👨‍🎨", "👨‍🏫", "👨‍🏭", "👨‍👦‍👦", "👨‍👦", "👨‍👧‍👦", "👨‍👧‍👧", "👨‍👧", "👨‍👨‍👦‍👦", "👨‍👨‍👦", "👨‍👨‍👧‍👦", "👨‍👨‍👧‍👧", "👨‍👨‍👧", "👨‍👩‍👦‍👦", "👨‍👩‍👦", "👨‍👩‍👧‍👦", "👨‍👩‍👧‍👧", "👨‍👩‍👧", "👨‍💻", "👨‍💼", "👨‍🔧", "👨‍🔬", "👨‍🚀", "👨‍🚒", "👨‍⚕️", "👨‍⚖️", "👨‍✈️", "👨‍❤️‍👨", "👨‍❤️‍💋‍👨", "👨", "👩🏻‍🌾", "👩🏻‍🍳", "👩🏻‍🎓", "👩🏻‍🎤", "👩🏻‍🎨", "👩🏻‍🏫", "👩🏻‍🏭", "👩🏻‍💻", "👩🏻‍💼", "👩🏻‍🔧", "👩🏻‍🔬", "👩🏻‍🚀", "👩🏻‍🚒", "👩🏻‍⚕️", "👩🏻‍⚖️", "👩🏻‍✈️", "👩🏻", "👩🏼‍🌾", "👩🏼‍🍳", "👩🏼‍🎓", "👩🏼‍🎤", "👩🏼‍🎨", "👩🏼‍🏫", "👩🏼‍🏭", "👩🏼‍💻", "👩🏼‍💼", "👩🏼‍🔧", "👩🏼‍🔬", "👩🏼‍🚀", "👩🏼‍🚒", "👩🏼‍⚕️", "👩🏼‍⚖️", "👩🏼‍✈️", "👩🏼", "👩🏽‍🌾", "👩🏽‍🍳", "👩🏽‍🎓", "👩🏽‍🎤", "👩🏽‍🎨", "👩🏽‍🏫", "👩🏽‍🏭", "👩🏽‍💻", "👩🏽‍💼", "👩🏽‍🔧", "👩🏽‍🔬", "👩🏽‍🚀", "👩🏽‍🚒", "👩🏽‍⚕️", "👩🏽‍⚖️", "👩🏽‍✈️", "👩🏽", "👩🏾‍🌾", "👩🏾‍🍳", "👩🏾‍🎓", "👩🏾‍🎤", "👩🏾‍🎨", "👩🏾‍🏫", "👩🏾‍🏭", "👩🏾‍💻", "👩🏾‍💼", "👩🏾‍🔧", "👩🏾‍🔬", "👩🏾‍🚀", "👩🏾‍🚒", "👩🏾‍⚕️", "👩🏾‍⚖️", "👩🏾‍✈️", "👩🏾", "👩🏿‍🌾", "👩🏿‍🍳", "👩🏿‍🎓", "👩🏿‍🎤", "👩🏿‍🎨", "👩🏿‍🏫", "👩🏿‍🏭", "👩🏿‍💻", "👩🏿‍💼", "👩🏿‍🔧", "👩🏿‍🔬", "👩🏿‍🚀", "👩🏿‍🚒", "👩🏿‍⚕️", "👩🏿‍⚖️", "👩🏿‍✈️", "👩🏿", "👩‍🌾", "👩‍🍳", "👩‍🎓", "👩‍🎤", "👩‍🎨", "👩‍🏫", "👩‍🏭", "👩‍👦‍👦", "👩‍👦", "👩‍👧‍👦", "👩‍👧‍👧", "👩‍👧", "👩‍👩‍👦‍👦", "👩‍👩‍👦", "👩‍👩‍👧‍👦", "👩‍👩‍👧‍👧", "👩‍👩‍👧", "👩‍💻", "👩‍💼", "👩‍🔧", "👩‍🔬", "👩‍🚀", "👩‍🚒", "👩‍⚕️", "👩‍⚖️", "👩‍✈️", "👩‍❤️‍👨", "👩‍❤️‍👩", "👩‍❤️‍💋‍👨", "👩‍❤️‍💋‍👩", "👩", "👪🏻", "👪🏼", "👪🏽", "👪🏾", "👪🏿", "👪", "👫🏻", "👫🏼", "👫🏽", "👫🏾", "👫🏿", "👫", "👬🏻", "👬🏼", "👬🏽", "👬🏾", "👬🏿", "👬", "👭🏻", "👭🏼", "👭🏽", "👭🏾", "👭🏿", "👭", "👮🏻‍♀️", "👮🏻‍♂️", "👮🏻", "👮🏼‍♀️", "👮🏼‍♂️", "👮🏼", "👮🏽‍♀️", "👮🏽‍♂️", "👮🏽", "👮🏾‍♀️", "👮🏾‍♂️", "👮🏾", "👮🏿‍♀️", "👮🏿‍♂️", "👮🏿", "👮‍♀️", "👮‍♂️", "👮", "👯🏻‍♀️", "👯🏻‍♂️", "👯🏻", "👯🏼‍♀️", "👯🏼‍♂️", "👯🏼", "👯🏽‍♀️", "👯🏽‍♂️", "👯🏽", "👯🏾‍♀️", "👯🏾‍♂️", "👯🏾", "👯🏿‍♀️", "👯🏿‍♂️", "👯🏿", "👯‍♀️", "👯‍♂️", "👯", "👰🏻", "👰🏼", "👰🏽", "👰🏾", "👰🏿", "👰", "👱🏻‍♀️", "👱🏻‍♂️", "👱🏻", "👱🏼‍♀️", "👱🏼‍♂️", "👱🏼", "👱🏽‍♀️", "👱🏽‍♂️", "👱🏽", "👱🏾‍♀️", "👱🏾‍♂️", "👱🏾", "👱🏿‍♀️", "👱🏿‍♂️", "👱🏿", "👱‍♀️", "👱‍♂️", "👱", "👲🏻", "👲🏼", "👲🏽", "👲🏾", "👲🏿", "👲", "👳🏻‍♀️", "👳🏻‍♂️", "👳🏻", "👳🏼‍♀️", "👳🏼‍♂️", "👳🏼", "👳🏽‍♀️", "👳🏽‍♂️", "👳🏽", "👳🏾‍♀️", "👳🏾‍♂️", "👳🏾", "👳🏿‍♀️", "👳🏿‍♂️", "👳🏿", "👳‍♀️", "👳‍♂️", "👳", "👴🏻", "👴🏼", "👴🏽", "👴🏾", "👴🏿", "👴", "👵🏻", "👵🏼", "👵🏽", "👵🏾", "👵🏿", "👵", "👶🏻", "👶🏼", "👶🏽", "👶🏾", "👶🏿", "👶", "👷🏻‍♀️", "👷🏻‍♂️", "👷🏻", "👷🏼‍♀️", "👷🏼‍♂️", "👷🏼", "👷🏽‍♀️", "👷🏽‍♂️", "👷🏽", "👷🏾‍♀️", "👷🏾‍♂️", "👷🏾", "👷🏿‍♀️", "👷🏿‍♂️", "👷🏿", "👷‍♀️", "👷‍♂️", "👷", "👸🏻", "👸🏼", "👸🏽", "👸🏾", "👸🏿", "👸", "👹", "👺", "👻", "👼🏻", "👼🏼", "👼🏽", "👼🏾", "👼🏿", "👼", "👽", "👾", "👿", "💀", "💁🏻‍♀️", "💁🏻‍♂️", "💁🏻", "💁🏼‍♀️", "💁🏼‍♂️", "💁🏼", "💁🏽‍♀️", "💁🏽‍♂️", "💁🏽", "💁🏾‍♀️", "💁🏾‍♂️", "💁🏾", "💁🏿‍♀️", "💁🏿‍♂️", "💁🏿", "💁‍♀️", "💁‍♂️", "💁", "💂🏻‍♀️", "💂🏻‍♂️", "💂🏻", "💂🏼‍♀️", "💂🏼‍♂️", "💂🏼", "💂🏽‍♀️", "💂🏽‍♂️", "💂🏽", "💂🏾‍♀️", "💂🏾‍♂️", "💂🏾", "💂🏿‍♀️", "💂🏿‍♂️", "💂🏿", "💂‍♀️", "💂‍♂️", "💂", "💃🏻", "💃🏼", "💃🏽", "💃🏾", "💃🏿", "💃", "💄", "💅🏻", "💅🏼", "💅🏽", "💅🏾", "💅🏿", "💅", "💆🏻‍♀️", "💆🏻‍♂️", "💆🏻", "💆🏼‍♀️", "💆🏼‍♂️", "💆🏼", "💆🏽‍♀️", "💆🏽‍♂️", "💆🏽", "💆🏾‍♀️", "💆🏾‍♂️", "💆🏾", "💆🏿‍♀️", "💆🏿‍♂️", "💆🏿", "💆‍♀️", "💆‍♂️", "💆", "💇🏻‍♀️", "💇🏻‍♂️", "💇🏻", "💇🏼‍♀️", "💇🏼‍♂️", "💇🏼", "💇🏽‍♀️", "💇🏽‍♂️", "💇🏽", "💇🏾‍♀️", "💇🏾‍♂️", "💇🏾", "💇🏿‍♀️", "💇🏿‍♂️", "💇🏿", "💇‍♀️", "💇‍♂️", "💇", "💈", "💉", "💊", "💋", "💌", "💍", "💎", "💏", "💐", "💑", "💒", "💓", "💔", "💕", "💖", "💗", "💘", "💙", "💚", "💛", "💜", "💝", "💞", "💟", "💠", "💡", "💢", "💣", "💤", "💥", "💦", "💧", "💨", "💩", "💪🏻", "💪🏼", "💪🏽", "💪🏾", "💪🏿", "💪", "💫", "💬", "💭", "💮", "💯", "💰", "💱", "💲", "💳", "💴", "💵", "💶", "💷", "💸", "💹", "💺", "💻", "💼", "💽", "💾", "💿", "📀", "📁", "📂", "📃", "📄", "📅", "📆", "📇", "📈", "📉", "📊", "📋", "📌", "📍", "📎", "📏", "📐", "📑", "📒", "📓", "📔", "📕", "📖", "📗", "📘", "📙", "📚", "📛", "📜", "📝", "📞", "📟", "📠", "📡", "📢", "📣", "📤", "📥", "📦", "📧", "📨", "📩", "📪", "📫", "📬", "📭", "📮", "📯", "📰", "📱", "📲", "📳", "📴", "📵", "📶", "📷", "📸", "📹", "📺", "📻", "📼", "📽", "📿", "🔀", "🔁", "🔂", "🔃", "🔄", "🔅", "🔆", "🔇", "🔈", "🔉", "🔊", "🔋", "🔌", "🔍", "🔎", "🔏", "🔐", "🔑", "🔒", "🔓", "🔔", "🔕", "🔖", "🔗", "🔘", "🔙", "🔚", "🔛", "🔜", "🔝", "🔞", "🔟", "🔠", "🔡", "🔢", "🔣", "🔤", "🔥", "🔦", "🔧", "🔨", "🔩", "🔪", "🔫", "🔬", "🔭", "🔮", "🔯", "🔰", "🔱", "🔲", "🔳", "🔴", "🔵", "🔶", "🔷", "🔸", "🔹", "🔺", "🔻", "🔼", "🔽", "🕉", "🕊", "🕋", "🕌", "🕍", "🕎", "🕐", "🕑", "🕒", "🕓", "🕔", "🕕", "🕖", "🕗", "🕘", "🕙", "🕚", "🕛", "🕜", "🕝", "🕞", "🕟", "🕠", "🕡", "🕢", "🕣", "🕤", "🕥", "🕦", "🕧", "🕯", "🕰", "🕳", "🕴🏻", "🕴🏼", "🕴🏽", "🕴🏾", "🕴🏿", "🕴", "🕵🏻‍♀️", "🕵🏻‍♂️", "🕵🏻", "🕵🏼‍♀️", "🕵🏼‍♂️", "🕵🏼", "🕵🏽‍♀️", "🕵🏽‍♂️", "🕵🏽", "🕵🏾‍♀️", "🕵🏾‍♂️", "🕵🏾", "🕵🏿‍♀️", "🕵🏿‍♂️", "🕵🏿", "🕵️‍♀️", "🕵️‍♂️", "🕵", "🕶", "🕷", "🕸", "🕹", "🕺🏻", "🕺🏼", "🕺🏽", "🕺🏾", "🕺🏿", "🕺", "🖇", "🖊", "🖋", "🖌", "🖍", "🖐🏻", "🖐🏼", "🖐🏽", "🖐🏾", "🖐🏿", "🖐", "🖕🏻", "🖕🏼", "🖕🏽", "🖕🏾", "🖕🏿", "🖕", "🖖🏻", "🖖🏼", "🖖🏽", "🖖🏾", "🖖🏿", "🖖", "🖤", "🖥", "🖨", "🖱", "🖲", "🖼", "🗂", "🗃", "🗄", "🗑", "🗒", "🗓", "🗜", "🗝", "🗞", "🗡", "🗣", "🗨", "🗯", "🗳", "🗺", "🗻", "🗼", "🗽", "🗾", "🗿", "😀", "😁", "😂", "😃", "😄", "😅", "😆", "😇", "😈", "😉", "😊", "😋", "😌", "😍", "😎", "😏", "😐", "😑", "😒", "😓", "😔", "😕", "😖", "😗", "😘", "😙", "😚", "😛", "😜", "😝", "😞", "😟", "😠", "😡", "😢", "😣", "😤", "😥", "😦", "😧", "😨", "😩", "😪", "😫", "😬", "😭", "😮", "😯", "😰", "😱", "😲", "😳", "😴", "😵", "😶", "😷", "😸", "😹", "😺", "😻", "😼", "😽", "😾", "😿", "🙀", "🙁", "🙂", "🙃", "🙄", "🙅🏻‍♀️", "🙅🏻‍♂️", "🙅🏻", "🙅🏼‍♀️", "🙅🏼‍♂️", "🙅🏼", "🙅🏽‍♀️", "🙅🏽‍♂️", "🙅🏽", "🙅🏾‍♀️", "🙅🏾‍♂️", "🙅🏾", "🙅🏿‍♀️", "🙅🏿‍♂️", "🙅🏿", "🙅‍♀️", "🙅‍♂️", "🙅", "🙆🏻‍♀️", "🙆🏻‍♂️", "🙆🏻", "🙆🏼‍♀️", "🙆🏼‍♂️", "🙆🏼", "🙆🏽‍♀️", "🙆🏽‍♂️", "🙆🏽", "🙆🏾‍♀️", "🙆🏾‍♂️", "🙆🏾", "🙆🏿‍♀️", "🙆🏿‍♂️", "🙆🏿", "🙆‍♀️", "🙆‍♂️", "🙆", "🙇🏻‍♀️", "🙇🏻‍♂️", "🙇🏻", "🙇🏼‍♀️", "🙇🏼‍♂️", "🙇🏼", "🙇🏽‍♀️", "🙇🏽‍♂️", "🙇🏽", "🙇🏾‍♀️", "🙇🏾‍♂️", "🙇🏾", "🙇🏿‍♀️", "🙇🏿‍♂️", "🙇🏿", "🙇‍♀️", "🙇‍♂️", "🙇", "🙈", "🙉", "🙊", "🙋🏻‍♀️", "🙋🏻‍♂️", "🙋🏻", "🙋🏼‍♀️", "🙋🏼‍♂️", "🙋🏼", "🙋🏽‍♀️", "🙋🏽‍♂️", "🙋🏽", "🙋🏾‍♀️", "🙋🏾‍♂️", "🙋🏾", "🙋🏿‍♀️", "🙋🏿‍♂️", "🙋🏿", "🙋‍♀️", "🙋‍♂️", "🙋", "🙌🏻", "🙌🏼", "🙌🏽", "🙌🏾", "🙌🏿", "🙌", "🙍🏻‍♀️", "🙍🏻‍♂️", "🙍🏻", "🙍🏼‍♀️", "🙍🏼‍♂️", "🙍🏼", "🙍🏽‍♀️", "🙍🏽‍♂️", "🙍🏽", "🙍🏾‍♀️", "🙍🏾‍♂️", "🙍🏾", "🙍🏿‍♀️", "🙍🏿‍♂️", "🙍🏿", "🙍‍♀️", "🙍‍♂️", "🙍", "🙎🏻‍♀️", "🙎🏻‍♂️", "🙎🏻", "🙎🏼‍♀️", "🙎🏼‍♂️", "🙎🏼", "🙎🏽‍♀️", "🙎🏽‍♂️", "🙎🏽", "🙎🏾‍♀️", "🙎🏾‍♂️", "🙎🏾", "🙎🏿‍♀️", "🙎🏿‍♂️", "🙎🏿", "🙎‍♀️", "🙎‍♂️", "🙎", "🙏🏻", "🙏🏼", "🙏🏽", "🙏🏾", "🙏🏿", "🙏", "🚀", "🚁", "🚂", "🚃", "🚄", "🚅", "🚆", "🚇", "🚈", "🚉", "🚊", "🚋", "🚌", "🚍", "🚎", "🚏", "🚐", "🚑", "🚒", "🚓", "🚔", "🚕", "🚖", "🚗", "🚘", "🚙", "🚚", "🚛", "🚜", "🚝", "🚞", "🚟", "🚠", "🚡", "🚢", "🚣🏻‍♀️", "🚣🏻‍♂️", "🚣🏻", "🚣🏼‍♀️", "🚣🏼‍♂️", "🚣🏼", "🚣🏽‍♀️", "🚣🏽‍♂️", "🚣🏽", "🚣🏾‍♀️", "🚣🏾‍♂️", "🚣🏾", "🚣🏿‍♀️", "🚣🏿‍♂️", "🚣🏿", "🚣‍♀️", "🚣‍♂️", "🚣", "🚤", "🚥", "🚦", "🚧", "🚨", "🚩", "🚪", "🚫", "🚬", "🚭", "🚮", "🚯", "🚰", "🚱", "🚲", "🚳", "🚴🏻‍♀️", "🚴🏻‍♂️", "🚴🏻", "🚴🏼‍♀️", "🚴🏼‍♂️", "🚴🏼", "🚴🏽‍♀️", "🚴🏽‍♂️", "🚴🏽", "🚴🏾‍♀️", "🚴🏾‍♂️", "🚴🏾", "🚴🏿‍♀️", "🚴🏿‍♂️", "🚴🏿", "🚴‍♀️", "🚴‍♂️", "🚴", "🚵🏻‍♀️", "🚵🏻‍♂️", "🚵🏻", "🚵🏼‍♀️", "🚵🏼‍♂️", "🚵🏼", "🚵🏽‍♀️", "🚵🏽‍♂️", "🚵🏽", "🚵🏾‍♀️", "🚵🏾‍♂️", "🚵🏾", "🚵🏿‍♀️", "🚵🏿‍♂️", "🚵🏿", "🚵‍♀️", "🚵‍♂️", "🚵", "🚶🏻‍♀️", "🚶🏻‍♂️", "🚶🏻", "🚶🏼‍♀️", "🚶🏼‍♂️", "🚶🏼", "🚶🏽‍♀️", "🚶🏽‍♂️", "🚶🏽", "🚶🏾‍♀️", "🚶🏾‍♂️", "🚶🏾", "🚶🏿‍♀️", "🚶🏿‍♂️", "🚶🏿", "🚶‍♀️", "🚶‍♂️", "🚶", "🚷", "🚸", "🚹", "🚺", "🚻", "🚼", "🚽", "🚾", "🚿", "🛀🏻", "🛀🏼", "🛀🏽", "🛀🏾", "🛀🏿", "🛀", "🛁", "🛂", "🛃", "🛄", "🛅", "🛋", "🛌🏻", "🛌🏼", "🛌🏽", "🛌🏾", "🛌🏿", "🛌", "🛍", "🛎", "🛏", "🛐", "🛑", "🛒", "🛠", "🛡", "🛢", "🛣", "🛤", "🛥", "🛩", "🛫", "🛬", "🛰", "🛳", "🛴", "🛵", "🛶", "🤐", "🤑", "🤒", "🤓", "🤔", "🤕", "🤖", "🤗", "🤘🏻", "🤘🏼", "🤘🏽", "🤘🏾", "🤘🏿", "🤘", "🤙🏻", "🤙🏼", "🤙🏽", "🤙🏾", "🤙🏿", "🤙", "🤚🏻", "🤚🏼", "🤚🏽", "🤚🏾", "🤚🏿", "🤚", "🤛🏻", "🤛🏼", "🤛🏽", "🤛🏾", "🤛🏿", "🤛", "🤜🏻", "🤜🏼", "🤜🏽", "🤜🏾", "🤜🏿", "🤜", "🤝🏻", "🤝🏼", "🤝🏽", "🤝🏾", "🤝🏿", "🤝", "🤞🏻", "🤞🏼", "🤞🏽", "🤞🏾", "🤞🏿", "🤞", "🤠", "🤡", "🤢", "🤣", "🤤", "🤥", "🤦🏻‍♀️", "🤦🏻‍♂️", "🤦🏻", "🤦🏼‍♀️", "🤦🏼‍♂️", "🤦🏼", "🤦🏽‍♀️", "🤦🏽‍♂️", "🤦🏽", "🤦🏾‍♀️", "🤦🏾‍♂️", "🤦🏾", "🤦🏿‍♀️", "🤦🏿‍♂️", "🤦🏿", "🤦‍♀️", "🤦‍♂️", "🤦", "🤧", "🤰🏻", "🤰🏼", "🤰🏽", "🤰🏾", "🤰🏿", "🤰", "🤳🏻", "🤳🏼", "🤳🏽", "🤳🏾", "🤳🏿", "🤳", "🤴🏻", "🤴🏼", "🤴🏽", "🤴🏾", "🤴🏿", "🤴", "🤵🏻", "🤵🏼", "🤵🏽", "🤵🏾", "🤵🏿", "🤵", "🤶🏻", "🤶🏼", "🤶🏽", "🤶🏾", "🤶🏿", "🤶", "🤷🏻‍♀️", "🤷🏻‍♂️", "🤷🏻", "🤷🏼‍♀️", "🤷🏼‍♂️", "🤷🏼", "🤷🏽‍♀️", "🤷🏽‍♂️", "🤷🏽", "🤷🏾‍♀️", "🤷🏾‍♂️", "🤷🏾", "🤷🏿‍♀️", "🤷🏿‍♂️", "🤷🏿", "🤷‍♀️", "🤷‍♂️", "🤷", "🤸🏻‍♀️", "🤸🏻‍♂️", "🤸🏻", "🤸🏼‍♀️", "🤸🏼‍♂️", "🤸🏼", "🤸🏽‍♀️", "🤸🏽‍♂️", "🤸🏽", "🤸🏾‍♀️", "🤸🏾‍♂️", "🤸🏾", "🤸🏿‍♀️", "🤸🏿‍♂️", "🤸🏿", "🤸‍♀️", "🤸‍♂️", "🤸", "🤹🏻‍♀️", "🤹🏻‍♂️", "🤹🏻", "🤹🏼‍♀️", "🤹🏼‍♂️", "🤹🏼", "🤹🏽‍♀️", "🤹🏽‍♂️", "🤹🏽", "🤹🏾‍♀️", "🤹🏾‍♂️", "🤹🏾", "🤹🏿‍♀️", "🤹🏿‍♂️", "🤹🏿", "🤹‍♀️", "🤹‍♂️", "🤹", "🤺", "🤼🏻‍♀️", "🤼🏻‍♂️", "🤼🏻", "🤼🏼‍♀️", "🤼🏼‍♂️", "🤼🏼", "🤼🏽‍♀️", "🤼🏽‍♂️", "🤼🏽", "🤼🏾‍♀️", "🤼🏾‍♂️", "🤼🏾", "🤼🏿‍♀️", "🤼🏿‍♂️", "🤼🏿", "🤼‍♀️", "🤼‍♂️", "🤼", "🤽🏻‍♀️", "🤽🏻‍♂️", "🤽🏻", "🤽🏼‍♀️", "🤽🏼‍♂️", "🤽🏼", "🤽🏽‍♀️", "🤽🏽‍♂️", "🤽🏽", "🤽🏾‍♀️", "🤽🏾‍♂️", "🤽🏾", "🤽🏿‍♀️", "🤽🏿‍♂️", "🤽🏿", "🤽‍♀️", "🤽‍♂️", "🤽", "🤾🏻‍♀️", "🤾🏻‍♂️", "🤾🏻", "🤾🏼‍♀️", "🤾🏼‍♂️", "🤾🏼", "🤾🏽‍♀️", "🤾🏽‍♂️", "🤾🏽", "🤾🏾‍♀️", "🤾🏾‍♂️", "🤾🏾", "🤾🏿‍♀️", "🤾🏿‍♂️", "🤾🏿", "🤾‍♀️", "🤾‍♂️", "🤾", "🥀", "🥁", "🥂", "🥃", "🥄", "🥅", "🥇", "🥈", "🥉", "🥊", "🥋", "🥐", "🥑", "🥒", "🥓", "🥔", "🥕", "🥖", "🥗", "🥘", "🥙", "🥚", "🥛", "🥜", "🥝", "🥞", "🦀", "🦁", "🦂", "🦃", "🦄", "🦅", "🦆", "🦇", "🦈", "🦉", "🦊", "🦋", "🦌", "🦍", "🦎", "🦏", "🦐", "🦑", "🧀", "‼", "⁉", "™", "ℹ", "↔", "↕", "↖", "↗", "↘", "↙", "↩", "↪", "#⃣", "⌚", "⌛", "⌨", "⏏", "⏩", "⏪", "⏫", "⏬", "⏭", "⏮", "⏯", "⏰", "⏱", "⏲", "⏳", "⏸", "⏹", "⏺", "Ⓜ", "▪", "▫", "▶", "◀", "◻", "◼", "◽", "◾", "☀", "☁", "☂", "☃", "☄", "☎", "☑", "☔", "☕", "☘", "☝🏻", "☝🏼", "☝🏽", "☝🏾", "☝🏿", "☝", "☠", "☢", "☣", "☦", "☪", "☮", "☯", "☸", "☹", "☺", "♀", "♂", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "♠", "♣", "♥", "♦", "♨", "♻", "♿", "⚒", "⚓", "⚔", "⚕", "⚖", "⚗", "⚙", "⚛", "⚜", "⚠", "⚡", "⚪", "⚫", "⚰", "⚱", "⚽", "⚾", "⛄", "⛅", "⛈", "⛎", "⛏", "⛑", "⛓", "⛔", "⛩", "⛪", "⛰", "⛱", "⛲", "⛳", "⛴", "⛵", "⛷🏻", "⛷🏼", "⛷🏽", "⛷🏾", "⛷🏿", "⛷", "⛸", "⛹🏻‍♀️", "⛹🏻‍♂️", "⛹🏻", "⛹🏼‍♀️", "⛹🏼‍♂️", "⛹🏼", "⛹🏽‍♀️", "⛹🏽‍♂️", "⛹🏽", "⛹🏾‍♀️", "⛹🏾‍♂️", "⛹🏾", "⛹🏿‍♀️", "⛹🏿‍♂️", "⛹🏿", "⛹️‍♀️", "⛹️‍♂️", "⛹", "⛺", "⛽", "✂", "✅", "✈", "✉", "✊🏻", "✊🏼", "✊🏽", "✊🏾", "✊🏿", "✊", "✋🏻", "✋🏼", "✋🏽", "✋🏾", "✋🏿", "✋", "✌🏻", "✌🏼", "✌🏽", "✌🏾", "✌🏿", "✌", "✍🏻", "✍🏼", "✍🏽", "✍🏾", "✍🏿", "✍", "✏", "✒", "✔", "✖", "✝", "✡", "✨", "✳", "✴", "❄", "❇", "❌", "❎", "❓", "❔", "❕", "❗", "❣", "❤", "➕", "➖", "➗", "➡", "➰", "➿", "⤴", "⤵", "*⃣", "⬅", "⬆", "⬇", "⬛", "⬜", "⭐", "⭕", "0⃣", "〰", "〽", "1⃣", "2⃣", "㊗", "㊙", "3⃣", "4⃣", "5⃣", "6⃣", "7⃣", "8⃣", "9⃣", "©", "®", ""];

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) {
      listeners[i].apply(this, args);
    }
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) {
      this.removeListener(type, listeners[listeners.length - 1]);
    }
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

/***/ }),

/***/ "./node_modules/evp_bytestokey/index.js":
/*!**********************************************!*\
  !*** ./node_modules/evp_bytestokey/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");

/* eslint-disable camelcase */
function EVP_BytesToKey(password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
  }

  var keyLen = keyBits / 8;
  var key = Buffer.alloc(keyLen);
  var iv = Buffer.alloc(ivLen || 0);
  var tmp = Buffer.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5();
    hash.update(tmp);
    hash.update(password);
    if (salt) hash.update(salt);
    tmp = hash.digest();

    var used = 0;

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, tmp.length);
      tmp.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, tmp.length - used);
      tmp.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  tmp.fill(0);
  return { key: key, iv: iv };
}

module.exports = EVP_BytesToKey;

/***/ }),

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) == 'object' && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) == 'object') {
    var arrA = isArray(a),
        arrB = isArray(b),
        i,
        length,
        key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }return true;
    }

    if (arrA != arrB) return false;

    var dateA = a instanceof Date,
        dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();

    var regexpA = a instanceof RegExp,
        regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();

    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!hasProp.call(b, keys[i])) return false;
    }for (i = length; i-- !== 0;) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return a !== a && b !== b;
};

/***/ }),

/***/ "./node_modules/fast-json-stable-stringify/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/fast-json-stable-stringify/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function (data, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

    var cmp = opts.cmp && function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    }(opts.cmp);

    var seen = [];
    return function stringify(node) {
        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        if (node === undefined) return;
        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
        if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') return JSON.stringify(node);

        var i, out;
        if (Array.isArray(node)) {
            out = '[';
            for (i = 0; i < node.length; i++) {
                if (i) out += ',';
                out += stringify(node[i]) || 'null';
            }
            return out + ']';
        }

        if (node === null) return 'null';

        if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify('__cycle__');
            throw new TypeError('Converting circular structure to JSON');
        }

        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = '';
        for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node[key]);

            if (!value) continue;
            if (out) out += ',';
            out += JSON.stringify(key) + ':' + value;
        }
        seen.splice(seenIndex, 1);
        return '{' + out + '}';
    }(data);
};

/***/ }),

/***/ "./node_modules/hash-base/index.js":
/*!*****************************************!*\
  !*** ./node_modules/hash-base/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform.call(this);

  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];

  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;
  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;
  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

  // consume data
  var block = this._block;
  var offset = 0;
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) {
      block[i++] = data[offset++];
    }this._update();
    this._blockOffset = 0;
  }
  while (offset < data.length) {
    block[this._blockOffset++] = data[offset++];
  } // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();
  if (encoding !== undefined) digest = digest.toString(encoding);

  // reset state
  this._block.fill(0);
  this._blockOffset = 0;
  for (var i = 0; i < 4; ++i) {
    this._length[i] = 0;
  }return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = exports;

hash.utils = __webpack_require__(/*! ./hash/utils */ "./node_modules/hash.js/lib/hash/utils.js");
hash.common = __webpack_require__(/*! ./hash/common */ "./node_modules/hash.js/lib/hash/common.js");
hash.sha = __webpack_require__(/*! ./hash/sha */ "./node_modules/hash.js/lib/hash/sha.js");
hash.ripemd = __webpack_require__(/*! ./hash/ripemd */ "./node_modules/hash.js/lib/hash/ripemd.js");
hash.hmac = __webpack_require__(/*! ./hash/hmac */ "./node_modules/hash.js/lib/hash/hmac.js");

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();

  BlockHash.call(this);

  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(/*! ./sha/1 */ "./node_modules/hash.js/lib/hash/sha/1.js");
exports.sha224 = __webpack_require__(/*! ./sha/224 */ "./node_modules/hash.js/lib/hash/sha/224.js");
exports.sha256 = __webpack_require__(/*! ./sha/256 */ "./node_modules/hash.js/lib/hash/sha/256.js");
exports.sha384 = __webpack_require__(/*! ./sha/384 */ "./node_modules/hash.js/lib/hash/sha/384.js");
exports.sha512 = __webpack_require__(/*! ./sha/512 */ "./node_modules/hash.js/lib/hash/sha/512.js");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();

  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var SHA256 = __webpack_require__(/*! ./256 */ "./node_modules/hash.js/lib/hash/sha/256.js");

function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();

  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function SHA256() {
  if (!(this instanceof SHA256)) return new SHA256();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var SHA512 = __webpack_require__(/*! ./512 */ "./node_modules/hash.js/lib/hash/sha/512.js");

function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();

  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

function SHA512() {
  if (!(this instanceof SHA512)) return new SHA512();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34
  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34
  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return a + b >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

/***/ }),

/***/ "./node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*************************************************!*\
  !*** ./node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");
var utils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");
var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);
  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;

  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/indexof/index.js":
/*!***************************************!*\
  !*** ./node_modules/indexof/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/json-schema-traverse/index.js":
/*!****************************************************!*\
  !*** ./node_modules/json-schema-traverse/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var traverse = module.exports = function (schema, opts, cb) {
  // Legacy support for v0.3.1 and earlier.
  if (typeof opts == 'function') {
    cb = opts;
    opts = {};
  }

  cb = opts.cb || cb;
  var pre = typeof cb == 'function' ? cb : cb.pre || function () {};
  var post = cb.post || function () {};

  _traverse(opts, pre, post, schema, '', schema);
};

traverse.keywords = {
  additionalItems: true,
  items: true,
  contains: true,
  additionalProperties: true,
  propertyNames: true,
  not: true
};

traverse.arrayKeywords = {
  items: true,
  allOf: true,
  anyOf: true,
  oneOf: true
};

traverse.propsKeywords = {
  definitions: true,
  properties: true,
  patternProperties: true,
  dependencies: true
};

traverse.skipKeywords = {
  default: true,
  enum: true,
  const: true,
  required: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  multipleOf: true,
  maxLength: true,
  minLength: true,
  pattern: true,
  format: true,
  maxItems: true,
  minItems: true,
  uniqueItems: true,
  maxProperties: true,
  minProperties: true
};

function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
  if (schema && (typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) == 'object' && !Array.isArray(schema)) {
    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    for (var key in schema) {
      var sch = schema[key];
      if (Array.isArray(sch)) {
        if (key in traverse.arrayKeywords) {
          for (var i = 0; i < sch.length; i++) {
            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
          }
        }
      } else if (key in traverse.propsKeywords) {
        if (sch && (typeof sch === 'undefined' ? 'undefined' : _typeof(sch)) == 'object') {
          for (var prop in sch) {
            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
          }
        }
      } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
      }
    }
    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
  }
}

function escapeJsonPtr(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

/***/ }),

/***/ "./node_modules/json5/lib/json5.js":
/*!*****************************************!*\
  !*** ./node_modules/json5/lib/json5.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// json5.js
// Modern JSON. See README.md for details.
//
// This file is based directly off of Douglas Crockford's json_parse.js:
// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

var JSON5 = ( false ? undefined : _typeof(exports)) === 'object' ? exports : {};

JSON5.parse = function () {
    "use strict";

    // This is a function that can parse a JSON5 text, producing a JavaScript
    // data structure. It is a simple, recursive descent parser. It does not use
    // eval or regular expressions, so it can be used as a model for implementing
    // a JSON5 parser in other languages.

    // We are defining the function inside of another function to avoid creating
    // global variables.

    var at,
        // The index of the current character
    lineNumber,
        // The current line number
    columnNumber,
        // The current column number
    ch,
        // The current character
    escapee = {
        "'": "'",
        '"': '"',
        '\\': '\\',
        '/': '/',
        '\n': '', // Replace escaped newlines in strings w/ empty string
        b: '\b',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t'
    },
        ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', "\uFEFF"],
        text,
        renderChar = function renderChar(chr) {
        return chr === '' ? 'EOF' : "'" + chr + "'";
    },
        error = function error(m) {

        // Call error when something is wrong.

        var error = new SyntaxError();
        // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
        error.message = m + " at line " + lineNumber + " column " + columnNumber + " of the JSON5 data. Still to read: " + JSON.stringify(text.substring(at - 1, at + 19));
        error.at = at;
        // These two property names have been chosen to agree with the ones in Gecko, the only popular
        // environment which seems to supply this info on JSON.parse
        error.lineNumber = lineNumber;
        error.columnNumber = columnNumber;
        throw error;
    },
        next = function next(c) {

        // If a c parameter is provided, verify that it matches the current character.

        if (c && c !== ch) {
            error("Expected " + renderChar(c) + " instead of " + renderChar(ch));
        }

        // Get the next character. When there are no more characters,
        // return the empty string.

        ch = text.charAt(at);
        at++;
        columnNumber++;
        if (ch === '\n' || ch === '\r' && peek() !== '\n') {
            lineNumber++;
            columnNumber = 0;
        }
        return ch;
    },
        peek = function peek() {

        // Get the next character without consuming it or
        // assigning it to the ch varaible.

        return text.charAt(at);
    },
        identifier = function identifier() {

        // Parse an identifier. Normally, reserved words are disallowed here, but we
        // only use this for unquoted object keys, where reserved words are allowed,
        // so we don't check for those here. References:
        // - http://es5.github.com/#x7.6
        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
        // TODO Identifiers can have Unicode "letters" in them; add support for those.

        var key = ch;

        // Identifiers must start with a letter, _ or $.
        if (ch !== '_' && ch !== '$' && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
            error("Bad identifier as unquoted key");
        }

        // Subsequent characters can contain digits.
        while (next() && (ch === '_' || ch === '$' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9')) {
            key += ch;
        }

        return key;
    },
        number = function number() {

        // Parse a number value.

        var number,
            sign = '',
            string = '',
            base = 10;

        if (ch === '-' || ch === '+') {
            sign = ch;
            next(ch);
        }

        // support for Infinity (could tweak to allow other words):
        if (ch === 'I') {
            number = word();
            if (typeof number !== 'number' || isNaN(number)) {
                error('Unexpected word for number');
            }
            return sign === '-' ? -number : number;
        }

        // support for NaN
        if (ch === 'N') {
            number = word();
            if (!isNaN(number)) {
                error('expected word to be NaN');
            }
            // ignore sign as -NaN also is NaN
            return number;
        }

        if (ch === '0') {
            string += ch;
            next();
            if (ch === 'x' || ch === 'X') {
                string += ch;
                next();
                base = 16;
            } else if (ch >= '0' && ch <= '9') {
                error('Octal literal');
            }
        }

        switch (base) {
            case 10:
                while (ch >= '0' && ch <= '9') {
                    string += ch;
                    next();
                }
                if (ch === '.') {
                    string += '.';
                    while (next() && ch >= '0' && ch <= '9') {
                        string += ch;
                    }
                }
                if (ch === 'e' || ch === 'E') {
                    string += ch;
                    next();
                    if (ch === '-' || ch === '+') {
                        string += ch;
                        next();
                    }
                    while (ch >= '0' && ch <= '9') {
                        string += ch;
                        next();
                    }
                }
                break;
            case 16:
                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                    string += ch;
                    next();
                }
                break;
        }

        if (sign === '-') {
            number = -string;
        } else {
            number = +string;
        }

        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
        string = function string() {

        // Parse a string value.

        var hex,
            i,
            string = '',
            delim,
            // double quote or single quote
        uffff;

        // When parsing for string values, we must look for ' or " and \ characters.

        if (ch === '"' || ch === "'") {
            delim = ch;
            while (next()) {
                if (ch === delim) {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (ch === '\r') {
                        if (peek() === '\n') {
                            next();
                        }
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else if (ch === '\n') {
                    // unescaped newlines are invalid; see:
                    // https://github.com/aseemk/json5/issues/24
                    // TODO this feels special-cased; are there other
                    // invalid unescaped chars?
                    break;
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },
        inlineComment = function inlineComment() {

        // Skip an inline comment, assuming this is one. The current character should
        // be the second / character in the // pair that begins this inline comment.
        // To finish the inline comment, we look for a newline or the end of the text.

        if (ch !== '/') {
            error("Not an inline comment");
        }

        do {
            next();
            if (ch === '\n' || ch === '\r') {
                next();
                return;
            }
        } while (ch);
    },
        blockComment = function blockComment() {

        // Skip a block comment, assuming this is one. The current character should be
        // the * character in the /* pair that begins this block comment.
        // To finish the block comment, we look for an ending */ pair of characters,
        // but we also watch for the end of text before the comment is terminated.

        if (ch !== '*') {
            error("Not a block comment");
        }

        do {
            next();
            while (ch === '*') {
                next('*');
                if (ch === '/') {
                    next('/');
                    return;
                }
            }
        } while (ch);

        error("Unterminated block comment");
    },
        comment = function comment() {

        // Skip a comment, whether inline or block-level, assuming this is one.
        // Comments always begin with a / character.

        if (ch !== '/') {
            error("Not a comment");
        }

        next('/');

        if (ch === '/') {
            inlineComment();
        } else if (ch === '*') {
            blockComment();
        } else {
            error("Unrecognized comment");
        }
    },
        white = function white() {

        // Skip whitespace and comments.
        // Note that we're detecting comments by only a single / character.
        // This works since regular expressions are not valid JSON(5), but this will
        // break if there are other valid values that begin with a / character!

        while (ch) {
            if (ch === '/') {
                comment();
            } else if (ws.indexOf(ch) >= 0) {
                next();
            } else {
                return;
            }
        }
    },
        word = function word() {

        // true, false, or null.

        switch (ch) {
            case 't':
                next('t');
                next('r');
                next('u');
                next('e');
                return true;
            case 'f':
                next('f');
                next('a');
                next('l');
                next('s');
                next('e');
                return false;
            case 'n':
                next('n');
                next('u');
                next('l');
                next('l');
                return null;
            case 'I':
                next('I');
                next('n');
                next('f');
                next('i');
                next('n');
                next('i');
                next('t');
                next('y');
                return Infinity;
            case 'N':
                next('N');
                next('a');
                next('N');
                return NaN;
        }
        error("Unexpected " + renderChar(ch));
    },
        value,
        // Place holder for the value function.

    array = function array() {

        // Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            while (ch) {
                if (ch === ']') {
                    next(']');
                    return array; // Potentially empty array
                }
                // ES5 allows omitting elements in arrays, e.g. [,] and
                // [,null]. We don't allow this in JSON5.
                if (ch === ',') {
                    error("Missing array element");
                } else {
                    array.push(value());
                }
                white();
                // If there's no comma after this value, this needs to
                // be the end of the array.
                if (ch !== ',') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },
        object = function object() {

        // Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            while (ch) {
                if (ch === '}') {
                    next('}');
                    return object; // Potentially empty object
                }

                // Keys can be unquoted. If they are, they need to be
                // valid JS identifiers.
                if (ch === '"' || ch === "'") {
                    key = string();
                } else {
                    key = identifier();
                }

                white();
                next(':');
                object[key] = value();
                white();
                // If there's no comma after this pair, this needs to be
                // the end of the object.
                if (ch !== ',') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

    value = function value() {

        // Parse a JSON value. It could be an object, an array, a string, a number,
        // or a word.

        white();
        switch (ch) {
            case '{':
                return object();
            case '[':
                return array();
            case '"':
            case "'":
                return string();
            case '-':
            case '+':
            case '.':
                return number();
            default:
                return ch >= '0' && ch <= '9' ? number() : word();
        }
    };

    // Return the json_parse function. It will have access to all of the above
    // functions and variables.

    return function (source, reviver) {
        var result;

        text = String(source);
        at = 0;
        lineNumber = 1;
        columnNumber = 1;
        ch = ' ';
        result = value();
        white();
        if (ch) {
            error("Syntax error");
        }

        // If there is a reviver function, we recursively walk the new structure,
        // passing each name/value pair to the reviver function for possible
        // transformation, starting with a temporary root object that holds the result
        // in an empty key. If there is not a reviver function, we simply return the
        // result.

        return typeof reviver === 'function' ? function walk(holder, key) {
            var k,
                v,
                value = holder[key];
            if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = walk(value, k);
                        if (v !== undefined) {
                            value[k] = v;
                        } else {
                            delete value[k];
                        }
                    }
                }
            }
            return reviver.call(holder, key, value);
        }({ '': result }, '') : result;
    };
}();

// JSON5 stringify will not quote keys where appropriate
JSON5.stringify = function (obj, replacer, space) {
    if (replacer && typeof replacer !== "function" && !isArray(replacer)) {
        throw new Error('Replacer must be a function or an array');
    }
    var getReplacedValueOrUndefined = function getReplacedValueOrUndefined(holder, key, isTopLevel) {
        var value = holder[key];

        // Replace the value with its toJSON value first, if possible
        if (value && value.toJSON && typeof value.toJSON === "function") {
            value = value.toJSON();
        }

        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
        if (typeof replacer === "function") {
            return replacer.call(holder, key, value);
        } else if (replacer) {
            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
                return value;
            } else {
                return undefined;
            }
        } else {
            return value;
        }
    };

    function isWordChar(c) {
        return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '_' || c === '$';
    }

    function isWordStart(c) {
        return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '_' || c === '$';
    }

    function isWord(key) {
        if (typeof key !== 'string') {
            return false;
        }
        if (!isWordStart(key[0])) {
            return false;
        }
        var i = 1,
            length = key.length;
        while (i < length) {
            if (!isWordChar(key[i])) {
                return false;
            }
            i++;
        }
        return true;
    }

    // export for use in tests
    JSON5.isWord = isWord;

    // polyfills
    function isArray(obj) {
        if (Array.isArray) {
            return Array.isArray(obj);
        } else {
            return Object.prototype.toString.call(obj) === '[object Array]';
        }
    }

    function isDate(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    var objStack = [];
    function checkForCircular(obj) {
        for (var i = 0; i < objStack.length; i++) {
            if (objStack[i] === obj) {
                throw new TypeError("Converting circular structure to JSON");
            }
        }
    }

    function makeIndent(str, num, noNewLine) {
        if (!str) {
            return "";
        }
        // indentation no more than 10 chars
        if (str.length > 10) {
            str = str.substring(0, 10);
        }

        var indent = noNewLine ? "" : "\n";
        for (var i = 0; i < num; i++) {
            indent += str;
        }

        return indent;
    }

    var indentStr;
    if (space) {
        if (typeof space === "string") {
            indentStr = space;
        } else if (typeof space === "number" && space >= 0) {
            indentStr = makeIndent(" ", space, true);
        } else {
            // ignore space parameter
        }
    }

    // Copied from Crokford's implementation of JSON
    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
    // Begin
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        meta = { // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    };
    function escapeString(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    // End

    function internalStringify(holder, key, isTopLevel) {
        var buffer, res;

        // Replace the value, if necessary
        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

        if (obj_part && !isDate(obj_part)) {
            // unbox objects
            // don't unbox dates, since will turn it into number
            obj_part = obj_part.valueOf();
        }
        switch (typeof obj_part === "undefined" ? "undefined" : _typeof(obj_part)) {
            case "boolean":
                return obj_part.toString();

            case "number":
                if (isNaN(obj_part) || !isFinite(obj_part)) {
                    return "null";
                }
                return obj_part.toString();

            case "string":
                return escapeString(obj_part.toString());

            case "object":
                if (obj_part === null) {
                    return "null";
                } else if (isArray(obj_part)) {
                    checkForCircular(obj_part);
                    buffer = "[";
                    objStack.push(obj_part);

                    for (var i = 0; i < obj_part.length; i++) {
                        res = internalStringify(obj_part, i, false);
                        buffer += makeIndent(indentStr, objStack.length);
                        if (res === null || typeof res === "undefined") {
                            buffer += "null";
                        } else {
                            buffer += res;
                        }
                        if (i < obj_part.length - 1) {
                            buffer += ",";
                        } else if (indentStr) {
                            buffer += "\n";
                        }
                    }
                    objStack.pop();
                    if (obj_part.length) {
                        buffer += makeIndent(indentStr, objStack.length, true);
                    }
                    buffer += "]";
                } else {
                    checkForCircular(obj_part);
                    buffer = "{";
                    var nonEmpty = false;
                    objStack.push(obj_part);
                    for (var prop in obj_part) {
                        if (obj_part.hasOwnProperty(prop)) {
                            var value = internalStringify(obj_part, prop, false);
                            isTopLevel = false;
                            if (typeof value !== "undefined" && value !== null) {
                                buffer += makeIndent(indentStr, objStack.length);
                                nonEmpty = true;
                                key = isWord(prop) ? prop : escapeString(prop);
                                buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
                            }
                        }
                    }
                    objStack.pop();
                    if (nonEmpty) {
                        buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + "}";
                    } else {
                        buffer = '{}';
                    }
                }
                return buffer;
            default:
                // functions and undefined should be ignored
                return undefined;
        }
    }

    // special case...when undefined is used inside of
    // a compound object/array, return null.
    // but when top-level, return undefined
    var topLevelHolder = { "": obj };
    if (obj === undefined) {
        return getReplacedValueOrUndefined(topLevelHolder, '', true);
    }
    return internalStringify(topLevelHolder, '', true);
};

/***/ }),

/***/ "./node_modules/loader-utils/lib/getCurrentRequest.js":
/*!************************************************************!*\
  !*** ./node_modules/loader-utils/lib/getCurrentRequest.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentRequest(loaderContext) {
	if (loaderContext.currentRequest) return loaderContext.currentRequest;
	var request = loaderContext.loaders.slice(loaderContext.loaderIndex).map(function (obj) {
		return obj.request;
	}).concat([loaderContext.resource]);
	return request.join("!");
}

module.exports = getCurrentRequest;

/***/ }),

/***/ "./node_modules/loader-utils/lib/getHashDigest.js":
/*!********************************************************!*\
  !*** ./node_modules/loader-utils/lib/getHashDigest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var baseEncodeTables = {
	26: "abcdefghijklmnopqrstuvwxyz",
	32: "123456789abcdefghjkmnpqrstuvwxyz", // no 0lio
	36: "0123456789abcdefghijklmnopqrstuvwxyz",
	49: "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no lIO
	52: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
	58: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no 0lIO
	62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
	64: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
};

function encodeBufferToBase(buffer, base) {
	var encodeTable = baseEncodeTables[base];
	if (!encodeTable) throw new Error("Unknown encoding base" + base);

	var readLength = buffer.length;

	var Big = __webpack_require__(/*! big.js */ "./node_modules/big.js/big.js");
	Big.RM = Big.DP = 0;
	var b = new Big(0);
	for (var i = readLength - 1; i >= 0; i--) {
		b = b.times(256).plus(buffer[i]);
	}

	var output = "";
	while (b.gt(0)) {
		output = encodeTable[b.mod(base)] + output;
		b = b.div(base);
	}

	Big.DP = 20;
	Big.RM = 1;

	return output;
}

function getHashDigest(buffer, hashType, digestType, maxLength) {
	hashType = hashType || "md5";
	maxLength = maxLength || 9999;
	var hash = __webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js").createHash(hashType);
	hash.update(buffer);
	if (digestType === "base26" || digestType === "base32" || digestType === "base36" || digestType === "base49" || digestType === "base52" || digestType === "base58" || digestType === "base62" || digestType === "base64") {
		return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);
	} else {
		return hash.digest(digestType || "hex").substr(0, maxLength);
	}
}

module.exports = getHashDigest;

/***/ }),

/***/ "./node_modules/loader-utils/lib/getOptions.js":
/*!*****************************************************!*\
  !*** ./node_modules/loader-utils/lib/getOptions.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var parseQuery = __webpack_require__(/*! ./parseQuery */ "./node_modules/loader-utils/lib/parseQuery.js");

function getOptions(loaderContext) {
	var query = loaderContext.query;
	if (typeof query === "string" && query !== "") {
		return parseQuery(loaderContext.query);
	}
	if (!query || (typeof query === "undefined" ? "undefined" : _typeof(query)) !== "object") {
		// Not object-like queries are not supported.
		return null;
	}
	return query;
}

module.exports = getOptions;

/***/ }),

/***/ "./node_modules/loader-utils/lib/getRemainingRequest.js":
/*!**************************************************************!*\
  !*** ./node_modules/loader-utils/lib/getRemainingRequest.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getRemainingRequest(loaderContext) {
	if (loaderContext.remainingRequest) return loaderContext.remainingRequest;
	var request = loaderContext.loaders.slice(loaderContext.loaderIndex + 1).map(function (obj) {
		return obj.request;
	}).concat([loaderContext.resource]);
	return request.join("!");
}

module.exports = getRemainingRequest;

/***/ }),

/***/ "./node_modules/loader-utils/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/loader-utils/lib/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getOptions = __webpack_require__(/*! ./getOptions */ "./node_modules/loader-utils/lib/getOptions.js");
var parseQuery = __webpack_require__(/*! ./parseQuery */ "./node_modules/loader-utils/lib/parseQuery.js");
var stringifyRequest = __webpack_require__(/*! ./stringifyRequest */ "./node_modules/loader-utils/lib/stringifyRequest.js");
var getRemainingRequest = __webpack_require__(/*! ./getRemainingRequest */ "./node_modules/loader-utils/lib/getRemainingRequest.js");
var getCurrentRequest = __webpack_require__(/*! ./getCurrentRequest */ "./node_modules/loader-utils/lib/getCurrentRequest.js");
var isUrlRequest = __webpack_require__(/*! ./isUrlRequest */ "./node_modules/loader-utils/lib/isUrlRequest.js");
var urlToRequest = __webpack_require__(/*! ./urlToRequest */ "./node_modules/loader-utils/lib/urlToRequest.js");
var parseString = __webpack_require__(/*! ./parseString */ "./node_modules/loader-utils/lib/parseString.js");
var getHashDigest = __webpack_require__(/*! ./getHashDigest */ "./node_modules/loader-utils/lib/getHashDigest.js");
var interpolateName = __webpack_require__(/*! ./interpolateName */ "./node_modules/loader-utils/lib/interpolateName.js");

exports.getOptions = getOptions;
exports.parseQuery = parseQuery;
exports.stringifyRequest = stringifyRequest;
exports.getRemainingRequest = getRemainingRequest;
exports.getCurrentRequest = getCurrentRequest;
exports.isUrlRequest = isUrlRequest;
exports.urlToRequest = urlToRequest;
exports.parseString = parseString;
exports.getHashDigest = getHashDigest;
exports.interpolateName = interpolateName;

/***/ }),

/***/ "./node_modules/loader-utils/lib/interpolateName.js":
/*!**********************************************************!*\
  !*** ./node_modules/loader-utils/lib/interpolateName.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");
var emojisList = __webpack_require__(/*! emojis-list */ "./node_modules/emojis-list/index.js");
var getHashDigest = __webpack_require__(/*! ./getHashDigest */ "./node_modules/loader-utils/lib/getHashDigest.js");

var emojiRegex = /[\uD800-\uDFFF]./;
var emojiList = emojisList.filter(function (emoji) {
	return emojiRegex.test(emoji);
});
var emojiCache = {};

function encodeStringToEmoji(content, length) {
	if (emojiCache[content]) return emojiCache[content];
	length = length || 1;
	var emojis = [];
	do {
		var index = Math.floor(Math.random() * emojiList.length);
		emojis.push(emojiList[index]);
		emojiList.splice(index, 1);
	} while (--length > 0);
	var emojiEncoding = emojis.join("");
	emojiCache[content] = emojiEncoding;
	return emojiEncoding;
}

function interpolateName(loaderContext, name, options) {
	var filename = void 0;
	if (typeof name === "function") {
		filename = name(loaderContext.resourcePath);
	} else {
		filename = name || "[hash].[ext]";
	}
	var context = options.context;
	var content = options.content;
	var regExp = options.regExp;
	var ext = "bin";
	var basename = "file";
	var directory = "";
	var folder = "";
	if (loaderContext.resourcePath) {
		var parsed = path.parse(loaderContext.resourcePath);
		var resourcePath = loaderContext.resourcePath;

		if (parsed.ext) {
			ext = parsed.ext.substr(1);
		}
		if (parsed.dir) {
			basename = parsed.name;
			resourcePath = parsed.dir + path.sep;
		}
		if (typeof context !== "undefined") {
			directory = path.relative(context, resourcePath + "_").replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
			directory = directory.substr(0, directory.length - 1);
		} else {
			directory = resourcePath.replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
		}
		if (directory.length === 1) {
			directory = "";
		} else if (directory.length > 1) {
			folder = path.basename(directory);
		}
	}
	var url = filename;
	if (content) {
		// Match hash template
		url = url.replace(/\[(?:(\w+):)?hash(?::([a-z]+\d*))?(?::(\d+))?\]/ig, function (all, hashType, digestType, maxLength) {
			return getHashDigest(content, hashType, digestType, parseInt(maxLength, 10));
		}).replace(/\[emoji(?::(\d+))?\]/ig, function (all, length) {
			return encodeStringToEmoji(content, length);
		});
	}
	url = url.replace(/\[ext\]/ig, function () {
		return ext;
	}).replace(/\[name\]/ig, function () {
		return basename;
	}).replace(/\[path\]/ig, function () {
		return directory;
	}).replace(/\[folder\]/ig, function () {
		return folder;
	});
	if (regExp && loaderContext.resourcePath) {
		var match = loaderContext.resourcePath.match(new RegExp(regExp));
		match && match.forEach(function (matched, i) {
			url = url.replace(new RegExp("\\[" + i + "\\]", "ig"), matched);
		});
	}
	if (_typeof(loaderContext.options) === "object" && typeof loaderContext.options.customInterpolateName === "function") {
		url = loaderContext.options.customInterpolateName.call(loaderContext, url, name, options);
	}
	return url;
}

module.exports = interpolateName;

/***/ }),

/***/ "./node_modules/loader-utils/lib/isUrlRequest.js":
/*!*******************************************************!*\
  !*** ./node_modules/loader-utils/lib/isUrlRequest.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function isUrlRequest(url, root) {
	// An URL is not an request if
	// 1. it's a Data Url
	// 2. it's an absolute url or and protocol-relative
	// 3. it's some kind of url for a template
	if (/^data:|^chrome-extension:|^(https?:)?\/\/|^[\{\}\[\]#*;,'§\$%&\(=?`´\^°<>]/.test(url)) return false;
	// 4. It's also not an request if root isn't set and it's a root-relative url
	if ((root === undefined || root === false) && /^\//.test(url)) return false;
	return true;
}

module.exports = isUrlRequest;

/***/ }),

/***/ "./node_modules/loader-utils/lib/parseQuery.js":
/*!*****************************************************!*\
  !*** ./node_modules/loader-utils/lib/parseQuery.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSON5 = __webpack_require__(/*! json5 */ "./node_modules/json5/lib/json5.js");

var specialValues = {
	"null": null,
	"true": true,
	"false": false
};

function parseQuery(query) {
	if (query.substr(0, 1) !== "?") {
		throw new Error("A valid query string passed to parseQuery should begin with '?'");
	}
	query = query.substr(1);
	if (!query) {
		return {};
	}
	if (query.substr(0, 1) === "{" && query.substr(-1) === "}") {
		return JSON5.parse(query);
	}
	var queryArgs = query.split(/[,&]/g);
	var result = {};
	queryArgs.forEach(function (arg) {
		var idx = arg.indexOf("=");
		if (idx >= 0) {
			var name = arg.substr(0, idx);
			var value = decodeURIComponent(arg.substr(idx + 1));
			if (specialValues.hasOwnProperty(value)) {
				value = specialValues[value];
			}
			if (name.substr(-2) === "[]") {
				name = decodeURIComponent(name.substr(0, name.length - 2));
				if (!Array.isArray(result[name])) result[name] = [];
				result[name].push(value);
			} else {
				name = decodeURIComponent(name);
				result[name] = value;
			}
		} else {
			if (arg.substr(0, 1) === "-") {
				result[decodeURIComponent(arg.substr(1))] = false;
			} else if (arg.substr(0, 1) === "+") {
				result[decodeURIComponent(arg.substr(1))] = true;
			} else {
				result[decodeURIComponent(arg)] = true;
			}
		}
	});
	return result;
}

module.exports = parseQuery;

/***/ }),

/***/ "./node_modules/loader-utils/lib/parseString.js":
/*!******************************************************!*\
  !*** ./node_modules/loader-utils/lib/parseString.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function parseString(str) {
	try {
		if (str[0] === "\"") return JSON.parse(str);
		if (str[0] === "'" && str.substr(str.length - 1) === "'") {
			return parseString(str.replace(/\\.|"/g, function (x) {
				return x === "\"" ? "\\\"" : x;
			}).replace(/^'|'$/g, "\""));
		}
		return JSON.parse("\"" + str + "\"");
	} catch (e) {
		return str;
	}
}

module.exports = parseString;

/***/ }),

/***/ "./node_modules/loader-utils/lib/stringifyRequest.js":
/*!***********************************************************!*\
  !*** ./node_modules/loader-utils/lib/stringifyRequest.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

var matchRelativePath = /^\.\.?[/\\]/;

function isAbsolutePath(str) {
	return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);
}

function isRelativePath(str) {
	return matchRelativePath.test(str);
}

function stringifyRequest(loaderContext, request) {
	var splitted = request.split("!");
	var context = loaderContext.context || loaderContext.options && loaderContext.options.context;
	return JSON.stringify(splitted.map(function (part) {
		// First, separate singlePath from query, because the query might contain paths again
		var splittedPart = part.match(/^(.*?)(\?.*)/);
		var singlePath = splittedPart ? splittedPart[1] : part;
		var query = splittedPart ? splittedPart[2] : "";
		if (isAbsolutePath(singlePath) && context) {
			singlePath = path.relative(context, singlePath);
			if (isAbsolutePath(singlePath)) {
				// If singlePath still matches an absolute path, singlePath was on a different drive than context.
				// In this case, we leave the path platform-specific without replacing any separators.
				// @see https://github.com/webpack/loader-utils/pull/14
				return singlePath + query;
			}
			if (isRelativePath(singlePath) === false) {
				// Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).
				singlePath = "./" + singlePath;
			}
		}
		return singlePath.replace(/\\/g, "/") + query;
	}).join("!"));
}

module.exports = stringifyRequest;

/***/ }),

/***/ "./node_modules/loader-utils/lib/urlToRequest.js":
/*!*******************************************************!*\
  !*** ./node_modules/loader-utils/lib/urlToRequest.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var matchNativeWin32Path = /^[A-Z]:[/\\]|^\\\\/i;

function urlToRequest(url, root) {
	var moduleRequestRegex = /^[^?]*~/;
	var request = void 0;

	if (matchNativeWin32Path.test(url)) {
		// absolute windows path, keep it
		request = url;
	} else if (root !== undefined && root !== false && /^\//.test(url)) {
		// if root is set and the url is root-relative
		switch (typeof root === "undefined" ? "undefined" : _typeof(root)) {
			// 1. root is a string: root is prefixed to the url
			case "string":
				// special case: `~` roots convert to module request
				if (moduleRequestRegex.test(root)) {
					request = root.replace(/([^~\/])$/, "$1/") + url.slice(1);
				} else {
					request = root + url;
				}
				break;
			// 2. root is `true`: absolute paths are allowed
			//    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`
			case "boolean":
				request = url;
				break;
			default:
				throw new Error("Unexpected parameters to loader-utils 'urlToRequest': url = " + url + ", root = " + root + ".");
		}
	} else if (/^\.\.?\//.test(url)) {
		// A relative url stays
		request = url;
	} else {
		// every other url is threaded like a relative url
		request = "./" + url;
	}

	// A `~` makes the url an module
	if (moduleRequestRegex.test(request)) {
		request = request.replace(moduleRequestRegex, "");
	}

	return request;
}

module.exports = urlToRequest;

/***/ }),

/***/ "./node_modules/md5.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/md5.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js");

var ARRAY16 = new Array(16);

function MD5() {
  HashBase.call(this, 64);

  // state
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
}

inherits(MD5, HashBase);

MD5.prototype._update = function () {
  var M = ARRAY16;
  for (var i = 0; i < 16; ++i) {
    M[i] = this._block.readInt32LE(i * 4);
  }var a = this._a;
  var b = this._b;
  var c = this._c;
  var d = this._d;

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

  this._a = this._a + a | 0;
  this._b = this._b + b | 0;
  this._c = this._c + c | 0;
  this._d = this._d + d | 0;
};

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);
    this._update();
    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);
  this._block.writeUInt32LE(this._length[0], 56);
  this._block.writeUInt32LE(this._length[1], 60);
  this._update();

  // produce result
  var buffer = new Buffer(16);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fnF(a, b, c, d, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}

function fnG(a, b, c, d, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}

function fnH(a, b, c, d, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}

function fnI(a, b, c, d, m, k, s) {
  return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}

module.exports = MD5;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/miller-rabin/lib/mr.js":
/*!*********************************************!*\
  !*** ./node_modules/miller-rabin/lib/mr.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var brorand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do {
    var a = new bn(this.rand.generate(min_bytes));
  } while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb) cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return false;
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0) return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

/***/ }),

/***/ "./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

/***/ }),

/***/ "./node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0) msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2) {
      res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi) res.push(hi, lo);else res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex') return toHex(arr);else return arr;
};

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/***/ }),

/***/ "./node_modules/parse-asn1/aesid.json":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/aesid.json ***!
  \********************************************/
/*! exports provided: 2.16.840.1.101.3.4.1.1, 2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.3, 2.16.840.1.101.3.4.1.4, 2.16.840.1.101.3.4.1.21, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.23, 2.16.840.1.101.3.4.1.24, 2.16.840.1.101.3.4.1.41, 2.16.840.1.101.3.4.1.42, 2.16.840.1.101.3.4.1.43, 2.16.840.1.101.3.4.1.44, default */
/***/ (function(module) {

module.exports = {"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"};

/***/ }),

/***/ "./node_modules/parse-asn1/asn1.js":
/*!*****************************************!*\
  !*** ./node_modules/parse-asn1/asn1.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js");

exports.certificate = __webpack_require__(/*! ./certificate */ "./node_modules/parse-asn1/certificate.js");

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function () {
  this.seq().obj(this.key('r').int(), this.key('s').int());
});

/***/ }),

/***/ "./node_modules/parse-asn1/certificate.js":
/*!************************************************!*\
  !*** ./node_modules/parse-asn1/certificate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen



var asn = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js");

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  });
});

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(this.key('type').objid(), this.key('value').any());
});

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional());
});

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue);
});

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName);
});

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  });
});

var Validity = asn.define('Validity', function () {
  this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});

var Extension = asn.define('Extension', function () {
  this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(this.key('version').explicit(0).int(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});

module.exports = X509Certificate;

/***/ }),

/***/ "./node_modules/parse-asn1/fixProc.js":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/fixProc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;
var evp = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");
var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js");
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1];
  return {
    tag: tag,
    data: decrypted
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/parse-asn1/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse-asn1/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var asn1 = __webpack_require__(/*! ./asn1 */ "./node_modules/parse-asn1/asn1.js");
var aesid = __webpack_require__(/*! ./aesid.json */ "./node_modules/parse-asn1/aesid.json");
var fixProc = __webpack_require__(/*! ./fixProc */ "./node_modules/parse-asn1/fixProc.js");
var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js");
var compat = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js");
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if ((typeof buffer === 'undefined' ? 'undefined' : _typeof(buffer)) === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype, ndata;
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
    // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der');
      }
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data: ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
    // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default:
      throw new Error('unknown key type ' + type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10) / 8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function splitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function () {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};

// path.relative(from, to)
// posix version
exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};

exports.basename = function (path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  return splitPath(path)[3];
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/browser.js":
/*!****************************************!*\
  !*** ./node_modules/pbkdf2/browser.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.pbkdf2 = __webpack_require__(/*! ./lib/async */ "./node_modules/pbkdf2/lib/async.js");
exports.pbkdf2Sync = __webpack_require__(/*! ./lib/sync */ "./node_modules/pbkdf2/lib/sync-browser.js");

/***/ }),

/***/ "./node_modules/pbkdf2/lib/async.js":
/*!******************************************!*\
  !*** ./node_modules/pbkdf2/lib/async.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js");
var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js");
var sync = __webpack_require__(/*! ./sync */ "./node_modules/pbkdf2/lib/sync-browser.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
};
var checks = [];
function checkNative(algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false);
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false);
  }
  if (checks[algo] !== undefined) {
    return checks[algo];
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}

function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveBits']).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer.from(res);
  });
}

function resolvePromise(promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out);
    });
  }, function (e) {
    process.nextTick(function () {
      callback(e);
    });
  });
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }

  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out;
      try {
        out = sync(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }
      callback(null, out);
    });
  }

  checkParameters(password, salt, iterations, keylen);
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);

    return sync(password, salt, iterations, keylen, digest);
  }), callback);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/default-encoding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pbkdf2/lib/default-encoding.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var defaultEncoding;
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}
module.exports = defaultEncoding;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/precondition.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/precondition.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

function checkBuffer(buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string');
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password');
  checkBuffer(salt, 'Salt');

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/sync-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/sync-browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js");
var rmd160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");
var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");

var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js");
var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var ZEROS = Buffer.alloc(128);
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};

function Hmac(alg, key, saltLen) {
  var hash = getDigest(alg);
  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  if (key.length > blocksize) {
    key = hash(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
  ipad.copy(ipad1, 0, 0, blocksize);
  this.ipad1 = ipad1;
  this.ipad2 = ipad;
  this.opad = opad;
  this.alg = alg;
  this.blocksize = blocksize;
  this.hash = hash;
  this.size = sizes[alg];
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize);
  var h = this.hash(ipad);
  h.copy(this.opad, this.blocksize);
  return this.hash(this.opad);
};

function getDigest(alg) {
  function shaFunc(data) {
    return sha(alg).update(data).digest();
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160;
  if (alg === 'md5') return md5;
  return shaFunc;
}

function pbkdf2(password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen);

  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);

  digest = digest || 'sha1';

  var hmac = new Hmac(digest, password, salt.length);

  var DK = Buffer.allocUnsafe(keylen);
  var block1 = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);

  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);

    var T = hmac.run(block1, hmac.ipad1);
    var U = T;

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2);
      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }

    T.copy(DK, destPos);
    destPos += hLen;
  }

  return DK;
}

module.exports = pbkdf2;

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),

/***/ "./node_modules/public-encrypt/browser.js":
/*!************************************************!*\
  !*** ./node_modules/public-encrypt/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.publicEncrypt = __webpack_require__(/*! ./publicEncrypt */ "./node_modules/public-encrypt/publicEncrypt.js");
exports.privateDecrypt = __webpack_require__(/*! ./privateDecrypt */ "./node_modules/public-encrypt/privateDecrypt.js");

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

/***/ }),

/***/ "./node_modules/public-encrypt/mgf.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/mgf.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
module.exports = function (seed, len) {
  var t = new Buffer('');
  var i = 0,
      c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c, 0);
  return out;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/privateDecrypt.js":
/*!*******************************************************!*\
  !*** ./node_modules/public-encrypt/privateDecrypt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");
var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js");
var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js");
var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");
var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js");
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }

  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg) {
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb = msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse) {
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return msg.slice(i);
}
function compare(a, b) {
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += a[i] ^ b[i];
  }
  return dif;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/publicEncrypt.js":
/*!******************************************************!*\
  !*** ./node_modules/public-encrypt/publicEncrypt.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");
var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js");
var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js");
var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js");
var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg) {
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse) {
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len * 2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/withPublic.js":
/*!***************************************************!*\
  !*** ./node_modules/public-encrypt/withPublic.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
}

module.exports = withPublic;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/xor.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/xor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a;
};

/***/ }),

/***/ "./node_modules/randombytes/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/randombytes/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser() {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var crypto = global.crypto || global.msCrypto;

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes');
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size);

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes);
  }

  // XXX: phantomjs doesn't like a buffer being passed here
  var bytes = Buffer.from(rawBytes.buffer);

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }

  return bytes;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/randomfill/browser.js":
/*!********************************************!*\
  !*** ./node_modules/randomfill/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser() {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js");
var randombytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
  if (typeof offset !== 'number' || offset !== offset) {
    // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number');
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32');
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range');
  }
}

function assertSize(size, offset, length) {
  if (typeof size !== 'number' || size !== size) {
    // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number');
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32');
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small');
  }
}
if (crypto && crypto.getRandomValues || !process.browser) {
  exports.randomFill = randomFill;
  exports.randomFillSync = randomFillSync;
} else {
  exports.randomFill = oldBrowser;
  exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }

  if (typeof offset === 'function') {
    cb = offset;
    offset = 0;
    size = buf.length;
  } else if (typeof size === 'function') {
    cb = size;
    size = buf.length - offset;
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function');
  }
  assertOffset(offset, buf.length);
  assertSize(size, offset, buf.length);
  return actualFill(buf, offset, size, cb);
}

function actualFill(buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
      process.nextTick(function () {
        cb(null, buf);
      });
      return;
    }
    return buf;
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err);
      }
      bytes.copy(buf, offset);
      cb(null, buf);
    });
    return;
  }
  var bytes = randombytes(size);
  bytes.copy(buf, offset);
  return buf;
}
function randomFillSync(buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0;
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }

  assertOffset(offset, buf.length);

  if (size === undefined) size = buf.length - offset;

  assertSize(size, offset, buf.length);

  return actualFill(buf, offset, size);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__(/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(/*! util */ 0);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(/*! util */ 1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").PassThrough;

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js");

/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").Transform;

/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");

/***/ }),

/***/ "./node_modules/ripemd160/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ripemd160/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js");

var ARRAY16 = new Array(16);

var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

function RIPEMD160() {
  HashBase.call(this, 64);

  // state
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
}

inherits(RIPEMD160, HashBase);

RIPEMD160.prototype._update = function () {
  var words = ARRAY16;
  for (var j = 0; j < 16; ++j) {
    words[j] = this._block.readInt32LE(j * 4);
  }var al = this._a | 0;
  var bl = this._b | 0;
  var cl = this._c | 0;
  var dl = this._d | 0;
  var el = this._e | 0;

  var ar = this._a | 0;
  var br = this._b | 0;
  var cr = this._c | 0;
  var dr = this._d | 0;
  var er = this._e | 0;

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl;
    var tr;
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
    } else {
      // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
    }

    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = tl;

    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = tr;
  }

  // update state
  var t = this._b + cl + dr | 0;
  this._b = this._c + dl + er | 0;
  this._c = this._d + el + ar | 0;
  this._d = this._e + al + br | 0;
  this._e = this._a + bl + cr | 0;
  this._a = t;
};

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);
    this._update();
    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);
  this._block.writeUInt32LE(this._length[0], 56);
  this._block.writeUInt32LE(this._length[1], 60);
  this._update();

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  buffer.writeInt32LE(this._e, 16);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fn1(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}

module.exports = RIPEMD160;

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "./node_modules/schema-utils/dist/ValidationError.js":
/*!***********************************************************!*\
  !*** ./node_modules/schema-utils/dist/ValidationError.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var ValidationError = function (_Error) {
  _inherits(ValidationError, _Error);

  function ValidationError(errors, name) {
    _classCallCheck(this, ValidationError);

    var _this = _possibleConstructorReturn(this, (ValidationError.__proto__ || Object.getPrototypeOf(ValidationError)).call(this));

    _this.name = 'ValidationError';

    _this.message = (name || '') + " Invalid Options\n\n";

    errors.forEach(function (err) {
      _this.message += "options" + err.dataPath + " " + err.message + "\n";
    });

    _this.errors = errors;

    Error.captureStackTrace(_this, _this.constructor);
    return _this;
  }

  return ValidationError;
}(Error);

exports.default = ValidationError;

/***/ }),

/***/ "./node_modules/schema-utils/dist/cjs.js":
/*!***********************************************!*\
  !*** ./node_modules/schema-utils/dist/cjs.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(/*! ./index */ "./node_modules/schema-utils/dist/index.js").default;

/***/ }),

/***/ "./node_modules/schema-utils/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/schema-utils/dist/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _validateOptions = __webpack_require__(/*! ./validateOptions */ "./node_modules/schema-utils/dist/validateOptions.js");

var _validateOptions2 = _interopRequireDefault(_validateOptions);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _validateOptions2.default;

/***/ }),

/***/ "./node_modules/schema-utils/dist/validateOptions.js":
/*!***********************************************************!*\
  !*** ./node_modules/schema-utils/dist/validateOptions.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

var _path2 = _interopRequireDefault(_path);

var _fs = __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js");

var _fs2 = _interopRequireDefault(_fs);

var _ajv = __webpack_require__(/*! ajv */ "./node_modules/ajv/lib/ajv.js");

var _ajv2 = _interopRequireDefault(_ajv);

var _ajvKeywords = __webpack_require__(/*! ajv-keywords */ "./node_modules/ajv-keywords/index.js");

var _ajvKeywords2 = _interopRequireDefault(_ajvKeywords);

var _ValidationError = __webpack_require__(/*! ./ValidationError */ "./node_modules/schema-utils/dist/ValidationError.js");

var _ValidationError2 = _interopRequireDefault(_ValidationError);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var ajv = new _ajv2.default({
  allErrors: true,
  useDefaults: true,
  errorDataPath: 'property'
});

(0, _ajvKeywords2.default)(ajv, ['instanceof', 'typeof']);

var validateOptions = function validateOptions(schema, options, name) {
  if (typeof schema === 'string') {
    schema = _fs2.default.readFileSync(_path2.default.resolve(schema), 'utf8');
    schema = JSON.parse(schema);
  }

  if (!ajv.validate(schema, options)) {
    throw new _ValidationError2.default(ajv.errors, name);
  }

  return true;
};

exports.default = validateOptions;

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function registerImmediate(handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function onGlobalMessage(event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function registerImmediate(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function registerImmediate(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function registerImmediate(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function registerImmediate(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

// prototype class for hash functions
function Hash(blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = Buffer.from(data, enc);
  }

  var block = this._block;
  var blockSize = this._blockSize;
  var length = data.length;
  var accum = this._len;

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize;
    var remainder = Math.min(length - offset, blockSize - assigned);

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i];
    }

    accum += remainder;
    offset += remainder;

    if (accum % blockSize === 0) {
      this._update(block);
    }
  }

  this._len += length;
  return this;
};

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize;

  this._block[rem] = 0x80;

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1);

  if (rem >= this._finalSize) {
    this._update(this._block);
    this._block.fill(0);
  }

  var bits = this._len * 8;

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4);

    // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0;
    var highBits = (bits - lowBits) / 0x100000000;

    this._block.writeUInt32BE(highBits, this._blockSize - 8);
    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
  }

  this._update(this._block);
  var hash = this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

/***/ }),

/***/ "./node_modules/sha.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/sha.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _exports = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();

  var Algorithm = _exports[algorithm];
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');

  return new Algorithm();
};

_exports.sha = __webpack_require__(/*! ./sha */ "./node_modules/sha.js/sha.js");
_exports.sha1 = __webpack_require__(/*! ./sha1 */ "./node_modules/sha.js/sha1.js");
_exports.sha224 = __webpack_require__(/*! ./sha224 */ "./node_modules/sha.js/sha224.js");
_exports.sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js");
_exports.sha384 = __webpack_require__(/*! ./sha384 */ "./node_modules/sha.js/sha384.js");
_exports.sha512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js");

/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/*!************************************!*\
  !*** ./node_modules/sha.js/sha.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha;

/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha1() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha1;

/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha224.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var W = new Array(64);

function Sha224() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;

  return this;
};

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);

  return H;
};

module.exports = Sha224;

/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha256.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];

var W = new Array(64);

function Sha256() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;

  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 64; ++i) {
    W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
  }for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;

    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);

  return H;
};

module.exports = Sha256;

/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha384.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var SHA512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var W = new Array(160);

function Sha384() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;

  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;

  return this;
};

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);

  return H;
};

module.exports = Sha384;

/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha512.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

var W = new Array(160);

function Sha512() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;

  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;

  return this;
};

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;

  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;

  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);

    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh);

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];

    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];

    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;

    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];

    var majh = maj(ah, bh, ch);
    var majl = maj(al, bl, cl);

    var sigma0h = sigma0(ah, al);
    var sigma0l = sigma0(al, ah);
    var sigma1h = sigma1(eh, el);
    var sigma1l = sigma1(el, eh);

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j];
    var Kil = K[j + 1];

    var chh = Ch(eh, fh, gh);
    var chl = Ch(el, fl, gl);

    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0;

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;

    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;

  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);

  return H;
};

module.exports = Sha512;

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\uFFFD';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\uFFFD';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\uFFFD';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\uFFFD';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/style-loader/index.js":
/*!********************************************!*\
  !*** ./node_modules/style-loader/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__dirname) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var path = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");

var loaderUtils = __webpack_require__(/*! loader-utils */ "./node_modules/loader-utils/lib/index.js");
var validateOptions = __webpack_require__(/*! schema-utils */ "./node_modules/schema-utils/dist/cjs.js");

module.exports = function () {};

module.exports.pitch = function (request) {
	if (this.cacheable) this.cacheable();

	var options = loaderUtils.getOptions(this) || {};

	validateOptions(__webpack_require__(/*! ./options.json */ "./node_modules/style-loader/options.json"), options, 'Style Loader');

	options.hmr = typeof options.hmr === 'undefined' ? true : options.hmr;

	// The variable is needed, because the function should be inlined.
	// If is just stored it in options, JSON.stringify will quote
	// the function and it would be just a string at runtime
	var insertInto;

	if (typeof options.insertInto === "function") {
		insertInto = options.insertInto.toString();
	}

	// We need to check if it a string, or variable will be "undefined"
	// and the loader crashes
	if (typeof options.insertInto === "string") {
		insertInto = '"' + options.insertInto + '"';
	}

	var hmr = [
	// Hot Module Replacement,
	"if(module.hot) {",
	// When the styles change, update the <style> tags
	"	module.hot.accept(" + loaderUtils.stringifyRequest(this, "!!" + request) + ", function() {", "		var newContent = require(" + loaderUtils.stringifyRequest(this, "!!" + request) + ");", "", "		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];", "", "		var locals = (function(a, b) {", "			var key, idx = 0;", "", "			for(key in a) {", "				if(!b || a[key] !== b[key]) return false;", "				idx++;", "			}", "", "			for(key in b) idx--;", "", "			return idx === 0;", "		}(content.locals, newContent.locals));", "",
	// This error is caught and not shown and causes a full reload
	"		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');", "", "		update(newContent);", "	});", "",
	// When the module is disposed, remove the <style> tags
	"	module.hot.dispose(function() { update(); });", "}"].join("\n");

	return [
	// Style Loader
	// Adds CSS to the DOM by adding a <style> tag
	"",
	// Load styles
	"var content = require(" + loaderUtils.stringifyRequest(this, "!!" + request) + ");", "", "if(typeof content === 'string') content = [[module.id, content, '']];", "",
	// Transform styles",
	"var transform;", "var insertInto;", "", options.transform ? "transform = require(" + loaderUtils.stringifyRequest(this, "!" + path.resolve(options.transform)) + ");" : "", "", "var options = " + JSON.stringify(options), "", "options.transform = transform", "options.insertInto = " + insertInto + ";", "",
	// Add styles to the DOM
	"var update = require(" + loaderUtils.stringifyRequest(this, "!" + path.join(__dirname, "lib", "addStyles.js")) + ")(content, options);", "", "if(content.locals) module.exports = content.locals;", "", options.hmr ? hmr : ""].join("\n");
};
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./node_modules/style-loader/options.json":
/*!************************************************!*\
  !*** ./node_modules/style-loader/options.json ***!
  \************************************************/
/*! exports provided: type, properties, additionalProperties, default */
/***/ (function(module) {

module.exports = {"type":"object","properties":{"hmr":{"type":"boolean"},"base":{"type":"number"},"attrs":{"type":"object"},"insertAt":{"type":["string","object"]},"insertInto":{"anyOf":[{"type":"string"},{"instanceof":"Function"}]},"transform":{"type":"string"},"singleton":{"type":"boolean"},"sourceMap":{"type":"boolean"},"convertToAbsoluteUrls":{"type":"boolean"}},"additionalProperties":false};

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || undefined && undefined.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || undefined && undefined.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/uri-js/dist/es5/uri.all.js":
/*!*************************************************!*\
  !*** ./node_modules/uri-js/dist/es5/uri.all.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
(function (global, factory) {
    ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(undefined, function (exports) {
    'use strict';

    function merge() {
        for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
        }

        if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
                sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join('');
        } else {
            return sets[0];
        }
    }
    function subexp(str) {
        return "(?:" + str + ")";
    }
    function typeOf(o) {
        return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }
    function toUpperCase(str) {
        return str.toUpperCase();
    }
    function toArray(obj) {
        return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }
    function assign(target, source) {
        var obj = target;
        if (source) {
            for (var key in source) {
                obj[key] = source[key];
            }
        }
        return obj;
    }

    function buildExps(isIRI) {
        var ALPHA$$ = "[A-Za-z]",
            CR$ = "[\\x0D]",
            DIGIT$$ = "[0-9]",
            DQUOTE$$ = "[\\x22]",
            HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),

        //case-insensitive
        LF$$ = "[\\x0A]",
            SP$$ = "[\\x20]",
            PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),

        //expanded
        GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
            SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
            RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
            UCSCHAR$$ = isIRI ? '[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]' : "[]",

        //subset, excludes bidi control characters
        IPRIVATE$$ = isIRI ? '[\\uE000-\\uF8FF]' : "[]",

        //subset
        UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
            SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
            USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
            DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
            DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),

        //relaxed parsing rules
        IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
            H16$ = subexp(HEXDIG$$ + "{1,4}"),
            LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
            IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),

        //                           6( h16 ":" ) ls32
        IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),

        //                      "::" 5( h16 ":" ) ls32
        IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),

        //[               h16 ] "::" 4( h16 ":" ) ls32
        IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),

        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
        IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),

        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
        IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),

        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
        IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),

        //[ *4( h16 ":" ) h16 ] "::"              ls32
        IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),

        //[ *5( h16 ":" ) h16 ] "::"              h16
        IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),

        //[ *6( h16 ":" ) h16 ] "::"
        IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
            ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),

        //RFC 6874
        IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),

        //RFC 6874
        IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),

        //RFC 6874, with relaxed parsing rules
        IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
            IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),

        //RFC 6874
        REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
            HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
            PORT$ = subexp(DIGIT$$ + "*"),
            AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
            PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
            SEGMENT$ = subexp(PCHAR$ + "*"),
            SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
            SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
            PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
            PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),

        //simplified
        PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),

        //simplified
        PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),

        //simplified
        PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
            PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
            QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
            FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
            HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
            URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
            RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
            RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
            URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
            ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
            GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
            SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
            AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
        return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
        };
    }
    var URI_PROTOCOL = buildExps(false);

    var IRI_PROTOCOL = buildExps(true);

    var slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    var toConsumableArray = function toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }return arr2;
        } else {
            return Array.from(arr);
        }
    };

    /** Highest positive signed 32-bit float value */

    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter = '-'; // '\x2D'

    /** Regular expressions */
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    var errors = {
        'overflow': 'Overflow: input needs wider integers to process',
        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
        'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error$1(type) {
        throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
            result[length] = fn(array[length]);
        }
        return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + '@';
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, '\x2E');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
            var value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // It's a high surrogate, and there is a next character.
                var extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) {
                    // Low surrogate.
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                    // It's an unmatched surrogate; only append this code unit, in case the
                    // next code unit is the high surrogate of a surrogate pair.
                    output.push(value);
                    counter--;
                }
            } else {
                output.push(value);
            }
        }
        return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    var ucs2encode = function ucs2encode(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
    };

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    var basicToDigit = function basicToDigit(codePoint) {
        if (codePoint - 0x30 < 0x0A) {
            return codePoint - 0x16;
        }
        if (codePoint - 0x41 < 0x1A) {
            return codePoint - 0x41;
        }
        if (codePoint - 0x61 < 0x1A) {
            return codePoint - 0x61;
        }
        return base;
    };

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    var digitToBasic = function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    var adapt = function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    var decode = function decode(input) {
        // Don't use UCS-2.
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;

        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.

        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
            basic = 0;
        }

        for (var j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
                error$1('not-basic');
            }
            output.push(input.charCodeAt(j));
        }

        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.

        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            var oldi = i;
            for (var w = 1, k = base;; /* no condition */k += base) {

                if (index >= inputLength) {
                    error$1('invalid-input');
                }

                var digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error$1('overflow');
                }

                i += digit * w;
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (digit < t) {
                    break;
                }

                var baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                    error$1('overflow');
                }

                w *= baseMinusT;
            }

            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);

            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) {
                error$1('overflow');
            }

            n += floor(i / out);
            i %= out;

            // Insert `n` at position `i` of the output.
            output.splice(i++, 0, n);
        }

        return String.fromCodePoint.apply(String, output);
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    var encode = function encode(input) {
        var output = [];

        // Convert the input in UCS-2 to an array of Unicode code points.
        input = ucs2decode(input);

        // Cache the length.
        var inputLength = input.length;

        // Initialize the state.
        var n = initialN;
        var delta = 0;
        var bias = initialBias;

        // Handle the basic code points.
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _currentValue2 = _step.value;

                if (_currentValue2 < 0x80) {
                    output.push(stringFromCharCode(_currentValue2));
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        var basicLength = output.length;
        var handledCPCount = basicLength;

        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.

        // Finish the basic string with a delimiter unless it's empty.
        if (basicLength) {
            output.push(delimiter);
        }

        // Main encoding loop:
        while (handledCPCount < inputLength) {

            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            var m = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var currentValue = _step2.value;

                    if (currentValue >= n && currentValue < m) {
                        m = currentValue;
                    }
                }

                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow.
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error$1('overflow');
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _currentValue = _step3.value;

                    if (_currentValue < n && ++delta > maxInt) {
                        error$1('overflow');
                    }
                    if (_currentValue == n) {
                        // Represent delta as a generalized variable-length integer.
                        var q = delta;
                        for (var k = base;; /* no condition */k += base) {
                            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                            if (q < t) {
                                break;
                            }
                            var qMinusT = q - t;
                            var baseMinusT = base - t;
                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                            q = floor(qMinusT / baseMinusT);
                        }

                        output.push(stringFromCharCode(digitToBasic(q, 0)));
                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                        delta = 0;
                        ++handledCPCount;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            ++delta;
            ++n;
        }
        return output.join('');
    };

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    var toUnicode = function toUnicode(input) {
        return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    var toASCII = function toASCII(input) {
        return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
    };

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    var punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        'version': '2.1.0',
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };

    /**
     * URI.js
     *
     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/uri-js
     */
    /**
     * Copyright 2011 Gary Court. All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     *
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Gary Court.
     */
    var SCHEMES = {};
    function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
        return e;
    }
    function pctDecChars(str) {
        var newStr = "";
        var i = 0;
        var il = str.length;
        while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
                newStr += String.fromCharCode(c);
                i += 3;
            } else if (c >= 194 && c < 224) {
                if (il - i >= 6) {
                    var c2 = parseInt(str.substr(i + 4, 2), 16);
                    newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
                } else {
                    newStr += str.substr(i, 6);
                }
                i += 6;
            } else if (c >= 224) {
                if (il - i >= 9) {
                    var _c = parseInt(str.substr(i + 4, 2), 16);
                    var c3 = parseInt(str.substr(i + 7, 2), 16);
                    newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
                } else {
                    newStr += str.substr(i, 9);
                }
                i += 9;
            } else {
                newStr += str.substr(i, 3);
                i += 3;
            }
        }
        return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
        if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
    }

    function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, "$1") || "0";
    }
    function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];

        var _matches = slicedToArray(matches, 2),
            address = _matches[1];

        if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
        } else {
            return host;
        }
    }
    function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];

        var _matches2 = slicedToArray(matches, 3),
            address = _matches2[1],
            zone = _matches2[2];

        if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
                _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
                last = _address$toLowerCase$2[0],
                first = _address$toLowerCase$2[1];

            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
                fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
            }
            if (isLastFieldIPv4Address) {
                fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function (acc, field, index) {
                if (!field || field === "0") {
                    var lastLongest = acc[acc.length - 1];
                    if (lastLongest && lastLongest.index + lastLongest.length === index) {
                        lastLongest.length++;
                    } else {
                        acc.push({ index: index, length: 1 });
                    }
                }
                return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function (a, b) {
                return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
                var newFirst = fields.slice(0, longestZeroFields.index);
                var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
                newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
                newHost = fields.join(":");
            }
            if (zone) {
                newHost += "%" + zone;
            }
            return newHost;
        } else {
            return host;
        }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
    function parse(uriString) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
                //store each component
                components.scheme = matches[1];
                components.userinfo = matches[3];
                components.host = matches[4];
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = matches[7];
                components.fragment = matches[8];
                //fix port number
                if (isNaN(components.port)) {
                    components.port = matches[5];
                }
            } else {
                //IE FIX for improper RegExp matching
                //store each component
                components.scheme = matches[1] || undefined;
                components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
                components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
                components.port = parseInt(matches[5], 10);
                components.path = matches[6] || "";
                components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
                components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
                //fix port number
                if (isNaN(components.port)) {
                    components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
                }
            }
            if (components.host) {
                //normalize IP hosts
                components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            //determine reference type
            if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
                components.reference = "same-document";
            } else if (components.scheme === undefined) {
                components.reference = "relative";
            } else if (components.fragment === undefined) {
                components.reference = "absolute";
            } else {
                components.reference = "uri";
            }
            //check for reference errors
            if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
                components.error = components.error || "URI is not a " + options.reference + " reference.";
            }
            //find scheme handler
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            //check if scheme can't handle IRIs
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                //if host component is a domain name
                if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                    }
                }
                //convert IRI -> URI
                _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
                //normalize encodings
                _normalizeComponentEncoding(components, protocol);
            }
            //perform scheme specific parsing
            if (schemeHandler && schemeHandler.parse) {
                schemeHandler.parse(components, options);
            }
        } else {
            components.error = components.error || "URI can not be parsed.";
        }
        return components;
    }

    function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== undefined) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
        }
        if (components.host !== undefined) {
            //normalize IP hosts, add brackets and escape zone separator for IPv6
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
                return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
        }
        if (typeof components.port === "number") {
            uriTokens.push(":");
            uriTokens.push(components.port.toString(10));
        }
        return uriTokens.length ? uriTokens.join("") : undefined;
    }

    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
        var output = [];
        while (input.length) {
            if (input.match(RDS1)) {
                input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
                input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
                input = input.replace(RDS3, "/");
                output.pop();
            } else if (input === "." || input === "..") {
                input = "";
            } else {
                var im = input.match(RDS5);
                if (im) {
                    var s = im[0];
                    input = input.slice(s.length);
                    output.push(s);
                } else {
                    throw new Error("Unexpected dot segment condition");
                }
            }
        }
        return output.join("");
    }

    function serialize(components) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        //perform scheme specific serialization
        if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
        if (components.host) {
            //if host component is an IPv6 address
            if (protocol.IPV6ADDRESS.test(components.host)) {}
            //TODO: normalize IPv6 address as per RFC 5952

            //if host component is a domain name
            else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                    //convert IDN via punycode
                    try {
                        components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                    } catch (e) {
                        components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                }
        }
        //normalize encoding
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== undefined) {
            if (options.reference !== "suffix") {
                uriTokens.push("//");
            }
            uriTokens.push(authority);
            if (components.path && components.path.charAt(0) !== "/") {
                uriTokens.push("/");
            }
        }
        if (components.path !== undefined) {
            var s = components.path;
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                s = removeDotSegments(s);
            }
            if (authority === undefined) {
                s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
            }
            uriTokens.push(s);
        }
        if (components.query !== undefined) {
            uriTokens.push("?");
            uriTokens.push(components.query);
        }
        if (components.fragment !== undefined) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
        }
        return uriTokens.join(""); //merge tokens into a string
    }

    function resolveComponents(base, relative) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var skipNormalization = arguments[3];

        var target = {};
        if (!skipNormalization) {
            base = parse(serialize(base, options), options); //normalize base components
            relative = parse(serialize(relative, options), options); //normalize relative components
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            //target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
                //target.authority = relative.authority;
                target.userinfo = relative.userinfo;
                target.host = relative.host;
                target.port = relative.port;
                target.path = removeDotSegments(relative.path || "");
                target.query = relative.query;
            } else {
                if (!relative.path) {
                    target.path = base.path;
                    if (relative.query !== undefined) {
                        target.query = relative.query;
                    } else {
                        target.query = base.query;
                    }
                } else {
                    if (relative.path.charAt(0) === "/") {
                        target.path = removeDotSegments(relative.path);
                    } else {
                        if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                            target.path = "/" + relative.path;
                        } else if (!base.path) {
                            target.path = relative.path;
                        } else {
                            target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                        }
                        target.path = removeDotSegments(target.path);
                    }
                    target.query = relative.query;
                }
                //target.authority = base.authority;
                target.userinfo = base.userinfo;
                target.host = base.host;
                target.port = base.port;
            }
            target.scheme = base.scheme;
        }
        target.fragment = relative.fragment;
        return target;
    }

    function resolve(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: 'null' }, options);
        return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }

    function normalize(uri, options) {
        if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options);
        } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options);
        }
        return uri;
    }

    function equal(uriA, uriB, options) {
        if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options);
        } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options);
        }
        if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options);
        } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options);
        }
        return uriA === uriB;
    }

    function escapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }

    function unescapeComponent(str, options) {
        return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }

    var handler = {
        scheme: "http",
        domainHost: true,
        parse: function parse(components, options) {
            //report missing host
            if (!components.host) {
                components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
        },
        serialize: function serialize(components, options) {
            //normalize the default port
            if (components.port === (String(components.scheme).toLowerCase() !== "https" ? 80 : 443) || components.port === "") {
                components.port = undefined;
            }
            //normalize the empty path
            if (!components.path) {
                components.path = "/";
            }
            //NOTE: We do not parse query strings for HTTP URIs
            //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
            //and not the HTTP spec.
            return components;
        }
    };

    var handler$1 = {
        scheme: "https",
        domainHost: handler.domainHost,
        parse: handler.parse,
        serialize: handler.serialize
    };

    var O = {};
    var isIRI = true;
    //RFC 3986
    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? '\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF' : "") + "]";
    var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    //const VCHAR$$ = "[\\x21-\\x7E]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$2 = {
        scheme: "mailto",
        parse: function parse$$1(components, options) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = undefined;
            if (mailtoComponents.query) {
                var unknownHeaders = false;
                var headers = {};
                var hfields = mailtoComponents.query.split("&");
                for (var x = 0, xl = hfields.length; x < xl; ++x) {
                    var hfield = hfields[x].split("=");
                    switch (hfield[0]) {
                        case "to":
                            var toAddrs = hfield[1].split(",");
                            for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                                to.push(toAddrs[_x]);
                            }
                            break;
                        case "subject":
                            mailtoComponents.subject = unescapeComponent(hfield[1], options);
                            break;
                        case "body":
                            mailtoComponents.body = unescapeComponent(hfield[1], options);
                            break;
                        default:
                            unknownHeaders = true;
                            headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                            break;
                    }
                }
                if (unknownHeaders) mailtoComponents.headers = headers;
            }
            mailtoComponents.query = undefined;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
                var addr = to[_x2].split("@");
                addr[0] = unescapeComponent(addr[0]);
                if (!options.unicodeSupport) {
                    //convert Unicode IDN -> ASCII IDN
                    try {
                        addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                    } catch (e) {
                        mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                    }
                } else {
                    addr[1] = unescapeComponent(addr[1], options).toLowerCase();
                }
                to[_x2] = addr.join("@");
            }
            return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
                for (var x = 0, xl = to.length; x < xl; ++x) {
                    var toAddr = String(to[x]);
                    var atIdx = toAddr.lastIndexOf("@");
                    var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                    var domain = toAddr.slice(atIdx + 1);
                    //convert IDN via punycode
                    try {
                        domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                    } catch (e) {
                        components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                    }
                    to[x] = localPart + "@" + domain;
                }
                components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
                if (headers[name] !== O[name]) {
                    fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
                }
            }
            if (fields.length) {
                components.query = fields.join("&");
            }
            return components;
        }
    };

    var URN_PARSE = /^([^\:]+)\:(.*)/;
    //RFC 2141
    var handler$3 = {
        scheme: "urn",
        parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
                var scheme = options.scheme || urnComponents.scheme || "urn";
                var nid = matches[1].toLowerCase();
                var nss = matches[2];
                var urnScheme = scheme + ":" + (options.nid || nid);
                var schemeHandler = SCHEMES[urnScheme];
                urnComponents.nid = nid;
                urnComponents.nss = nss;
                urnComponents.path = undefined;
                if (schemeHandler) {
                    urnComponents = schemeHandler.parse(urnComponents, options);
                }
            } else {
                urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
                urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options.nid) + ":" + nss;
            return uriComponents;
        }
    };

    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    //RFC 4122
    var handler$4 = {
        scheme: "urn:uuid",
        parse: function parse(urnComponents, options) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = undefined;
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
                uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
        },
        serialize: function serialize(uuidComponents, options) {
            var urnComponents = uuidComponents;
            //normalize UUID
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
        }
    };

    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;

    exports.SCHEMES = SCHEMES;
    exports.pctEncChar = pctEncChar;
    exports.pctDecChars = pctDecChars;
    exports.parse = parse;
    exports.removeDotSegments = removeDotSegments;
    exports.serialize = serialize;
    exports.resolveComponents = resolveComponents;
    exports.resolve = resolve;
    exports.normalize = normalize;
    exports.equal = equal;
    exports.escapeComponent = escapeComponent;
    exports.unescapeComponent = unescapeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });
});
//# sourceMappingURL=uri.all.js.map

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/vm-browserify/index.js":
/*!*********************************************!*\
  !*** ./node_modules/vm-browserify/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var indexOf = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");

var Object_keys = function Object_keys(obj) {
    if (Object.keys) return Object.keys(obj);else {
        var res = [];
        for (var key in obj) {
            res.push(key);
        }return res;
    }
};

var forEach = function forEach(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = function () {
    try {
        Object.defineProperty({}, '_', {});
        return function (obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            });
        };
    } catch (e) {
        return function (obj, name, value) {
            obj[name] = value;
        };
    }
}();

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript(code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }

    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';

    document.body.appendChild(iframe);

    var win = iframe.contentWindow;
    var wEval = win.eval,
        wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }

    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });

    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);

    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });

    document.body.removeChild(iframe);

    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if ((typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL19mb3JtYXRMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL191dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvZGVlcFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9kZWVwUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9kb3Rqcy9fZm9ybWF0TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9kb3Rqcy9wYXR0ZXJuUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9kb3Rqcy9zd2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9keW5hbWljRGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9mb3JtYXRNYXhpbXVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvZm9ybWF0TWluaW11bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvaW5zdGFuY2VvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3BhdHRlcm5SZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3Byb2hpYml0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3JlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3VuaXF1ZUl0ZW1Qcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2Fqdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvZXJyb3JfY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvY29tcGlsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL3Jlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvY29tcGlsZS9ydWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9jb21waWxlL3NjaGVtYV9vYmouanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvY29tcGlsZS91Y3MybGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2NvbXBpbGUvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL19saW1pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9fbGltaXRJdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9fbGltaXRMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvX2xpbWl0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9hbGxPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9hbnlPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9jb21tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2NvbnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL2N1c3RvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9kZXBlbmRlbmNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvZW51bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvaWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvaXRlbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvbXVsdGlwbGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9ub3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvb25lT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvcGF0dGVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWp2L2xpYi9kb3Rqcy9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3Byb3BlcnR5TmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fqdi9saWIvZG90anMvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3JlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3VuaXF1ZUl0ZW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2RvdGpzL3ZhbGlkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hanYvbGliL2tleXdvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvcmVwb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9jb25zdGFudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL3BlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JpZy5qcy9iaWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvcmFuZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9kZWNyeXB0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2JjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY2lwaGVyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktZGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9tb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1yc2EvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9hbGdvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3J5cHRvLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9lZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvbW9udC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW9qaXMtbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zhc3QtZGVlcC1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS81MTIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXRyYXZlcnNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uNS9saWIvanNvbjUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvYWRlci11dGlscy9saWIvZ2V0Q3VycmVudFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvYWRlci11dGlscy9saWIvZ2V0SGFzaERpZ2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9hZGVyLXV0aWxzL2xpYi9nZXRPcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2FkZXItdXRpbHMvbGliL2dldFJlbWFpbmluZ1JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvYWRlci11dGlscy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvYWRlci11dGlscy9saWIvaW50ZXJwb2xhdGVOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2FkZXItdXRpbHMvbGliL2lzVXJsUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9hZGVyLXV0aWxzL2xpYi9wYXJzZVF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2FkZXItdXRpbHMvbGliL3BhcnNlU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2FkZXItdXRpbHMvbGliL3N0cmluZ2lmeVJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvYWRlci11dGlscy9saWIvdXJsVG9SZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2FzbjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvY2VydGlmaWNhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9hc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3ByZWNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9zeW5jLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L21nZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHJpdmF0ZURlY3J5cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3dpdGhQdWJsaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFuZG9tZmlsbC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmlwZW1kMTYwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZW1hLXV0aWxzL2Rpc3QvVmFsaWRhdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlbWEtdXRpbHMvZGlzdC9janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVtYS11dGlscy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlbWEtdXRpbHMvZGlzdC92YWxpZGF0ZU9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMzg0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhNTEyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VyaS1qcy9kaXN0L2VzNS91cmkuYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92bS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vL3V0aWwgKGlnbm9yZWQpPzZjMmIiLCJ3ZWJwYWNrOi8vL2J1ZmZlciAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vL2NyeXB0byAoaWdub3JlZCkiXSwibmFtZXMiOlsiS0VZV09SRFMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmluZUtleXdvcmRzIiwiYWp2Iiwia2V5d29yZCIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJsZW5ndGgiLCJnZXQiLCJkZWZGdW5jIiwiRXJyb3IiLCJUSU1FIiwiREFURV9USU1FX1NFUEFSQVRPUiIsIkNPTVBBUkVfRk9STUFUUyIsImRhdGUiLCJjb21wYXJlRGF0ZSIsInRpbWUiLCJjb21wYXJlVGltZSIsImNvbXBhcmVEYXRlVGltZSIsIm1pbk1heCIsImRlZmluaXRpb24iLCJ0eXBlIiwiaW5saW5lIiwic3RhdGVtZW50cyIsImVycm9ycyIsIm1ldGFTY2hlbWEiLCJhbnlPZiIsInJlcXVpcmVkIiwicHJvcGVydGllcyIsIiRkYXRhIiwiZm9ybWF0IiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJhZGRLZXl3b3JkIiwiZXh0ZW5kRm9ybWF0cyIsImZvcm1hdHMiLCJfZm9ybWF0cyIsIm5hbWUiLCJSZWdFeHAiLCJ2YWxpZGF0ZSIsImNvbXBhcmUiLCJkMSIsImQyIiwidDEiLCJ0MiIsIm1hdGNoIiwiZHQxIiwiZHQyIiwic3BsaXQiLCJyZXMiLCJ1bmRlZmluZWQiLCJtZXRhU2NoZW1hUmVmIiwiTUVUQV9TQ0hFTUFfSUQiLCJkZWZhdWx0TWV0YSIsIl9vcHRzIiwiJHJlZiIsImdldFNjaGVtYSIsImNvbnNvbGUiLCJ3YXJuIiwidXRpbCIsIm1hY3JvIiwic2NoZW1hIiwic2NoZW1hcyIsInBvaW50ZXIiLCJwdXNoIiwicHJvcGVydHlOYW1lcyIsImpzb25Qb2ludGVyIiwic2VnbWVudHMiLCJyb290U2NoZW1hIiwicG9pbnRlclNjaGVtYSIsInNlZ21lbnQiLCJpc0xhc3QiLCJ1bmVzY2FwZUpzb25Qb2ludGVyIiwiaXRlbXMiLCJ0ZXN0IiwiY291bnQiLCJzdHIiLCJyZXBsYWNlIiwiaXQiLCJleHByIiwiZ2V0RGF0YSIsImRhdGFMZXZlbCIsImx2bCIsImRhdGEiLCJnZXRQcm9wZXJ0eSIsIklERU5USUZJRVIiLCJJTlRFR0VSIiwiU0lOR0xFX1FVT1RFIiwia2V5IiwiZ2VuZXJhdGVfX2Zvcm1hdExpbWl0IiwiJGtleXdvcmQiLCIkcnVsZVR5cGUiLCJvdXQiLCIkbHZsIiwibGV2ZWwiLCIkZGF0YUx2bCIsIiRzY2hlbWEiLCIkc2NoZW1hUGF0aCIsInNjaGVtYVBhdGgiLCIkZXJyU2NoZW1hUGF0aCIsImVyclNjaGVtYVBhdGgiLCIkYnJlYWtPbkVycm9yIiwib3B0cyIsImFsbEVycm9ycyIsIiRlcnJvcktleXdvcmQiLCIkdmFsaWQiLCIkc2NoZW1hRm9ybWF0IiwiJGlzRGF0YUZvcm1hdCIsIiRjbG9zaW5nQnJhY2VzIiwiJHNjaGVtYVZhbHVlRm9ybWF0IiwiZGF0YVBhdGhBcnIiLCIkZm9ybWF0IiwiJGNvbXBhcmUiLCIkaXNNYXgiLCIkZXhjbHVzaXZlS2V5d29yZCIsIiRzY2hlbWFFeGNsIiwiJGlzRGF0YUV4Y2wiLCIkb3AiLCIkcmVzdWx0IiwiJGlzRGF0YSIsIiRzY2hlbWFWYWx1ZSIsIiRzY2hlbWFWYWx1ZUV4Y2wiLCIkZXhjbHVzaXZlIiwiJG9wRXhwciIsIiRvcFN0ciIsIiQkb3V0U3RhY2siLCJjcmVhdGVFcnJvcnMiLCJlcnJvclBhdGgiLCJ0b1F1b3RlZFN0cmluZyIsIm1lc3NhZ2VzIiwidmVyYm9zZSIsIl9fZXJyIiwicG9wIiwiY29tcG9zaXRlUnVsZSIsImFzeW5jIiwiZXNjYXBlUXVvdGVzIiwiZ2VuZXJhdGVfcGF0dGVyblJlcXVpcmVkIiwiJGtleSIsIiRpZHgiLCIkbWF0Y2hlZCIsIiRkYXRhUHJvcGVydGllcyIsIiRvd25Qcm9wZXJ0aWVzIiwib3duUHJvcGVydGllcyIsImFycjEiLCIkcFByb3BlcnR5IiwiaTEiLCJsMSIsInVzZVBhdHRlcm4iLCIkbWlzc2luZ1BhdHRlcm4iLCJnZW5lcmF0ZV9zd2l0Y2giLCIkZXJycyIsIiRpdCIsImNvcHkiLCIkbmV4dFZhbGlkIiwiJGlmUGFzc2VkIiwiJGN1cnJlbnRCYXNlSWQiLCJiYXNlSWQiLCIkc2hvdWxkQ29udGludWUiLCIkc2NoIiwiJGNhc2VJbmRleCIsImlmIiwic2NoZW1hSGFzUnVsZXMiLCJSVUxFUyIsImFsbCIsIiR3YXNDb21wb3NpdGUiLCJ0aGVuIiwiY29udGludWUiLCJjbGVhblVwQ29kZSIsInNlcXVlbmNlcyIsIkRFRkFVTFRTIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImRhdGV0aW1lIiwidG9JU09TdHJpbmciLCJzbGljZSIsInJhbmRvbSIsIk1hdGgiLCJyYW5kb21pbnQiLCJhcmdzIiwibGltaXQiLCJtYXgiLCJmbG9vciIsInNlcSIsImNvbXBpbGUiLCJwYXJlbnRTY2hlbWEiLCJmdW5jcyIsImQiLCJmdW5jIiwiZ2V0RGVmYXVsdCIsInVzZURlZmF1bHRzIiwiYXNzaWduRGVmYXVsdHMiLCJub29wIiwicHJvcCIsImRlZiIsInJhbmdlIiwicmVnZXhwIiwiZHluYW1pY0RlZmF1bHRzIiwicHJvaGliaXRlZCIsInVuaXF1ZUl0ZW1Qcm9wZXJ0aWVzIiwiZGVlcFByb3BlcnRpZXMiLCJkZWVwUmVxdWlyZWQiLCJmb3JtYXRNaW5pbXVtIiwiZm9ybWF0TWF4aW11bSIsInBhdHRlcm5SZXF1aXJlZCIsInNlbGVjdCIsInRyYW5zZm9ybSIsIkNPTlNUUlVDVE9SUyIsIk9iamVjdCIsIkZ1bmN0aW9uIiwiTnVtYmVyIiwiU3RyaW5nIiwiQnVmZmVyIiwiUHJvbWlzZSIsIkNvbnN0cnVjdG9yIiwiZ2V0Q29uc3RydWN0b3IiLCJjb25zdHJ1Y3RvcnMiLCJtYXAiLCJjIiwidW5pcXVlSXRlbXMiLCJub3QiLCJtaW4iLCJleGNsdXNpdmUiLCJleGNsdXNpdmVSYW5nZSIsInZhbGlkYXRlUmFuZ2VTY2hlbWEiLCJleGNsdXNpdmVNaW5pbXVtIiwiZXhjbHVzaXZlTWF4aW11bSIsIm1pbmltdW0iLCJtYXhpbXVtIiwibWluSXRlbXMiLCJtYXhJdGVtcyIsImdldFJlZ0V4cCIsInBhdHRlcm4iLCJmbGFncyIsInJ4IiwiZSIsImVycm9yIiwiY29tcGlsZWRDYXNlU2NoZW1hcyIsInYiLCJzZWxlY3RDYXNlcyIsImNvbXBpbGVkIiwiZ2V0Q29tcGlsZWRTY2hlbWFzIiwiY2FzZXMiLCJkZWZhdWx0IiwidmFsaWQiLCJ2YWx1ZSIsImNvbXBpbGVPckJvb2xlYW4iLCJjcmVhdGUiLCJzb21lIiwia2V5d29yZHMiLCJzd2l0Y2giLCJkZXBlbmRlbmNpZXMiLCJtb2RpZnlpbmciLCJoYXNodGFibGUiLCJpbmRleE9mIiwiZW51bSIsImsiLCJtYWtlSGFzaFRhYmxlS2V5IiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInRvRW51bUNhc2UiLCJvYmplY3RLZXkiLCJvYmplY3QiLCJqIiwibCIsIktOT1dOX1RZUEVTIiwia2V5cyIsImVxdWFsIiwiY29tcGlsZVNjaGVtYSIsInJlc29sdmUiLCJDYWNoZSIsIlNjaGVtYU9iamVjdCIsInN0YWJsZVN0cmluZ2lmeSIsInJ1bGVzIiwiJGRhdGFNZXRhU2NoZW1hIiwiQWp2IiwicHJvdG90eXBlIiwiYWRkU2NoZW1hIiwiYWRkTWV0YVNjaGVtYSIsInZhbGlkYXRlU2NoZW1hIiwicmVtb3ZlU2NoZW1hIiwiYWRkRm9ybWF0IiwiZXJyb3JzVGV4dCIsIl9hZGRTY2hlbWEiLCJfY29tcGlsZSIsImNvbXBpbGVBc3luYyIsImN1c3RvbUtleXdvcmQiLCJhZGQiLCJnZXRLZXl3b3JkIiwicmVtb3ZlS2V5d29yZCIsInJlbW92ZSIsImVycm9yQ2xhc3NlcyIsIlZhbGlkYXRpb25FcnJvciIsIlZhbGlkYXRpb24iLCJNaXNzaW5nUmVmRXJyb3IiLCJNaXNzaW5nUmVmIiwiTUVUQV9JR05PUkVfT1BUSU9OUyIsIk1FVEFfU1VQUE9SVF9EQVRBIiwic2V0TG9nZ2VyIiwiX3NjaGVtYXMiLCJfcmVmcyIsIl9mcmFnbWVudHMiLCJzY2hlbWFVcmlGb3JtYXQiLCJfc2NoZW1hVXJpRm9ybWF0IiwiX3NjaGVtYVVyaUZvcm1hdEZ1bmMiLCJfY2FjaGUiLCJjYWNoZSIsIl9sb2FkaW5nU2NoZW1hcyIsIl9jb21waWxhdGlvbnMiLCJfZ2V0SWQiLCJjaG9vc2VHZXRJZCIsImxvb3BSZXF1aXJlZCIsIkluZmluaXR5IiwiZXJyb3JEYXRhUGF0aCIsIl9lcnJvckRhdGFQYXRoUHJvcGVydHkiLCJzZXJpYWxpemUiLCJfbWV0YU9wdHMiLCJnZXRNZXRhU2NoZW1hT3B0aW9ucyIsImFkZEluaXRpYWxGb3JtYXRzIiwiYWRkRHJhZnQ2TWV0YVNjaGVtYSIsIm1ldGEiLCJhZGRJbml0aWFsU2NoZW1hcyIsInNjaGVtYUtleVJlZiIsInNjaGVtYU9iaiIsIiRhc3luYyIsIl9tZXRhIiwiX3NraXBWYWxpZGF0aW9uIiwiaWQiLCJub3JtYWxpemVJZCIsImNoZWNrVW5pcXVlIiwic2tpcFZhbGlkYXRpb24iLCJ0aHJvd09yTG9nRXJyb3IiLCJsb2dnZXIiLCJjdXJyZW50VXJpRm9ybWF0IiwidXJpIiwibWVzc2FnZSIsInNlbGYiLCJrZXlSZWYiLCJfZ2V0U2NoZW1hT2JqIiwiX2dldFNjaGVtYUZyYWdtZW50IiwicmVmIiwiY2FsbCIsInJvb3QiLCJmcmFnbWVudCIsIl9yZW1vdmVBbGxTY2hlbWFzIiwiY2xlYXIiLCJkZWwiLCJjYWNoZUtleSIsInJlZ2V4Iiwic2hvdWxkQWRkU2NoZW1hIiwiY2FjaGVkIiwiYWRkVXNlZFNjaGVtYSIsIndpbGxWYWxpZGF0ZSIsInJlY3Vyc2l2ZU1ldGEiLCJsb2NhbFJlZnMiLCJpZHMiLCJwdXQiLCJjb21waWxpbmciLCJjYWxsVmFsaWRhdGUiLCJjdXJyZW50T3B0cyIsInJlZnMiLCJyZWZWYWwiLCJfdmFsaWRhdGUiLCJyZXN1bHQiLCJhcHBseSIsImFyZ3VtZW50cyIsInNjaGVtYUlkIiwiX2dldCRJZE9ySWQiLCJfZ2V0JElkIiwiJGlkIiwib3B0aW9ucyIsInNlcGFyYXRvciIsImRhdGFWYXIiLCJ0ZXh0IiwiZGF0YVBhdGgiLCIkZGF0YVNjaGVtYSIsIm9wdHNTY2hlbWFzIiwibWV0YU9wdHMiLCJsb2ciLCJDYWNoZV9wdXQiLCJDYWNoZV9nZXQiLCJDYWNoZV9kZWwiLCJDYWNoZV9jbGVhciIsImNhbGxiYWNrIiwibG9hZFNjaGVtYSIsInAiLCJsb2FkTWV0YVNjaGVtYU9mIiwiX2NvbXBpbGVBc3luYyIsInNjaCIsImxvYWRNaXNzaW5nU2NoZW1hIiwibWlzc2luZ1NjaGVtYSIsImFkZGVkIiwibWlzc2luZ1JlZiIsInNjaGVtYVByb21pc2UiLCJyZW1vdmVQcm9taXNlIiwiZXJyb3JTdWJjbGFzcyIsInZhbGlkYXRpb24iLCJ1cmwiLCJmdWxsUGF0aCIsIlN1YmNsYXNzIiwiY29uc3RydWN0b3IiLCJEQVRFIiwiREFZUyIsIkhPU1ROQU1FIiwiVVJJIiwiVVJJUkVGIiwiVVJJVEVNUExBVEUiLCJVUkwiLCJVVUlEIiwiSlNPTl9QT0lOVEVSIiwiSlNPTl9QT0lOVEVSX1VSSV9GUkFHTUVOVCIsIlJFTEFUSVZFX0pTT05fUE9JTlRFUiIsIm1vZGUiLCJmYXN0IiwiZW1haWwiLCJob3N0bmFtZSIsImlwdjQiLCJpcHY2IiwidXVpZCIsImZ1bGwiLCJkYXRlX3RpbWUiLCJpc0xlYXBZZWFyIiwieWVhciIsIm1hdGNoZXMiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZSIsImRhdGVUaW1lIiwiTk9UX1VSSV9GUkFHTUVOVCIsIlpfQU5DSE9SIiwidmFsaWRhdGVHZW5lcmF0b3IiLCJ1Y3MybGVuZ3RoIiwicGF0dGVybnMiLCJwYXR0ZXJuc0hhc2giLCJkZWZhdWx0cyIsImRlZmF1bHRzSGFzaCIsImN1c3RvbVJ1bGVzIiwiY2hlY2tDb21waWxpbmciLCJjb21waWxhdGlvbiIsImluZGV4IiwibG9jYWxDb21waWxlIiwiY3YiLCJzb3VyY2VDb2RlIiwic291cmNlIiwiZW5kQ29tcGlsaW5nIiwiX3NjaGVtYSIsIl9yb290IiwiaXNSb290IiwiaXNUb3AiLCJyZXNvbHZlUmVmIiwidXNlRGVmYXVsdCIsInVzZUN1c3RvbVJ1bGUiLCJ2YXJzIiwicmVmVmFsQ29kZSIsInBhdHRlcm5Db2RlIiwiZGVmYXVsdENvZGUiLCJjdXN0b21SdWxlQ29kZSIsInByb2Nlc3NDb2RlIiwibWFrZVZhbGlkYXRlIiwiY29kZSIsInJlZkluZGV4IiwiX3JlZlZhbCIsInJlZkNvZGUiLCJyZXNvbHZlZFJlZiIsInJvb3RSZWZJZCIsImFkZExvY2FsUmVmIiwibG9jYWxTY2hlbWEiLCJpbmxpbmVSZWYiLCJpbmxpbmVSZWZzIiwicmVtb3ZlTG9jYWxSZWYiLCJyZXBsYWNlTG9jYWxSZWYiLCJyZWZJZCIsInJlZ2V4U3RyIiwidmFsdWVTdHIiLCJydWxlIiwiY29tcEluZGV4Iiwic3BsaWNlIiwiYXJyIiwic3RhdGVtZW50IiwidHJhdmVyc2UiLCJnZXRGdWxsUGF0aCIsInJlc29sdmVVcmwiLCJyZXNvbHZlSWRzIiwicmVzb2x2ZVNjaGVtYSIsInBhcnNlIiwicmVmUGF0aCIsIl9nZXRGdWxsUGF0aCIsInJlc29sdmVSZWN1cnNpdmUiLCJnZXRKc29uUG9pbnRlciIsInBhcnNlZFJlZiIsIlBSRVZFTlRfU0NPUEVfQ0hBTkdFIiwidG9IYXNoIiwicGFydHMiLCJwYXJ0IiwidW5lc2NhcGVGcmFnbWVudCIsIlNJTVBMRV9JTkxJTkVEIiwiY2hlY2tOb1JlZiIsImNvdW50S2V5cyIsIml0ZW0iLCJub3JtYWxpemUiLCJUUkFJTElOR19TTEFTSF9IQVNIIiwiYmFzZUlkcyIsImZ1bGxQYXRocyIsImFsbEtleXMiLCJqc29uUHRyIiwicGFyZW50SnNvblB0ciIsInBhcmVudEtleXdvcmQiLCJrZXlJbmRleCIsImVzY2FwZUZyYWdtZW50IiwicnVsZU1vZHVsZXMiLCJBTEwiLCJUWVBFUyIsInR5cGVzIiwiZm9yRWFjaCIsImdyb3VwIiwiaW1wbEtleXdvcmRzIiwiaW1wbGVtZW50cyIsIiRjb21tZW50IiwiY29uY2F0IiwiY3VzdG9tIiwib2JqIiwibGVuIiwicG9zIiwiY2hhckNvZGVBdCIsImNoZWNrRGF0YVR5cGUiLCJjaGVja0RhdGFUeXBlcyIsImNvZXJjZVRvVHlwZXMiLCJ2YXJPY2N1cmVuY2VzIiwidmFyUmVwbGFjZSIsImZpbmFsQ2xlYW5VcENvZGUiLCJzY2hlbWFIYXNSdWxlc0V4Y2VwdCIsImdldFBhdGhFeHByIiwiZ2V0UGF0aCIsImVzY2FwZUpzb25Qb2ludGVyIiwibyIsInRvIiwiZGF0YVR5cGUiLCJuZWdhdGUiLCJFUVVBTCIsIkFORCIsIk9LIiwiTk9UIiwiZGF0YVR5cGVzIiwiYXJyYXkiLCJudWxsIiwibnVtYmVyIiwiaW50ZWdlciIsInQiLCJDT0VSQ0VfVE9fVFlQRVMiLCJvcHRpb25Db2VyY2VUeXBlcyIsImhhc2giLCJFTVBUWV9FTFNFIiwiRU1QVFlfSUZfTk9fRUxTRSIsIkVNUFRZX0lGX1dJVEhfRUxTRSIsIkVSUk9SU19SRUdFWFAiLCJSRU1PVkVfRVJST1JTIiwiUkVNT1ZFX0VSUk9SU19BU1lOQyIsIlJFVFVSTl9WQUxJRCIsIlJFVFVSTl9UUlVFIiwiUkVUVVJOX0FTWU5DIiwiUkVUVVJOX0RBVEFfQVNZTkMiLCJST09UREFUQV9SRUdFWFAiLCJSRU1PVkVfUk9PVERBVEEiLCJleGNlcHRLZXl3b3JkIiwiY3VycmVudFBhdGgiLCJqc29uUG9pbnRlcnMiLCJpc051bWJlciIsInBhdGgiLCJqb2luUGF0aHMiLCJwYXRocyIsInVwIiwiYSIsImIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJrZXl3b3Jkc0pzb25Qb2ludGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZW5lcmF0ZV9fbGltaXQiLCIkbm90T3AiLCIkZXhjbFR5cGUiLCIkZXhjbElzTnVtYmVyIiwiZ2VuZXJhdGVfX2xpbWl0SXRlbXMiLCJnZW5lcmF0ZV9fbGltaXRMZW5ndGgiLCJ1bmljb2RlIiwiZ2VuZXJhdGVfX2xpbWl0UHJvcGVydGllcyIsImdlbmVyYXRlX2FsbE9mIiwiJGFsbFNjaGVtYXNFbXB0eSIsIiRpIiwiZ2VuZXJhdGVfYW55T2YiLCIkbm9FbXB0eVNjaGVtYSIsImV2ZXJ5IiwiZ2VuZXJhdGVfY29tbWVudCIsImdlbmVyYXRlX2NvbnN0IiwiZ2VuZXJhdGVfY29udGFpbnMiLCIkZGF0YU54dCIsIiRuZXh0RGF0YSIsIiRub25FbXB0eVNjaGVtYSIsIiRwYXNzRGF0YSIsIiRjb2RlIiwiZ2VuZXJhdGVfY3VzdG9tIiwiJHJ1bGUiLCIkZGVmaW5pdGlvbiIsIiRyRGVmIiwiJGNvbXBpbGUiLCIkaW5saW5lIiwiJG1hY3JvIiwiJHJ1bGVWYWxpZGF0ZSIsIiR2YWxpZGF0ZUNvZGUiLCIkdmFsaWRhdGVTY2hlbWEiLCIkcnVsZUVycnMiLCIkcnVsZUVyciIsIiRhc3luY0tleXdvcmQiLCJwYXNzQ29udGV4dCIsIiRwYXJlbnREYXRhIiwiJHBhcmVudERhdGFQcm9wZXJ0eSIsImRlZl9jYWxsUnVsZVZhbGlkYXRlIiwiZGVmX2N1c3RvbUVycm9yIiwiZ2VuZXJhdGVfZGVwZW5kZW5jaWVzIiwiJHNjaGVtYURlcHMiLCIkcHJvcGVydHlEZXBzIiwiJHByb3BlcnR5IiwiJGRlcHMiLCIkY3VycmVudEVycm9yUGF0aCIsIiRwcm9wZXJ0eUtleSIsIiRwcm9wIiwiJHVzZURhdGEiLCIkcHJvcGVydHlQYXRoIiwiJG1pc3NpbmdQcm9wZXJ0eSIsImpvaW4iLCJhcnIyIiwiaTIiLCJsMiIsImdlbmVyYXRlX2VudW0iLCIkdlNjaGVtYSIsImdlbmVyYXRlX2Zvcm1hdCIsIiR1bmtub3duRm9ybWF0cyIsInVua25vd25Gb3JtYXRzIiwiJGFsbG93VW5rbm93biIsIiRpc09iamVjdCIsIiRmb3JtYXRUeXBlIiwiJGZvcm1hdFJlZiIsImdlbmVyYXRlX2lmIiwiJHRoZW5TY2giLCIkZWxzZVNjaCIsIiR0aGVuUHJlc2VudCIsIiRlbHNlUHJlc2VudCIsIiRpZkNsYXVzZSIsImFsbE9mIiwiY29uc3QiLCJjb250YWlucyIsIm1heExlbmd0aCIsIm1pbkxlbmd0aCIsIm1heFByb3BlcnRpZXMiLCJtaW5Qcm9wZXJ0aWVzIiwibXVsdGlwbGVPZiIsIm9uZU9mIiwiZ2VuZXJhdGVfaXRlbXMiLCIkYWRkaXRpb25hbEl0ZW1zIiwiYWRkaXRpb25hbEl0ZW1zIiwiJGN1cnJFcnJTY2hlbWFQYXRoIiwiZ2VuZXJhdGVfbXVsdGlwbGVPZiIsIm11bHRpcGxlT2ZQcmVjaXNpb24iLCJnZW5lcmF0ZV9ub3QiLCIkYWxsRXJyb3JzT3B0aW9uIiwiZ2VuZXJhdGVfb25lT2YiLCIkcHJldlZhbGlkIiwiJHBhc3NpbmdTY2hlbWFzIiwiZ2VuZXJhdGVfcGF0dGVybiIsIiRyZWdleHAiLCJnZW5lcmF0ZV9wcm9wZXJ0aWVzIiwiJHNjaGVtYUtleXMiLCIkcFByb3BlcnRpZXMiLCJwYXR0ZXJuUHJvcGVydGllcyIsIiRwUHJvcGVydHlLZXlzIiwiJGFQcm9wZXJ0aWVzIiwiJHNvbWVQcm9wZXJ0aWVzIiwiJG5vQWRkaXRpb25hbCIsIiRhZGRpdGlvbmFsSXNTY2hlbWEiLCIkcmVtb3ZlQWRkaXRpb25hbCIsInJlbW92ZUFkZGl0aW9uYWwiLCIkY2hlY2tBZGRpdGlvbmFsIiwiJHJlcXVpcmVkIiwiJHJlcXVpcmVkSGFzaCIsIiRhZGRpdGlvbmFsUHJvcGVydHkiLCIkdXNlRGVmYXVsdHMiLCJhcnIzIiwiaTMiLCJsMyIsIiRoYXNEZWZhdWx0IiwiYXJyNCIsImk0IiwibDQiLCJnZW5lcmF0ZV9wcm9wZXJ0eU5hbWVzIiwiJGludmFsaWROYW1lIiwiZ2VuZXJhdGVfcmVmIiwiJHJlZkNvZGUiLCIkcmVmVmFsIiwiJG1lc3NhZ2UiLCJtaXNzaW5nUmVmcyIsIl9fY2FsbFZhbGlkYXRlIiwiZ2VuZXJhdGVfcmVxdWlyZWQiLCIkcHJvcGVydHlTY2giLCIkbG9vcFJlcXVpcmVkIiwiZ2VuZXJhdGVfdW5pcXVlSXRlbXMiLCIkaXRlbVR5cGUiLCIkdHlwZUlzQXJyYXkiLCIkbWV0aG9kIiwiZ2VuZXJhdGVfdmFsaWRhdGUiLCIkcmVmS2V5d29yZHMiLCIkdG9wIiwicm9vdElkIiwiJGNsb3NpbmdCcmFjZXMxIiwiJGNsb3NpbmdCcmFjZXMyIiwiJHR5cGVTY2hlbWEiLCJleHRlbmRSZWZzIiwiY29lcmNlVHlwZXMiLCIkY29lcmNlVG9UeXBlcyIsIiRydWxlc0dyb3VwIiwiJHNob3VsZFVzZUdyb3VwIiwiJGRhdGFUeXBlIiwiJGNvZXJjZWQiLCIkYnJhY2VzQ29lcmNpb24iLCIkdHlwZSIsImFycjUiLCJpNSIsImw1IiwiJHNob3VsZFVzZVJ1bGUiLCIkcnVsZUltcGxlbWVudHNTb21lS2V5d29yZCIsImltcGwiLCJfYWRkUnVsZSIsInJ1bGVHcm91cCIsInJnIiwiYXNuMSIsImJpZ251bSIsImRlZmluZSIsImJhc2UiLCJjb25zdGFudHMiLCJkZWNvZGVycyIsImVuY29kZXJzIiwiaW5oZXJpdHMiLCJhcGkiLCJib2R5IiwiRW50aXR5IiwiX2NyZWF0ZU5hbWVkIiwiY3JlYXRlTmFtZWQiLCJuYW1lZCIsInJ1bkluVGhpc0NvbnRleHQiLCJlbnRpdHkiLCJfaW5pdE5hbWVkIiwiaW5pdG5hbWVkIiwiX2dldERlY29kZXIiLCJlbmMiLCJoYXNPd25Qcm9wZXJ0eSIsImRlY29kZSIsIl9nZXRFbmNvZGVyIiwiZW5jb2RlIiwicmVwb3J0ZXIiLCJSZXBvcnRlciIsIkRlY29kZXJCdWZmZXIiLCJpc0J1ZmZlciIsIm9mZnNldCIsInNhdmUiLCJyZXN0b3JlIiwiaXNFbXB0eSIsInJlYWRVSW50OCIsImZhaWwiLCJza2lwIiwiYnl0ZXMiLCJfcmVwb3J0ZXJTdGF0ZSIsInJhdyIsIkVuY29kZXJCdWZmZXIiLCJieXRlTGVuZ3RoIiwid3JpdGUiLCJOb2RlIiwiYXNzZXJ0IiwidGFncyIsIm1ldGhvZHMiLCJvdmVycmlkZWQiLCJwYXJlbnQiLCJzdGF0ZSIsIl9iYXNlU3RhdGUiLCJjaGlsZHJlbiIsInRhZyIsInJldmVyc2VBcmdzIiwiY2hvaWNlIiwib3B0aW9uYWwiLCJhbnkiLCJ1c2UiLCJ1c2VEZWNvZGVyIiwiZXhwbGljaXQiLCJpbXBsaWNpdCIsIl93cmFwIiwic3RhdGVQcm9wcyIsImNsb25lIiwiY3N0YXRlIiwid3JhcCIsIm1ldGhvZCIsIl93cmFwcGVkTWV0aG9kIiwiX2luaXQiLCJpbml0IiwiZmlsdGVyIiwiY2hpbGQiLCJfdXNlQXJncyIsInVzZUFyZ3MiLCJhcmciLCJfb3ZlcnJpZGVkIiwiX3RhZ01ldGhvZCIsInZhbCIsIm51bSIsIm5ld0tleSIsIl9kZWNvZGUiLCJpbnB1dCIsIndyYXBSZXN1bHQiLCJwcmVzZW50IiwicHJldktleSIsImVudGVyS2V5IiwiX2RlY29kZUdlbmVyaWMiLCJfZGVjb2RlQ2hvaWNlIiwiX3BlZWtUYWciLCJpc0Vycm9yIiwicHJldk9iaiIsImVudGVyT2JqZWN0IiwiX2RlY29kZVRhZyIsInN0YXJ0IiwidHJhY2siLCJkZWNvZGVDaGlsZHJlbiIsIl9nZXRVc2UiLCJsZWF2ZU9iamVjdCIsImxlYXZlS2V5IiwiZXhpdEtleSIsImRlY29kZUdlbmVyaWMiLCJfZGVjb2RlTGlzdCIsIl9kZWNvZGVTdHIiLCJfZGVjb2RlT2JqaWQiLCJfZGVjb2RlVGltZSIsIl9kZWNvZGVOdWxsIiwiX2RlY29kZUJvb2wiLCJfZGVjb2RlSW50IiwiX3VzZSIsImRlY29kZUNob2ljZSIsIm5vZGUiLCJfY3JlYXRlRW5jb2RlckJ1ZmZlciIsImNyZWF0ZUVuY29kZXJCdWZmZXIiLCJfZW5jb2RlIiwiX2VuY29kZVZhbHVlIiwiX3NraXBEZWZhdWx0IiwiY29udGVudCIsInByaW1pdGl2ZSIsIl9lbmNvZGVDaG9pY2UiLCJfZW5jb2RlUHJpbWl0aXZlIiwiY2xzIiwiX2VuY29kZUNvbXBvc2l0ZSIsImVuY29kZUNob2ljZSIsImVuY29kZVByaW1pdGl2ZSIsIl9lbmNvZGVTdHIiLCJfZW5jb2RlT2JqaWQiLCJfZW5jb2RlVGltZSIsIl9lbmNvZGVOdWxsIiwiX2VuY29kZUludCIsIl9lbmNvZGVCb29sIiwiX2lzTnVtc3RyIiwiaXNOdW1zdHIiLCJfaXNQcmludHN0ciIsImlzUHJpbnRzdHIiLCJSZXBvcnRlckVycm9yIiwicGF0aExlbiIsInByZXYiLCJtc2ciLCJlcnIiLCJpbmhlcml0ZWQiLCJlbGVtIiwic3RhY2siLCJwYXJ0aWFsIiwicmV0aHJvdyIsImNhcHR1cmVTdGFja1RyYWNlIiwidGFnQ2xhc3MiLCJ0YWdDbGFzc0J5TmFtZSIsIl9yZXZlcnNlIiwidGFnQnlOYW1lIiwicmV2ZXJzZSIsImRlciIsIkRFUkRlY29kZXIiLCJ0cmVlIiwiREVSTm9kZSIsInBlZWtUYWciLCJidWZmZXIiLCJkZWNvZGVkVGFnIiwiZGVyRGVjb2RlVGFnIiwidGFnU3RyIiwiZGVjb2RlVGFnIiwiZGVyRGVjb2RlTGVuIiwiX3NraXBVbnRpbEVuZCIsInNraXBVbnRpbEVuZCIsImRlY29kZUxpc3QiLCJkZWNvZGVyIiwicG9zc2libGVFbmQiLCJkZWNvZGVTdHIiLCJ1bnVzZWQiLCJmcm9tQ2hhckNvZGUiLCJyZWFkVUludDE2QkUiLCJudW1zdHIiLCJ0b1N0cmluZyIsInByaW50c3RyIiwiZGVjb2RlT2JqaWQiLCJ2YWx1ZXMiLCJyZWxhdGl2ZSIsImlkZW50aWZpZXJzIiwiaWRlbnQiLCJzdWJpZGVudCIsImZpcnN0IiwidG1wIiwiZGVjb2RlVGltZSIsIm1vbiIsInNlYyIsIlVUQyIsImRlY29kZU51bGwiLCJkZWNvZGVCb29sIiwiZGVjb2RlSW50IiwiYnVmIiwib2N0IiwicGVtIiwiUEVNRGVjb2RlciIsImxpbmVzIiwibGFiZWwiLCJyZSIsImVuZCIsImJhc2U2NCIsIkRFUkVuY29kZXIiLCJlbmNvZGVDb21wb3NpdGUiLCJlbmNvZGVkVGFnIiwiZW5jb2RlVGFnIiwiaGVhZGVyIiwibGVuT2N0ZXRzIiwiZW5jb2RlU3RyIiwid3JpdGVVSW50MTZCRSIsImVuY29kZU9iamlkIiwic2l6ZSIsIm9iamlkIiwidHdvIiwiZW5jb2RlVGltZSIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImVuY29kZU51bGwiLCJlbmNvZGVJbnQiLCJudW1BcnJheSIsInRvQXJyYXkiLCJzaWduIiwidW5zaGlmdCIsImVuY29kZUJvb2wiLCJza2lwRGVmYXVsdCIsImRhdGFCdWZmZXIiLCJkZWZhdWx0QnVmZmVyIiwiUEVNRW5jb2RlciIsInRvQnl0ZUFycmF5IiwiZnJvbUJ5dGVBcnJheSIsImxvb2t1cCIsInJldkxvb2t1cCIsIkFyciIsIlVpbnQ4QXJyYXkiLCJnZXRMZW5zIiwiYjY0IiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJsZW5zIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwidHJpcGxldFRvQmFzZTY0IiwiZW5jb2RlQ2h1bmsiLCJ1aW50OCIsIm91dHB1dCIsImV4dHJhQnl0ZXMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJnbG9iYWwiLCJEUCIsIlJNIiwiTUFYX0RQIiwiTUFYX1BPV0VSIiwiRV9ORUciLCJFX1BPUyIsIlAiLCJpc1ZhbGlkIiwiQmlnIiwiYmlnRmFjdG9yeSIsIm4iLCJ4IiwicyIsImRwIiwidG9FIiwicm5kIiwibkwiLCJ0aHJvd0VyciIsIk5hTiIsImNoYXJBdCIsInNlYXJjaCIsInN1YnN0cmluZyIsInJtIiwibW9yZSIsInUiLCJ4YyIsImFicyIsImNtcCIsInkiLCJ4TmVnIiwieWMiLCJkaXYiLCJkdmQiLCJkdnMiLCJkdnNMIiwiZHZzVCIsIm5leHQiLCJyZW1JIiwiZHZzWiIsImR2ZEkiLCJkdmRMIiwicmVtIiwicmVtTCIsInEiLCJxYyIsInFpIiwiZGlnaXRzIiwic2hpZnQiLCJlcSIsImd0IiwiZ3RlIiwibHQiLCJsdGUiLCJzdWIiLCJtaW51cyIsInhMVHkiLCJwbHVzIiwieGUiLCJ5ZSIsIm1vZCIsInlHVHgiLCJ0aW1lcyIsInBvdyIsIm9uZSIsImlzTmVnIiwicm91bmQiLCJzcXJ0IiwiZXN0aW1hdGUiLCJyIiwiYXBwcm94IiwiaGFsZiIsIm11bCIsInZhbHVlT2YiLCJ0b0pTT04iLCJzdHJMIiwidG9FeHBvbmVudGlhbCIsInRvRml4ZWQiLCJuZWciLCJ0b1ByZWNpc2lvbiIsInNkIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiQk4iLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsInJlZCIsIndvcmRTaXplIiwibGVmdCIsInJpZ2h0IiwiX2luaXROdW1iZXIiLCJfaW5pdEFycmF5IiwiX3BhcnNlSGV4IiwiX3BhcnNlQmFzZSIsInN0cmlwIiwiY2VpbCIsInciLCJvZmYiLCJwYXJzZUhleCIsInBhcnNlQmFzZSIsImxpbWJMZW4iLCJsaW1iUG93IiwidG90YWwiLCJ3b3JkIiwiaW11bG4iLCJfaWFkZG4iLCJkZXN0IiwiX2V4cGFuZCIsIl9ub3JtU2lnbiIsImluc3BlY3QiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwicGFkZGluZyIsImNhcnJ5IiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kbiIsImlkaXZuIiwidG9OdW1iZXIiLCJyZXQiLCJ0b0J1ZmZlciIsInRvQXJyYXlMaWtlIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwibGl0dGxlRW5kaWFuIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJfemVyb0JpdHMiLCJiaXRMZW5ndGgiLCJoaSIsInRvQml0QXJyYXkiLCJiaXQiLCJ3Yml0IiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiaWFkZCIsImlzdWIiLCJzbWFsbE11bFRvIiwibG8iLCJuY2FycnkiLCJyd29yZCIsIm1heEoiLCJjb21iMTBNdWxUbyIsIm1pZCIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJpbXVsIiwidzAiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJiaWdNdWxUbyIsImhuY2FycnkiLCJqdW1ib011bFRvIiwiZmZ0bSIsIkZGVE0iLCJtdWxwIiwibXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwicnR3ZGYiLCJjb3MiLCJQSSIsIml0d2RmIiwic2luIiwicnR3ZGZfIiwiaXR3ZGZfIiwiaWUiLCJybyIsImlvIiwiZ3Vlc3NMZW4xM2IiLCJtIiwib2RkIiwiY29uanVnYXRlIiwibm9ybWFsaXplMTNiIiwid3MiLCJjb252ZXJ0MTNiIiwic3R1YiIsInBoIiwiXyIsInJ3c3QiLCJpd3N0IiwibnJ3cyIsIm5yd3N0Iiwibml3c3QiLCJybXdzIiwibXVsZiIsIm11bG4iLCJzcXIiLCJpc3FyIiwiaXVzaGxuIiwiYml0cyIsImNhcnJ5TWFzayIsIm5ld0NhcnJ5IiwiaXNobG4iLCJoaW50IiwiZXh0ZW5kZWQiLCJoIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwiX3dvcmREaXYiLCJiaGkiLCJiaGlCaXRzIiwiZGlmZiIsInFqIiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJyMiIsImFjYyIsImVnY2QiLCJBIiwiQiIsIkMiLCJEIiwiZyIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImlzT2RkIiwiam0iLCJnY2QiLCJfaW52bXAiLCJ4MSIsIngyIiwiZGVsdGEiLCJjbXBuIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0ZW4iLCJsdG4iLCJsdGVuIiwiZXFuIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInJlZEludm0iLCJyZWROZWciLCJyZWRQb3ciLCJwcmltZXMiLCJrMjU2IiwicDIyNCIsInAxOTIiLCJwMjU1MTkiLCJNUHJpbWUiLCJfdG1wIiwiaXJlZHVjZSIsInJsZW4iLCJpbXVsSyIsIksyNTYiLCJvdXRMZW4iLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsIl9wcmltZSIsInByaW1lIiwiaW1vZCIsIm1vZDMiLCJuT25lIiwibHBvdyIsInoiLCJpbnYiLCJ3aW5kb3dTaXplIiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwiTW9udCIsInJpbnYiLCJtaW52IiwicmFuZCIsIlJhbmQiLCJnZW5lcmF0ZSIsIl9yYW5kIiwiZ2V0Qnl0ZXMiLCJnZXRCeXRlIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwibXNDcnlwdG8iLCJ3aW5kb3ciLCJyYW5kb21CeXRlcyIsImFzVUludDMyQXJyYXkiLCJmcm9tIiwicmVhZFVJbnQzMkJFIiwic2NydWJWZWMiLCJjcnlwdEJsb2NrIiwiTSIsImtleVNjaGVkdWxlIiwiU1VCX01JWCIsIlNCT1giLCJuUm91bmRzIiwiU1VCX01JWDAiLCJTVUJfTUlYMSIsIlNVQl9NSVgyIiwiU1VCX01JWDMiLCJzMCIsInMxIiwiczIiLCJzMyIsInQwIiwidDMiLCJrc1JvdyIsIlJDT04iLCJHIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4NCIsIng4IiwiQUVTIiwiX2tleSIsIl9yZXNldCIsImJsb2NrU2l6ZSIsImtleVNpemUiLCJrZXlXb3JkcyIsImtzUm93cyIsImludktleVNjaGVkdWxlIiwiaWsiLCJrc1IiLCJ0dCIsIl9uUm91bmRzIiwiX2tleVNjaGVkdWxlIiwiX2ludktleVNjaGVkdWxlIiwiZW5jcnlwdEJsb2NrUmF3IiwiZW5jcnlwdEJsb2NrIiwiYWxsb2NVbnNhZmUiLCJ3cml0ZVVJbnQzMkJFIiwiZGVjcnlwdEJsb2NrIiwibTEiLCJzY3J1YiIsImFlcyIsIlRyYW5zZm9ybSIsIkdIQVNIIiwiaW5jcjMyIiwieG9yVGVzdCIsImNhbGNJdiIsIml2IiwiY2siLCJfZmluSUQiLCJnaGFzaCIsInRvUGFkIiwidXBkYXRlIiwiYWxsb2MiLCJpdkJpdHMiLCJ0YWlsIiwid3JpdGVVSW50QkUiLCJTdHJlYW1DaXBoZXIiLCJkZWNyeXB0IiwiX2NpcGhlciIsIl9naGFzaCIsIl9wcmV2IiwiX3NlY0NhY2hlIiwiX2RlY3J5cHQiLCJfYWxlbiIsIl9sZW4iLCJfbW9kZSIsIl9hdXRoVGFnIiwiX2NhbGxlZCIsIl91cGRhdGUiLCJjaHVuayIsInJ1bXAiLCJlbmNyeXB0IiwiX2ZpbmFsIiwiZmluYWwiLCJnZXRBdXRoVGFnIiwic2V0QXV0aFRhZyIsInNldEFBRCIsImNpcGhlcnMiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImdldENpcGhlcnMiLCJjcmVhdGVDaXBoZXIiLCJDaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsIkNpcGhlcml2IiwiY3JlYXRlRGVjaXBoZXIiLCJEZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJEZWNpcGhlcml2IiwibGlzdENpcGhlcnMiLCJBdXRoQ2lwaGVyIiwiTU9ERVMiLCJlYnRrIiwiU3BsaXR0ZXIiLCJfbGFzdCIsIl9hdXRvcGFkZGluZyIsInRoaW5nIiwiZmx1c2giLCJ1bnBhZCIsInNldEF1dG9QYWRkaW5nIiwic2V0VG8iLCJhdXRvUGFkZGluZyIsImxhc3QiLCJwYWRkZWQiLCJzdWl0ZSIsInBhc3N3b3JkIiwiY29uZmlnIiwiVHlwZUVycm9yIiwiUEFERElORyIsImVxdWFscyIsInBhZEJ1ZmYiLCJ3cml0ZVVJbnQ4IiwiWkVST0VTIiwiZnJvbUFycmF5IiwiYmxvY2siLCJfbXVsdGlwbHkiLCJWaSIsIlppIiwibHNiVmkiLCJhYmwiLCJibCIsInBhZCIsImVuY3J5cHRTdGFydCIsImVuY3J5cHRCeXRlIiwiYnl0ZVBhcmFtIiwic2hpZnRJbiIsImdldEJsb2NrIiwiY2h1bmtOdW0iLCJtb2RlTW9kdWxlcyIsIkVDQiIsIkNCQyIsIkNGQiIsIkNGQjgiLCJDRkIxIiwiT0ZCIiwiQ1RSIiwiR0NNIiwiREVTIiwiYWVzTW9kZXMiLCJkZXNNb2RlcyIsImtleUxlbiIsIml2TGVuIiwiQ2lwaGVyQmFzZSIsImRlcyIsImluc3RhbnRpYXRlIiwiRURFIiwiZGVzMyIsIm1vZGVOYW1lIiwiX2RlcyIsImJuIiwiY3J0IiwiYmxpbmQiLCJwcml2IiwiZ2V0ciIsImJsaW5kZXIiLCJtb2R1bHVzIiwicHVibGljRXhwb25lbnQiLCJ1bmJsaW5kZXIiLCJibGluZHMiLCJibGluZGVkIiwiYzEiLCJwcmltZTEiLCJjMiIsInByaW1lMiIsInFpbnYiLCJjb2VmZmljaWVudCIsImV4cG9uZW50MSIsIm0yIiwiZXhwb25lbnQyIiwiY3JlYXRlSGFzaCIsInN0cmVhbSIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJTaWduIiwiYWxnb3JpdGhtIiwiV3JpdGFibGUiLCJfaGFzaFR5cGUiLCJfaGFzaCIsIl90YWciLCJfc2lnblR5cGUiLCJfd3JpdGUiLCJkb25lIiwic2lnbk1ldGhvZCIsImRpZ2VzdCIsInNpZyIsIlZlcmlmeSIsInZlcmlmeU1ldGhvZCIsImNyZWF0ZVNpZ24iLCJjcmVhdGVWZXJpZnkiLCJjcmVhdGVIbWFjIiwiRUMiLCJlYyIsInBhcnNlS2V5cyIsImN1cnZlcyIsImhhc2hUeXBlIiwic2lnblR5cGUiLCJjdXJ2ZSIsImVjU2lnbiIsImRzYVNpZ24iLCJjdXJ2ZUlkIiwia2V5RnJvbVByaXZhdGUiLCJwcml2YXRlS2V5IiwidG9ERVIiLCJhbGdvIiwicGFyYW1zIiwicHJpdl9rZXkiLCJIIiwiYml0czJpbnQiLCJrdiIsImdldEtleSIsIm1ha2VLZXkiLCJtYWtlUiIsImZpbGwiLCJobGVuIiwiaGJpdHMiLCJiaXRzMm9jdGV0cyIsIm9iaXRzIiwicHViIiwiZWNWZXJpZnkiLCJkc2FWZXJpZnkiLCJwYWROdW0iLCJwdWJrZXkiLCJzdWJqZWN0UHJpdmF0ZUtleSIsInB1Yl9rZXkiLCJ1bnBhY2tlZCIsInNpZ25hdHVyZSIsImNoZWNrVmFsdWUiLCJtb250cCIsImllZWU3NTQiLCJTbG93QnVmZmVyIiwiSU5TUEVDVF9NQVhfQllURVMiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwidHlwZWRBcnJheVN1cHBvcnQiLCJrTWF4TGVuZ3RoIiwiX19wcm90b19fIiwiZm9vIiwic3ViYXJyYXkiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImVuY29kaW5nT3JPZmZzZXQiLCJwb29sU2l6ZSIsIl9hdWdtZW50IiwiQXJyYXlCdWZmZXIiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiZnJvbU9iamVjdCIsIlN5bWJvbCIsInNwZWNpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImFzc2VydFNpemUiLCJlbmNvZGluZyIsImNoZWNrZWQiLCJhbGxvY1Vuc2FmZVNsb3ciLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbUFycmF5TGlrZSIsImJ5dGVPZmZzZXQiLCJpc25hbiIsIl9pc0J1ZmZlciIsImxpc3QiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJpbmNsdWRlcyIsImhleFdyaXRlIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImlzRmluaXRlIiwiX2FyciIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImNvZGVQb2ludHMiLCJ0b0hleCIsIm5ld0J1ZiIsInNsaWNlTGVuIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJyZWFkVUludExFIiwibm9Bc3NlcnQiLCJyZWFkVUludEJFIiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJjaGVja0ludCIsIndyaXRlVUludExFIiwibWF4Qnl0ZXMiLCJvYmplY3RXcml0ZVVJbnQxNiIsIndyaXRlVUludDE2TEUiLCJvYmplY3RXcml0ZVVJbnQzMiIsIndyaXRlVUludDMyTEUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImJhc2U2NGNsZWFuIiwic3RyaW5ndHJpbSIsInVuaXRzIiwibGVhZFN1cnJvZ2F0ZSIsImJ5dGVBcnJheSIsInNyYyIsImRzdCIsIlN0cmluZ0RlY29kZXIiLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3RvU3RyaW5nIiwiX3RyYW5zZm9ybSIsIl9mbHVzaCIsImZpbiIsIm9iamVjdFRvU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiZWxsaXB0aWMiLCJjcmVhdGVFQ0RIIiwiRUNESCIsImFsaWFzZXMiLCJzZWNwMjU2azEiLCJzZWNwMjI0cjEiLCJwcmltZTI1NnYxIiwicHJpbWUxOTJ2MSIsImVkMjU1MTkiLCJzZWNwMzg0cjEiLCJzZWNwNTIxcjEiLCJwMjU2Iiwic2VjcDI1NnIxIiwic2VjcDE5MnIxIiwicDM4NCIsInA1MjEiLCJjdXJ2ZVR5cGUiLCJnZW5lcmF0ZUtleXMiLCJnZW5LZXlQYWlyIiwiZ2V0UHVibGljS2V5IiwiY29tcHV0ZVNlY3JldCIsIm90aGVyIiwiaW5lbmMiLCJvdGhlclB1YiIsImtleUZyb21QdWJsaWMiLCJnZXRQdWJsaWMiLCJnZXRQcml2YXRlIiwiZ2V0WCIsImZvcm1hdFJldHVyblZhbHVlIiwiZ2V0UHJpdmF0ZUtleSIsInNldFB1YmxpY0tleSIsIl9pbXBvcnRQdWJsaWMiLCJzZXRQcml2YXRlS2V5IiwiX3ByaXYiLCJfaW1wb3J0UHJpdmF0ZSIsIk1ENSIsIlJJUEVNRDE2MCIsInNoYSIsIkJhc2UiLCJIYXNoIiwiYWxnIiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsInJuZyIsInBzZXVkb1JhbmRvbUJ5dGVzIiwicHJuZyIsImFsZ29zIiwiYWxnb0tleXMiLCJoYXNoZXMiLCJnZXRIYXNoZXMiLCJwYmtkZjIiLCJwYmtkZjJTeW5jIiwiZGgiLCJEaWZmaWVIZWxsbWFuR3JvdXAiLCJjcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAiLCJnZXREaWZmaWVIZWxsbWFuIiwiY3JlYXRlRGlmZmllSGVsbG1hbiIsIkRpZmZpZUhlbGxtYW4iLCJwdWJsaWNFbmNyeXB0IiwicHJpdmF0ZUVuY3J5cHQiLCJwdWJsaWNEZWNyeXB0IiwicHJpdmF0ZURlY3J5cHQiLCJyZiIsInJhbmRvbUZpbGwiLCJyYW5kb21GaWxsU3luYyIsImNyZWF0ZUNyZWRlbnRpYWxzIiwidXRpbHMiLCJwcm90byIsIkNCQ1N0YXRlIiwiX2NiY0luaXQiLCJfY2JjU3RhdGUiLCJpbnAiLCJpbk9mZiIsIm91dE9mZiIsInN1cGVyUHJvdG8iLCJidWZmZXJPZmYiLCJfdXBkYXRlRGVjcnlwdCIsIl91cGRhdGVFbmNyeXB0IiwiX2J1ZmZlciIsIl9mbHVzaEJ1ZmZlciIsImlucHV0T2ZmIiwib3V0cHV0T2ZmIiwiX2ZpbmFsRW5jcnlwdCIsIl9maW5hbERlY3J5cHQiLCJfcGFkIiwiX3VucGFkIiwiREVTU3RhdGUiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwic2hpZnRUYWJsZSIsImtMIiwia1IiLCJwYzEiLCJyMjhzaGwiLCJwYzIiLCJpcCIsIl9lbmNyeXB0IiwibFN0YXJ0IiwiclN0YXJ0Iiwia2V5TCIsImtleVIiLCJleHBhbmQiLCJzdWJzdGl0dXRlIiwiZiIsInJpcCIsIkVERVN0YXRlIiwiazEiLCJrMiIsImszIiwiX2VkZVN0YXRlIiwiaW5MIiwiaW5SIiwib3V0TCIsIm91dFIiLCJwYzJ0YWJsZSIsInNUYWJsZSIsInNiIiwicGVybXV0ZVRhYmxlIiwicGFkU3BsaXQiLCJnZW5lcmF0ZVByaW1lIiwiREgiLCJnZW4iLCJFTkNPRElOR1MiLCJnZW5lcmF0b3IiLCJnZW5jIiwiTWlsbGVyUmFiaW4iLCJtaWxsZXJSYWJpbiIsIlRXRU5UWUZPVVIiLCJFTEVWRU4iLCJURU4iLCJUSFJFRSIsIlNFVkVOIiwiX3B1YiIsInByaW1lQ2FjaGUiLCJjaGVja1ByaW1lIiwiaGV4Iiwic2ltcGxlU2lldmUiLCJmZXJtYXRUZXN0IiwibWFsbGVhYmxlIiwic2V0R2VuZXJhdG9yIiwiX19wcmltZSIsIl9wcmltZUxlbiIsIl9wcmltZUNvZGUiLCJlbnVtZXJhYmxlIiwiX19nZW4iLCJfZ2VuIiwic2VjcmV0IiwiZ2V0UHJpbWUiLCJmcm9udCIsImdldEdlbmVyYXRvciIsImZpbmRQcmltZSIsIk9ORSIsIlRXTyIsIkZJVkUiLCJTSVhURUVOIiwiRUlHSFQiLCJGT1VSIiwiVFdFTFZFIiwiX2dldFByaW1lcyIsIm4yIiwidmVyc2lvbiIsImVkZHNhIiwiZ2V0TkFGIiwiZ2V0SlNGIiwiQmFzZUN1cnZlIiwiY29uZiIsInplcm8iLCJwb2ludEZyb21KU09OIiwiZ1JlZCIsIl93bmFmVDEiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJhZGp1c3RDb3VudCIsInJlZE4iLCJfbWF4d2VsbFRyaWNrIiwicG9pbnQiLCJfZml4ZWROYWZNdWwiLCJwcmVjb21wdXRlZCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIm5hZiIsIkkiLCJzdGVwIiwicmVwciIsIm5hZlciLCJqcG9pbnQiLCJtaXhlZEFkZCIsInBvaW50cyIsInRvUCIsIl93bmFmTXVsIiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsImRibHAiLCJfd25hZk11bEFkZCIsImRlZlciLCJjb2VmZnMiLCJqYWNvYmlhblJlc3VsdCIsInduZFdpZHRoIiwiY29tYiIsInRvSiIsImpzZiIsImphIiwiamIiLCJCYXNlUG9pbnQiLCJkZWNvZGVQb2ludCIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiY29tcGFjdCIsImdldFkiLCJwcmVjb21wdXRlIiwicG93ZXIiLCJiZXRhIiwiX2dldEJldGEiLCJfaGFzRG91YmxlcyIsImRibCIsIkVkd2FyZHNDdXJ2ZSIsInR3aXN0ZWQiLCJtT25lQSIsImRkIiwib25lQyIsIl9tdWxBIiwiX211bEMiLCJyaHMiLCJsaHMiLCJ5MiIsInBvaW50RnJvbVkiLCJpc0luZmluaXR5IiwiUG9pbnQiLCJ6T25lIiwiZnJvbUpTT04iLCJfZXh0RGJsIiwibngiLCJueSIsIm50IiwibnoiLCJfcHJvakRibCIsIl9leHRBZGQiLCJfcHJvakFkZCIsIm11bEFkZCIsImptdWxBZGQiLCJ6aSIsImVxWFRvUCIsInNob3J0IiwiZWR3YXJkcyIsIk1vbnRDdXJ2ZSIsImEyNCIsImFhIiwiYmIiLCJkaWZmQWRkIiwiZGEiLCJjYiIsImp1bWxBZGQiLCJTaG9ydEN1cnZlIiwidGludiIsInplcm9BIiwidGhyZWVBIiwiZW5kbyIsIl9nZXRFbmRvbW9ycGhpc20iLCJfZW5kb1duYWZUMSIsIl9lbmRvV25hZlQyIiwibGFtYmRhIiwiYmV0YXMiLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhcyIsImJhc2lzIiwidmVjIiwiX2dldEVuZG9CYXNpcyIsIm50aW52IiwiYXByeFNxcnQiLCJ5MSIsInByZXZSIiwibGVuMSIsIl9lbmRvU3BsaXQiLCJ2MSIsInYyIiwicDEiLCJwMiIsInExIiwicTIiLCJpbmYiLCJheCIsIl9lbmRvV25hZk11bEFkZCIsIm5wb2ludHMiLCJuY29lZmZzIiwiaXNSZWQiLCJwcmUiLCJlbmRvTXVsIiwib2JqMnBvaW50IiwieXMxIiwiZHlpbnYiLCJfcHJlY29tcHV0ZSIsIkpQb2ludCIsInppbnYiLCJ6aW52MiIsImF5IiwicHoyIiwiejIiLCJ1MSIsInUyIiwiaDIiLCJoMyIsImp4IiwiankiLCJqeiIsImp6NCIsImp5ZCIsImp4MiIsImp5ZDIiLCJqeWQ0IiwiZG55IiwiX3plcm9EYmwiLCJfdGhyZWVEYmwiLCJfZGJsIiwieHgiLCJ5eSIsInl5eXkiLCJ5eXl5OCIsImM4IiwiZ2FtbWEiLCJhbHBoYSIsImJldGE0IiwiYmV0YTgiLCJnZ2FtbWE4IiwiankyIiwianhkNCIsImp5ZDgiLCJ0cnBsIiwienoiLCJtbSIsImVlIiwieXl1NCIsImtiYXNlIiwiejMiLCJwejMiLCJ6cyIsIlByZXNldEN1cnZlIiwiZGVmaW5lQ3VydmUiLCJzaGEyNTYiLCJzaGEzODQiLCJzaGE1MTIiLCJIbWFjRFJCRyIsIktleVBhaXIiLCJTaWduYXR1cmUiLCJuaCIsImtleVBhaXIiLCJmcm9tUHJpdmF0ZSIsImZyb21QdWJsaWMiLCJkcmJnIiwicGVycyIsInBlcnNFbmMiLCJlbnRyb3B5IiwiaG1hY1N0cmVuZ3RoIiwiZW50cm9weUVuYyIsIm5vbmNlIiwibnMyIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNhdGVUb04iLCJ0cnVuY09ubHkiLCJia2V5IiwibnMxIiwiaXRlciIsImtwIiwia3BYIiwicmVjb3ZlcnlQYXJhbSIsImNhbm9uaWNhbCIsInNpbnYiLCJyZWNvdmVyUHViS2V5IiwiaXNZT2RkIiwiaXNTZWNvbmRLZXkiLCJySW52IiwiZ2V0S2V5UmVjb3ZlcnlQYXJhbSIsIlEiLCJRcHJpbWUiLCJwcml2RW5jIiwicHViRW5jIiwicmVhc29uIiwiZGVyaXZlIiwiX2ltcG9ydERFUiIsIlBvc2l0aW9uIiwicGxhY2UiLCJnZXRMZW5ndGgiLCJpbml0aWFsIiwib2N0ZXRMZW4iLCJybVBhZGRpbmciLCJzbGVuIiwiY29uc3RydWN0TGVuZ3RoIiwib2N0ZXRzIiwiTE4yIiwiYmFja0hhbGYiLCJwYXJzZUJ5dGVzIiwiRUREU0EiLCJwb2ludENsYXNzIiwiZW5jb2RpbmdMZW5ndGgiLCJrZXlGcm9tU2VjcmV0IiwiaGFzaEludCIsIm1lc3NhZ2VQcmVmaXgiLCJSIiwiUmVuY29kZWQiLCJlbmNvZGVQb2ludCIsInNfIiwicHViQnl0ZXMiLCJTIiwibWFrZVNpZ25hdHVyZSIsIlNHIiwiUnBsdXNBaCIsImludEZyb21MRSIsImZyb21TZWNyZXQiLCJsYXN0SXgiLCJub3JtZWQiLCJ4SXNPZGQiLCJpc1BvaW50IiwiY2FjaGVkUHJvcGVydHkiLCJfc2VjcmV0IiwiX3B1YkJ5dGVzIiwicHJpdkJ5dGVzIiwiZ2V0U2VjcmV0IiwiX1IiLCJfUyIsIl9SZW5jb2RlZCIsIl9TZW5jb2RlZCIsIlNlbmNvZGVkIiwidG9CeXRlcyIsIm1pbkFzc2VydCIsIm1pblV0aWxzIiwiemVybzIiLCJtMTQiLCJtMjQiLCJtOCIsImNvbXB1dGVyIiwiRXZlbnRFbWl0dGVyIiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiZW1pdCIsImVyIiwiaGFuZGxlciIsImxpc3RlbmVycyIsImNvbnRleHQiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJ0cmFjZSIsIm9uIiwib25jZSIsImZpcmVkIiwicmVtb3ZlTGlzdGVuZXIiLCJwb3NpdGlvbiIsInJlbW92ZUFsbExpc3RlbmVycyIsImxpc3RlbmVyQ291bnQiLCJldmxpc3RlbmVyIiwiZW1pdHRlciIsIkVWUF9CeXRlc1RvS2V5Iiwic2FsdCIsImtleUJpdHMiLCJ1c2VkIiwia2V5U3RhcnQiLCJpdlN0YXJ0Iiwia2V5TGlzdCIsImhhc1Byb3AiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJnZXRUaW1lIiwicmVnZXhwQSIsInJlZ2V4cEIiLCJjeWNsZXMiLCJhb2JqIiwiYm9iaiIsInNlZW4iLCJzZWVuSW5kZXgiLCJzb3J0IiwidGhyb3dJZk5vdFN0cmluZ09yQnVmZmVyIiwicHJlZml4IiwiSGFzaEJhc2UiLCJfYmxvY2siLCJfYmxvY2tTaXplIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIl9maW5hbGl6ZWQiLCJfZGlnZXN0IiwiY29tbW9uIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyMjQiLCJyaXBlbWQxNjAiLCJCbG9ja0hhc2giLCJwZW5kaW5nIiwicGVuZGluZ1RvdGFsIiwib3V0U2l6ZSIsInBhZExlbmd0aCIsIl9kZWx0YTgiLCJfZGVsdGEzMiIsImpvaW4zMiIsImlubmVyIiwib3V0ZXIiLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzMiLCJzdW0zMl80IiwiRSIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJUIiwiSyIsInJoIiwiS2giLCJzaCIsInRvSGV4MzIiLCJzcGxpdDMyIiwic2hhQ29tbW9uIiwic3VtMzJfNSIsImZ0XzEiLCJzaGExX0siLCJTSEExIiwiVyIsIlNIQTI1NiIsIlNIQTIyNCIsImNoMzIiLCJtYWozMiIsInMwXzI1NiIsInMxXzI1NiIsImcwXzI1NiIsImcxXzI1NiIsInNoYTI1Nl9LIiwiVDEiLCJUMiIsIlNIQTUxMiIsIlNIQTM4NCIsInJvdHI2NF9oaSIsInJvdHI2NF9sbyIsInNocjY0X2hpIiwic2hyNjRfbG8iLCJzdW02NCIsInN1bTY0X2hpIiwic3VtNjRfbG8iLCJzdW02NF80X2hpIiwic3VtNjRfNF9sbyIsInN1bTY0XzVfaGkiLCJzdW02NF81X2xvIiwic2hhNTEyX0siLCJfcHJlcGFyZUJsb2NrIiwiYzBfaGkiLCJnMV81MTJfaGkiLCJjMF9sbyIsImcxXzUxMl9sbyIsImMxX2hpIiwiYzFfbG8iLCJjMl9oaSIsImcwXzUxMl9oaSIsImMyX2xvIiwiZzBfNTEyX2xvIiwiYzNfaGkiLCJjM19sbyIsImFoIiwiYWwiLCJiaCIsImNoIiwiY2wiLCJkbCIsImVoIiwiZWwiLCJmaCIsImZsIiwiZ2giLCJnbCIsImhoIiwiaGwiLCJzMV81MTJfaGkiLCJzMV81MTJfbG8iLCJjaDY0X2hpIiwiY2g2NF9sbyIsImM0X2hpIiwiYzRfbG8iLCJUMV9oaSIsIlQxX2xvIiwiczBfNTEyX2hpIiwiczBfNTEyX2xvIiwibWFqNjRfaGkiLCJtYWo2NF9sbyIsIlQyX2hpIiwiVDJfbG8iLCJ4aCIsInhsIiwieWgiLCJ5bCIsInpoIiwiemwiLCJyb3RyMzIiLCJwMzIiLCJodG9ubCIsInplcm84IiwicHJlZFJlc2lzdCIsIm1pbkVudHJvcHkiLCJfcmVzZWVkIiwicmVzZWVkSW50ZXJ2YWwiLCJWIiwibm9uY2VFbmMiLCJzZWVkIiwiX2htYWMiLCJrbWFjIiwicmVzZWVkIiwiYWRkRW5jIiwidGVtcCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwicnQiLCJ3cml0YWJsZSIsInBvc3QiLCJfdHJhdmVyc2UiLCJhcnJheUtleXdvcmRzIiwicHJvcHNLZXl3b3JkcyIsImRlZmluaXRpb25zIiwic2tpcEtleXdvcmRzIiwiZXNjYXBlSnNvblB0ciIsIkpTT041IiwiYXQiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiZXNjYXBlZSIsInJlbmRlckNoYXIiLCJjaHIiLCJTeW50YXhFcnJvciIsInBlZWsiLCJpZGVudGlmaWVyIiwiZGVsaW0iLCJ1ZmZmZiIsImlubGluZUNvbW1lbnQiLCJibG9ja0NvbW1lbnQiLCJjb21tZW50Iiwid2hpdGUiLCJyZXZpdmVyIiwid2FsayIsImhvbGRlciIsInJlcGxhY2VyIiwic3BhY2UiLCJnZXRSZXBsYWNlZFZhbHVlT3JVbmRlZmluZWQiLCJpc1RvcExldmVsIiwiaXNXb3JkQ2hhciIsImlzV29yZFN0YXJ0IiwiaXNXb3JkIiwib2JqU3RhY2siLCJjaGVja0ZvckNpcmN1bGFyIiwibWFrZUluZGVudCIsIm5vTmV3TGluZSIsImluZGVudCIsImluZGVudFN0ciIsImN4IiwiZXNjYXBhYmxlIiwiZXNjYXBlU3RyaW5nIiwibGFzdEluZGV4IiwiaW50ZXJuYWxTdHJpbmdpZnkiLCJvYmpfcGFydCIsIm5vbkVtcHR5IiwidG9wTGV2ZWxIb2xkZXIiLCJnZXRDdXJyZW50UmVxdWVzdCIsImxvYWRlckNvbnRleHQiLCJjdXJyZW50UmVxdWVzdCIsInJlcXVlc3QiLCJsb2FkZXJzIiwibG9hZGVySW5kZXgiLCJyZXNvdXJjZSIsImJhc2VFbmNvZGVUYWJsZXMiLCJlbmNvZGVCdWZmZXJUb0Jhc2UiLCJlbmNvZGVUYWJsZSIsInJlYWRMZW5ndGgiLCJnZXRIYXNoRGlnZXN0IiwiZGlnZXN0VHlwZSIsInBhcnNlUXVlcnkiLCJnZXRPcHRpb25zIiwicXVlcnkiLCJnZXRSZW1haW5pbmdSZXF1ZXN0IiwicmVtYWluaW5nUmVxdWVzdCIsInN0cmluZ2lmeVJlcXVlc3QiLCJpc1VybFJlcXVlc3QiLCJ1cmxUb1JlcXVlc3QiLCJwYXJzZVN0cmluZyIsImludGVycG9sYXRlTmFtZSIsImVtb2ppc0xpc3QiLCJlbW9qaVJlZ2V4IiwiZW1vamlMaXN0IiwiZW1vamkiLCJlbW9qaUNhY2hlIiwiZW5jb2RlU3RyaW5nVG9FbW9qaSIsImVtb2ppcyIsImVtb2ppRW5jb2RpbmciLCJmaWxlbmFtZSIsInJlc291cmNlUGF0aCIsInJlZ0V4cCIsImJhc2VuYW1lIiwiZGlyZWN0b3J5IiwiZm9sZGVyIiwic2VwIiwibWF0Y2hlZCIsImN1c3RvbUludGVycG9sYXRlTmFtZSIsInNwZWNpYWxWYWx1ZXMiLCJxdWVyeUFyZ3MiLCJpZHgiLCJtYXRjaFJlbGF0aXZlUGF0aCIsImlzQWJzb2x1dGVQYXRoIiwicG9zaXgiLCJpc0Fic29sdXRlIiwid2luMzIiLCJpc1JlbGF0aXZlUGF0aCIsInNwbGl0dGVkIiwic3BsaXR0ZWRQYXJ0Iiwic2luZ2xlUGF0aCIsIm1hdGNoTmF0aXZlV2luMzJQYXRoIiwibW9kdWxlUmVxdWVzdFJlZ2V4IiwiQVJSQVkxNiIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiZm5GIiwiZm5HIiwiZm5IIiwiZm5JIiwicm90bCIsImJyb3JhbmQiLCJfcmFuZGJlbG93IiwibWluX2J5dGVzIiwiX3JhbmRyYW5nZSIsInN0b3AiLCJyb25lIiwibjEiLCJybjEiLCJnZXREaXZpc29yIiwiYXNzZXJ0RXF1YWwiLCJjZXJ0aWZpY2F0ZSIsIlJTQVByaXZhdGVLZXkiLCJpbnQiLCJSU0FQdWJsaWNLZXkiLCJQdWJsaWNLZXkiLCJBbGdvcml0aG1JZGVudGlmaWVyIiwiYml0c3RyIiwibnVsbF8iLCJQcml2YXRlS2V5SW5mbyIsIm9jdHN0ciIsIlByaXZhdGVLZXkiLCJFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyIsIkVuY3J5cHRlZFByaXZhdGVLZXkiLCJEU0FQcml2YXRlS2V5IiwiRFNBcGFyYW0iLCJFQ1ByaXZhdGVLZXkiLCJFQ1BhcmFtZXRlcnMiLCJuYW1lZEN1cnZlIiwiYXNuIiwiVGltZSIsInV0Y1RpbWUiLCJ1dGN0aW1lIiwiZ2VuZXJhbFRpbWUiLCJnZW50aW1lIiwiQXR0cmlidXRlVHlwZVZhbHVlIiwiU3ViamVjdFB1YmxpY0tleUluZm8iLCJSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lIiwic2V0b2YiLCJSRE5TZXF1ZW5jZSIsInNlcW9mIiwiTmFtZSIsInJkblNlcXVlbmNlIiwiVmFsaWRpdHkiLCJFeHRlbnNpb24iLCJib29sIiwiVEJTQ2VydGlmaWNhdGUiLCJYNTA5Q2VydGlmaWNhdGUiLCJmaW5kUHJvYyIsInN0YXJ0UmVnZXgiLCJmdWxsUmVnZXgiLCJldnAiLCJva2V5IiwiZGVjcnlwdGVkIiwibWF0Y2gyIiwiY2lwaGVyVGV4dCIsImNpcGhlcktleSIsImNpcGhlciIsImFlc2lkIiwiZml4UHJvYyIsImNvbXBhdCIsInBhc3NwaHJhc2UiLCJzdHJpcHBlZCIsInN1YnR5cGUiLCJuZGF0YSIsInRic0NlcnRpZmljYXRlIiwic3ViamVjdFB1YmxpY0tleUluZm8iLCJzdWJqZWN0UHVibGljS2V5IiwicGFyYW1ldGVycyIsImtkZSIsImtkZXBhcmFtcyIsIml0ZXJzIiwia2V5bGVuIiwibm9ybWFsaXplQXJyYXkiLCJhbGxvd0Fib3ZlUm9vdCIsInNwbGl0UGF0aFJlIiwic3BsaXRQYXRoIiwiZXhlYyIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJwcm9jZXNzIiwiY3dkIiwidHJhaWxpbmdTbGFzaCIsImZyb21QYXJ0cyIsInRvUGFydHMiLCJzYW1lUGFydHNMZW5ndGgiLCJvdXRwdXRQYXJ0cyIsImRlbGltaXRlciIsImRpcm5hbWUiLCJleHRuYW1lIiwieHMiLCJjaGVja1BhcmFtZXRlcnMiLCJkZWZhdWx0RW5jb2RpbmciLCJzeW5jIiwiWkVST19CVUYiLCJzdWJ0bGUiLCJ0b0Jyb3dzZXIiLCJjaGVja3MiLCJjaGVja05hdGl2ZSIsImJyb3dzZXIiLCJpbXBvcnRLZXkiLCJkZXJpdmVCaXRzIiwicHJvbSIsImJyb3dzZXJQYmtkZjIiLCJjYXRjaCIsIml0ZXJhdGlvbnMiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJuZXh0VGljayIsInJlc3AiLCJwVmVyc2lvbk1ham9yIiwiTUFYX0FMTE9DIiwiY2hlY2tCdWZmZXIiLCJybWQxNjAiLCJzaXplcyIsInNhbHRMZW4iLCJnZXREaWdlc3QiLCJpcGFkMSIsImlwYWQyIiwicnVuIiwic2hhRnVuYyIsIkRLIiwiYmxvY2sxIiwiZGVzdFBvcyIsImhMZW4iLCJVIiwiZm4iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJhZnRlclRpY2tPbmUiLCJhZnRlclRpY2tUd28iLCJhZnRlclRpY2tUaHJlZSIsImFmdGVyVGljayIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsIkl0ZW0iLCJ0aXRsZSIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY2hkaXIiLCJ1bWFzayIsImkyb3BzIiwibWdmIiwid2l0aFB1YmxpYyIsInByaXZhdGVfa2V5IiwiekJ1ZmZlciIsIm9hZXAiLCJwa2NzMSIsImlIYXNoIiwiaExlbjIiLCJtYXNrZWRTZWVkIiwibWFza2VkRGIiLCJkYiIsInN0YXR1cyIsInBzIiwiZGlmIiwiUlNBX1BLQ1MxX09BRVBfUEFERElORyIsIlJTQV9QS0NTMV9QQURESU4iLCJSU0FfTk9fUEFERElORyIsInB1YmxpY19rZXkiLCJwYWRkZWRNc2ciLCJkYmxlbiIsIm5vblplcm8iLCJjdXIiLCJvbGRCcm93c2VyIiwicmF3Qnl0ZXMiLCJzYWZlQnVmZmVyIiwicmFuZG9tYnl0ZXMiLCJrQnVmZmVyTWF4TGVuZ3RoIiwia01heFVpbnQzMiIsImFzc2VydE9mZnNldCIsImFjdHVhbEZpbGwiLCJvdXJCdWYiLCJ1aW50IiwicG5hIiwib2JqZWN0S2V5cyIsIkR1cGxleCIsIlJlYWRhYmxlIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImhpZ2hXYXRlck1hcmsiLCJlbmRlZCIsIm9uRW5kTlQiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiUGFzc1Rocm91Z2giLCJSZWFkYWJsZVN0YXRlIiwiRUUiLCJFRWxpc3RlbmVyQ291bnQiLCJTdHJlYW0iLCJPdXJVaW50OEFycmF5IiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIl9pc1VpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImRlc3Ryb3lJbXBsIiwia1Byb3h5RXZlbnRzIiwiZXZlbnQiLCJpc0R1cGxleCIsIm9iamVjdE1vZGUiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJod20iLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsImF3YWl0RHJhaW4iLCJyZWFkaW5nTW9yZSIsIl9yZWFkIiwiZGVzdHJveSIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJza2lwQ2h1bmtDaGVjayIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250Iiwib25Fb2ZDaHVuayIsImNodW5rSW52YWxpZCIsImdldFByb3RvdHlwZU9mIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwibmVlZE1vcmVEYXRhIiwiZW1pdFJlYWRhYmxlIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsIk1BWF9IV00iLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwibk9yaWciLCJlbmRSZWFkYWJsZSIsImRvUmVhZCIsImZyb21MaXN0IiwiZW1pdFJlYWRhYmxlXyIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsInBpcGUiLCJwaXBlT3B0cyIsImRvRW5kIiwic3Rkb3V0Iiwic3RkZXJyIiwiZW5kRm4iLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwiY2xlYW51cCIsIm9uZHJhaW4iLCJwaXBlT25EcmFpbiIsImNsZWFuZWRVcCIsIm9uY2xvc2UiLCJvbmZpbmlzaCIsIm9uZXJyb3IiLCJvbmRhdGEiLCJuZWVkRHJhaW4iLCJpbmNyZWFzZWRBd2FpdERyYWluIiwicGF1c2UiLCJyZXN1bWUiLCJkZXN0cyIsImV2IiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJfdGhpcyIsInBhdXNlZCIsImJpbmQiLCJfZnJvbUxpc3QiLCJmcm9tTGlzdFBhcnRpYWwiLCJoYXNTdHJpbmdzIiwiY29weUZyb21CdWZmZXJTdHJpbmciLCJjb3B5RnJvbUJ1ZmZlciIsIm5iIiwiZW5kUmVhZGFibGVOVCIsImFmdGVyVHJhbnNmb3JtIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJ0cmFuc2Zvcm1pbmciLCJ3cml0ZWNiIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJwcmVmaW5pc2giLCJfdGhpczIiLCJlcnIyIiwiV3JpdGVSZXEiLCJDb3JrZWRSZXF1ZXN0IiwiZW50cnkiLCJmaW5pc2giLCJvbkNvcmtlZEZpbmlzaCIsImFzeW5jV3JpdGUiLCJzZXRJbW1lZGlhdGUiLCJXcml0YWJsZVN0YXRlIiwiaW50ZXJuYWxVdGlsIiwiZGVwcmVjYXRlIiwibm9wIiwid3JpdGFibGVPYmplY3RNb2RlIiwid3JpdGFibGVId20iLCJ3cml0YWJsZUhpZ2hXYXRlck1hcmsiLCJmaW5hbENhbGxlZCIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwid3JpdGluZyIsImNvcmtlZCIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVsZW4iLCJidWZmZXJlZFJlcXVlc3QiLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicGVuZGluZ2NiIiwicHJlZmluaXNoZWQiLCJlcnJvckVtaXR0ZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsImNvcmtlZFJlcXVlc3RzRnJlZSIsImdldEJ1ZmZlciIsInJlYWxIYXNJbnN0YW5jZSIsImhhc0luc3RhbmNlIiwid3JpdGV2IiwiX3dyaXRldiIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZENodW5rIiwiaXNCdWYiLCJ3cml0ZU9yQnVmZmVyIiwiY29yayIsInVuY29yayIsImNsZWFyQnVmZmVyIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZGVjb2RlQ2h1bmsiLCJuZXdDaHVuayIsImRvV3JpdGUiLCJvbndyaXRlRXJyb3IiLCJmaW5pc2hNYXliZSIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsIm5lZWRGaW5pc2giLCJhZnRlcldyaXRlIiwib253cml0ZURyYWluIiwiYWxsQnVmZmVycyIsImVuZFdyaXRhYmxlIiwiY2FsbEZpbmFsIiwibmVlZCIsImNvcmtSZXEiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsImNvcHlCdWZmZXIiLCJyZWFkYWJsZURlc3Ryb3llZCIsIndyaXRhYmxlRGVzdHJveWVkIiwiZW1pdEVycm9yTlQiLCJ6ciIsInNsIiwic3IiLCJociIsIl9lIiwiYXIiLCJiciIsImNyIiwiZHIiLCJ0bCIsInRyIiwiZm4xIiwiZm41IiwiZm4yIiwiZm40IiwiZm4zIiwiY29weVByb3BzIiwiU2FmZUJ1ZmZlciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9FcnJvciIsIl92YWxpZGF0ZU9wdGlvbnMiLCJfdmFsaWRhdGVPcHRpb25zMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfX2VzTW9kdWxlIiwiX3BhdGgiLCJfcGF0aDIiLCJfZnMiLCJfZnMyIiwiX2FqdiIsIl9hanYyIiwiX2FqdktleXdvcmRzIiwiX2FqdktleXdvcmRzMiIsIl9WYWxpZGF0aW9uRXJyb3IiLCJfVmFsaWRhdGlvbkVycm9yMiIsInZhbGlkYXRlT3B0aW9ucyIsInJlYWRGaWxlU3luYyIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiZG9jdW1lbnQiLCJyZWdpc3RlckltbWVkaWF0ZSIsInRhc2siLCJjbGVhckltbWVkaWF0ZSIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsImluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24iLCJvbkdsb2JhbE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbiIsImNoYW5uZWwiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uIiwiaHRtbCIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbiIsImF0dGFjaFRvIiwiZmluYWxTaXplIiwiX2ZpbmFsU2l6ZSIsImFjY3VtIiwiYXNzaWduZWQiLCJyZW1haW5kZXIiLCJsb3dCaXRzIiwiaGlnaEJpdHMiLCJTSEEiLCJBbGdvcml0aG0iLCJTaGEiLCJfdyIsInJvdGw1Iiwicm90bDMwIiwiZnQiLCJTaGExIiwicm90bDEiLCJTaGEyNTYiLCJTaGEyMjQiLCJfZiIsIl9nIiwiX2giLCJtYWoiLCJzaWdtYTAiLCJzaWdtYTEiLCJnYW1tYTAiLCJnYW1tYTEiLCJTaGEzODQiLCJfYWgiLCJfYmgiLCJfY2giLCJfZGgiLCJfZWgiLCJfZmgiLCJfZ2giLCJfaGgiLCJfYWwiLCJfYmwiLCJfY2wiLCJfZGwiLCJfZWwiLCJfZmwiLCJfZ2wiLCJfaGwiLCJ3cml0ZUludDY0QkUiLCJTaGE1MTIiLCJHYW1tYTAiLCJHYW1tYTBsIiwiR2FtbWExIiwiR2FtbWExbCIsImdldENhcnJ5IiwiZ2FtbWEwbCIsImdhbW1hMWwiLCJXaTdoIiwiV2k3bCIsIldpMTZoIiwiV2kxNmwiLCJXaWwiLCJXaWgiLCJtYWpoIiwibWFqbCIsInNpZ21hMGgiLCJzaWdtYTBsIiwic2lnbWExaCIsInNpZ21hMWwiLCJLaWgiLCJLaWwiLCJjaGgiLCJjaGwiLCJ0MWwiLCJ0MWgiLCJ0MmwiLCJ0MmgiLCJfaXNTdGRpbyIsImRpZE9uRW5kIiwiX25vcm1hbGl6ZUVuY29kaW5nIiwicmV0cmllZCIsIm5vcm1hbGl6ZUVuY29kaW5nIiwibmVuYyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOEVuZCIsInV0ZjhUZXh0IiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsImxvYWRlclV0aWxzIiwicGl0Y2giLCJjYWNoZWFibGUiLCJobXIiLCJpbnNlcnRJbnRvIiwiX19kaXJuYW1lIiwic2NvcGUiLCJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY2xvc2UiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIm9uVGltZW91dCIsIl9vblRpbWVvdXQiLCJmYWN0b3J5IiwibWVyZ2UiLCJzZXRzIiwic3ViZXhwIiwidHlwZU9mIiwiYXNzaWduIiwiYnVpbGRFeHBzIiwiaXNJUkkiLCJBTFBIQSQkIiwiQ1IkIiwiRElHSVQkJCIsIkRRVU9URSQkIiwiSEVYRElHJCQiLCJMRiQkIiwiU1AkJCIsIlBDVF9FTkNPREVEJCIsIkdFTl9ERUxJTVMkJCIsIlNVQl9ERUxJTVMkJCIsIlJFU0VSVkVEJCQiLCJVQ1NDSEFSJCQiLCJJUFJJVkFURSQkIiwiVU5SRVNFUlZFRCQkIiwiU0NIRU1FJCIsIlVTRVJJTkZPJCIsIkRFQ19PQ1RFVCQiLCJERUNfT0NURVRfUkVMQVhFRCQiLCJJUFY0QUREUkVTUyQiLCJIMTYkIiwiTFMzMiQiLCJJUFY2QUREUkVTUzEkIiwiSVBWNkFERFJFU1MyJCIsIklQVjZBRERSRVNTMyQiLCJJUFY2QUREUkVTUzQkIiwiSVBWNkFERFJFU1M1JCIsIklQVjZBRERSRVNTNiQiLCJJUFY2QUREUkVTUzckIiwiSVBWNkFERFJFU1M4JCIsIklQVjZBRERSRVNTOSQiLCJJUFY2QUREUkVTUyQiLCJaT05FSUQkIiwiSVBWNkFERFJaJCIsIklQVjZBRERSWl9SRUxBWEVEJCIsIklQVkZVVFVSRSQiLCJJUF9MSVRFUkFMJCIsIlJFR19OQU1FJCIsIkhPU1QkIiwiUE9SVCQiLCJBVVRIT1JJVFkkIiwiUENIQVIkIiwiU0VHTUVOVCQiLCJTRUdNRU5UX05aJCIsIlNFR01FTlRfTlpfTkMkIiwiUEFUSF9BQkVNUFRZJCIsIlBBVEhfQUJTT0xVVEUkIiwiUEFUSF9OT1NDSEVNRSQiLCJQQVRIX1JPT1RMRVNTJCIsIlBBVEhfRU1QVFkkIiwiUEFUSCQiLCJRVUVSWSQiLCJGUkFHTUVOVCQiLCJISUVSX1BBUlQkIiwiVVJJJCIsIlJFTEFUSVZFX1BBUlQkIiwiUkVMQVRJVkUkIiwiVVJJX1JFRkVSRU5DRSQiLCJBQlNPTFVURV9VUkkkIiwiR0VORVJJQ19SRUYkIiwiUkVMQVRJVkVfUkVGJCIsIkFCU09MVVRFX1JFRiQiLCJTQU1FRE9DX1JFRiQiLCJBVVRIT1JJVFlfUkVGJCIsIk5PVF9TQ0hFTUUiLCJOT1RfVVNFUklORk8iLCJOT1RfSE9TVCIsIk5PVF9QQVRIIiwiTk9UX1BBVEhfTk9TQ0hFTUUiLCJOT1RfUVVFUlkiLCJOT1RfRlJBR01FTlQiLCJFU0NBUEUiLCJVTlJFU0VSVkVEIiwiT1RIRVJfQ0hBUlMiLCJQQ1RfRU5DT0RFRCIsIklQVjRBRERSRVNTIiwiSVBWNkFERFJFU1MiLCJVUklfUFJPVE9DT0wiLCJJUklfUFJPVE9DT0wiLCJzbGljZWRUb0FycmF5Iiwic2xpY2VJdGVyYXRvciIsIl9uIiwiX2kiLCJpdGVyYXRvciIsIl9zIiwidG9Db25zdW1hYmxlQXJyYXkiLCJtYXhJbnQiLCJ0TWluIiwidE1heCIsInNrZXciLCJkYW1wIiwiaW5pdGlhbEJpYXMiLCJpbml0aWFsTiIsInJlZ2V4UHVueWNvZGUiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiYmFzZU1pbnVzVE1pbiIsInN0cmluZ0Zyb21DaGFyQ29kZSIsImVycm9yJDEiLCJtYXBEb21haW4iLCJsYWJlbHMiLCJlbmNvZGVkIiwidWNzMmRlY29kZSIsImNvdW50ZXIiLCJleHRyYSIsInVjczJlbmNvZGUiLCJmcm9tQ29kZVBvaW50IiwiYmFzaWNUb0RpZ2l0IiwiZGlnaXRUb0Jhc2ljIiwiZGlnaXQiLCJmbGFnIiwiYWRhcHQiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJpbnB1dExlbmd0aCIsImJpYXMiLCJiYXNpYyIsIm9sZGkiLCJiYXNlTWludXNUIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3IiLCJfc3RlcCIsIl9jdXJyZW50VmFsdWUyIiwicmV0dXJuIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiIsImN1cnJlbnRWYWx1ZSIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zIiwiX2RpZEl0ZXJhdG9yRXJyb3IzIiwiX2l0ZXJhdG9yRXJyb3IzIiwiX2l0ZXJhdG9yMyIsIl9zdGVwMyIsIl9jdXJyZW50VmFsdWUiLCJxTWludXNUIiwidG9Vbmljb2RlIiwidG9BU0NJSSIsInB1bnljb2RlIiwiU0NIRU1FUyIsInBjdEVuY0NoYXIiLCJwY3REZWNDaGFycyIsIm5ld1N0ciIsImlsIiwiYzMiLCJfbm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmciLCJjb21wb25lbnRzIiwicHJvdG9jb2wiLCJkZWNvZGVVbnJlc2VydmVkIiwiZGVjU3RyIiwic2NoZW1lIiwidXNlcmluZm8iLCJob3N0IiwiX3N0cmlwTGVhZGluZ1plcm9zIiwiX25vcm1hbGl6ZUlQdjQiLCJfbWF0Y2hlcyIsImFkZHJlc3MiLCJfbm9ybWFsaXplSVB2NiIsIl9tYXRjaGVzMiIsInpvbmUiLCJfYWRkcmVzcyR0b0xvd2VyQ2FzZSQiLCJfYWRkcmVzcyR0b0xvd2VyQ2FzZSQyIiwiZmlyc3RGaWVsZHMiLCJsYXN0RmllbGRzIiwiaXNMYXN0RmllbGRJUHY0QWRkcmVzcyIsImZpZWxkQ291bnQiLCJsYXN0RmllbGRzU3RhcnQiLCJmaWVsZHMiLCJhbGxaZXJvRmllbGRzIiwicmVkdWNlIiwiZmllbGQiLCJsYXN0TG9uZ2VzdCIsImxvbmdlc3RaZXJvRmllbGRzIiwibmV3SG9zdCIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsIlVSSV9QQVJTRSIsIk5PX01BVENIX0lTX1VOREVGSU5FRCIsInVyaVN0cmluZyIsImlyaSIsInJlZmVyZW5jZSIsInBvcnQiLCJzY2hlbWVIYW5kbGVyIiwidW5pY29kZVN1cHBvcnQiLCJkb21haW5Ib3N0IiwiX3JlY29tcG9zZUF1dGhvcml0eSIsInVyaVRva2VucyIsIiQxIiwiJDIiLCJSRFMxIiwiUkRTMiIsIlJEUzMiLCJSRFM1IiwicmVtb3ZlRG90U2VnbWVudHMiLCJhdXRob3JpdHkiLCJhYnNvbHV0ZVBhdGgiLCJyZXNvbHZlQ29tcG9uZW50cyIsInNraXBOb3JtYWxpemF0aW9uIiwidG9sZXJhbnQiLCJiYXNlVVJJIiwicmVsYXRpdmVVUkkiLCJzY2hlbWVsZXNzT3B0aW9ucyIsInVyaUEiLCJ1cmlCIiwiZXNjYXBlQ29tcG9uZW50IiwidW5lc2NhcGVDb21wb25lbnQiLCJoYW5kbGVyJDEiLCJPIiwiQVRFWFQkJCIsIlFURVhUJCQiLCJWQ0hBUiQkIiwiU09NRV9ERUxJTVMkJCIsIk5PVF9MT0NBTF9QQVJUIiwiTk9UX0hGTkFNRSIsIk5PVF9IRlZBTFVFIiwiaGFuZGxlciQyIiwicGFyc2UkJDEiLCJtYWlsdG9Db21wb25lbnRzIiwidW5rbm93bkhlYWRlcnMiLCJoZWFkZXJzIiwiaGZpZWxkcyIsImhmaWVsZCIsInRvQWRkcnMiLCJfeCIsIl94bCIsInN1YmplY3QiLCJfeDIiLCJfeGwyIiwiYWRkciIsInNlcmlhbGl6ZSQkMSIsInRvQWRkciIsImF0SWR4IiwibG9jYWxQYXJ0IiwiZG9tYWluIiwiVVJOX1BBUlNFIiwiaGFuZGxlciQzIiwidXJuQ29tcG9uZW50cyIsIm5pZCIsIm5zcyIsInVyblNjaGVtZSIsInVyaUNvbXBvbmVudHMiLCJoYW5kbGVyJDQiLCJ1dWlkQ29tcG9uZW50cyIsImRlcHJlY2F0ZWQiLCJsb2NhbFN0b3JhZ2UiLCJPYmplY3Rfa2V5cyIsImRlZmluZVByb3AiLCJnbG9iYWxzIiwiQ29udGV4dCIsIlNjcmlwdCIsIk5vZGVTY3JpcHQiLCJydW5JbkNvbnRleHQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJ3aW4iLCJjb250ZW50V2luZG93Iiwid0V2YWwiLCJldmFsIiwid0V4ZWNTY3JpcHQiLCJleGVjU2NyaXB0Iiwid2luS2V5cyIsInJ1bkluTmV3Q29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJjcmVhdGVTY3JpcHQiLCJ3ZWJwYWNrUG9seWZpbGwiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsRkE7O0FBRUEsSUFBSUEsV0FBVyxtQkFBQUMsQ0FBUSxpRUFBUixDQUFmOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCQyxj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cUJmLE1BckJlLEVBc0JmLE1BdEJlLEVBdUJmLE1BdkJlLEVBd0JmLE1BeEJlLEVBeUJmLE1BekJlLEVBMEJmLE1BMUJlLEVBMkJmLE1BM0JlLEVBNEJmLE1BNUJlLEVBNkJmLE1BN0JlLEVBOEJmLE1BOUJlLEVBK0JmLE1BL0JlLEVBZ0NmLE1BaENlLEVBaUNmLE1BakNlLEVBa0NmLE1BbENlLEVBbUNmLElBbkNlLEVBb0NmLE1BcENlLEVBcUNmLE1BckNlLEVBc0NmLE1BdENlLEVBdUNmLE1BdkNlLEVBd0NmLE1BeENlLEVBeUNmLE1BekNlLEVBMENmLE1BMUNlLEVBMkNmLE1BM0NlLEVBNENmLE1BNUNlLEVBNkNmLE1BN0NlLEVBOENmLE1BOUNlLEVBK0NmLE1BL0NlLEVBZ0RmLE1BaERlLEVBaURmLE1BakRlLEVBa0RmLE1BbERlLEVBbURmLE1BbkRlLEVBb0RmLE1BcERlLEVBcURmLE1BckRlLEVBc0RmLE1BdERlLEVBdURmLE1BdkRlLEVBd0RmLE1BeERlLEVBeURmLElBekRlLEVBMERmLE1BMURlLEVBMkRmLE1BM0RlLEVBNERmLE1BNURlLEVBNkRmLE1BN0RlLEVBOERmLE1BOURlLEVBK0RmLE1BL0RlLEVBZ0VmLE1BaEVlLEVBaUVmLE1BakVlLEVBa0VmLE1BbEVlLEVBbUVmLE1BbkVlLEVBb0VmLE1BcEVlLEVBcUVmLE1BckVlLEVBc0VmLE1BdEVlLEVBdUVmLE1BdkVlLEVBd0VmLE1BeEVlLEVBeUVmLE1BekVlLEVBMEVmLE1BMUVlLEVBMkVmLE1BM0VlLEVBNEVmLE1BNUVlLEVBNkVmLE1BN0VlLEVBOEVmLElBOUVlLEVBK0VmLE1BL0VlLEVBZ0ZmLE1BaEZlLEVBaUZmLE1BakZlLEVBa0ZmLE1BbEZlLEVBbUZmLE1BbkZlLEVBb0ZmLE1BcEZlLEVBcUZmLE1BckZlLEVBc0ZmLElBdEZlLEVBdUZmLE1BdkZlLEVBd0ZmLE1BeEZlLEVBeUZmLE1BekZlLEVBMEZmLE1BMUZlLEVBMkZmLE1BM0ZlLEVBNEZmLE1BNUZlLEVBNkZmLE1BN0ZlLEVBOEZmLE1BOUZlLEVBK0ZmLE1BL0ZlLEVBZ0dmLElBaEdlLEVBaUdmLE1BakdlLEVBa0dmLE1BbEdlLEVBbUdmLE1BbkdlLEVBb0dmLE1BcEdlLEVBcUdmLE1BckdlLEVBc0dmLE1BdEdlLEVBdUdmLElBdkdlLEVBd0dmLE1BeEdlLEVBeUdmLE1BekdlLEVBMEdmLE1BMUdlLEVBMkdmLE1BM0dlLEVBNEdmLE1BNUdlLEVBNkdmLE1BN0dlLEVBOEdmLE1BOUdlLEVBK0dmLE1BL0dlLEVBZ0hmLE1BaEhlLEVBaUhmLE1BakhlLEVBa0hmLE1BbEhlLEVBbUhmLE1BbkhlLEVBb0hmLE1BcEhlLEVBcUhmLE1BckhlLEVBc0hmLE1BdEhlLEVBdUhmLE1BdkhlLEVBd0hmLE1BeEhlLEVBeUhmLE1BekhlLEVBMEhmLE1BMUhlLEVBMkhmLElBM0hlLEVBNEhmLE1BNUhlLEVBNkhmLE1BN0hlLEVBOEhmLE1BOUhlLEVBK0hmLE1BL0hlLEVBZ0lmLE1BaEllLEVBaUlmLE1BakllLEVBa0lmLElBbEllLEVBbUlmLE1BbkllLEVBb0lmLE1BcEllLEVBcUlmLE1BckllLEVBc0lmLE1BdEllLEVBdUlmLE1BdkllLEVBd0lmLE1BeEllLEVBeUlmLE1BekllLEVBMElmLE1BMUllLEVBMklmLE1BM0llLEVBNElmLE1BNUllLEVBNklmLE1BN0llLEVBOElmLElBOUllLEVBK0lmLE1BL0llLEVBZ0pmLE1BaEplLEVBaUpmLE1BakplLEVBa0pmLE1BbEplLEVBbUpmLElBbkplLEVBb0pmLE1BcEplLEVBcUpmLE1BckplLEVBc0pmLE1BdEplLEVBdUpmLE1BdkplLEVBd0pmLE1BeEplLEVBeUpmLE1BekplLEVBMEpmLE1BMUplLEVBMkpmLE1BM0plLEVBNEpmLE1BNUplLEVBNkpmLE1BN0plLEVBOEpmLE1BOUplLEVBK0pmLElBL0plLEVBZ0tmLE1BaEtlLEVBaUtmLE1BaktlLEVBa0tmLE1BbEtlLEVBbUtmLE1BbktlLEVBb0tmLE1BcEtlLEVBcUtmLE1BcktlLEVBc0tmLE1BdEtlLEVBdUtmLE1BdktlLEVBd0tmLE1BeEtlLEVBeUtmLE1BektlLEVBMEtmLE1BMUtlLEVBMktmLElBM0tlLEVBNEtmLE1BNUtlLEVBNktmLE1BN0tlLEVBOEtmLE1BOUtlLEVBK0tmLE1BL0tlLEVBZ0xmLE1BaExlLEVBaUxmLE1BakxlLEVBa0xmLE1BbExlLEVBbUxmLE1BbkxlLEVBb0xmLE1BcExlLEVBcUxmLE1BckxlLEVBc0xmLE1BdExlLEVBdUxmLE1BdkxlLEVBd0xmLE1BeExlLEVBeUxmLE1BekxlLEVBMExmLE1BMUxlLEVBMkxmLE1BM0xlLEVBNExmLE1BNUxlLEVBNkxmLE1BN0xlLEVBOExmLE1BOUxlLEVBK0xmLE1BL0xlLEVBZ01mLE1BaE1lLEVBaU1mLE1Bak1lLEVBa01mLE1BbE1lLEVBbU1mLElBbk1lLEVBb01mLE1BcE1lLEVBcU1mLE1Bck1lLEVBc01mLE1BdE1lLEVBdU1mLE1Bdk1lLEVBd01mLE1BeE1lLEVBeU1mLE1Bek1lLEVBME1mLE1BMU1lLEVBMk1mLE1BM01lLEVBNE1mLE1BNU1lLEVBNk1mLE1BN01lLEVBOE1mLE1BOU1lLEVBK01mLE1BL01lLEVBZ05mLElBaE5lLEVBaU5mLE1Bak5lLEVBa05mLElBbE5lLEVBbU5mLE1Bbk5lLEVBb05mLE1BcE5lLEVBcU5mLE1Bck5lLEVBc05mLE1BdE5lLEVBdU5mLE1Bdk5lLEVBd05mLE1BeE5lLEVBeU5mLE1Bek5lLEVBME5mLE1BMU5lLEVBMk5mLE1BM05lLEVBNE5mLE1BNU5lLEVBNk5mLE1BN05lLEVBOE5mLE1BOU5lLEVBK05mLE1BL05lLEVBZ09mLE1BaE9lLEVBaU9mLElBak9lLEVBa09mLE1BbE9lLEVBbU9mLElBbk9lLEVBb09mLE1BcE9lLEVBcU9mLE1Bck9lLEVBc09mLE1BdE9lLEVBdU9mLE1Bdk9lLEVBd09mLE1BeE9lLEVBeU9mLElBek9lLEVBME9mLE1BMU9lLEVBMk9mLE1BM09lLEVBNE9mLE1BNU9lLEVBNk9mLE1BN09lLEVBOE9mLE1BOU9lLEVBK09mLE1BL09lLEVBZ1BmLE1BaFBlLEVBaVBmLE1BalBlLEVBa1BmLE1BbFBlLEVBbVBmLE1BblBlLEVBb1BmLE1BcFBlLEVBcVBmLE1BclBlLEVBc1BmLE1BdFBlLEVBdVBmLE1BdlBlLEVBd1BmLE1BeFBlLEVBeVBmLE1BelBlLEVBMFBmLE1BMVBlLEVBMlBmLE1BM1BlLEVBNFBmLE1BNVBlLEVBNlBmLE1BN1BlLEVBOFBmLE1BOVBlLEVBK1BmLElBL1BlLEVBZ1FmLE1BaFFlLEVBaVFmLE1BalFlLEVBa1FmLE1BbFFlLEVBbVFmLE1BblFlLEVBb1FmLE1BcFFlLEVBcVFmLE1BclFlLEVBc1FmLE1BdFFlLEVBdVFmLE1BdlFlLEVBd1FmLE1BeFFlLEVBeVFmLE1BelFlLEVBMFFmLE1BMVFlLEVBMlFmLE1BM1FlLEVBNFFmLE1BNVFlLEVBNlFmLE1BN1FlLEVBOFFmLE1BOVFlLEVBK1FmLE1BL1FlLEVBZ1JmLE1BaFJlLEVBaVJmLElBalJlLEVBa1JmLE1BbFJlLEVBbVJmLE1BblJlLEVBb1JmLE1BcFJlLEVBcVJmLE1BclJlLEVBc1JmLE1BdFJlLEVBdVJmLE1BdlJlLEVBd1JmLE1BeFJlLEVBeVJmLElBelJlLEVBMFJmLE1BMVJlLEVBMlJmLE1BM1JlLEVBNFJmLE1BNVJlLEVBNlJmLE1BN1JlLEVBOFJmLE1BOVJlLEVBK1JmLE1BL1JlLEVBZ1NmLE1BaFNlLEVBaVNmLElBalNlLEVBa1NmLE1BbFNlLEVBbVNmLE1BblNlLEVBb1NmLElBcFNlLEVBcVNmLE1BclNlLEVBc1NmLElBdFNlLEVBdVNmLE1BdlNlLEVBd1NmLE1BeFNlLEVBeVNmLElBelNlLEVBMFNmLE1BMVNlLEVBMlNmLE1BM1NlLEVBNFNmLE1BNVNlLEVBNlNmLElBN1NlLEVBOFNmLElBOVNlLEVBK1NmLElBL1NlLEVBZ1RmLElBaFRlLEVBaVRmLElBalRlLEVBa1RmLElBbFRlLEVBbVRmLElBblRlLEVBb1RmLElBcFRlLEVBcVRmLElBclRlLEVBc1RmLElBdFRlLEVBdVRmLElBdlRlLEVBd1RmLElBeFRlLEVBeVRmLElBelRlLEVBMFRmLElBMVRlLEVBMlRmLElBM1RlLEVBNFRmLElBNVRlLEVBNlRmLElBN1RlLEVBOFRmLElBOVRlLEVBK1RmLElBL1RlLEVBZ1VmLElBaFVlLEVBaVVmLElBalVlLEVBa1VmLElBbFVlLEVBbVVmLElBblVlLEVBb1VmLElBcFVlLEVBcVVmLElBclVlLEVBc1VmLElBdFVlLEVBdVVmLElBdlVlLEVBd1VmLElBeFVlLEVBeVVmLElBelVlLEVBMFVmLElBMVVlLEVBMlVmLElBM1VlLEVBNFVmLElBNVVlLEVBNlVmLElBN1VlLEVBOFVmLElBOVVlLEVBK1VmLElBL1VlLEVBZ1ZmLElBaFZlLEVBaVZmLElBalZlLEVBa1ZmLElBbFZlLEVBbVZmLElBblZlLEVBb1ZmLElBcFZlLEVBcVZmLElBclZlLEVBc1ZmLElBdFZlLEVBdVZmLElBdlZlLEVBd1ZmLElBeFZlLEVBeVZmLElBelZlLEVBMFZmLElBMVZlLEVBMlZmLElBM1ZlLEVBNFZmLElBNVZlLEVBNlZmLElBN1ZlLEVBOFZmLElBOVZlLEVBK1ZmLElBL1ZlLEVBZ1dmLElBaFdlLEVBaVdmLElBaldlLEVBa1dmLElBbFdlLEVBbVdmLElBbldlLEVBb1dmLElBcFdlLEVBcVdmLElBcldlLEVBc1dmLElBdFdlLEVBdVdmLElBdldlLEVBd1dmLElBeFdlLEVBeVdmLElBeldlLEVBMFdmLElBMVdlLEVBMldmLElBM1dlLEVBNFdmLElBNVdlLEVBNldmLElBN1dlLEVBOFdmLElBOVdlLEVBK1dmLElBL1dlLEVBZ1hmLElBaFhlLEVBaVhmLElBalhlLEVBa1hmLElBbFhlLEVBbVhmLElBblhlLEVBb1hmLElBcFhlLEVBcVhmLElBclhlLEVBc1hmLElBdFhlLEVBdVhmLElBdlhlLEVBd1hmLElBeFhlLEVBeVhmLElBelhlLEVBMFhmLElBMVhlLEVBMlhmLElBM1hlLEVBNFhmLElBNVhlLEVBNlhmLElBN1hlLEVBOFhmLElBOVhlLEVBK1hmLElBL1hlLEVBZ1lmLElBaFllLEVBaVlmLElBalllLEVBa1lmLElBbFllLEVBbVlmLElBblllLEVBb1lmLElBcFllLEVBcVlmLElBclllLEVBc1lmLElBdFllLEVBdVlmLElBdlllLEVBd1lmLElBeFllLEVBeVlmLElBelllLEVBMFlmLElBMVllLEVBMllmLElBM1llLEVBNFlmLElBNVllLEVBNllmLElBN1llLEVBOFlmLElBOVllLEVBK1lmLElBL1llLEVBZ1pmLElBaFplLEVBaVpmLElBalplLEVBa1pmLElBbFplLEVBbVpmLElBblplLEVBb1pmLElBcFplLEVBcVpmLElBclplLEVBc1pmLElBdFplLEVBdVpmLElBdlplLEVBd1pmLElBeFplLEVBeVpmLElBelplLEVBMFpmLElBMVplLEVBMlpmLElBM1plLEVBNFpmLElBNVplLEVBNlpmLElBN1plLEVBOFpmLElBOVplLEVBK1pmLElBL1plLEVBZ2FmLElBaGFlLEVBaWFmLElBamFlLEVBa2FmLElBbGFlLEVBbWFmLElBbmFlLEVBb2FmLElBcGFlLEVBcWFmLElBcmFlLEVBc2FmLElBdGFlLEVBdWFmLElBdmFlLEVBd2FmLElBeGFlLEVBeWFmLElBemFlLEVBMGFmLElBMWFlLEVBMmFmLElBM2FlLEVBNGFmLElBNWFlLEVBNmFmLElBN2FlLEVBOGFmLElBOWFlLEVBK2FmLElBL2FlLEVBZ2JmLElBaGJlLEVBaWJmLElBamJlLEVBa2JmLElBbGJlLEVBbWJmLElBbmJlLEVBb2JmLElBcGJlLEVBcWJmLElBcmJlLEVBc2JmLElBdGJlLEVBdWJmLElBdmJlLEVBd2JmLElBeGJlLEVBeWJmLElBemJlLEVBMGJmLElBMWJlLEVBMmJmLElBM2JlLEVBNGJmLElBNWJlLEVBNmJmLElBN2JlLEVBOGJmLElBOWJlLEVBK2JmLElBL2JlLEVBZ2NmLE1BaGNlLEVBaWNmLE1BamNlLEVBa2NmLE1BbGNlLEVBbWNmLE1BbmNlLEVBb2NmLE1BcGNlLEVBcWNmLElBcmNlLEVBc2NmLElBdGNlLEVBdWNmLElBdmNlLEVBd2NmLElBeGNlLEVBeWNmLElBemNlLEVBMGNmLElBMWNlLEVBMmNmLElBM2NlLEVBNGNmLElBNWNlLEVBNmNmLElBN2NlLEVBOGNmLElBOWNlLEVBK2NmLElBL2NlLEVBZ2RmLElBaGRlLEVBaWRmLElBamRlLEVBa2RmLElBbGRlLEVBbWRmLElBbmRlLEVBb2RmLElBcGRlLEVBcWRmLElBcmRlLEVBc2RmLElBdGRlLEVB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QkE3eUMsT0FBT0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLEtBQUksQ0FBQ0EsT0FBT28xRyxlQUFaLEVBQTZCO0FBQzVCcDFHLFNBQU9tMEYsU0FBUCxHQUFtQixZQUFXLENBQUUsQ0FBaEM7QUFDQW4wRixTQUFPK2pCLEtBQVAsR0FBZSxFQUFmO0FBQ0E7QUFDQSxNQUFJLENBQUMvakIsT0FBT294QixRQUFaLEVBQXNCcHhCLE9BQU9veEIsUUFBUCxHQUFrQixFQUFsQjtBQUN0QnBrQixTQUFPdTdDLGNBQVAsQ0FBc0J2b0QsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNtN0QsZUFBWSxJQUQyQjtBQUV2QzE2RCxRQUFLLGVBQVc7QUFDZixXQUFPVCxPQUFPMlEsQ0FBZDtBQUNBO0FBSnNDLEdBQXhDO0FBTUEzRCxTQUFPdTdDLGNBQVAsQ0FBc0J2b0QsTUFBdEIsRUFBOEIsSUFBOUIsRUFBb0M7QUFDbkNtN0QsZUFBWSxJQUR1QjtBQUVuQzE2RCxRQUFLLGVBQVc7QUFDZixXQUFPVCxPQUFPTyxDQUFkO0FBQ0E7QUFKa0MsR0FBcEM7QUFNQVAsU0FBT28xRyxlQUFQLEdBQXlCLENBQXpCO0FBQ0E7QUFDRCxRQUFPcDFHLE1BQVA7QUFDQSxDQXJCRCxDOzs7Ozs7Ozs7OztBQ0FBLGU7Ozs7Ozs7Ozs7O0FDQUEsZTs7Ozs7Ozs7Ozs7QUNBQSxlOzs7Ozs7Ozs7OztBQ0FBLGUiLCJmaWxlIjoiY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2luZGV4LmpzXCIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgS0VZV09SRFMgPSByZXF1aXJlKCcuL2tleXdvcmRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lS2V5d29yZHM7XG5cblxuLyoqXG4gKiBEZWZpbmVzIG9uZSBvciBzZXZlcmFsIGtleXdvcmRzIGluIGFqdiBpbnN0YW5jZVxuICogQHBhcmFtICB7QWp2fSBhanYgdmFsaWRhdG9yIGluc3RhbmNlXG4gKiBAcGFyYW0gIHtTdHJpbmd8QXJyYXk8U3RyaW5nPnx1bmRlZmluZWR9IGtleXdvcmQga2V5d29yZChzKSB0byBkZWZpbmVcbiAqIEByZXR1cm4ge0Fqdn0gYWp2IGluc3RhbmNlIChmb3IgY2hhaW5pbmcpXG4gKi9cbmZ1bmN0aW9uIGRlZmluZUtleXdvcmRzKGFqdiwga2V5d29yZCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShrZXl3b3JkKSkge1xuICAgIGZvciAodmFyIGk9MDsgaTxrZXl3b3JkLmxlbmd0aDsgaSsrKVxuICAgICAgZ2V0KGtleXdvcmRbaV0pKGFqdik7XG4gICAgcmV0dXJuIGFqdjtcbiAgfVxuICBpZiAoa2V5d29yZCkge1xuICAgIGdldChrZXl3b3JkKShhanYpO1xuICAgIHJldHVybiBhanY7XG4gIH1cbiAgZm9yIChrZXl3b3JkIGluIEtFWVdPUkRTKSBnZXQoa2V5d29yZCkoYWp2KTtcbiAgcmV0dXJuIGFqdjtcbn1cblxuXG5kZWZpbmVLZXl3b3Jkcy5nZXQgPSBnZXQ7XG5cbmZ1bmN0aW9uIGdldChrZXl3b3JkKSB7XG4gIHZhciBkZWZGdW5jID0gS0VZV09SRFNba2V5d29yZF07XG4gIGlmICghZGVmRnVuYykgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGtleXdvcmQgJyArIGtleXdvcmQpO1xuICByZXR1cm4gZGVmRnVuYztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFRJTUUgPSAvXihcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpKFxcLlxcZCspPyh6fFsrLV1cXGRcXGQ6XFxkXFxkKT8kL2k7XG52YXIgREFURV9USU1FX1NFUEFSQVRPUiA9IC90fFxccy9pO1xuXG52YXIgQ09NUEFSRV9GT1JNQVRTID0ge1xuICBkYXRlOiBjb21wYXJlRGF0ZSxcbiAgdGltZTogY29tcGFyZVRpbWUsXG4gICdkYXRlLXRpbWUnOiBjb21wYXJlRGF0ZVRpbWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1pbk1heCkge1xuICB2YXIga2V5d29yZCA9ICdmb3JtYXQnICsgbWluTWF4O1xuICByZXR1cm4gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGlubGluZTogcmVxdWlyZSgnLi9kb3Rqcy9fZm9ybWF0TGltaXQnKSxcbiAgICAgIHN0YXRlbWVudHM6IHRydWUsXG4gICAgICBlcnJvcnM6ICdmdWxsJyxcbiAgICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICByZXF1aXJlZDogWyAnJGRhdGEnIF0sXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICRkYXRhOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICAgICAgICAgIHsgZm9ybWF0OiAncmVsYXRpdmUtanNvbi1wb2ludGVyJyB9LFxuICAgICAgICAgICAgICAgICAgeyBmb3JtYXQ6ICdqc29uLXBvaW50ZXInIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYWp2LmFkZEtleXdvcmQoa2V5d29yZCwgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgICBhanYuYWRkS2V5d29yZCgnZm9ybWF0RXhjbHVzaXZlJyArIG1pbk1heCk7XG4gICAgZXh0ZW5kRm9ybWF0cyhhanYpO1xuICAgIHJldHVybiBhanY7XG4gIH07XG59O1xuXG5cbmZ1bmN0aW9uIGV4dGVuZEZvcm1hdHMoYWp2KSB7XG4gIHZhciBmb3JtYXRzID0gYWp2Ll9mb3JtYXRzO1xuICBmb3IgKHZhciBuYW1lIGluIENPTVBBUkVfRk9STUFUUykge1xuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzW25hbWVdO1xuICAgIC8vIHRoZSBsYXN0IGNvbmRpdGlvbiBpcyBuZWVkZWQgaWYgaXQncyBSZWdFeHAgZnJvbSBhbm90aGVyIHdpbmRvd1xuICAgIGlmICh0eXBlb2YgZm9ybWF0ICE9ICdvYmplY3QnIHx8IGZvcm1hdCBpbnN0YW5jZW9mIFJlZ0V4cCB8fCAhZm9ybWF0LnZhbGlkYXRlKVxuICAgICAgZm9ybWF0ID0gZm9ybWF0c1tuYW1lXSA9IHsgdmFsaWRhdGU6IGZvcm1hdCB9O1xuICAgIGlmICghZm9ybWF0LmNvbXBhcmUpXG4gICAgICBmb3JtYXQuY29tcGFyZSA9IENPTVBBUkVfRk9STUFUU1tuYW1lXTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbXBhcmVEYXRlKGQxLCBkMikge1xuICBpZiAoIShkMSAmJiBkMikpIHJldHVybjtcbiAgaWYgKGQxID4gZDIpIHJldHVybiAxO1xuICBpZiAoZDEgPCBkMikgcmV0dXJuIC0xO1xuICBpZiAoZDEgPT09IGQyKSByZXR1cm4gMDtcbn1cblxuXG5mdW5jdGlvbiBjb21wYXJlVGltZSh0MSwgdDIpIHtcbiAgaWYgKCEodDEgJiYgdDIpKSByZXR1cm47XG4gIHQxID0gdDEubWF0Y2goVElNRSk7XG4gIHQyID0gdDIubWF0Y2goVElNRSk7XG4gIGlmICghKHQxICYmIHQyKSkgcmV0dXJuO1xuICB0MSA9IHQxWzFdICsgdDFbMl0gKyB0MVszXSArICh0MVs0XXx8JycpO1xuICB0MiA9IHQyWzFdICsgdDJbMl0gKyB0MlszXSArICh0Mls0XXx8JycpO1xuICBpZiAodDEgPiB0MikgcmV0dXJuIDE7XG4gIGlmICh0MSA8IHQyKSByZXR1cm4gLTE7XG4gIGlmICh0MSA9PT0gdDIpIHJldHVybiAwO1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBhcmVEYXRlVGltZShkdDEsIGR0Mikge1xuICBpZiAoIShkdDEgJiYgZHQyKSkgcmV0dXJuO1xuICBkdDEgPSBkdDEuc3BsaXQoREFURV9USU1FX1NFUEFSQVRPUik7XG4gIGR0MiA9IGR0Mi5zcGxpdChEQVRFX1RJTUVfU0VQQVJBVE9SKTtcbiAgdmFyIHJlcyA9IGNvbXBhcmVEYXRlKGR0MVswXSwgZHQyWzBdKTtcbiAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIHJldHVybiByZXMgfHwgY29tcGFyZVRpbWUoZHQxWzFdLCBkdDJbMV0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWV0YVNjaGVtYVJlZjogbWV0YVNjaGVtYVJlZlxufTtcblxudmFyIE1FVEFfU0NIRU1BX0lEID0gJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDYvc2NoZW1hJztcblxuZnVuY3Rpb24gbWV0YVNjaGVtYVJlZihhanYpIHtcbiAgdmFyIGRlZmF1bHRNZXRhID0gYWp2Ll9vcHRzLmRlZmF1bHRNZXRhO1xuICBpZiAodHlwZW9mIGRlZmF1bHRNZXRhID09ICdzdHJpbmcnKSByZXR1cm4geyAkcmVmOiBkZWZhdWx0TWV0YSB9O1xuICBpZiAoYWp2LmdldFNjaGVtYShNRVRBX1NDSEVNQV9JRCkpIHJldHVybiB7ICRyZWY6IE1FVEFfU0NIRU1BX0lEIH07XG4gIGNvbnNvbGUud2FybignbWV0YSBzY2hlbWEgbm90IGRlZmluZWQnKTtcbiAgcmV0dXJuIHt9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vX3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgbWFjcm86IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgIHZhciBzY2hlbWFzID0gW107XG4gICAgICBmb3IgKHZhciBwb2ludGVyIGluIHNjaGVtYSlcbiAgICAgICAgc2NoZW1hcy5wdXNoKGdldFNjaGVtYShwb2ludGVyLCBzY2hlbWFbcG9pbnRlcl0pKTtcbiAgICAgIHJldHVybiB7ICdhbGxPZic6IHNjaGVtYXMgfTtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgcHJvcGVydHlOYW1lczoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZm9ybWF0OiAnanNvbi1wb2ludGVyJ1xuICAgICAgfSxcbiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB1dGlsLm1ldGFTY2hlbWFSZWYoYWp2KVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnZGVlcFByb3BlcnRpZXMnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcblxuXG5mdW5jdGlvbiBnZXRTY2hlbWEoanNvblBvaW50ZXIsIHNjaGVtYSkge1xuICB2YXIgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdCgnLycpO1xuICB2YXIgcm9vdFNjaGVtYSA9IHt9O1xuICB2YXIgcG9pbnRlclNjaGVtYSA9IHJvb3RTY2hlbWE7XG4gIGZvciAodmFyIGk9MTsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgdmFyIGlzTGFzdCA9IGkgPT0gc2VnbWVudHMubGVuZ3RoIC0gMTtcbiAgICBzZWdtZW50ID0gdW5lc2NhcGVKc29uUG9pbnRlcihzZWdtZW50KTtcbiAgICB2YXIgcHJvcGVydGllcyA9IHBvaW50ZXJTY2hlbWEucHJvcGVydGllcyA9IHt9O1xuICAgIHZhciBpdGVtcyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoL1swLTldKy8udGVzdChzZWdtZW50KSkge1xuICAgICAgdmFyIGNvdW50ID0gK3NlZ21lbnQ7XG4gICAgICBpdGVtcyA9IHBvaW50ZXJTY2hlbWEuaXRlbXMgPSBbXTtcbiAgICAgIHdoaWxlIChjb3VudC0tKSBpdGVtcy5wdXNoKHt9KTtcbiAgICB9XG4gICAgcG9pbnRlclNjaGVtYSA9IGlzTGFzdCA/IHNjaGVtYSA6IHt9O1xuICAgIHByb3BlcnRpZXNbc2VnbWVudF0gPSBwb2ludGVyU2NoZW1hO1xuICAgIGlmIChpdGVtcykgaXRlbXMucHVzaChwb2ludGVyU2NoZW1hKTtcbiAgfVxuICByZXR1cm4gcm9vdFNjaGVtYTtcbn1cblxuXG5mdW5jdGlvbiB1bmVzY2FwZUpzb25Qb2ludGVyKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL34xL2csICcvJykucmVwbGFjZSgvfjAvZywgJ34nKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgaW5saW5lOiBmdW5jdGlvbiAoaXQsIGtleXdvcmQsIHNjaGVtYSkge1xuICAgICAgdmFyIGV4cHIgPSAnJztcbiAgICAgIGZvciAodmFyIGk9MDsgaTxzY2hlbWEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGkpIGV4cHIgKz0gJyAmJiAnO1xuICAgICAgICBleHByICs9ICcoJyArIGdldERhdGEoc2NoZW1hW2ldLCBpdC5kYXRhTGV2ZWwpICsgJyAhPT0gdW5kZWZpbmVkKSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhwcjtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZm9ybWF0OiAnanNvbi1wb2ludGVyJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnZGVlcFJlcXVpcmVkJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG5cblxuZnVuY3Rpb24gZ2V0RGF0YShqc29uUG9pbnRlciwgbHZsKSB7XG4gIHZhciBkYXRhID0gJ2RhdGEnICsgKGx2bCB8fCAnJyk7XG4gIGlmICghanNvblBvaW50ZXIpIHJldHVybiBkYXRhO1xuXG4gIHZhciBleHByID0gZGF0YTtcbiAgdmFyIHNlZ21lbnRzID0ganNvblBvaW50ZXIuc3BsaXQoJy8nKTtcbiAgZm9yICh2YXIgaT0xOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBkYXRhICs9IGdldFByb3BlcnR5KHVuZXNjYXBlSnNvblBvaW50ZXIoc2VnbWVudCkpO1xuICAgIGV4cHIgKz0gJyAmJiAnICsgZGF0YTtcbiAgfVxuICByZXR1cm4gZXhwcjtcbn1cblxuXG52YXIgSURFTlRJRklFUiA9IC9eW2EteiRfXVthLXokXzAtOV0qJC9pO1xudmFyIElOVEVHRVIgPSAvXlswLTldKyQvO1xudmFyIFNJTkdMRV9RVU9URSA9IC8nfFxcXFwvZztcbmZ1bmN0aW9uIGdldFByb3BlcnR5KGtleSkge1xuICByZXR1cm4gSU5URUdFUi50ZXN0KGtleSlcbiAgICAgICAgICA/ICdbJyArIGtleSArICddJ1xuICAgICAgICAgIDogSURFTlRJRklFUi50ZXN0KGtleSlcbiAgICAgICAgICAgID8gJy4nICsga2V5XG4gICAgICAgICAgICA6IFwiWydcIiArIGtleS5yZXBsYWNlKFNJTkdMRV9RVU9URSwgJ1xcXFwkJicpICsgXCInXVwiO1xufVxuXG5cbmZ1bmN0aW9uIHVuZXNjYXBlSnNvblBvaW50ZXIoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvfjEvZywgJy8nKS5yZXBsYWNlKC9+MC9nLCAnficpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9fZm9ybWF0TGltaXQoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRlcnJvcktleXdvcmQ7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgb3V0ICs9ICd2YXIgJyArICgkdmFsaWQpICsgJyA9IHVuZGVmaW5lZDsnO1xuICBpZiAoaXQub3B0cy5mb3JtYXQgPT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICB2YXIgJHNjaGVtYUZvcm1hdCA9IGl0LnNjaGVtYS5mb3JtYXQsXG4gICAgJGlzRGF0YUZvcm1hdCA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYUZvcm1hdC4kZGF0YSxcbiAgICAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICBpZiAoJGlzRGF0YUZvcm1hdCkge1xuICAgIHZhciAkc2NoZW1hVmFsdWVGb3JtYXQgPSBpdC51dGlsLmdldERhdGEoJHNjaGVtYUZvcm1hdC4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSxcbiAgICAgICRmb3JtYXQgPSAnZm9ybWF0JyArICRsdmwsXG4gICAgICAkY29tcGFyZSA9ICdjb21wYXJlJyArICRsdmw7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGZvcm1hdCkgKyAnID0gZm9ybWF0c1snICsgKCRzY2hlbWFWYWx1ZUZvcm1hdCkgKyAnXSAsICcgKyAoJGNvbXBhcmUpICsgJyA9ICcgKyAoJGZvcm1hdCkgKyAnICYmICcgKyAoJGZvcm1hdCkgKyAnLmNvbXBhcmU7JztcbiAgfSBlbHNlIHtcbiAgICB2YXIgJGZvcm1hdCA9IGl0LmZvcm1hdHNbJHNjaGVtYUZvcm1hdF07XG4gICAgaWYgKCEoJGZvcm1hdCAmJiAkZm9ybWF0LmNvbXBhcmUpKSB7XG4gICAgICBvdXQgKz0gJyAgJyArICgkdmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICB2YXIgJGNvbXBhcmUgPSAnZm9ybWF0cycgKyBpdC51dGlsLmdldFByb3BlcnR5KCRzY2hlbWFGb3JtYXQpICsgJy5jb21wYXJlJztcbiAgfVxuICB2YXIgJGlzTWF4ID0gJGtleXdvcmQgPT0gJ2Zvcm1hdE1heGltdW0nLFxuICAgICRleGNsdXNpdmVLZXl3b3JkID0gJ2Zvcm1hdEV4Y2x1c2l2ZScgKyAoJGlzTWF4ID8gJ01heGltdW0nIDogJ01pbmltdW0nKSxcbiAgICAkc2NoZW1hRXhjbCA9IGl0LnNjaGVtYVskZXhjbHVzaXZlS2V5d29yZF0sXG4gICAgJGlzRGF0YUV4Y2wgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWFFeGNsICYmICRzY2hlbWFFeGNsLiRkYXRhLFxuICAgICRvcCA9ICRpc01heCA/ICc8JyA6ICc+JyxcbiAgICAkcmVzdWx0ID0gJ3Jlc3VsdCcgKyAkbHZsO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgaWYgKCRpc0RhdGFFeGNsKSB7XG4gICAgdmFyICRzY2hlbWFWYWx1ZUV4Y2wgPSBpdC51dGlsLmdldERhdGEoJHNjaGVtYUV4Y2wuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFyciksXG4gICAgICAkZXhjbHVzaXZlID0gJ2V4Y2x1c2l2ZScgKyAkbHZsLFxuICAgICAgJG9wRXhwciA9ICdvcCcgKyAkbHZsLFxuICAgICAgJG9wU3RyID0gJ1xcJyArICcgKyAkb3BFeHByICsgJyArIFxcJyc7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYUV4Y2wnICsgKCRsdmwpICsgJyA9ICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZUV4Y2wgPSAnc2NoZW1hRXhjbCcgKyAkbHZsO1xuICAgIG91dCArPSAnIGlmICh0eXBlb2YgJyArICgkc2NoZW1hVmFsdWVFeGNsKSArICcgIT0gXFwnYm9vbGVhblxcJyAmJiAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyAhPT0gdW5kZWZpbmVkKSB7ICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgJztcbiAgICB2YXIgJGVycm9yS2V5d29yZCA9ICRleGNsdXNpdmVLZXl3b3JkO1xuICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19mb3JtYXRFeGNsdXNpdmVMaW1pdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnICsgKCRleGNsdXNpdmVLZXl3b3JkKSArICcgc2hvdWxkIGJlIGJvb2xlYW5cXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gICc7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICAgIH1cbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ3N0cmluZ1xcJykgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsgJztcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICB9XG4gICAgaWYgKCRpc0RhdGFGb3JtYXQpIHtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkY29tcGFyZSkgKyAnKSAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgZWxzZSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciAnICsgKCRyZXN1bHQpICsgJyA9ICcgKyAoJGNvbXBhcmUpICsgJygnICsgKCRkYXRhKSArICcsICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyApOyBpZiAoJyArICgkcmVzdWx0KSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyB2YXIgJyArICgkZXhjbHVzaXZlKSArICcgPSAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyA9PT0gdHJ1ZTsgaWYgKCcgKyAoJHZhbGlkKSArICcgPT09IHVuZGVmaW5lZCkgeyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkZXhjbHVzaXZlKSArICcgPyAnICsgKCRyZXN1bHQpICsgJyAnICsgKCRvcCkgKyAnIDAgOiAnICsgKCRyZXN1bHQpICsgJyAnICsgKCRvcCkgKyAnPSAwOyB9IGlmICghJyArICgkdmFsaWQpICsgJykgdmFyIG9wJyArICgkbHZsKSArICcgPSAnICsgKCRleGNsdXNpdmUpICsgJyA/IFxcJycgKyAoJG9wKSArICdcXCcgOiBcXCcnICsgKCRvcCkgKyAnPVxcJzsnO1xuICB9IGVsc2Uge1xuICAgIHZhciAkZXhjbHVzaXZlID0gJHNjaGVtYUV4Y2wgPT09IHRydWUsXG4gICAgICAkb3BTdHIgPSAkb3A7XG4gICAgaWYgKCEkZXhjbHVzaXZlKSAkb3BTdHIgKz0gJz0nO1xuICAgIHZhciAkb3BFeHByID0gJ1xcJycgKyAkb3BTdHIgKyAnXFwnJztcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ3N0cmluZ1xcJykgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsgJztcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICB9XG4gICAgaWYgKCRpc0RhdGFGb3JtYXQpIHtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkY29tcGFyZSkgKyAnKSAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgZWxzZSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciAnICsgKCRyZXN1bHQpICsgJyA9ICcgKyAoJGNvbXBhcmUpICsgJygnICsgKCRkYXRhKSArICcsICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyApOyBpZiAoJyArICgkcmVzdWx0KSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBpZiAoJyArICgkdmFsaWQpICsgJyA9PT0gdW5kZWZpbmVkKSAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkcmVzdWx0KSArICcgJyArICgkb3ApO1xuICAgIGlmICghJGV4Y2x1c2l2ZSkge1xuICAgICAgb3V0ICs9ICc9JztcbiAgICB9XG4gICAgb3V0ICs9ICcgMDsnO1xuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcykgKyAnaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICc7XG4gIHZhciAkZXJyb3JLZXl3b3JkID0gJGtleXdvcmQ7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdfZm9ybWF0TGltaXQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNvbXBhcmlzb246ICcgKyAoJG9wRXhwcikgKyAnLCBsaW1pdDogICc7XG4gICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgIG91dCArPSAnJyArICgkc2NoZW1hVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSk7XG4gICAgfVxuICAgIG91dCArPSAnICwgZXhjbHVzaXZlOiAnICsgKCRleGNsdXNpdmUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSAnICsgKCRvcFN0cikgKyAnIFwiJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICdcIlxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICd9JztcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfcGF0dGVyblJlcXVpcmVkKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRrZXkgPSAna2V5JyArICRsdmwsXG4gICAgJGlkeCA9ICdpZHgnICsgJGx2bCxcbiAgICAkbWF0Y2hlZCA9ICdwYXR0ZXJuTWF0Y2hlZCcgKyAkbHZsLFxuICAgICRkYXRhUHJvcGVydGllcyA9ICdkYXRhUHJvcGVydGllcycgKyAkbHZsLFxuICAgICRjbG9zaW5nQnJhY2VzID0gJycsXG4gICAgJG93blByb3BlcnRpZXMgPSBpdC5vcHRzLm93blByb3BlcnRpZXM7XG4gIG91dCArPSAndmFyICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyc7XG4gIGlmICgkb3duUHJvcGVydGllcykge1xuICAgIG91dCArPSAnIHZhciAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gdW5kZWZpbmVkOyc7XG4gIH1cbiAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICBpZiAoYXJyMSkge1xuICAgIHZhciAkcFByb3BlcnR5LCBpMSA9IC0xLFxuICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGkxIDwgbDEpIHtcbiAgICAgICRwUHJvcGVydHkgPSBhcnIxW2kxICs9IDFdO1xuICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG1hdGNoZWQpICsgJyA9IGZhbHNlOyAgJztcbiAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyB8fCBPYmplY3Qua2V5cygnICsgKCRkYXRhKSArICcpOyBmb3IgKHZhciAnICsgKCRpZHgpICsgJz0wOyAnICsgKCRpZHgpICsgJzwnICsgKCRkYXRhUHJvcGVydGllcykgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyB2YXIgJyArICgka2V5KSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnWycgKyAoJGlkeCkgKyAnXTsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIGZvciAodmFyICcgKyAoJGtleSkgKyAnIGluICcgKyAoJGRhdGEpICsgJykgeyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgJyArICgkbWF0Y2hlZCkgKyAnID0gJyArIChpdC51c2VQYXR0ZXJuKCRwUHJvcGVydHkpKSArICcudGVzdCgnICsgKCRrZXkpICsgJyk7IGlmICgnICsgKCRtYXRjaGVkKSArICcpIGJyZWFrOyB9ICc7XG4gICAgICB2YXIgJG1pc3NpbmdQYXR0ZXJuID0gaXQudXRpbC5lc2NhcGVRdW90ZXMoJHBQcm9wZXJ0eSk7XG4gICAgICBvdXQgKz0gJyBpZiAoIScgKyAoJG1hdGNoZWQpICsgJykgeyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICB2YXIgZXJyID0gICAnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdwYXR0ZXJuUmVxdWlyZWQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IG1pc3NpbmdQYXR0ZXJuOiBcXCcnICsgKCRtaXNzaW5nUGF0dGVybikgKyAnXFwnIH0gJztcbiAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgaGF2ZSBwcm9wZXJ0eSBtYXRjaGluZyBwYXR0ZXJuIFxcXFxcXCcnICsgKCRtaXNzaW5nUGF0dGVybikgKyAnXFxcXFxcJ1xcJyAnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyB9ICAgJztcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcyk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX3N3aXRjaChpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGlmUGFzc2VkID0gJ2lmUGFzc2VkJyArIGl0LmxldmVsLFxuICAgICRjdXJyZW50QmFzZUlkID0gJGl0LmJhc2VJZCxcbiAgICAkc2hvdWxkQ29udGludWU7XG4gIG91dCArPSAndmFyICcgKyAoJGlmUGFzc2VkKSArICc7JztcbiAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICBpZiAoYXJyMSkge1xuICAgIHZhciAkc2NoLCAkY2FzZUluZGV4ID0gLTEsXG4gICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoJGNhc2VJbmRleCA8IGwxKSB7XG4gICAgICAkc2NoID0gYXJyMVskY2FzZUluZGV4ICs9IDFdO1xuICAgICAgaWYgKCRjYXNlSW5kZXggJiYgISRzaG91bGRDb250aW51ZSkge1xuICAgICAgICBvdXQgKz0gJyBpZiAoIScgKyAoJGlmUGFzc2VkKSArICcpIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgICAgaWYgKCRzY2guaWYgJiYgaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLmlmLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7ICAgJztcbiAgICAgICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgICAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSB0cnVlO1xuICAgICAgICAkaXQuY3JlYXRlRXJyb3JzID0gZmFsc2U7XG4gICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLmlmO1xuICAgICAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoICsgJ1snICsgJGNhc2VJbmRleCArICddLmlmJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRjYXNlSW5kZXggKyAnL2lmJztcbiAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgICAgJGl0LmNyZWF0ZUVycm9ycyA9IHRydWU7XG4gICAgICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGlmUGFzc2VkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsgaWYgKCcgKyAoJGlmUGFzc2VkKSArICcpIHsgICc7XG4gICAgICAgIGlmICh0eXBlb2YgJHNjaC50aGVuID09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICgkc2NoLnRoZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdzd2l0Y2gnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNhc2VJbmRleDogJyArICgkY2FzZUluZGV4KSArICcgfSAnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBwYXNzIFwic3dpdGNoXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSAnICsgKCRzY2gudGhlbikgKyAnOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLnRoZW47XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRjYXNlSW5kZXggKyAnXS50aGVuJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGNhc2VJbmRleCArICcvdGhlbic7XG4gICAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnICB9IGVsc2UgeyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSB9ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRpZlBhc3NlZCkgKyAnID0gdHJ1ZTsgICc7XG4gICAgICAgIGlmICh0eXBlb2YgJHNjaC50aGVuID09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICgkc2NoLnRoZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdzd2l0Y2gnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNhc2VJbmRleDogJyArICgkY2FzZUluZGV4KSArICcgfSAnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBwYXNzIFwic3dpdGNoXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSAnICsgKCRzY2gudGhlbikgKyAnOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLnRoZW47XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRjYXNlSW5kZXggKyAnXS50aGVuJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGNhc2VJbmRleCArICcvdGhlbic7XG4gICAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkc2hvdWxkQ29udGludWUgPSAkc2NoLmNvbnRpbnVlXG4gICAgfVxuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcykgKyAndmFyICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsgJztcbiAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2VxdWVuY2VzID0ge307XG5cbnZhciBERUZBVUxUUyA9IHtcbiAgdGltZXN0YW1wOiBmdW5jdGlvbigpIHsgcmV0dXJuIERhdGUubm93KCk7IH0sXG4gIGRhdGV0aW1lOiBmdW5jdGlvbigpIHsgcmV0dXJuIChuZXcgRGF0ZSkudG9JU09TdHJpbmcoKTsgfSxcbiAgZGF0ZTogZnVuY3Rpb24oKSB7IHJldHVybiAobmV3IERhdGUpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApOyB9LFxuICB0aW1lOiBmdW5jdGlvbigpIHsgcmV0dXJuIChuZXcgRGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgxMSk7IH0sXG4gIHJhbmRvbTogZnVuY3Rpb24oKSB7IHJldHVybiBNYXRoLnJhbmRvbSgpOyB9LFxuICByYW5kb21pbnQ6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgdmFyIGxpbWl0ID0gYXJncyAmJiBhcmdzLm1heCB8fCAyO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxpbWl0KTsgfTtcbiAgfSxcbiAgc2VxOiBmdW5jdGlvbiAoYXJncykge1xuICAgIHZhciBuYW1lID0gYXJncyAmJiBhcmdzLm5hbWUgfHwgJyc7XG4gICAgc2VxdWVuY2VzW25hbWVdID0gc2VxdWVuY2VzW25hbWVdIHx8IDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VxdWVuY2VzW25hbWVdKys7IH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIChzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpIHtcbiAgICAgIHZhciBmdW5jcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIHZhciBkID0gc2NoZW1hW2tleV07XG4gICAgICAgIHZhciBmdW5jID0gZ2V0RGVmYXVsdCh0eXBlb2YgZCA9PSAnc3RyaW5nJyA/IGQgOiBkLmZ1bmMpO1xuICAgICAgICBmdW5jc1trZXldID0gZnVuYy5sZW5ndGggPyBmdW5jKGQuYXJncykgOiBmdW5jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXQub3B0cy51c2VEZWZhdWx0cyAmJiAhaXQuY29tcG9zaXRlUnVsZVxuICAgICAgICAgICAgICA/IGFzc2lnbkRlZmF1bHRzXG4gICAgICAgICAgICAgIDogbm9vcDtcblxuICAgICAgZnVuY3Rpb24gYXNzaWduRGVmYXVsdHMoZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaGVtYSlcbiAgICAgICAgICBpZiAoZGF0YVtwcm9wXSA9PT0gdW5kZWZpbmVkKSBkYXRhW3Byb3BdID0gZnVuY3NbcHJvcF0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5vb3AoKSB7IHJldHVybiB0cnVlOyB9XG4gICAgfSxcbiAgICBERUZBVUxUUzogREVGQVVMVFMsXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoge1xuICAgICAgICB0eXBlOiBbJ3N0cmluZycsICdvYmplY3QnXSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlLFxuICAgICAgICByZXF1aXJlZDogWydmdW5jJywgJ2FyZ3MnXSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGZ1bmM6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICBhcmdzOiB7IHR5cGU6ICdvYmplY3QnIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnZHluYW1pY0RlZmF1bHRzJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcblxuICBmdW5jdGlvbiBnZXREZWZhdWx0KGQpIHtcbiAgICB2YXIgZGVmID0gREVGQVVMVFNbZF07XG4gICAgaWYgKGRlZikgcmV0dXJuIGRlZjtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgXCJkeW5hbWljRGVmYXVsdHNcIiBrZXl3b3JkIHByb3BlcnR5IHZhbHVlOiAnICsgZCk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZm9ybWF0TGltaXQnKSgnTWF4aW11bScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Zvcm1hdExpbWl0JykoJ01pbmltdW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICdpbnN0YW5jZW9mJzogcmVxdWlyZSgnLi9pbnN0YW5jZW9mJyksXG4gIHJhbmdlOiByZXF1aXJlKCcuL3JhbmdlJyksXG4gIHJlZ2V4cDogcmVxdWlyZSgnLi9yZWdleHAnKSxcbiAgJ3R5cGVvZic6IHJlcXVpcmUoJy4vdHlwZW9mJyksXG4gIGR5bmFtaWNEZWZhdWx0czogcmVxdWlyZSgnLi9keW5hbWljRGVmYXVsdHMnKSxcbiAgcHJvaGliaXRlZDogcmVxdWlyZSgnLi9wcm9oaWJpdGVkJyksXG4gIHVuaXF1ZUl0ZW1Qcm9wZXJ0aWVzOiByZXF1aXJlKCcuL3VuaXF1ZUl0ZW1Qcm9wZXJ0aWVzJyksXG4gIGRlZXBQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL2RlZXBQcm9wZXJ0aWVzJyksXG4gIGRlZXBSZXF1aXJlZDogcmVxdWlyZSgnLi9kZWVwUmVxdWlyZWQnKSxcbiAgZm9ybWF0TWluaW11bTogcmVxdWlyZSgnLi9mb3JtYXRNaW5pbXVtJyksXG4gIGZvcm1hdE1heGltdW06IHJlcXVpcmUoJy4vZm9ybWF0TWF4aW11bScpLFxuICBwYXR0ZXJuUmVxdWlyZWQ6IHJlcXVpcmUoJy4vcGF0dGVyblJlcXVpcmVkJyksXG4gICdzd2l0Y2gnOiByZXF1aXJlKCcuL3N3aXRjaCcpLFxuICBzZWxlY3Q6IHJlcXVpcmUoJy4vc2VsZWN0JyksXG4gIHRyYW5zZm9ybTogcmVxdWlyZSgnLi90cmFuc2Zvcm0nKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENPTlNUUlVDVE9SUyA9IHtcbiAgT2JqZWN0OiBPYmplY3QsXG4gIEFycmF5OiBBcnJheSxcbiAgRnVuY3Rpb246IEZ1bmN0aW9uLFxuICBOdW1iZXI6IE51bWJlcixcbiAgU3RyaW5nOiBTdHJpbmcsXG4gIERhdGU6IERhdGUsXG4gIFJlZ0V4cDogUmVnRXhwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgQnVmZmVyICE9ICd1bmRlZmluZWQnKVxuICAgIENPTlNUUlVDVE9SUy5CdWZmZXIgPSBCdWZmZXI7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBQcm9taXNlICE9ICd1bmRlZmluZWQnKVxuICAgIENPTlNUUlVDVE9SUy5Qcm9taXNlID0gUHJvbWlzZTtcblxuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHNjaGVtYSkge1xuICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gZ2V0Q29uc3RydWN0b3Ioc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnN0cnVjdG9ycyA9IHNjaGVtYS5tYXAoZ2V0Q29uc3RydWN0b3IpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxjb25zdHJ1Y3RvcnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcnNbaV0pIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgIH0sXG4gICAgQ09OU1RSVUNUT1JTOiBDT05TVFJVQ1RPUlMsXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgYW55T2Y6IFtcbiAgICAgICAgeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICBpdGVtczogeyB0eXBlOiAnc3RyaW5nJyB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ2luc3RhbmNlb2YnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xuXG4gIGZ1bmN0aW9uIGdldENvbnN0cnVjdG9yKGMpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBDT05TVFJVQ1RPUlNbY107XG4gICAgaWYgKENvbnN0cnVjdG9yKSByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFwiaW5zdGFuY2VvZlwiIGtleXdvcmQgdmFsdWUgJyArIGMpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBpbmxpbmU6IHJlcXVpcmUoJy4vZG90anMvcGF0dGVyblJlcXVpcmVkJyksXG4gICAgc3RhdGVtZW50czogdHJ1ZSxcbiAgICBlcnJvcnM6ICdmdWxsJyxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGZvcm1hdDogJ3JlZ2V4J1xuICAgICAgfSxcbiAgICAgIHVuaXF1ZUl0ZW1zOiB0cnVlXG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdwYXR0ZXJuUmVxdWlyZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgbWFjcm86IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgIGlmIChzY2hlbWEubGVuZ3RoID09IDApIHJldHVybiB7fTtcbiAgICAgIGlmIChzY2hlbWEubGVuZ3RoID09IDEpIHJldHVybiB7IG5vdDogeyByZXF1aXJlZDogc2NoZW1hIH0gfTtcbiAgICAgIHZhciBzY2hlbWFzID0gc2NoZW1hLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4geyByZXF1aXJlZDogW3Byb3BdIH07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7IG5vdDogeyBhbnlPZjogc2NoZW1hcyB9IH07XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3Byb2hpYml0ZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBtYWNybzogZnVuY3Rpb24gKHNjaGVtYSwgcGFyZW50U2NoZW1hKSB7XG4gICAgICB2YXIgbWluID0gc2NoZW1hWzBdXG4gICAgICAgICwgbWF4ID0gc2NoZW1hWzFdXG4gICAgICAgICwgZXhjbHVzaXZlID0gcGFyZW50U2NoZW1hLmV4Y2x1c2l2ZVJhbmdlO1xuXG4gICAgICB2YWxpZGF0ZVJhbmdlU2NoZW1hKG1pbiwgbWF4LCBleGNsdXNpdmUpO1xuXG4gICAgICByZXR1cm4gZXhjbHVzaXZlID09PSB0cnVlXG4gICAgICAgICAgICAgID8ge2V4Y2x1c2l2ZU1pbmltdW06IG1pbiwgZXhjbHVzaXZlTWF4aW11bTogbWF4fVxuICAgICAgICAgICAgICA6IHttaW5pbXVtOiBtaW4sIG1heGltdW06IG1heH07XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgbWluSXRlbXM6IDIsXG4gICAgICBtYXhJdGVtczogMixcbiAgICAgIGl0ZW1zOiB7IHR5cGU6ICdudW1iZXInIH1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3JhbmdlJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgYWp2LmFkZEtleXdvcmQoJ2V4Y2x1c2l2ZVJhbmdlJyk7XG4gIHJldHVybiBhanY7XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVSYW5nZVNjaGVtYShtaW4sIG1heCwgZXhjbHVzaXZlKSB7XG4gICAgaWYgKGV4Y2x1c2l2ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleGNsdXNpdmUgIT0gJ2Jvb2xlYW4nKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNjaGVtYSBmb3IgZXhjbHVzaXZlUmFuZ2Uga2V5d29yZCwgc2hvdWxkIGJlIGJvb2xlYW4nKTtcblxuICAgIGlmIChtaW4gPiBtYXggfHwgKGV4Y2x1c2l2ZSAmJiBtaW4gPT0gbWF4KSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgYXJlIG5vIG51bWJlcnMgaW4gcmFuZ2UnKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgaW5saW5lOiBmdW5jdGlvbiAoaXQsIGtleXdvcmQsIHNjaGVtYSkge1xuICAgICAgcmV0dXJuIGdldFJlZ0V4cCgpICsgJy50ZXN0KGRhdGEnICsgKGl0LmRhdGFMZXZlbCB8fCAnJykgKyAnKSc7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFJlZ0V4cCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHNjaGVtYS5wYXR0ZXJuLCBzY2hlbWEuZmxhZ3MpO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gc2NoZW1hLm1hdGNoKC9eXFwvKC4qKVxcLyhbZ2lteV0qKSQvKTtcbiAgICAgICAgICBpZiAocngpIHJldHVybiBuZXcgUmVnRXhwKHJ4WzFdLCByeFsyXSk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgcGFyc2Ugc3RyaW5nIGludG8gUmVnRXhwJyk7XG4gICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3JlZ3VsYXIgZXhwcmVzc2lvbicsIHNjaGVtYSwgJ2lzIGludmFsaWQnKTtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiBbJ3N0cmluZycsICdvYmplY3QnXSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgcGF0dGVybjogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICBmbGFnczogeyB0eXBlOiAnc3RyaW5nJyB9XG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IFsncGF0dGVybiddLFxuICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGZhbHNlXG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdyZWdleHAnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL191dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgaWYgKCFhanYuX29wdHMuJGRhdGEpIHtcbiAgICBjb25zb2xlLndhcm4oJ2tleXdvcmQgc2VsZWN0IHJlcXVpcmVzICRkYXRhIG9wdGlvbicpO1xuICAgIHJldHVybiBhanY7XG4gIH1cbiAgdmFyIG1ldGFTY2hlbWFSZWYgPSB1dGlsLm1ldGFTY2hlbWFSZWYoYWp2KTtcbiAgdmFyIGNvbXBpbGVkQ2FzZVNjaGVtYXMgPSBbXTtcblxuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIHYoc2NoZW1hLCBkYXRhLCBwYXJlbnRTY2hlbWEpIHtcbiAgICAgIGlmIChwYXJlbnRTY2hlbWEuc2VsZWN0Q2FzZXMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZXl3b3JkIFwic2VsZWN0Q2FzZXNcIiBpcyBhYnNlbnQnKTtcbiAgICAgIHZhciBjb21waWxlZCA9IGdldENvbXBpbGVkU2NoZW1hcyhwYXJlbnRTY2hlbWEsIGZhbHNlKTtcbiAgICAgIHZhciB2YWxpZGF0ZSA9IGNvbXBpbGVkLmNhc2VzW3NjaGVtYV07XG4gICAgICBpZiAodmFsaWRhdGUgPT09IHVuZGVmaW5lZCkgdmFsaWRhdGUgPSBjb21waWxlZC5kZWZhdWx0O1xuICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0ZSA9PSAnYm9vbGVhbicpIHJldHVybiB2YWxpZGF0ZTtcbiAgICAgIHZhciB2YWxpZCA9IHZhbGlkYXRlKGRhdGEpO1xuICAgICAgaWYgKCF2YWxpZCkgdi5lcnJvcnMgPSB2YWxpZGF0ZS5lcnJvcnM7XG4gICAgICByZXR1cm4gdmFsaWQ7XG4gICAgfSxcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBtZXRhU2NoZW1hOiB7IHR5cGU6IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ251bGwnXSB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3NlbGVjdCcsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIGFqdi5hZGRLZXl3b3JkKCdzZWxlY3RDYXNlcycsIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiAoc2NoZW1hcywgcGFyZW50U2NoZW1hKSB7XG4gICAgICB2YXIgY29tcGlsZWQgPSBnZXRDb21waWxlZFNjaGVtYXMocGFyZW50U2NoZW1hKTtcbiAgICAgIGZvciAodmFyIHZhbHVlIGluIHNjaGVtYXMpXG4gICAgICAgIGNvbXBpbGVkLmNhc2VzW3ZhbHVlXSA9IGNvbXBpbGVPckJvb2xlYW4oc2NoZW1hc1t2YWx1ZV0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgICB9LFxuICAgIHZhbGlkOiB0cnVlLFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IG1ldGFTY2hlbWFSZWZcbiAgICB9XG4gIH0pO1xuICBhanYuYWRkS2V5d29yZCgnc2VsZWN0RGVmYXVsdCcsIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiAoc2NoZW1hLCBwYXJlbnRTY2hlbWEpIHtcbiAgICAgIHZhciBjb21waWxlZCA9IGdldENvbXBpbGVkU2NoZW1hcyhwYXJlbnRTY2hlbWEpO1xuICAgICAgY29tcGlsZWQuZGVmYXVsdCA9IGNvbXBpbGVPckJvb2xlYW4oc2NoZW1hKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgfSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBtZXRhU2NoZW1hOiBtZXRhU2NoZW1hUmVmXG4gIH0pO1xuICByZXR1cm4gYWp2O1xuXG5cbiAgZnVuY3Rpb24gZ2V0Q29tcGlsZWRTY2hlbWFzKHBhcmVudFNjaGVtYSwgY3JlYXRlKSB7XG4gICAgdmFyIGNvbXBpbGVkO1xuICAgIGNvbXBpbGVkQ2FzZVNjaGVtYXMuc29tZShmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMucGFyZW50U2NoZW1hID09PSBwYXJlbnRTY2hlbWEpIHtcbiAgICAgICAgY29tcGlsZWQgPSBjO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWNvbXBpbGVkICYmIGNyZWF0ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbXBpbGVkID0ge1xuICAgICAgICBwYXJlbnRTY2hlbWE6IHBhcmVudFNjaGVtYSxcbiAgICAgICAgY2FzZXM6IHt9LFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgICB9O1xuICAgICAgY29tcGlsZWRDYXNlU2NoZW1hcy5wdXNoKGNvbXBpbGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBpbGVkO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGlsZU9yQm9vbGVhbihzY2hlbWEpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNjaGVtYSA9PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8gc2NoZW1hXG4gICAgICAgICAgICA6IGFqdi5jb21waWxlKHNjaGVtYSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi9fdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGlmIChhanYuUlVMRVMua2V5d29yZHMuc3dpdGNoICYmIGFqdi5SVUxFUy5rZXl3b3Jkcy5pZikgcmV0dXJuO1xuXG4gIHZhciBtZXRhU2NoZW1hUmVmID0gdXRpbC5tZXRhU2NoZW1hUmVmKGFqdik7XG5cbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIGlubGluZTogcmVxdWlyZSgnLi9kb3Rqcy9zd2l0Y2gnKSxcbiAgICBzdGF0ZW1lbnRzOiB0cnVlLFxuICAgIGVycm9yczogJ2Z1bGwnLFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBpdGVtczoge1xuICAgICAgICByZXF1aXJlZDogWyAndGhlbicgXSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICdpZic6IG1ldGFTY2hlbWFSZWYsXG4gICAgICAgICAgJ3RoZW4nOiB7XG4gICAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgICB7IHR5cGU6ICdib29sZWFuJyB9LFxuICAgICAgICAgICAgICBtZXRhU2NoZW1hUmVmXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnY29udGludWUnOiB7IHR5cGU6ICdib29sZWFuJyB9XG4gICAgICAgIH0sXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiB7XG4gICAgICAgICAgJ2NvbnRpbnVlJzogWyAnaWYnIF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnc3dpdGNoJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyAoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBlcnJvcnM6IGZhbHNlLFxuICAgIG1vZGlmeWluZzogdHJ1ZSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAoc2NoZW1hLCBwYXJlbnRTY2hlbWEpIHtcblxuICAgICAgLy8gYnVpbGQgaGFzaCB0YWJsZSB0byBlbnVtIHZhbHVlc1xuICAgICAgdmFyIGhhc2h0YWJsZSA9IHt9O1xuXG4gICAgICBpZiAoc2NoZW1hLmluZGV4T2YoJ3RvRW51bUNhc2UnKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gcmVxdWlyZXMgYGVudW1gIGluIHNjaGVtYVxuICAgICAgICBpZiAoIXBhcmVudFNjaGVtYS5lbnVtKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBlbnVtLiBUbyB1c2UgYHRyYW5zZm9ybTpbXCJ0b0VudW1DYXNlXCJdYCwgYGVudW06Wy4uLl1gIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICBmb3IgKHZhciBpID0gcGFyZW50U2NoZW1hLmVudW0ubGVuZ3RoOyBpLS07IGkpIHtcbiAgICAgICAgICB2YXIgdiA9IHBhcmVudFNjaGVtYS5lbnVtW2ldO1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIGNvbnRpbnVlO1xuICAgICAgICAgIHZhciBrID0gbWFrZUhhc2hUYWJsZUtleSh2KTtcbiAgICAgICAgICAvLyByZXF1aXJlcyBhbGwgYGVudW1gIHZhbHVlcyBoYXZlIHVuaXF1ZSBrZXlzXG4gICAgICAgICAgaWYgKGhhc2h0YWJsZVtrXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbnVtIHVuaXF1ZW5lc3MuIFRvIHVzZSBgdHJhbnNmb3JtOltcInRvRW51bUNhc2VcIl1gLCBhbGwgdmFsdWVzIG11c3QgYmUgdW5pcXVlIHdoZW4gY2FzZSBpbnNlbnNpdGl2ZS4nKTtcbiAgICAgICAgICBoYXNodGFibGVba10gPSB2O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB7XG4gICAgICAgIHRyaW1MZWZ0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXltcXHNdKy8sICcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJpbVJpZ2h0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW1xcc10rJC8sICcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJpbTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9Mb3dlckNhc2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuICAgICAgICB0b1VwcGVyQ2FzZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvRW51bUNhc2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBoYXNodGFibGVbbWFrZUhhc2hUYWJsZUtleSh2YWx1ZSldIHx8IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBvYmplY3RLZXksIG9iamVjdCwga2V5KSB7XG4gICAgICAgIC8vIHNraXAgaWYgdmFsdWUgb25seVxuICAgICAgICBpZiAoIW9iamVjdCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIGFwcGx5IHRyYW5zZm9ybSBpbiBvcmRlciBwcm92aWRlZFxuICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IHNjaGVtYS5sZW5ndGg7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFtrZXldICE9PSAnc3RyaW5nJykgY29udGludWU7XG4gICAgICAgICAgb2JqZWN0W2tleV0gPSB0cmFuc2Zvcm1bc2NoZW1hW2pdXShvYmplY3Rba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGVudW06IFtcbiAgICAgICAgICAndHJpbUxlZnQnLCAndHJpbVJpZ2h0JywgJ3RyaW0nLFxuICAgICAgICAgICd0b0xvd2VyQ2FzZScsICd0b1VwcGVyQ2FzZScsICd0b0VudW1DYXNlJ1xuICAgICAgICBdXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCd0cmFuc2Zvcm0nLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xuXG4gIGZ1bmN0aW9uIG1ha2VIYXNoVGFibGVLZXkgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBLTk9XTl9UWVBFUyA9IFsndW5kZWZpbmVkJywgJ3N0cmluZycsICdudW1iZXInLCAnb2JqZWN0JywgJ2Z1bmN0aW9uJywgJ2Jvb2xlYW4nLCAnc3ltYm9sJ107XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIGlubGluZTogZnVuY3Rpb24gKGl0LCBrZXl3b3JkLCBzY2hlbWEpIHtcbiAgICAgIHZhciBkYXRhID0gJ2RhdGEnICsgKGl0LmRhdGFMZXZlbCB8fCAnJyk7XG4gICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnc3RyaW5nJykgcmV0dXJuICd0eXBlb2YgJyArIGRhdGEgKyAnID09IFwiJyArIHNjaGVtYSArICdcIic7XG4gICAgICBzY2hlbWEgPSAndmFsaWRhdGUuc2NoZW1hJyArIGl0LnNjaGVtYVBhdGggKyAnLicgKyBrZXl3b3JkO1xuICAgICAgcmV0dXJuIHNjaGVtYSArICcuaW5kZXhPZih0eXBlb2YgJyArIGRhdGEgKyAnKSA+PSAwJztcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIGFueU9mOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBlbnVtOiBLTk9XTl9UWVBFU1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgICBpdGVtczoge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBlbnVtOiBLTk9XTl9UWVBFU1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgndHlwZW9mJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIHR5cGU6ICdhcnJheScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oa2V5cywgcGFyZW50U2NoZW1hLCBpdCkge1xuICAgICAgdmFyIGVxdWFsID0gaXQudXRpbC5lcXVhbDtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBmb3IgKHZhciBrPTA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1trXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkYXRhLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbaV0gIT0gJ29iamVjdCcpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gaTsgai0tOykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtqXSA9PSAnb2JqZWN0JyAmJiBlcXVhbChkYXRhW2ldW2tleV0sIGRhdGFbal1ba2V5XSkpXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgIGl0ZW1zOiB7dHlwZTogJ3N0cmluZyd9XG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCd1bmlxdWVJdGVtUHJvcGVydGllcycsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29tcGlsZVNjaGVtYSA9IHJlcXVpcmUoJy4vY29tcGlsZScpXG4gICwgcmVzb2x2ZSA9IHJlcXVpcmUoJy4vY29tcGlsZS9yZXNvbHZlJylcbiAgLCBDYWNoZSA9IHJlcXVpcmUoJy4vY2FjaGUnKVxuICAsIFNjaGVtYU9iamVjdCA9IHJlcXVpcmUoJy4vY29tcGlsZS9zY2hlbWFfb2JqJylcbiAgLCBzdGFibGVTdHJpbmdpZnkgPSByZXF1aXJlKCdmYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeScpXG4gICwgZm9ybWF0cyA9IHJlcXVpcmUoJy4vY29tcGlsZS9mb3JtYXRzJylcbiAgLCBydWxlcyA9IHJlcXVpcmUoJy4vY29tcGlsZS9ydWxlcycpXG4gICwgJGRhdGFNZXRhU2NoZW1hID0gcmVxdWlyZSgnLi9kYXRhJylcbiAgLCB1dGlsID0gcmVxdWlyZSgnLi9jb21waWxlL3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBanY7XG5cbkFqdi5wcm90b3R5cGUudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbkFqdi5wcm90b3R5cGUuY29tcGlsZSA9IGNvbXBpbGU7XG5BanYucHJvdG90eXBlLmFkZFNjaGVtYSA9IGFkZFNjaGVtYTtcbkFqdi5wcm90b3R5cGUuYWRkTWV0YVNjaGVtYSA9IGFkZE1ldGFTY2hlbWE7XG5BanYucHJvdG90eXBlLnZhbGlkYXRlU2NoZW1hID0gdmFsaWRhdGVTY2hlbWE7XG5BanYucHJvdG90eXBlLmdldFNjaGVtYSA9IGdldFNjaGVtYTtcbkFqdi5wcm90b3R5cGUucmVtb3ZlU2NoZW1hID0gcmVtb3ZlU2NoZW1hO1xuQWp2LnByb3RvdHlwZS5hZGRGb3JtYXQgPSBhZGRGb3JtYXQ7XG5BanYucHJvdG90eXBlLmVycm9yc1RleHQgPSBlcnJvcnNUZXh0O1xuXG5BanYucHJvdG90eXBlLl9hZGRTY2hlbWEgPSBfYWRkU2NoZW1hO1xuQWp2LnByb3RvdHlwZS5fY29tcGlsZSA9IF9jb21waWxlO1xuXG5BanYucHJvdG90eXBlLmNvbXBpbGVBc3luYyA9IHJlcXVpcmUoJy4vY29tcGlsZS9hc3luYycpO1xudmFyIGN1c3RvbUtleXdvcmQgPSByZXF1aXJlKCcuL2tleXdvcmQnKTtcbkFqdi5wcm90b3R5cGUuYWRkS2V5d29yZCA9IGN1c3RvbUtleXdvcmQuYWRkO1xuQWp2LnByb3RvdHlwZS5nZXRLZXl3b3JkID0gY3VzdG9tS2V5d29yZC5nZXQ7XG5BanYucHJvdG90eXBlLnJlbW92ZUtleXdvcmQgPSBjdXN0b21LZXl3b3JkLnJlbW92ZTtcblxudmFyIGVycm9yQ2xhc3NlcyA9IHJlcXVpcmUoJy4vY29tcGlsZS9lcnJvcl9jbGFzc2VzJyk7XG5BanYuVmFsaWRhdGlvbkVycm9yID0gZXJyb3JDbGFzc2VzLlZhbGlkYXRpb247XG5BanYuTWlzc2luZ1JlZkVycm9yID0gZXJyb3JDbGFzc2VzLk1pc3NpbmdSZWY7XG5BanYuJGRhdGFNZXRhU2NoZW1hID0gJGRhdGFNZXRhU2NoZW1hO1xuXG52YXIgTUVUQV9TQ0hFTUFfSUQgPSAnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWEnO1xuXG52YXIgTUVUQV9JR05PUkVfT1BUSU9OUyA9IFsgJ3JlbW92ZUFkZGl0aW9uYWwnLCAndXNlRGVmYXVsdHMnLCAnY29lcmNlVHlwZXMnIF07XG52YXIgTUVUQV9TVVBQT1JUX0RBVEEgPSBbJy9wcm9wZXJ0aWVzJ107XG5cbi8qKlxuICogQ3JlYXRlcyB2YWxpZGF0b3IgaW5zdGFuY2UuXG4gKiBVc2FnZTogYEFqdihvcHRzKWBcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIG9wdGlvbmFsIG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gYWp2IGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEFqdihvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBanYpKSByZXR1cm4gbmV3IEFqdihvcHRzKTtcbiAgb3B0cyA9IHRoaXMuX29wdHMgPSB1dGlsLmNvcHkob3B0cykgfHwge307XG4gIHNldExvZ2dlcih0aGlzKTtcbiAgdGhpcy5fc2NoZW1hcyA9IHt9O1xuICB0aGlzLl9yZWZzID0ge307XG4gIHRoaXMuX2ZyYWdtZW50cyA9IHt9O1xuICB0aGlzLl9mb3JtYXRzID0gZm9ybWF0cyhvcHRzLmZvcm1hdCk7XG4gIHZhciBzY2hlbWFVcmlGb3JtYXQgPSB0aGlzLl9zY2hlbWFVcmlGb3JtYXQgPSB0aGlzLl9mb3JtYXRzWyd1cmktcmVmZXJlbmNlJ107XG4gIHRoaXMuX3NjaGVtYVVyaUZvcm1hdEZ1bmMgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzY2hlbWFVcmlGb3JtYXQudGVzdChzdHIpOyB9O1xuXG4gIHRoaXMuX2NhY2hlID0gb3B0cy5jYWNoZSB8fCBuZXcgQ2FjaGU7XG4gIHRoaXMuX2xvYWRpbmdTY2hlbWFzID0ge307XG4gIHRoaXMuX2NvbXBpbGF0aW9ucyA9IFtdO1xuICB0aGlzLlJVTEVTID0gcnVsZXMoKTtcbiAgdGhpcy5fZ2V0SWQgPSBjaG9vc2VHZXRJZChvcHRzKTtcblxuICBvcHRzLmxvb3BSZXF1aXJlZCA9IG9wdHMubG9vcFJlcXVpcmVkIHx8IEluZmluaXR5O1xuICBpZiAob3B0cy5lcnJvckRhdGFQYXRoID09ICdwcm9wZXJ0eScpIG9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSA9IHRydWU7XG4gIGlmIChvcHRzLnNlcmlhbGl6ZSA9PT0gdW5kZWZpbmVkKSBvcHRzLnNlcmlhbGl6ZSA9IHN0YWJsZVN0cmluZ2lmeTtcbiAgdGhpcy5fbWV0YU9wdHMgPSBnZXRNZXRhU2NoZW1hT3B0aW9ucyh0aGlzKTtcblxuICBpZiAob3B0cy5mb3JtYXRzKSBhZGRJbml0aWFsRm9ybWF0cyh0aGlzKTtcbiAgYWRkRHJhZnQ2TWV0YVNjaGVtYSh0aGlzKTtcbiAgaWYgKHR5cGVvZiBvcHRzLm1ldGEgPT0gJ29iamVjdCcpIHRoaXMuYWRkTWV0YVNjaGVtYShvcHRzLm1ldGEpO1xuICBhZGRJbml0aWFsU2NoZW1hcyh0aGlzKTtcbn1cblxuXG5cbi8qKlxuICogVmFsaWRhdGUgZGF0YSB1c2luZyBzY2hlbWFcbiAqIFNjaGVtYSB3aWxsIGJlIGNvbXBpbGVkIGFuZCBjYWNoZWQgKHVzaW5nIHNlcmlhbGl6ZWQgSlNPTiBhcyBrZXkuIFtmYXN0LWpzb24tc3RhYmxlLXN0cmluZ2lmeV0oaHR0cHM6Ly9naXRodWIuY29tL2Vwb2JlcmV6a2luL2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5KSBpcyB1c2VkIHRvIHNlcmlhbGl6ZS5cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtTdHJpbmd8T2JqZWN0fSBzY2hlbWFLZXlSZWYga2V5LCByZWYgb3Igc2NoZW1hIG9iamVjdFxuICogQHBhcmFtICB7QW55fSBkYXRhIHRvIGJlIHZhbGlkYXRlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gdmFsaWRhdGlvbiByZXN1bHQuIEVycm9ycyBmcm9tIHRoZSBsYXN0IHZhbGlkYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgaW4gYGFqdi5lcnJvcnNgIChhbmQgYWxzbyBpbiBjb21waWxlZCBzY2hlbWE6IGBzY2hlbWEuZXJyb3JzYCkuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlKHNjaGVtYUtleVJlZiwgZGF0YSkge1xuICB2YXIgdjtcbiAgaWYgKHR5cGVvZiBzY2hlbWFLZXlSZWYgPT0gJ3N0cmluZycpIHtcbiAgICB2ID0gdGhpcy5nZXRTY2hlbWEoc2NoZW1hS2V5UmVmKTtcbiAgICBpZiAoIXYpIHRocm93IG5ldyBFcnJvcignbm8gc2NoZW1hIHdpdGgga2V5IG9yIHJlZiBcIicgKyBzY2hlbWFLZXlSZWYgKyAnXCInKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2NoZW1hT2JqID0gdGhpcy5fYWRkU2NoZW1hKHNjaGVtYUtleVJlZik7XG4gICAgdiA9IHNjaGVtYU9iai52YWxpZGF0ZSB8fCB0aGlzLl9jb21waWxlKHNjaGVtYU9iaik7XG4gIH1cblxuICB2YXIgdmFsaWQgPSB2KGRhdGEpO1xuICBpZiAodi4kYXN5bmMgIT09IHRydWUpIHRoaXMuZXJyb3JzID0gdi5lcnJvcnM7XG4gIHJldHVybiB2YWxpZDtcbn1cblxuXG4vKipcbiAqIENyZWF0ZSB2YWxpZGF0aW5nIGZ1bmN0aW9uIGZvciBwYXNzZWQgc2NoZW1hLlxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge09iamVjdH0gc2NoZW1hIHNjaGVtYSBvYmplY3RcbiAqIEBwYXJhbSAge0Jvb2xlYW59IF9tZXRhIHRydWUgaWYgc2NoZW1hIGlzIGEgbWV0YS1zY2hlbWEuIFVzZWQgaW50ZXJuYWxseSB0byBjb21waWxlIG1ldGEgc2NoZW1hcyBvZiBjdXN0b20ga2V5d29yZHMuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gdmFsaWRhdGluZyBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBjb21waWxlKHNjaGVtYSwgX21ldGEpIHtcbiAgdmFyIHNjaGVtYU9iaiA9IHRoaXMuX2FkZFNjaGVtYShzY2hlbWEsIHVuZGVmaW5lZCwgX21ldGEpO1xuICByZXR1cm4gc2NoZW1hT2JqLnZhbGlkYXRlIHx8IHRoaXMuX2NvbXBpbGUoc2NoZW1hT2JqKTtcbn1cblxuXG4vKipcbiAqIEFkZHMgc2NoZW1hIHRvIHRoZSBpbnN0YW5jZS5cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc2NoZW1hIHNjaGVtYSBvciBhcnJheSBvZiBzY2hlbWFzLiBJZiBhcnJheSBpcyBwYXNzZWQsIGBrZXlgIGFuZCBvdGhlciBwYXJhbWV0ZXJzIHdpbGwgYmUgaWdub3JlZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgT3B0aW9uYWwgc2NoZW1hIGtleS4gQ2FuIGJlIHBhc3NlZCB0byBgdmFsaWRhdGVgIG1ldGhvZCBpbnN0ZWFkIG9mIHNjaGVtYSBvYmplY3Qgb3IgaWQvcmVmLiBPbmUgc2NoZW1hIHBlciBpbnN0YW5jZSBjYW4gaGF2ZSBlbXB0eSBgaWRgIGFuZCBga2V5YC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gX3NraXBWYWxpZGF0aW9uIHRydWUgdG8gc2tpcCBzY2hlbWEgdmFsaWRhdGlvbi4gVXNlZCBpbnRlcm5hbGx5LCBvcHRpb24gdmFsaWRhdGVTY2hlbWEgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gX21ldGEgdHJ1ZSBpZiBzY2hlbWEgaXMgYSBtZXRhLXNjaGVtYS4gVXNlZCBpbnRlcm5hbGx5LCBhZGRNZXRhU2NoZW1hIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gKiBAcmV0dXJuIHtBanZ9IHRoaXMgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICovXG5mdW5jdGlvbiBhZGRTY2hlbWEoc2NoZW1hLCBrZXksIF9za2lwVmFsaWRhdGlvbiwgX21ldGEpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSl7XG4gICAgZm9yICh2YXIgaT0wOyBpPHNjaGVtYS5sZW5ndGg7IGkrKykgdGhpcy5hZGRTY2hlbWEoc2NoZW1hW2ldLCB1bmRlZmluZWQsIF9za2lwVmFsaWRhdGlvbiwgX21ldGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHZhciBpZCA9IHRoaXMuX2dldElkKHNjaGVtYSk7XG4gIGlmIChpZCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBpZCAhPSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjaGVtYSBpZCBtdXN0IGJlIHN0cmluZycpO1xuICBrZXkgPSByZXNvbHZlLm5vcm1hbGl6ZUlkKGtleSB8fCBpZCk7XG4gIGNoZWNrVW5pcXVlKHRoaXMsIGtleSk7XG4gIHRoaXMuX3NjaGVtYXNba2V5XSA9IHRoaXMuX2FkZFNjaGVtYShzY2hlbWEsIF9za2lwVmFsaWRhdGlvbiwgX21ldGEsIHRydWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuXG4vKipcbiAqIEFkZCBzY2hlbWEgdGhhdCB3aWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgb3RoZXIgc2NoZW1hc1xuICogb3B0aW9ucyBpbiBNRVRBX0lHTk9SRV9PUFRJT05TIGFyZSBhbHdheSBzZXQgdG8gZmFsc2VcbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0ge09iamVjdH0gc2NoZW1hIHNjaGVtYSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgb3B0aW9uYWwgc2NoZW1hIGtleVxuICogQHBhcmFtIHtCb29sZWFufSBza2lwVmFsaWRhdGlvbiB0cnVlIHRvIHNraXAgc2NoZW1hIHZhbGlkYXRpb24sIGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIHZhbGlkYXRlU2NoZW1hIG9wdGlvbiBmb3IgbWV0YS1zY2hlbWFcbiAqIEByZXR1cm4ge0Fqdn0gdGhpcyBmb3IgbWV0aG9kIGNoYWluaW5nXG4gKi9cbmZ1bmN0aW9uIGFkZE1ldGFTY2hlbWEoc2NoZW1hLCBrZXksIHNraXBWYWxpZGF0aW9uKSB7XG4gIHRoaXMuYWRkU2NoZW1hKHNjaGVtYSwga2V5LCBza2lwVmFsaWRhdGlvbiwgdHJ1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5cbi8qKlxuICogVmFsaWRhdGUgc2NoZW1hXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtIHtPYmplY3R9IHNjaGVtYSBzY2hlbWEgdG8gdmFsaWRhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGhyb3dPckxvZ0Vycm9yIHBhc3MgdHJ1ZSB0byB0aHJvdyAob3IgbG9nKSBhbiBlcnJvciBpZiBpbnZhbGlkXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNjaGVtYSBpcyB2YWxpZFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYShzY2hlbWEsIHRocm93T3JMb2dFcnJvcikge1xuICB2YXIgJHNjaGVtYSA9IHNjaGVtYS4kc2NoZW1hO1xuICBpZiAoJHNjaGVtYSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAkc2NoZW1hICE9ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcignJHNjaGVtYSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICRzY2hlbWEgPSAkc2NoZW1hIHx8IHRoaXMuX29wdHMuZGVmYXVsdE1ldGEgfHwgZGVmYXVsdE1ldGEodGhpcyk7XG4gIGlmICghJHNjaGVtYSkge1xuICAgIHRoaXMubG9nZ2VyLndhcm4oJ21ldGEtc2NoZW1hIG5vdCBhdmFpbGFibGUnKTtcbiAgICB0aGlzLmVycm9ycyA9IG51bGw7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGN1cnJlbnRVcmlGb3JtYXQgPSB0aGlzLl9mb3JtYXRzLnVyaTtcbiAgdGhpcy5fZm9ybWF0cy51cmkgPSB0eXBlb2YgY3VycmVudFVyaUZvcm1hdCA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLl9zY2hlbWFVcmlGb3JtYXRGdW5jXG4gICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9zY2hlbWFVcmlGb3JtYXQ7XG4gIHZhciB2YWxpZDtcbiAgdHJ5IHsgdmFsaWQgPSB0aGlzLnZhbGlkYXRlKCRzY2hlbWEsIHNjaGVtYSk7IH1cbiAgZmluYWxseSB7IHRoaXMuX2Zvcm1hdHMudXJpID0gY3VycmVudFVyaUZvcm1hdDsgfVxuICBpZiAoIXZhbGlkICYmIHRocm93T3JMb2dFcnJvcikge1xuICAgIHZhciBtZXNzYWdlID0gJ3NjaGVtYSBpcyBpbnZhbGlkOiAnICsgdGhpcy5lcnJvcnNUZXh0KCk7XG4gICAgaWYgKHRoaXMuX29wdHMudmFsaWRhdGVTY2hlbWEgPT0gJ2xvZycpIHRoaXMubG9nZ2VyLmVycm9yKG1lc3NhZ2UpO1xuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuXG5mdW5jdGlvbiBkZWZhdWx0TWV0YShzZWxmKSB7XG4gIHZhciBtZXRhID0gc2VsZi5fb3B0cy5tZXRhO1xuICBzZWxmLl9vcHRzLmRlZmF1bHRNZXRhID0gdHlwZW9mIG1ldGEgPT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuX2dldElkKG1ldGEpIHx8IG1ldGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuZ2V0U2NoZW1hKE1FVEFfU0NIRU1BX0lEKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBNRVRBX1NDSEVNQV9JRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBzZWxmLl9vcHRzLmRlZmF1bHRNZXRhO1xufVxuXG5cbi8qKlxuICogR2V0IGNvbXBpbGVkIHNjaGVtYSBmcm9tIHRoZSBpbnN0YW5jZSBieSBga2V5YCBvciBgcmVmYC5cbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGtleVJlZiBga2V5YCB0aGF0IHdhcyBwYXNzZWQgdG8gYGFkZFNjaGVtYWAgb3IgZnVsbCBzY2hlbWEgcmVmZXJlbmNlIChgc2NoZW1hLmlkYCBvciByZXNvbHZlZCBpZCkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gc2NoZW1hIHZhbGlkYXRpbmcgZnVuY3Rpb24gKHdpdGggcHJvcGVydHkgYHNjaGVtYWApLlxuICovXG5mdW5jdGlvbiBnZXRTY2hlbWEoa2V5UmVmKSB7XG4gIHZhciBzY2hlbWFPYmogPSBfZ2V0U2NoZW1hT2JqKHRoaXMsIGtleVJlZik7XG4gIHN3aXRjaCAodHlwZW9mIHNjaGVtYU9iaikge1xuICAgIGNhc2UgJ29iamVjdCc6IHJldHVybiBzY2hlbWFPYmoudmFsaWRhdGUgfHwgdGhpcy5fY29tcGlsZShzY2hlbWFPYmopO1xuICAgIGNhc2UgJ3N0cmluZyc6IHJldHVybiB0aGlzLmdldFNjaGVtYShzY2hlbWFPYmopO1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6IHJldHVybiBfZ2V0U2NoZW1hRnJhZ21lbnQodGhpcywga2V5UmVmKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIF9nZXRTY2hlbWFGcmFnbWVudChzZWxmLCByZWYpIHtcbiAgdmFyIHJlcyA9IHJlc29sdmUuc2NoZW1hLmNhbGwoc2VsZiwgeyBzY2hlbWE6IHt9IH0sIHJlZik7XG4gIGlmIChyZXMpIHtcbiAgICB2YXIgc2NoZW1hID0gcmVzLnNjaGVtYVxuICAgICAgLCByb290ID0gcmVzLnJvb3RcbiAgICAgICwgYmFzZUlkID0gcmVzLmJhc2VJZDtcbiAgICB2YXIgdiA9IGNvbXBpbGVTY2hlbWEuY2FsbChzZWxmLCBzY2hlbWEsIHJvb3QsIHVuZGVmaW5lZCwgYmFzZUlkKTtcbiAgICBzZWxmLl9mcmFnbWVudHNbcmVmXSA9IG5ldyBTY2hlbWFPYmplY3Qoe1xuICAgICAgcmVmOiByZWYsXG4gICAgICBmcmFnbWVudDogdHJ1ZSxcbiAgICAgIHNjaGVtYTogc2NoZW1hLFxuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIGJhc2VJZDogYmFzZUlkLFxuICAgICAgdmFsaWRhdGU6IHZcbiAgICB9KTtcbiAgICByZXR1cm4gdjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIF9nZXRTY2hlbWFPYmooc2VsZiwga2V5UmVmKSB7XG4gIGtleVJlZiA9IHJlc29sdmUubm9ybWFsaXplSWQoa2V5UmVmKTtcbiAgcmV0dXJuIHNlbGYuX3NjaGVtYXNba2V5UmVmXSB8fCBzZWxmLl9yZWZzW2tleVJlZl0gfHwgc2VsZi5fZnJhZ21lbnRzW2tleVJlZl07XG59XG5cblxuLyoqXG4gKiBSZW1vdmUgY2FjaGVkIHNjaGVtYShzKS5cbiAqIElmIG5vIHBhcmFtZXRlciBpcyBwYXNzZWQgYWxsIHNjaGVtYXMgYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAqIElmIFJlZ0V4cCBpcyBwYXNzZWQgYWxsIHNjaGVtYXMgd2l0aCBrZXkvaWQgbWF0Y2hpbmcgcGF0dGVybiBidXQgbWV0YS1zY2hlbWFzIGFyZSByZW1vdmVkLlxuICogRXZlbiBpZiBzY2hlbWEgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBzY2hlbWFzIGl0IHN0aWxsIGNhbiBiZSByZW1vdmVkIGFzIG90aGVyIHNjaGVtYXMgaGF2ZSBsb2NhbCByZWZlcmVuY2VzLlxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge1N0cmluZ3xPYmplY3R8UmVnRXhwfSBzY2hlbWFLZXlSZWYga2V5LCByZWYsIHBhdHRlcm4gdG8gbWF0Y2gga2V5L3JlZiBvciBzY2hlbWEgb2JqZWN0XG4gKiBAcmV0dXJuIHtBanZ9IHRoaXMgZm9yIG1ldGhvZCBjaGFpbmluZ1xuICovXG5mdW5jdGlvbiByZW1vdmVTY2hlbWEoc2NoZW1hS2V5UmVmKSB7XG4gIGlmIChzY2hlbWFLZXlSZWYgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICBfcmVtb3ZlQWxsU2NoZW1hcyh0aGlzLCB0aGlzLl9zY2hlbWFzLCBzY2hlbWFLZXlSZWYpO1xuICAgIF9yZW1vdmVBbGxTY2hlbWFzKHRoaXMsIHRoaXMuX3JlZnMsIHNjaGVtYUtleVJlZik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc3dpdGNoICh0eXBlb2Ygc2NoZW1hS2V5UmVmKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIF9yZW1vdmVBbGxTY2hlbWFzKHRoaXMsIHRoaXMuX3NjaGVtYXMpO1xuICAgICAgX3JlbW92ZUFsbFNjaGVtYXModGhpcywgdGhpcy5fcmVmcyk7XG4gICAgICB0aGlzLl9jYWNoZS5jbGVhcigpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhciBzY2hlbWFPYmogPSBfZ2V0U2NoZW1hT2JqKHRoaXMsIHNjaGVtYUtleVJlZik7XG4gICAgICBpZiAoc2NoZW1hT2JqKSB0aGlzLl9jYWNoZS5kZWwoc2NoZW1hT2JqLmNhY2hlS2V5KTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zY2hlbWFzW3NjaGVtYUtleVJlZl07XG4gICAgICBkZWxldGUgdGhpcy5fcmVmc1tzY2hlbWFLZXlSZWZdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBzZXJpYWxpemUgPSB0aGlzLl9vcHRzLnNlcmlhbGl6ZTtcbiAgICAgIHZhciBjYWNoZUtleSA9IHNlcmlhbGl6ZSA/IHNlcmlhbGl6ZShzY2hlbWFLZXlSZWYpIDogc2NoZW1hS2V5UmVmO1xuICAgICAgdGhpcy5fY2FjaGUuZGVsKGNhY2hlS2V5KTtcbiAgICAgIHZhciBpZCA9IHRoaXMuX2dldElkKHNjaGVtYUtleVJlZik7XG4gICAgICBpZiAoaWQpIHtcbiAgICAgICAgaWQgPSByZXNvbHZlLm5vcm1hbGl6ZUlkKGlkKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3NjaGVtYXNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fcmVmc1tpZF07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cblxuZnVuY3Rpb24gX3JlbW92ZUFsbFNjaGVtYXMoc2VsZiwgc2NoZW1hcywgcmVnZXgpIHtcbiAgZm9yICh2YXIga2V5UmVmIGluIHNjaGVtYXMpIHtcbiAgICB2YXIgc2NoZW1hT2JqID0gc2NoZW1hc1trZXlSZWZdO1xuICAgIGlmICghc2NoZW1hT2JqLm1ldGEgJiYgKCFyZWdleCB8fCByZWdleC50ZXN0KGtleVJlZikpKSB7XG4gICAgICBzZWxmLl9jYWNoZS5kZWwoc2NoZW1hT2JqLmNhY2hlS2V5KTtcbiAgICAgIGRlbGV0ZSBzY2hlbWFzW2tleVJlZl07XG4gICAgfVxuICB9XG59XG5cblxuLyogQHRoaXMgICBBanYgKi9cbmZ1bmN0aW9uIF9hZGRTY2hlbWEoc2NoZW1hLCBza2lwVmFsaWRhdGlvbiwgbWV0YSwgc2hvdWxkQWRkU2NoZW1hKSB7XG4gIGlmICh0eXBlb2Ygc2NoZW1hICE9ICdvYmplY3QnICYmIHR5cGVvZiBzY2hlbWEgIT0gJ2Jvb2xlYW4nKVxuICAgIHRocm93IG5ldyBFcnJvcignc2NoZW1hIHNob3VsZCBiZSBvYmplY3Qgb3IgYm9vbGVhbicpO1xuICB2YXIgc2VyaWFsaXplID0gdGhpcy5fb3B0cy5zZXJpYWxpemU7XG4gIHZhciBjYWNoZUtleSA9IHNlcmlhbGl6ZSA/IHNlcmlhbGl6ZShzY2hlbWEpIDogc2NoZW1hO1xuICB2YXIgY2FjaGVkID0gdGhpcy5fY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZDtcblxuICBzaG91bGRBZGRTY2hlbWEgPSBzaG91bGRBZGRTY2hlbWEgfHwgdGhpcy5fb3B0cy5hZGRVc2VkU2NoZW1hICE9PSBmYWxzZTtcblxuICB2YXIgaWQgPSByZXNvbHZlLm5vcm1hbGl6ZUlkKHRoaXMuX2dldElkKHNjaGVtYSkpO1xuICBpZiAoaWQgJiYgc2hvdWxkQWRkU2NoZW1hKSBjaGVja1VuaXF1ZSh0aGlzLCBpZCk7XG5cbiAgdmFyIHdpbGxWYWxpZGF0ZSA9IHRoaXMuX29wdHMudmFsaWRhdGVTY2hlbWEgIT09IGZhbHNlICYmICFza2lwVmFsaWRhdGlvbjtcbiAgdmFyIHJlY3Vyc2l2ZU1ldGE7XG4gIGlmICh3aWxsVmFsaWRhdGUgJiYgIShyZWN1cnNpdmVNZXRhID0gaWQgJiYgaWQgPT0gcmVzb2x2ZS5ub3JtYWxpemVJZChzY2hlbWEuJHNjaGVtYSkpKVxuICAgIHRoaXMudmFsaWRhdGVTY2hlbWEoc2NoZW1hLCB0cnVlKTtcblxuICB2YXIgbG9jYWxSZWZzID0gcmVzb2x2ZS5pZHMuY2FsbCh0aGlzLCBzY2hlbWEpO1xuXG4gIHZhciBzY2hlbWFPYmogPSBuZXcgU2NoZW1hT2JqZWN0KHtcbiAgICBpZDogaWQsXG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgbG9jYWxSZWZzOiBsb2NhbFJlZnMsXG4gICAgY2FjaGVLZXk6IGNhY2hlS2V5LFxuICAgIG1ldGE6IG1ldGFcbiAgfSk7XG5cbiAgaWYgKGlkWzBdICE9ICcjJyAmJiBzaG91bGRBZGRTY2hlbWEpIHRoaXMuX3JlZnNbaWRdID0gc2NoZW1hT2JqO1xuICB0aGlzLl9jYWNoZS5wdXQoY2FjaGVLZXksIHNjaGVtYU9iaik7XG5cbiAgaWYgKHdpbGxWYWxpZGF0ZSAmJiByZWN1cnNpdmVNZXRhKSB0aGlzLnZhbGlkYXRlU2NoZW1hKHNjaGVtYSwgdHJ1ZSk7XG5cbiAgcmV0dXJuIHNjaGVtYU9iajtcbn1cblxuXG4vKiBAdGhpcyAgIEFqdiAqL1xuZnVuY3Rpb24gX2NvbXBpbGUoc2NoZW1hT2JqLCByb290KSB7XG4gIGlmIChzY2hlbWFPYmouY29tcGlsaW5nKSB7XG4gICAgc2NoZW1hT2JqLnZhbGlkYXRlID0gY2FsbFZhbGlkYXRlO1xuICAgIGNhbGxWYWxpZGF0ZS5zY2hlbWEgPSBzY2hlbWFPYmouc2NoZW1hO1xuICAgIGNhbGxWYWxpZGF0ZS5lcnJvcnMgPSBudWxsO1xuICAgIGNhbGxWYWxpZGF0ZS5yb290ID0gcm9vdCA/IHJvb3QgOiBjYWxsVmFsaWRhdGU7XG4gICAgaWYgKHNjaGVtYU9iai5zY2hlbWEuJGFzeW5jID09PSB0cnVlKVxuICAgICAgY2FsbFZhbGlkYXRlLiRhc3luYyA9IHRydWU7XG4gICAgcmV0dXJuIGNhbGxWYWxpZGF0ZTtcbiAgfVxuICBzY2hlbWFPYmouY29tcGlsaW5nID0gdHJ1ZTtcblxuICB2YXIgY3VycmVudE9wdHM7XG4gIGlmIChzY2hlbWFPYmoubWV0YSkge1xuICAgIGN1cnJlbnRPcHRzID0gdGhpcy5fb3B0cztcbiAgICB0aGlzLl9vcHRzID0gdGhpcy5fbWV0YU9wdHM7XG4gIH1cblxuICB2YXIgdjtcbiAgdHJ5IHsgdiA9IGNvbXBpbGVTY2hlbWEuY2FsbCh0aGlzLCBzY2hlbWFPYmouc2NoZW1hLCByb290LCBzY2hlbWFPYmoubG9jYWxSZWZzKTsgfVxuICBjYXRjaChlKSB7XG4gICAgZGVsZXRlIHNjaGVtYU9iai52YWxpZGF0ZTtcbiAgICB0aHJvdyBlO1xuICB9XG4gIGZpbmFsbHkge1xuICAgIHNjaGVtYU9iai5jb21waWxpbmcgPSBmYWxzZTtcbiAgICBpZiAoc2NoZW1hT2JqLm1ldGEpIHRoaXMuX29wdHMgPSBjdXJyZW50T3B0cztcbiAgfVxuXG4gIHNjaGVtYU9iai52YWxpZGF0ZSA9IHY7XG4gIHNjaGVtYU9iai5yZWZzID0gdi5yZWZzO1xuICBzY2hlbWFPYmoucmVmVmFsID0gdi5yZWZWYWw7XG4gIHNjaGVtYU9iai5yb290ID0gdi5yb290O1xuICByZXR1cm4gdjtcblxuXG4gIC8qIEB0aGlzICAgeyp9IC0gY3VzdG9tIGNvbnRleHQsIHNlZSBwYXNzQ29udGV4dCBvcHRpb24gKi9cbiAgZnVuY3Rpb24gY2FsbFZhbGlkYXRlKCkge1xuICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICB2YXIgX3ZhbGlkYXRlID0gc2NoZW1hT2JqLnZhbGlkYXRlO1xuICAgIHZhciByZXN1bHQgPSBfdmFsaWRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBjYWxsVmFsaWRhdGUuZXJyb3JzID0gX3ZhbGlkYXRlLmVycm9ycztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cblxuZnVuY3Rpb24gY2hvb3NlR2V0SWQob3B0cykge1xuICBzd2l0Y2ggKG9wdHMuc2NoZW1hSWQpIHtcbiAgICBjYXNlICdhdXRvJzogcmV0dXJuIF9nZXQkSWRPcklkO1xuICAgIGNhc2UgJ2lkJzogcmV0dXJuIF9nZXRJZDtcbiAgICBkZWZhdWx0OiByZXR1cm4gX2dldCRJZDtcbiAgfVxufVxuXG4vKiBAdGhpcyAgIEFqdiAqL1xuZnVuY3Rpb24gX2dldElkKHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLiRpZCkgdGhpcy5sb2dnZXIud2Fybignc2NoZW1hICRpZCBpZ25vcmVkJywgc2NoZW1hLiRpZCk7XG4gIHJldHVybiBzY2hlbWEuaWQ7XG59XG5cbi8qIEB0aGlzICAgQWp2ICovXG5mdW5jdGlvbiBfZ2V0JElkKHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLmlkKSB0aGlzLmxvZ2dlci53YXJuKCdzY2hlbWEgaWQgaWdub3JlZCcsIHNjaGVtYS5pZCk7XG4gIHJldHVybiBzY2hlbWEuJGlkO1xufVxuXG5cbmZ1bmN0aW9uIF9nZXQkSWRPcklkKHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLiRpZCAmJiBzY2hlbWEuaWQgJiYgc2NoZW1hLiRpZCAhPSBzY2hlbWEuaWQpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdzY2hlbWEgJGlkIGlzIGRpZmZlcmVudCBmcm9tIGlkJyk7XG4gIHJldHVybiBzY2hlbWEuJGlkIHx8IHNjaGVtYS5pZDtcbn1cblxuXG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgZXJyb3IgbWVzc2FnZSBvYmplY3RzIHRvIHN0cmluZ1xuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge0FycmF5PE9iamVjdD59IGVycm9ycyBvcHRpb25hbCBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycywgaWYgbm90IHBhc3NlZCBlcnJvcnMgZnJvbSB0aGUgaW5zdGFuY2UgYXJlIHVzZWQuXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgb3B0aW9uYWwgb3B0aW9ucyB3aXRoIHByb3BlcnRpZXMgYHNlcGFyYXRvcmAgYW5kIGBkYXRhVmFyYC5cbiAqIEByZXR1cm4ge1N0cmluZ30gaHVtYW4gcmVhZGFibGUgc3RyaW5nIHdpdGggYWxsIGVycm9ycyBkZXNjcmlwdGlvbnNcbiAqL1xuZnVuY3Rpb24gZXJyb3JzVGV4dChlcnJvcnMsIG9wdGlvbnMpIHtcbiAgZXJyb3JzID0gZXJyb3JzIHx8IHRoaXMuZXJyb3JzO1xuICBpZiAoIWVycm9ycykgcmV0dXJuICdObyBlcnJvcnMnO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHNlcGFyYXRvciA9IG9wdGlvbnMuc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCAnIDogb3B0aW9ucy5zZXBhcmF0b3I7XG4gIHZhciBkYXRhVmFyID0gb3B0aW9ucy5kYXRhVmFyID09PSB1bmRlZmluZWQgPyAnZGF0YScgOiBvcHRpb25zLmRhdGFWYXI7XG5cbiAgdmFyIHRleHQgPSAnJztcbiAgZm9yICh2YXIgaT0wOyBpPGVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlID0gZXJyb3JzW2ldO1xuICAgIGlmIChlKSB0ZXh0ICs9IGRhdGFWYXIgKyBlLmRhdGFQYXRoICsgJyAnICsgZS5tZXNzYWdlICsgc2VwYXJhdG9yO1xuICB9XG4gIHJldHVybiB0ZXh0LnNsaWNlKDAsIC1zZXBhcmF0b3IubGVuZ3RoKTtcbn1cblxuXG4vKipcbiAqIEFkZCBjdXN0b20gZm9ybWF0XG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgZm9ybWF0IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfFJlZ0V4cHxGdW5jdGlvbn0gZm9ybWF0IHN0cmluZyBpcyBjb252ZXJ0ZWQgdG8gUmVnRXhwOyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGJvb2xlYW4gKHRydWUgd2hlbiB2YWxpZClcbiAqIEByZXR1cm4ge0Fqdn0gdGhpcyBmb3IgbWV0aG9kIGNoYWluaW5nXG4gKi9cbmZ1bmN0aW9uIGFkZEZvcm1hdChuYW1lLCBmb3JtYXQpIHtcbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT0gJ3N0cmluZycpIGZvcm1hdCA9IG5ldyBSZWdFeHAoZm9ybWF0KTtcbiAgdGhpcy5fZm9ybWF0c1tuYW1lXSA9IGZvcm1hdDtcbiAgcmV0dXJuIHRoaXM7XG59XG5cblxuZnVuY3Rpb24gYWRkRHJhZnQ2TWV0YVNjaGVtYShzZWxmKSB7XG4gIHZhciAkZGF0YVNjaGVtYTtcbiAgaWYgKHNlbGYuX29wdHMuJGRhdGEpIHtcbiAgICAkZGF0YVNjaGVtYSA9IHJlcXVpcmUoJy4vcmVmcy9kYXRhLmpzb24nKTtcbiAgICBzZWxmLmFkZE1ldGFTY2hlbWEoJGRhdGFTY2hlbWEsICRkYXRhU2NoZW1hLiRpZCwgdHJ1ZSk7XG4gIH1cbiAgaWYgKHNlbGYuX29wdHMubWV0YSA9PT0gZmFsc2UpIHJldHVybjtcbiAgdmFyIG1ldGFTY2hlbWEgPSByZXF1aXJlKCcuL3JlZnMvanNvbi1zY2hlbWEtZHJhZnQtMDcuanNvbicpO1xuICBpZiAoc2VsZi5fb3B0cy4kZGF0YSkgbWV0YVNjaGVtYSA9ICRkYXRhTWV0YVNjaGVtYShtZXRhU2NoZW1hLCBNRVRBX1NVUFBPUlRfREFUQSk7XG4gIHNlbGYuYWRkTWV0YVNjaGVtYShtZXRhU2NoZW1hLCBNRVRBX1NDSEVNQV9JRCwgdHJ1ZSk7XG4gIHNlbGYuX3JlZnNbJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvc2NoZW1hJ10gPSBNRVRBX1NDSEVNQV9JRDtcbn1cblxuXG5mdW5jdGlvbiBhZGRJbml0aWFsU2NoZW1hcyhzZWxmKSB7XG4gIHZhciBvcHRzU2NoZW1hcyA9IHNlbGYuX29wdHMuc2NoZW1hcztcbiAgaWYgKCFvcHRzU2NoZW1hcykgcmV0dXJuO1xuICBpZiAoQXJyYXkuaXNBcnJheShvcHRzU2NoZW1hcykpIHNlbGYuYWRkU2NoZW1hKG9wdHNTY2hlbWFzKTtcbiAgZWxzZSBmb3IgKHZhciBrZXkgaW4gb3B0c1NjaGVtYXMpIHNlbGYuYWRkU2NoZW1hKG9wdHNTY2hlbWFzW2tleV0sIGtleSk7XG59XG5cblxuZnVuY3Rpb24gYWRkSW5pdGlhbEZvcm1hdHMoc2VsZikge1xuICBmb3IgKHZhciBuYW1lIGluIHNlbGYuX29wdHMuZm9ybWF0cykge1xuICAgIHZhciBmb3JtYXQgPSBzZWxmLl9vcHRzLmZvcm1hdHNbbmFtZV07XG4gICAgc2VsZi5hZGRGb3JtYXQobmFtZSwgZm9ybWF0KTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGNoZWNrVW5pcXVlKHNlbGYsIGlkKSB7XG4gIGlmIChzZWxmLl9zY2hlbWFzW2lkXSB8fCBzZWxmLl9yZWZzW2lkXSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NjaGVtYSB3aXRoIGtleSBvciBpZCBcIicgKyBpZCArICdcIiBhbHJlYWR5IGV4aXN0cycpO1xufVxuXG5cbmZ1bmN0aW9uIGdldE1ldGFTY2hlbWFPcHRpb25zKHNlbGYpIHtcbiAgdmFyIG1ldGFPcHRzID0gdXRpbC5jb3B5KHNlbGYuX29wdHMpO1xuICBmb3IgKHZhciBpPTA7IGk8TUVUQV9JR05PUkVfT1BUSU9OUy5sZW5ndGg7IGkrKylcbiAgICBkZWxldGUgbWV0YU9wdHNbTUVUQV9JR05PUkVfT1BUSU9OU1tpXV07XG4gIHJldHVybiBtZXRhT3B0cztcbn1cblxuXG5mdW5jdGlvbiBzZXRMb2dnZXIoc2VsZikge1xuICB2YXIgbG9nZ2VyID0gc2VsZi5fb3B0cy5sb2dnZXI7XG4gIGlmIChsb2dnZXIgPT09IGZhbHNlKSB7XG4gICAgc2VsZi5sb2dnZXIgPSB7bG9nOiBub29wLCB3YXJuOiBub29wLCBlcnJvcjogbm9vcH07XG4gIH0gZWxzZSB7XG4gICAgaWYgKGxvZ2dlciA9PT0gdW5kZWZpbmVkKSBsb2dnZXIgPSBjb25zb2xlO1xuICAgIGlmICghKHR5cGVvZiBsb2dnZXIgPT0gJ29iamVjdCcgJiYgbG9nZ2VyLmxvZyAmJiBsb2dnZXIud2FybiAmJiBsb2dnZXIuZXJyb3IpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdsb2dnZXIgbXVzdCBpbXBsZW1lbnQgbG9nLCB3YXJuIGFuZCBlcnJvciBtZXRob2RzJyk7XG4gICAgc2VsZi5sb2dnZXIgPSBsb2dnZXI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBub29wKCkge31cbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgQ2FjaGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENhY2hlKCkge1xuICB0aGlzLl9jYWNoZSA9IHt9O1xufTtcblxuXG5DYWNoZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gQ2FjaGVfcHV0KGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fY2FjaGVba2V5XSA9IHZhbHVlO1xufTtcblxuXG5DYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gQ2FjaGVfZ2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fY2FjaGVba2V5XTtcbn07XG5cblxuQ2FjaGUucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIENhY2hlX2RlbChrZXkpIHtcbiAgZGVsZXRlIHRoaXMuX2NhY2hlW2tleV07XG59O1xuXG5cbkNhY2hlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIENhY2hlX2NsZWFyKCkge1xuICB0aGlzLl9jYWNoZSA9IHt9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIE1pc3NpbmdSZWZFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JfY2xhc3NlcycpLk1pc3NpbmdSZWY7XG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGlsZUFzeW5jO1xuXG5cbi8qKlxuICogQ3JlYXRlcyB2YWxpZGF0aW5nIGZ1bmN0aW9uIGZvciBwYXNzZWQgc2NoZW1hIHdpdGggYXN5bmNocm9ub3VzIGxvYWRpbmcgb2YgbWlzc2luZyBzY2hlbWFzLlxuICogYGxvYWRTY2hlbWFgIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgc2NoZW1hIHVyaSBhbmQgcmV0dXJucyBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2NoZW1hLlxuICogQHRoaXMgIEFqdlxuICogQHBhcmFtIHtPYmplY3R9ICAgc2NoZW1hIHNjaGVtYSBvYmplY3RcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gIG1ldGEgb3B0aW9uYWwgdHJ1ZSB0byBjb21waWxlIG1ldGEtc2NoZW1hOyB0aGlzIHBhcmFtZXRlciBjYW4gYmUgc2tpcHBlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFjaywgaXQgaXMgY2FsbGVkIHdpdGggMiBwYXJhbWV0ZXJzOiBlcnJvciAob3IgbnVsbCkgYW5kIHZhbGlkYXRpbmcgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIHZhbGlkYXRpbmcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVBc3luYyhzY2hlbWEsIG1ldGEsIGNhbGxiYWNrKSB7XG4gIC8qIGVzbGludCBuby1zaGFkb3c6IDAgKi9cbiAgLyogZ2xvYmFsIFByb21pc2UgKi9cbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdGhpcy5fb3B0cy5sb2FkU2NoZW1hICE9ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLmxvYWRTY2hlbWEgc2hvdWxkIGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAodHlwZW9mIG1ldGEgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gbWV0YTtcbiAgICBtZXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHAgPSBsb2FkTWV0YVNjaGVtYU9mKHNjaGVtYSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjaGVtYU9iaiA9IHNlbGYuX2FkZFNjaGVtYShzY2hlbWEsIHVuZGVmaW5lZCwgbWV0YSk7XG4gICAgcmV0dXJuIHNjaGVtYU9iai52YWxpZGF0ZSB8fCBfY29tcGlsZUFzeW5jKHNjaGVtYU9iaik7XG4gIH0pO1xuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIHAudGhlbihcbiAgICAgIGZ1bmN0aW9uKHYpIHsgY2FsbGJhY2sobnVsbCwgdik7IH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gcDtcblxuXG4gIGZ1bmN0aW9uIGxvYWRNZXRhU2NoZW1hT2Yoc2NoKSB7XG4gICAgdmFyICRzY2hlbWEgPSBzY2guJHNjaGVtYTtcbiAgICByZXR1cm4gJHNjaGVtYSAmJiAhc2VsZi5nZXRTY2hlbWEoJHNjaGVtYSlcbiAgICAgICAgICAgID8gY29tcGlsZUFzeW5jLmNhbGwoc2VsZiwgeyAkcmVmOiAkc2NoZW1hIH0sIHRydWUpXG4gICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cblxuICBmdW5jdGlvbiBfY29tcGlsZUFzeW5jKHNjaGVtYU9iaikge1xuICAgIHRyeSB7IHJldHVybiBzZWxmLl9jb21waWxlKHNjaGVtYU9iaik7IH1cbiAgICBjYXRjaChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIE1pc3NpbmdSZWZFcnJvcikgcmV0dXJuIGxvYWRNaXNzaW5nU2NoZW1hKGUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGxvYWRNaXNzaW5nU2NoZW1hKGUpIHtcbiAgICAgIHZhciByZWYgPSBlLm1pc3NpbmdTY2hlbWE7XG4gICAgICBpZiAoYWRkZWQocmVmKSkgdGhyb3cgbmV3IEVycm9yKCdTY2hlbWEgJyArIHJlZiArICcgaXMgbG9hZGVkIGJ1dCAnICsgZS5taXNzaW5nUmVmICsgJyBjYW5ub3QgYmUgcmVzb2x2ZWQnKTtcblxuICAgICAgdmFyIHNjaGVtYVByb21pc2UgPSBzZWxmLl9sb2FkaW5nU2NoZW1hc1tyZWZdO1xuICAgICAgaWYgKCFzY2hlbWFQcm9taXNlKSB7XG4gICAgICAgIHNjaGVtYVByb21pc2UgPSBzZWxmLl9sb2FkaW5nU2NoZW1hc1tyZWZdID0gc2VsZi5fb3B0cy5sb2FkU2NoZW1hKHJlZik7XG4gICAgICAgIHNjaGVtYVByb21pc2UudGhlbihyZW1vdmVQcm9taXNlLCByZW1vdmVQcm9taXNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjaGVtYVByb21pc2UudGhlbihmdW5jdGlvbiAoc2NoKSB7XG4gICAgICAgIGlmICghYWRkZWQocmVmKSkge1xuICAgICAgICAgIHJldHVybiBsb2FkTWV0YVNjaGVtYU9mKHNjaCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWFkZGVkKHJlZikpIHNlbGYuYWRkU2NoZW1hKHNjaCwgcmVmLCB1bmRlZmluZWQsIG1ldGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2NvbXBpbGVBc3luYyhzY2hlbWFPYmopO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVByb21pc2UoKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmLl9sb2FkaW5nU2NoZW1hc1tyZWZdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZGRlZChyZWYpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuX3JlZnNbcmVmXSB8fCBzZWxmLl9zY2hlbWFzW3JlZl07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXNvbHZlID0gcmVxdWlyZSgnLi9yZXNvbHZlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBWYWxpZGF0aW9uOiBlcnJvclN1YmNsYXNzKFZhbGlkYXRpb25FcnJvciksXG4gIE1pc3NpbmdSZWY6IGVycm9yU3ViY2xhc3MoTWlzc2luZ1JlZkVycm9yKVxufTtcblxuXG5mdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoZXJyb3JzKSB7XG4gIHRoaXMubWVzc2FnZSA9ICd2YWxpZGF0aW9uIGZhaWxlZCc7XG4gIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICB0aGlzLmFqdiA9IHRoaXMudmFsaWRhdGlvbiA9IHRydWU7XG59XG5cblxuTWlzc2luZ1JlZkVycm9yLm1lc3NhZ2UgPSBmdW5jdGlvbiAoYmFzZUlkLCByZWYpIHtcbiAgcmV0dXJuICdjYW5cXCd0IHJlc29sdmUgcmVmZXJlbmNlICcgKyByZWYgKyAnIGZyb20gaWQgJyArIGJhc2VJZDtcbn07XG5cblxuZnVuY3Rpb24gTWlzc2luZ1JlZkVycm9yKGJhc2VJZCwgcmVmLCBtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UgfHwgTWlzc2luZ1JlZkVycm9yLm1lc3NhZ2UoYmFzZUlkLCByZWYpO1xuICB0aGlzLm1pc3NpbmdSZWYgPSByZXNvbHZlLnVybChiYXNlSWQsIHJlZik7XG4gIHRoaXMubWlzc2luZ1NjaGVtYSA9IHJlc29sdmUubm9ybWFsaXplSWQocmVzb2x2ZS5mdWxsUGF0aCh0aGlzLm1pc3NpbmdSZWYpKTtcbn1cblxuXG5mdW5jdGlvbiBlcnJvclN1YmNsYXNzKFN1YmNsYXNzKSB7XG4gIFN1YmNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgU3ViY2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViY2xhc3M7XG4gIHJldHVybiBTdWJjbGFzcztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxudmFyIERBVEUgPSAvXihcXGRcXGRcXGRcXGQpLShcXGRcXGQpLShcXGRcXGQpJC87XG52YXIgREFZUyA9IFswLDMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtcbnZhciBUSU1FID0gL14oXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKShcXC5cXGQrKT8oenxbKy1dXFxkXFxkOlxcZFxcZCk/JC9pO1xudmFyIEhPU1ROQU1FID0gL15bYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8oPzpcXC5bYS16MC05XSg/OlstMC05YS16XXswLDYxfVswLTlhLXpdKT8pKiQvaTtcbnZhciBVUkkgPSAvXig/OlthLXpdW2EtejAtOStcXC0uXSo6KSg/OlxcLz9cXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06XXwlWzAtOWEtZl17Mn0pKkApPyg/OlxcWyg/Oig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs2fXw6Oig/OlswLTlhLWZdezEsNH06KXs1fXwoPzpbMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXs0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwxfVswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezN9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDJ9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7Mn18KD86KD86WzAtOWEtZl17MSw0fTopezAsM31bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH06fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDR9WzAtOWEtZl17MSw0fSk/OjopKD86WzAtOWEtZl17MSw0fTpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KSl8KD86KD86WzAtOWEtZl17MSw0fTopezAsNX1bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH18KD86KD86WzAtOWEtZl17MSw0fTopezAsNn1bMC05YS1mXXsxLDR9KT86Oil8W1Z2XVswLTlhLWZdK1xcLlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdKylcXF18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pfCg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PV18JVswLTlhLWZdezJ9KSopKD86OlxcZCopPyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqfFxcLyg/Oig/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKikqKT98KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkrKD86XFwvKD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopKD86XFw/KD86W2EtejAtOVxcLS5ffiEkJicoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyg/OiMoPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06QC8/XXwlWzAtOWEtZl17Mn0pKik/JC9pO1xudmFyIFVSSVJFRiA9IC9eKD86W2Etel1bYS16MC05K1xcLS5dKjopPyg/OlxcLz9cXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJygpKissOz06XXwlWzAtOWEtZl17Mn0pKkApPyg/OlxcWyg/Oig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs2fXw6Oig/OlswLTlhLWZdezEsNH06KXs1fXwoPzpbMC05YS1mXXsxLDR9KT86Oig/OlswLTlhLWZdezEsNH06KXs0fXwoPzooPzpbMC05YS1mXXsxLDR9Oil7MCwxfVswLTlhLWZdezEsNH0pPzo6KD86WzAtOWEtZl17MSw0fTopezN9fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDJ9WzAtOWEtZl17MSw0fSk/OjooPzpbMC05YS1mXXsxLDR9Oil7Mn18KD86KD86WzAtOWEtZl17MSw0fTopezAsM31bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH06fCg/Oig/OlswLTlhLWZdezEsNH06KXswLDR9WzAtOWEtZl17MSw0fSk/OjopKD86WzAtOWEtZl17MSw0fTpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KSl8KD86KD86WzAtOWEtZl17MSw0fTopezAsNX1bMC05YS1mXXsxLDR9KT86OlswLTlhLWZdezEsNH18KD86KD86WzAtOWEtZl17MSw0fTopezAsNn1bMC05YS1mXXsxLDR9KT86Oil8W1Z2XVswLTlhLWZdK1xcLlthLXowLTlcXC0uX34hJCYnKCkqKyw7PTpdKylcXF18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pfCg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9XXwlWzAtOWEtZl17Mn0pKikoPzo6XFxkKik/KD86XFwvKD86W2EtejAtOVxcLS5ffiEkJidcIigpKissOz06QF18JVswLTlhLWZdezJ9KSopKnxcXC8oPzooPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopP3woPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpAXXwlWzAtOWEtZl17Mn0pKyg/OlxcLyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkBdfCVbMC05YS1mXXsyfSkqKSopPyg/OlxcPyg/OlthLXowLTlcXC0uX34hJCYnXCIoKSorLDs9OkAvP118JVswLTlhLWZdezJ9KSopPyg/OiMoPzpbYS16MC05XFwtLl9+ISQmJ1wiKCkqKyw7PTpALz9dfCVbMC05YS1mXXsyfSkqKT8kL2k7XG4vLyB1cmktdGVtcGxhdGU6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NTcwXG52YXIgVVJJVEVNUExBVEUgPSAvXig/Oig/OlteXFx4MDAtXFx4MjBcIic8PiVcXFxcXmB7fH1dfCVbMC05YS1mXXsyfSl8XFx7WysjLi87PyY9LCFAfF0/KD86W2EtejAtOV9dfCVbMC05YS1mXXsyfSkrKD86OlsxLTldWzAtOV17MCwzfXxcXCopPyg/OiwoPzpbYS16MC05X118JVswLTlhLWZdezJ9KSsoPzo6WzEtOV1bMC05XXswLDN9fFxcKik/KSpcXH0pKiQvaTtcbi8vIEZvciB0aGUgc291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kcGVyaW5pLzcyOTI5NFxuLy8gRm9yIHRlc3QgY2FzZXM6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleFxuLy8gQHRvZG8gRGVsZXRlIGN1cnJlbnQgVVJMIGluIGZhdm91ciBvZiB0aGUgY29tbWVudGVkIG91dCBVUkwgcnVsZSB3aGVuIHRoaXMgaXNzdWUgaXMgZml4ZWQgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzc5ODMuXG4vLyB2YXIgVVJMID0gL14oPzooPzpodHRwcz98ZnRwKTpcXC9cXC8pKD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPyExMCg/OlxcLlxcZHsxLDN9KXszfSkoPyExMjcoPzpcXC5cXGR7MSwzfSl7M30pKD8hMTY5XFwuMjU0KD86XFwuXFxkezEsM30pezJ9KSg/ITE5MlxcLjE2OCg/OlxcLlxcZHsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlxcZHwzWzAtMV0pKD86XFwuXFxkezEsM30pezJ9KSg/OlsxLTldXFxkP3wxXFxkXFxkfDJbMDFdXFxkfDIyWzAtM10pKD86XFwuKD86MT9cXGR7MSwyfXwyWzAtNF1cXGR8MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1cXGQ/fDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfTAtOV0rLT8pKlthLXpcXHV7MDBhMX0tXFx1e2ZmZmZ9MC05XSspKD86XFwuKD86W2EtelxcdXswMGExfS1cXHV7ZmZmZn0wLTldKy0/KSpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfTAtOV0rKSooPzpcXC4oPzpbYS16XFx1ezAwYTF9LVxcdXtmZmZmfV17Mix9KSkpKD86OlxcZHsyLDV9KT8oPzpcXC9bXlxcc10qKT8kL2l1O1xudmFyIFVSTCA9IC9eKD86KD86aHR0cFtzXFx1MDE3Rl0/fGZ0cCk6XFwvXFwvKSg/Oig/OltcXDAtXFx4MDhcXHgwRS1cXHgxRiEtXFx4OUZcXHhBMS1cXHUxNjdGXFx1MTY4MS1cXHUxRkZGXFx1MjAwQi1cXHUyMDI3XFx1MjAyQS1cXHUyMDJFXFx1MjAzMC1cXHUyMDVFXFx1MjA2MC1cXHUyRkZGXFx1MzAwMS1cXHVEN0ZGXFx1RTAwMC1cXHVGRUZFXFx1RkYwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSsoPzo6KD86W1xcMC1cXHgwOFxceDBFLVxceDFGIS1cXHg5RlxceEExLVxcdTE2N0ZcXHUxNjgxLVxcdTFGRkZcXHUyMDBCLVxcdTIwMjdcXHUyMDJBLVxcdTIwMkVcXHUyMDMwLVxcdTIwNUVcXHUyMDYwLVxcdTJGRkZcXHUzMDAxLVxcdUQ3RkZcXHVFMDAwLVxcdUZFRkVcXHVGRjAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKik/QCk/KD86KD8hMTAoPzpcXC5bMC05XXsxLDN9KXszfSkoPyExMjcoPzpcXC5bMC05XXsxLDN9KXszfSkoPyExNjlcXC4yNTQoPzpcXC5bMC05XXsxLDN9KXsyfSkoPyExOTJcXC4xNjgoPzpcXC5bMC05XXsxLDN9KXsyfSkoPyExNzJcXC4oPzoxWzYtOV18MlswLTldfDNbMDFdKSg/OlxcLlswLTldezEsM30pezJ9KSg/OlsxLTldWzAtOV0/fDFbMC05XVswLTldfDJbMDFdWzAtOV18MjJbMC0zXSkoPzpcXC4oPzoxP1swLTldezEsMn18MlswLTRdWzAtOV18MjVbMC01XSkpezJ9KD86XFwuKD86WzEtOV1bMC05XT98MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC00XSkpfCg/Oig/Oig/OlswLTlLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSstPykqKD86WzAtOUtTYS16XFx4QTEtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKykoPzpcXC4oPzooPzpbMC05S1NhLXpcXHhBMS1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXSkrLT8pKig/OlswLTlLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKSspKig/OlxcLig/Oig/OltLU2EtelxceEExLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKXsyLH0pKSkoPzo6WzAtOV17Miw1fSk/KD86XFwvKD86W1xcMC1cXHgwOFxceDBFLVxceDFGIS1cXHg5RlxceEExLVxcdTE2N0ZcXHUxNjgxLVxcdTFGRkZcXHUyMDBCLVxcdTIwMjdcXHUyMDJBLVxcdTIwMkVcXHUyMDMwLVxcdTIwNUVcXHUyMDYwLVxcdTJGRkZcXHUzMDAxLVxcdUQ3RkZcXHVFMDAwLVxcdUZFRkVcXHVGRjAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pKik/JC9pO1xudmFyIFVVSUQgPSAvXig/OnVybjp1dWlkOik/WzAtOWEtZl17OH0tKD86WzAtOWEtZl17NH0tKXszfVswLTlhLWZdezEyfSQvaTtcbnZhciBKU09OX1BPSU5URVIgPSAvXig/OlxcLyg/Oltefi9dfH4wfH4xKSopKiQvO1xudmFyIEpTT05fUE9JTlRFUl9VUklfRlJBR01FTlQgPSAvXiMoPzpcXC8oPzpbYS16MC05X1xcLS4hJCYnKCkqKyw7Oj1AXXwlWzAtOWEtZl17Mn18fjB8fjEpKikqJC9pO1xudmFyIFJFTEFUSVZFX0pTT05fUE9JTlRFUiA9IC9eKD86MHxbMS05XVswLTldKikoPzojfCg/OlxcLyg/Oltefi9dfH4wfH4xKSopKikkLztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdHM7XG5cbmZ1bmN0aW9uIGZvcm1hdHMobW9kZSkge1xuICBtb2RlID0gbW9kZSA9PSAnZnVsbCcgPyAnZnVsbCcgOiAnZmFzdCc7XG4gIHJldHVybiB1dGlsLmNvcHkoZm9ybWF0c1ttb2RlXSk7XG59XG5cblxuZm9ybWF0cy5mYXN0ID0ge1xuICAvLyBkYXRlOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42XG4gIGRhdGU6IC9eXFxkXFxkXFxkXFxkLVswLTFdXFxkLVswLTNdXFxkJC8sXG4gIC8vIGRhdGUtdGltZTogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNlxuICB0aW1lOiAvXig/OlswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkfDIzOjU5OjYwKSg/OlxcLlxcZCspPyg/Onp8WystXVxcZFxcZDpcXGRcXGQpPyQvaSxcbiAgJ2RhdGUtdGltZSc6IC9eXFxkXFxkXFxkXFxkLVswLTFdXFxkLVswLTNdXFxkW3RcXHNdKD86WzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGR8MjM6NTk6NjApKD86XFwuXFxkKyk/KD86enxbKy1dXFxkXFxkOlxcZFxcZCkkL2ksXG4gIC8vIHVyaTogaHR0cHM6Ly9naXRodWIuY29tL21hZmludG9zaC9pcy1teS1qc29uLXZhbGlkL2Jsb2IvbWFzdGVyL2Zvcm1hdHMuanNcbiAgdXJpOiAvXig/OlthLXpdW2EtejAtOSstLl0qOikoPzpcXC8/XFwvKT9bXlxcc10qJC9pLFxuICAndXJpLXJlZmVyZW5jZSc6IC9eKD86KD86W2Etel1bYS16MC05Ky0uXSo6KT9cXC8/XFwvKT8oPzpbXlxcXFxcXHMjXVteXFxzI10qKT8oPzojW15cXFxcXFxzXSopPyQvaSxcbiAgJ3VyaS10ZW1wbGF0ZSc6IFVSSVRFTVBMQVRFLFxuICB1cmw6IFVSTCxcbiAgLy8gZW1haWwgKHNvdXJjZXMgZnJvbSBqc2VuIHZhbGlkYXRvcik6XG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjAxMzIzL3VzaW5nLWEtcmVndWxhci1leHByZXNzaW9uLXRvLXZhbGlkYXRlLWFuLWVtYWlsLWFkZHJlc3MjYW5zd2VyLTg4MjkzNjNcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzcyAoc2VhcmNoIGZvciAnd2lsbGZ1bCB2aW9sYXRpb24nKVxuICBlbWFpbDogL15bYS16MC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8oPzpcXC5bYS16MC05XSg/OlthLXowLTktXXswLDYxfVthLXowLTldKT8pKiQvaSxcbiAgaG9zdG5hbWU6IEhPU1ROQU1FLFxuICAvLyBvcHRpbWl6ZWQgaHR0cHM6Ly93d3cuc2FmYXJpYm9va3NvbmxpbmUuY29tL2xpYnJhcnkvdmlldy9yZWd1bGFyLWV4cHJlc3Npb25zLWNvb2tib29rLzk3ODA1OTY4MDI4MzcvY2gwN3MxNi5odG1sXG4gIGlwdjQ6IC9eKD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pJC8sXG4gIC8vIG9wdGltaXplZCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzUzNDk3L3JlZ3VsYXItZXhwcmVzc2lvbi10aGF0LW1hdGNoZXMtdmFsaWQtaXB2Ni1hZGRyZXNzZXNcbiAgaXB2NjogL15cXHMqKD86KD86KD86WzAtOWEtZl17MSw0fTopezd9KD86WzAtOWEtZl17MSw0fXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezZ9KD86OlswLTlhLWZdezEsNH18KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs1fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDJ9KXw6KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs0fSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDN9KXwoPzooPzo6WzAtOWEtZl17MSw0fSk/Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezN9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNH0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDJ9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezJ9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNX0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDN9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86KD86WzAtOWEtZl17MSw0fTopezF9KD86KD86KD86OlswLTlhLWZdezEsNH0pezEsNn0pfCg/Oig/OjpbMC05YS1mXXsxLDR9KXswLDR9Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KD86Oig/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDd9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCw1fTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpKSg/OiUuKyk/XFxzKiQvaSxcbiAgcmVnZXg6IHJlZ2V4LFxuICAvLyB1dWlkOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0MTIyXG4gIHV1aWQ6IFVVSUQsXG4gIC8vIEpTT04tcG9pbnRlcjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzY5MDFcbiAgLy8gdXJpIGZyYWdtZW50OiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1BXG4gICdqc29uLXBvaW50ZXInOiBKU09OX1BPSU5URVIsXG4gICdqc29uLXBvaW50ZXItdXJpLWZyYWdtZW50JzogSlNPTl9QT0lOVEVSX1VSSV9GUkFHTUVOVCxcbiAgLy8gcmVsYXRpdmUgSlNPTi1wb2ludGVyOiBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9kcmFmdC1sdWZmLXJlbGF0aXZlLWpzb24tcG9pbnRlci0wMFxuICAncmVsYXRpdmUtanNvbi1wb2ludGVyJzogUkVMQVRJVkVfSlNPTl9QT0lOVEVSXG59O1xuXG5cbmZvcm1hdHMuZnVsbCA9IHtcbiAgZGF0ZTogZGF0ZSxcbiAgdGltZTogdGltZSxcbiAgJ2RhdGUtdGltZSc6IGRhdGVfdGltZSxcbiAgdXJpOiB1cmksXG4gICd1cmktcmVmZXJlbmNlJzogVVJJUkVGLFxuICAndXJpLXRlbXBsYXRlJzogVVJJVEVNUExBVEUsXG4gIHVybDogVVJMLFxuICBlbWFpbDogL15bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJycqKy89P15fYHt8fX4tXSspKkAoPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/JC9pLFxuICBob3N0bmFtZTogaG9zdG5hbWUsXG4gIGlwdjQ6IC9eKD86KD86MjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pJC8sXG4gIGlwdjY6IC9eXFxzKig/Oig/Oig/OlswLTlhLWZdezEsNH06KXs3fSg/OlswLTlhLWZdezEsNH18OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXs2fSg/OjpbMC05YS1mXXsxLDR9fCg/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoPzooPzpbMC05YS1mXXsxLDR9Oil7NX0oPzooPzooPzo6WzAtOWEtZl17MSw0fSl7MSwyfSl8Oig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSg/OlxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoPzooPzpbMC05YS1mXXsxLDR9Oil7NH0oPzooPzooPzo6WzAtOWEtZl17MSw0fSl7MSwzfSl8KD86KD86OlswLTlhLWZdezEsNH0pPzooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXszfSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDR9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCwyfTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXsyfSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDV9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCwzfTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg/Oig/OlswLTlhLWZdezEsNH06KXsxfSg/Oig/Oig/OjpbMC05YS1mXXsxLDR9KXsxLDZ9KXwoPzooPzo6WzAtOWEtZl17MSw0fSl7MCw0fTooPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoPzpcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCg/OjooPzooPzooPzo6WzAtOWEtZl17MSw0fSl7MSw3fSl8KD86KD86OlswLTlhLWZdezEsNH0pezAsNX06KD86KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKD86XFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkoPzolLispP1xccyokL2ksXG4gIHJlZ2V4OiByZWdleCxcbiAgdXVpZDogVVVJRCxcbiAgJ2pzb24tcG9pbnRlcic6IEpTT05fUE9JTlRFUixcbiAgJ2pzb24tcG9pbnRlci11cmktZnJhZ21lbnQnOiBKU09OX1BPSU5URVJfVVJJX0ZSQUdNRU5ULFxuICAncmVsYXRpdmUtanNvbi1wb2ludGVyJzogUkVMQVRJVkVfSlNPTl9QT0lOVEVSXG59O1xuXG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNhcHBlbmRpeC1DXG4gIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiAoeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKTtcbn1cblxuXG5mdW5jdGlvbiBkYXRlKHN0cikge1xuICAvLyBmdWxsLWRhdGUgZnJvbSBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42XG4gIHZhciBtYXRjaGVzID0gc3RyLm1hdGNoKERBVEUpO1xuICBpZiAoIW1hdGNoZXMpIHJldHVybiBmYWxzZTtcblxuICB2YXIgeWVhciA9ICttYXRjaGVzWzFdO1xuICB2YXIgbW9udGggPSArbWF0Y2hlc1syXTtcbiAgdmFyIGRheSA9ICttYXRjaGVzWzNdO1xuXG4gIHJldHVybiBtb250aCA+PSAxICYmIG1vbnRoIDw9IDEyICYmIGRheSA+PSAxICYmXG4gICAgICAgICAgZGF5IDw9IChtb250aCA9PSAyICYmIGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IERBWVNbbW9udGhdKTtcbn1cblxuXG5mdW5jdGlvbiB0aW1lKHN0ciwgZnVsbCkge1xuICB2YXIgbWF0Y2hlcyA9IHN0ci5tYXRjaChUSU1FKTtcbiAgaWYgKCFtYXRjaGVzKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGhvdXIgPSBtYXRjaGVzWzFdO1xuICB2YXIgbWludXRlID0gbWF0Y2hlc1syXTtcbiAgdmFyIHNlY29uZCA9IG1hdGNoZXNbM107XG4gIHZhciB0aW1lWm9uZSA9IG1hdGNoZXNbNV07XG4gIHJldHVybiAoKGhvdXIgPD0gMjMgJiYgbWludXRlIDw9IDU5ICYmIHNlY29uZCA8PSA1OSkgfHxcbiAgICAgICAgICAoaG91ciA9PSAyMyAmJiBtaW51dGUgPT0gNTkgJiYgc2Vjb25kID09IDYwKSkgJiZcbiAgICAgICAgICghZnVsbCB8fCB0aW1lWm9uZSk7XG59XG5cblxudmFyIERBVEVfVElNRV9TRVBBUkFUT1IgPSAvdHxcXHMvaTtcbmZ1bmN0aW9uIGRhdGVfdGltZShzdHIpIHtcbiAgLy8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzMzOSNzZWN0aW9uLTUuNlxuICB2YXIgZGF0ZVRpbWUgPSBzdHIuc3BsaXQoREFURV9USU1FX1NFUEFSQVRPUik7XG4gIHJldHVybiBkYXRlVGltZS5sZW5ndGggPT0gMiAmJiBkYXRlKGRhdGVUaW1lWzBdKSAmJiB0aW1lKGRhdGVUaW1lWzFdLCB0cnVlKTtcbn1cblxuXG5mdW5jdGlvbiBob3N0bmFtZShzdHIpIHtcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzEwMzQjc2VjdGlvbi0zLjVcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzExMjMjc2VjdGlvbi0yXG4gIHJldHVybiBzdHIubGVuZ3RoIDw9IDI1NSAmJiBIT1NUTkFNRS50ZXN0KHN0cik7XG59XG5cblxudmFyIE5PVF9VUklfRlJBR01FTlQgPSAvXFwvfDovO1xuZnVuY3Rpb24gdXJpKHN0cikge1xuICAvLyBodHRwOi8vam1yd2FyZS5jb20vYXJ0aWNsZXMvMjAwOS91cmlfcmVnZXhwL1VSSV9yZWdleC5odG1sICsgb3B0aW9uYWwgcHJvdG9jb2wgKyByZXF1aXJlZCBcIi5cIlxuICByZXR1cm4gTk9UX1VSSV9GUkFHTUVOVC50ZXN0KHN0cikgJiYgVVJJLnRlc3Qoc3RyKTtcbn1cblxuXG52YXIgWl9BTkNIT1IgPSAvW15cXFxcXVxcXFxaLztcbmZ1bmN0aW9uIHJlZ2V4KHN0cikge1xuICBpZiAoWl9BTkNIT1IudGVzdChzdHIpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgbmV3IFJlZ0V4cChzdHIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlc29sdmUgPSByZXF1aXJlKCcuL3Jlc29sdmUnKVxuICAsIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKVxuICAsIGVycm9yQ2xhc3NlcyA9IHJlcXVpcmUoJy4vZXJyb3JfY2xhc3NlcycpXG4gICwgc3RhYmxlU3RyaW5naWZ5ID0gcmVxdWlyZSgnZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnknKTtcblxudmFyIHZhbGlkYXRlR2VuZXJhdG9yID0gcmVxdWlyZSgnLi4vZG90anMvdmFsaWRhdGUnKTtcblxuLyoqXG4gKiBGdW5jdGlvbnMgYmVsb3cgYXJlIHVzZWQgaW5zaWRlIGNvbXBpbGVkIHZhbGlkYXRpb25zIGZ1bmN0aW9uXG4gKi9cblxudmFyIHVjczJsZW5ndGggPSB1dGlsLnVjczJsZW5ndGg7XG52YXIgZXF1YWwgPSByZXF1aXJlKCdmYXN0LWRlZXAtZXF1YWwnKTtcblxuLy8gdGhpcyBlcnJvciBpcyB0aHJvd24gYnkgYXN5bmMgc2NoZW1hcyB0byByZXR1cm4gdmFsaWRhdGlvbiBlcnJvcnMgdmlhIGV4Y2VwdGlvblxudmFyIFZhbGlkYXRpb25FcnJvciA9IGVycm9yQ2xhc3Nlcy5WYWxpZGF0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBpbGU7XG5cblxuLyoqXG4gKiBDb21waWxlcyBzY2hlbWEgdG8gdmFsaWRhdGlvbiBmdW5jdGlvblxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge09iamVjdH0gc2NoZW1hIHNjaGVtYSBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gcm9vdCBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcm9vdCBzY2hlbWEgZm9yIHRoaXMgc2NoZW1hXG4gKiBAcGFyYW0gIHtPYmplY3R9IGxvY2FsUmVmcyB0aGUgaGFzaCBvZiBsb2NhbCByZWZlcmVuY2VzIGluc2lkZSB0aGUgc2NoZW1hIChjcmVhdGVkIGJ5IHJlc29sdmUuaWQpLCB1c2VkIGZvciBpbmxpbmUgcmVzb2x1dGlvblxuICogQHBhcmFtICB7U3RyaW5nfSBiYXNlSWQgYmFzZSBJRCBmb3IgSURzIGluIHRoZSBzY2hlbWFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUoc2NoZW1hLCByb290LCBsb2NhbFJlZnMsIGJhc2VJZCkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlLCBldmlsOiB0cnVlICovXG4gIC8qIGVzbGludCBuby1zaGFkb3c6IDAgKi9cbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCBvcHRzID0gdGhpcy5fb3B0c1xuICAgICwgcmVmVmFsID0gWyB1bmRlZmluZWQgXVxuICAgICwgcmVmcyA9IHt9XG4gICAgLCBwYXR0ZXJucyA9IFtdXG4gICAgLCBwYXR0ZXJuc0hhc2ggPSB7fVxuICAgICwgZGVmYXVsdHMgPSBbXVxuICAgICwgZGVmYXVsdHNIYXNoID0ge31cbiAgICAsIGN1c3RvbVJ1bGVzID0gW107XG5cbiAgcm9vdCA9IHJvb3QgfHwgeyBzY2hlbWE6IHNjaGVtYSwgcmVmVmFsOiByZWZWYWwsIHJlZnM6IHJlZnMgfTtcblxuICB2YXIgYyA9IGNoZWNrQ29tcGlsaW5nLmNhbGwodGhpcywgc2NoZW1hLCByb290LCBiYXNlSWQpO1xuICB2YXIgY29tcGlsYXRpb24gPSB0aGlzLl9jb21waWxhdGlvbnNbYy5pbmRleF07XG4gIGlmIChjLmNvbXBpbGluZykgcmV0dXJuIChjb21waWxhdGlvbi5jYWxsVmFsaWRhdGUgPSBjYWxsVmFsaWRhdGUpO1xuXG4gIHZhciBmb3JtYXRzID0gdGhpcy5fZm9ybWF0cztcbiAgdmFyIFJVTEVTID0gdGhpcy5SVUxFUztcblxuICB0cnkge1xuICAgIHZhciB2ID0gbG9jYWxDb21waWxlKHNjaGVtYSwgcm9vdCwgbG9jYWxSZWZzLCBiYXNlSWQpO1xuICAgIGNvbXBpbGF0aW9uLnZhbGlkYXRlID0gdjtcbiAgICB2YXIgY3YgPSBjb21waWxhdGlvbi5jYWxsVmFsaWRhdGU7XG4gICAgaWYgKGN2KSB7XG4gICAgICBjdi5zY2hlbWEgPSB2LnNjaGVtYTtcbiAgICAgIGN2LmVycm9ycyA9IG51bGw7XG4gICAgICBjdi5yZWZzID0gdi5yZWZzO1xuICAgICAgY3YucmVmVmFsID0gdi5yZWZWYWw7XG4gICAgICBjdi5yb290ID0gdi5yb290O1xuICAgICAgY3YuJGFzeW5jID0gdi4kYXN5bmM7XG4gICAgICBpZiAob3B0cy5zb3VyY2VDb2RlKSBjdi5zb3VyY2UgPSB2LnNvdXJjZTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH0gZmluYWxseSB7XG4gICAgZW5kQ29tcGlsaW5nLmNhbGwodGhpcywgc2NoZW1hLCByb290LCBiYXNlSWQpO1xuICB9XG5cbiAgLyogQHRoaXMgICB7Kn0gLSBjdXN0b20gY29udGV4dCwgc2VlIHBhc3NDb250ZXh0IG9wdGlvbiAqL1xuICBmdW5jdGlvbiBjYWxsVmFsaWRhdGUoKSB7XG4gICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgIHZhciB2YWxpZGF0ZSA9IGNvbXBpbGF0aW9uLnZhbGlkYXRlO1xuICAgIHZhciByZXN1bHQgPSB2YWxpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGNhbGxWYWxpZGF0ZS5lcnJvcnMgPSB2YWxpZGF0ZS5lcnJvcnM7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2FsQ29tcGlsZShfc2NoZW1hLCBfcm9vdCwgbG9jYWxSZWZzLCBiYXNlSWQpIHtcbiAgICB2YXIgaXNSb290ID0gIV9yb290IHx8IChfcm9vdCAmJiBfcm9vdC5zY2hlbWEgPT0gX3NjaGVtYSk7XG4gICAgaWYgKF9yb290LnNjaGVtYSAhPSByb290LnNjaGVtYSlcbiAgICAgIHJldHVybiBjb21waWxlLmNhbGwoc2VsZiwgX3NjaGVtYSwgX3Jvb3QsIGxvY2FsUmVmcywgYmFzZUlkKTtcblxuICAgIHZhciAkYXN5bmMgPSBfc2NoZW1hLiRhc3luYyA9PT0gdHJ1ZTtcblxuICAgIHZhciBzb3VyY2VDb2RlID0gdmFsaWRhdGVHZW5lcmF0b3Ioe1xuICAgICAgaXNUb3A6IHRydWUsXG4gICAgICBzY2hlbWE6IF9zY2hlbWEsXG4gICAgICBpc1Jvb3Q6IGlzUm9vdCxcbiAgICAgIGJhc2VJZDogYmFzZUlkLFxuICAgICAgcm9vdDogX3Jvb3QsXG4gICAgICBzY2hlbWFQYXRoOiAnJyxcbiAgICAgIGVyclNjaGVtYVBhdGg6ICcjJyxcbiAgICAgIGVycm9yUGF0aDogJ1wiXCInLFxuICAgICAgTWlzc2luZ1JlZkVycm9yOiBlcnJvckNsYXNzZXMuTWlzc2luZ1JlZixcbiAgICAgIFJVTEVTOiBSVUxFUyxcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZUdlbmVyYXRvcixcbiAgICAgIHV0aWw6IHV0aWwsXG4gICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgcmVzb2x2ZVJlZjogcmVzb2x2ZVJlZixcbiAgICAgIHVzZVBhdHRlcm46IHVzZVBhdHRlcm4sXG4gICAgICB1c2VEZWZhdWx0OiB1c2VEZWZhdWx0LFxuICAgICAgdXNlQ3VzdG9tUnVsZTogdXNlQ3VzdG9tUnVsZSxcbiAgICAgIG9wdHM6IG9wdHMsXG4gICAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgICAgbG9nZ2VyOiBzZWxmLmxvZ2dlcixcbiAgICAgIHNlbGY6IHNlbGZcbiAgICB9KTtcblxuICAgIHNvdXJjZUNvZGUgPSB2YXJzKHJlZlZhbCwgcmVmVmFsQ29kZSkgKyB2YXJzKHBhdHRlcm5zLCBwYXR0ZXJuQ29kZSlcbiAgICAgICAgICAgICAgICAgICArIHZhcnMoZGVmYXVsdHMsIGRlZmF1bHRDb2RlKSArIHZhcnMoY3VzdG9tUnVsZXMsIGN1c3RvbVJ1bGVDb2RlKVxuICAgICAgICAgICAgICAgICAgICsgc291cmNlQ29kZTtcblxuICAgIGlmIChvcHRzLnByb2Nlc3NDb2RlKSBzb3VyY2VDb2RlID0gb3B0cy5wcm9jZXNzQ29kZShzb3VyY2VDb2RlKTtcbiAgICAvLyBjb25zb2xlLmxvZygnXFxuXFxuXFxuICoqKiBcXG4nLCBKU09OLnN0cmluZ2lmeShzb3VyY2VDb2RlKSk7XG4gICAgdmFyIHZhbGlkYXRlO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbWFrZVZhbGlkYXRlID0gbmV3IEZ1bmN0aW9uKFxuICAgICAgICAnc2VsZicsXG4gICAgICAgICdSVUxFUycsXG4gICAgICAgICdmb3JtYXRzJyxcbiAgICAgICAgJ3Jvb3QnLFxuICAgICAgICAncmVmVmFsJyxcbiAgICAgICAgJ2RlZmF1bHRzJyxcbiAgICAgICAgJ2N1c3RvbVJ1bGVzJyxcbiAgICAgICAgJ2VxdWFsJyxcbiAgICAgICAgJ3VjczJsZW5ndGgnLFxuICAgICAgICAnVmFsaWRhdGlvbkVycm9yJyxcbiAgICAgICAgc291cmNlQ29kZVxuICAgICAgKTtcblxuICAgICAgdmFsaWRhdGUgPSBtYWtlVmFsaWRhdGUoXG4gICAgICAgIHNlbGYsXG4gICAgICAgIFJVTEVTLFxuICAgICAgICBmb3JtYXRzLFxuICAgICAgICByb290LFxuICAgICAgICByZWZWYWwsXG4gICAgICAgIGRlZmF1bHRzLFxuICAgICAgICBjdXN0b21SdWxlcyxcbiAgICAgICAgZXF1YWwsXG4gICAgICAgIHVjczJsZW5ndGgsXG4gICAgICAgIFZhbGlkYXRpb25FcnJvclxuICAgICAgKTtcblxuICAgICAgcmVmVmFsWzBdID0gdmFsaWRhdGU7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBzZWxmLmxvZ2dlci5lcnJvcignRXJyb3IgY29tcGlsaW5nIHNjaGVtYSwgZnVuY3Rpb24gY29kZTonLCBzb3VyY2VDb2RlKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFsaWRhdGUuc2NoZW1hID0gX3NjaGVtYTtcbiAgICB2YWxpZGF0ZS5lcnJvcnMgPSBudWxsO1xuICAgIHZhbGlkYXRlLnJlZnMgPSByZWZzO1xuICAgIHZhbGlkYXRlLnJlZlZhbCA9IHJlZlZhbDtcbiAgICB2YWxpZGF0ZS5yb290ID0gaXNSb290ID8gdmFsaWRhdGUgOiBfcm9vdDtcbiAgICBpZiAoJGFzeW5jKSB2YWxpZGF0ZS4kYXN5bmMgPSB0cnVlO1xuICAgIGlmIChvcHRzLnNvdXJjZUNvZGUgPT09IHRydWUpIHtcbiAgICAgIHZhbGlkYXRlLnNvdXJjZSA9IHtcbiAgICAgICAgY29kZTogc291cmNlQ29kZSxcbiAgICAgICAgcGF0dGVybnM6IHBhdHRlcm5zLFxuICAgICAgICBkZWZhdWx0czogZGVmYXVsdHNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVJlZihiYXNlSWQsIHJlZiwgaXNSb290KSB7XG4gICAgcmVmID0gcmVzb2x2ZS51cmwoYmFzZUlkLCByZWYpO1xuICAgIHZhciByZWZJbmRleCA9IHJlZnNbcmVmXTtcbiAgICB2YXIgX3JlZlZhbCwgcmVmQ29kZTtcbiAgICBpZiAocmVmSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgX3JlZlZhbCA9IHJlZlZhbFtyZWZJbmRleF07XG4gICAgICByZWZDb2RlID0gJ3JlZlZhbFsnICsgcmVmSW5kZXggKyAnXSc7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRSZWYoX3JlZlZhbCwgcmVmQ29kZSk7XG4gICAgfVxuICAgIGlmICghaXNSb290ICYmIHJvb3QucmVmcykge1xuICAgICAgdmFyIHJvb3RSZWZJZCA9IHJvb3QucmVmc1tyZWZdO1xuICAgICAgaWYgKHJvb3RSZWZJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIF9yZWZWYWwgPSByb290LnJlZlZhbFtyb290UmVmSWRdO1xuICAgICAgICByZWZDb2RlID0gYWRkTG9jYWxSZWYocmVmLCBfcmVmVmFsKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUmVmKF9yZWZWYWwsIHJlZkNvZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlZkNvZGUgPSBhZGRMb2NhbFJlZihyZWYpO1xuICAgIHZhciB2ID0gcmVzb2x2ZS5jYWxsKHNlbGYsIGxvY2FsQ29tcGlsZSwgcm9vdCwgcmVmKTtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbG9jYWxTY2hlbWEgPSBsb2NhbFJlZnMgJiYgbG9jYWxSZWZzW3JlZl07XG4gICAgICBpZiAobG9jYWxTY2hlbWEpIHtcbiAgICAgICAgdiA9IHJlc29sdmUuaW5saW5lUmVmKGxvY2FsU2NoZW1hLCBvcHRzLmlubGluZVJlZnMpXG4gICAgICAgICAgICA/IGxvY2FsU2NoZW1hXG4gICAgICAgICAgICA6IGNvbXBpbGUuY2FsbChzZWxmLCBsb2NhbFNjaGVtYSwgcm9vdCwgbG9jYWxSZWZzLCBiYXNlSWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlbW92ZUxvY2FsUmVmKHJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcGxhY2VMb2NhbFJlZihyZWYsIHYpO1xuICAgICAgcmV0dXJuIHJlc29sdmVkUmVmKHYsIHJlZkNvZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZExvY2FsUmVmKHJlZiwgdikge1xuICAgIHZhciByZWZJZCA9IHJlZlZhbC5sZW5ndGg7XG4gICAgcmVmVmFsW3JlZklkXSA9IHY7XG4gICAgcmVmc1tyZWZdID0gcmVmSWQ7XG4gICAgcmV0dXJuICdyZWZWYWwnICsgcmVmSWQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVMb2NhbFJlZihyZWYpIHtcbiAgICBkZWxldGUgcmVmc1tyZWZdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZUxvY2FsUmVmKHJlZiwgdikge1xuICAgIHZhciByZWZJZCA9IHJlZnNbcmVmXTtcbiAgICByZWZWYWxbcmVmSWRdID0gdjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVkUmVmKHJlZlZhbCwgY29kZSkge1xuICAgIHJldHVybiB0eXBlb2YgcmVmVmFsID09ICdvYmplY3QnIHx8IHR5cGVvZiByZWZWYWwgPT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IHsgY29kZTogY29kZSwgc2NoZW1hOiByZWZWYWwsIGlubGluZTogdHJ1ZSB9XG4gICAgICAgICAgICA6IHsgY29kZTogY29kZSwgJGFzeW5jOiByZWZWYWwgJiYgISFyZWZWYWwuJGFzeW5jIH07XG4gIH1cblxuICBmdW5jdGlvbiB1c2VQYXR0ZXJuKHJlZ2V4U3RyKSB7XG4gICAgdmFyIGluZGV4ID0gcGF0dGVybnNIYXNoW3JlZ2V4U3RyXTtcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5kZXggPSBwYXR0ZXJuc0hhc2hbcmVnZXhTdHJdID0gcGF0dGVybnMubGVuZ3RoO1xuICAgICAgcGF0dGVybnNbaW5kZXhdID0gcmVnZXhTdHI7XG4gICAgfVxuICAgIHJldHVybiAncGF0dGVybicgKyBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVzZURlZmF1bHQodmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiB1dGlsLnRvUXVvdGVkU3RyaW5nKHZhbHVlKTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICAgICAgdmFyIHZhbHVlU3RyID0gc3RhYmxlU3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgdmFyIGluZGV4ID0gZGVmYXVsdHNIYXNoW3ZhbHVlU3RyXTtcbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGRlZmF1bHRzSGFzaFt2YWx1ZVN0cl0gPSBkZWZhdWx0cy5sZW5ndGg7XG4gICAgICAgICAgZGVmYXVsdHNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdkZWZhdWx0JyArIGluZGV4O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVzZUN1c3RvbVJ1bGUocnVsZSwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0KSB7XG4gICAgdmFyIHZhbGlkYXRlU2NoZW1hID0gcnVsZS5kZWZpbml0aW9uLnZhbGlkYXRlU2NoZW1hO1xuICAgIGlmICh2YWxpZGF0ZVNjaGVtYSAmJiBzZWxmLl9vcHRzLnZhbGlkYXRlU2NoZW1hICE9PSBmYWxzZSkge1xuICAgICAgdmFyIHZhbGlkID0gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKTtcbiAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAna2V5d29yZCBzY2hlbWEgaXMgaW52YWxpZDogJyArIHNlbGYuZXJyb3JzVGV4dCh2YWxpZGF0ZVNjaGVtYS5lcnJvcnMpO1xuICAgICAgICBpZiAoc2VsZi5fb3B0cy52YWxpZGF0ZVNjaGVtYSA9PSAnbG9nJykgc2VsZi5sb2dnZXIuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb21waWxlID0gcnVsZS5kZWZpbml0aW9uLmNvbXBpbGVcbiAgICAgICwgaW5saW5lID0gcnVsZS5kZWZpbml0aW9uLmlubGluZVxuICAgICAgLCBtYWNybyA9IHJ1bGUuZGVmaW5pdGlvbi5tYWNybztcblxuICAgIHZhciB2YWxpZGF0ZTtcbiAgICBpZiAoY29tcGlsZSkge1xuICAgICAgdmFsaWRhdGUgPSBjb21waWxlLmNhbGwoc2VsZiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0KTtcbiAgICB9IGVsc2UgaWYgKG1hY3JvKSB7XG4gICAgICB2YWxpZGF0ZSA9IG1hY3JvLmNhbGwoc2VsZiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0KTtcbiAgICAgIGlmIChvcHRzLnZhbGlkYXRlU2NoZW1hICE9PSBmYWxzZSkgc2VsZi52YWxpZGF0ZVNjaGVtYSh2YWxpZGF0ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChpbmxpbmUpIHtcbiAgICAgIHZhbGlkYXRlID0gaW5saW5lLmNhbGwoc2VsZiwgaXQsIHJ1bGUua2V5d29yZCwgc2NoZW1hLCBwYXJlbnRTY2hlbWEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWxpZGF0ZSA9IHJ1bGUuZGVmaW5pdGlvbi52YWxpZGF0ZTtcbiAgICAgIGlmICghdmFsaWRhdGUpIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdGUgPT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3VzdG9tIGtleXdvcmQgXCInICsgcnVsZS5rZXl3b3JkICsgJ1wiZmFpbGVkIHRvIGNvbXBpbGUnKTtcblxuICAgIHZhciBpbmRleCA9IGN1c3RvbVJ1bGVzLmxlbmd0aDtcbiAgICBjdXN0b21SdWxlc1tpbmRleF0gPSB2YWxpZGF0ZTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb2RlOiAnY3VzdG9tUnVsZScgKyBpbmRleCxcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZVxuICAgIH07XG4gIH1cbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc2NoZW1hIGlzIGN1cnJlbnRseSBjb21waWxlZFxuICogQHRoaXMgICBBanZcbiAqIEBwYXJhbSAge09iamVjdH0gc2NoZW1hIHNjaGVtYSB0byBjb21waWxlXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvb3Qgcm9vdCBvYmplY3RcbiAqIEBwYXJhbSAge1N0cmluZ30gYmFzZUlkIGJhc2Ugc2NoZW1hIElEXG4gKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHByb3BlcnRpZXMgXCJpbmRleFwiIChjb21waWxhdGlvbiBpbmRleCkgYW5kIFwiY29tcGlsaW5nXCIgKGJvb2xlYW4pXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcGlsaW5nKHNjaGVtYSwgcm9vdCwgYmFzZUlkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIGluZGV4ID0gY29tcEluZGV4LmNhbGwodGhpcywgc2NoZW1hLCByb290LCBiYXNlSWQpO1xuICBpZiAoaW5kZXggPj0gMCkgcmV0dXJuIHsgaW5kZXg6IGluZGV4LCBjb21waWxpbmc6IHRydWUgfTtcbiAgaW5kZXggPSB0aGlzLl9jb21waWxhdGlvbnMubGVuZ3RoO1xuICB0aGlzLl9jb21waWxhdGlvbnNbaW5kZXhdID0ge1xuICAgIHNjaGVtYTogc2NoZW1hLFxuICAgIHJvb3Q6IHJvb3QsXG4gICAgYmFzZUlkOiBiYXNlSWRcbiAgfTtcbiAgcmV0dXJuIHsgaW5kZXg6IGluZGV4LCBjb21waWxpbmc6IGZhbHNlIH07XG59XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBzY2hlbWEgZnJvbSB0aGUgY3VycmVudGx5IGNvbXBpbGVkIGxpc3RcbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNjaGVtYSBzY2hlbWEgdG8gY29tcGlsZVxuICogQHBhcmFtICB7T2JqZWN0fSByb290IHJvb3Qgb2JqZWN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGJhc2VJZCBiYXNlIHNjaGVtYSBJRFxuICovXG5mdW5jdGlvbiBlbmRDb21waWxpbmcoc2NoZW1hLCByb290LCBiYXNlSWQpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgaSA9IGNvbXBJbmRleC5jYWxsKHRoaXMsIHNjaGVtYSwgcm9vdCwgYmFzZUlkKTtcbiAgaWYgKGkgPj0gMCkgdGhpcy5fY29tcGlsYXRpb25zLnNwbGljZShpLCAxKTtcbn1cblxuXG4vKipcbiAqIEluZGV4IG9mIHNjaGVtYSBjb21waWxhdGlvbiBpbiB0aGUgY3VycmVudGx5IGNvbXBpbGVkIGxpc3RcbiAqIEB0aGlzICAgQWp2XG4gKiBAcGFyYW0gIHtPYmplY3R9IHNjaGVtYSBzY2hlbWEgdG8gY29tcGlsZVxuICogQHBhcmFtICB7T2JqZWN0fSByb290IHJvb3Qgb2JqZWN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGJhc2VJZCBiYXNlIHNjaGVtYSBJRFxuICogQHJldHVybiB7SW50ZWdlcn0gY29tcGlsYXRpb24gaW5kZXhcbiAqL1xuZnVuY3Rpb24gY29tcEluZGV4KHNjaGVtYSwgcm9vdCwgYmFzZUlkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgZm9yICh2YXIgaT0wOyBpPHRoaXMuX2NvbXBpbGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjID0gdGhpcy5fY29tcGlsYXRpb25zW2ldO1xuICAgIGlmIChjLnNjaGVtYSA9PSBzY2hlbWEgJiYgYy5yb290ID09IHJvb3QgJiYgYy5iYXNlSWQgPT0gYmFzZUlkKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG5cblxuZnVuY3Rpb24gcGF0dGVybkNvZGUoaSwgcGF0dGVybnMpIHtcbiAgcmV0dXJuICd2YXIgcGF0dGVybicgKyBpICsgJyA9IG5ldyBSZWdFeHAoJyArIHV0aWwudG9RdW90ZWRTdHJpbmcocGF0dGVybnNbaV0pICsgJyk7Jztcbn1cblxuXG5mdW5jdGlvbiBkZWZhdWx0Q29kZShpKSB7XG4gIHJldHVybiAndmFyIGRlZmF1bHQnICsgaSArICcgPSBkZWZhdWx0c1snICsgaSArICddOyc7XG59XG5cblxuZnVuY3Rpb24gcmVmVmFsQ29kZShpLCByZWZWYWwpIHtcbiAgcmV0dXJuIHJlZlZhbFtpXSA9PT0gdW5kZWZpbmVkID8gJycgOiAndmFyIHJlZlZhbCcgKyBpICsgJyA9IHJlZlZhbFsnICsgaSArICddOyc7XG59XG5cblxuZnVuY3Rpb24gY3VzdG9tUnVsZUNvZGUoaSkge1xuICByZXR1cm4gJ3ZhciBjdXN0b21SdWxlJyArIGkgKyAnID0gY3VzdG9tUnVsZXNbJyArIGkgKyAnXTsnO1xufVxuXG5cbmZ1bmN0aW9uIHZhcnMoYXJyLCBzdGF0ZW1lbnQpIHtcbiAgaWYgKCFhcnIubGVuZ3RoKSByZXR1cm4gJyc7XG4gIHZhciBjb2RlID0gJyc7XG4gIGZvciAodmFyIGk9MDsgaTxhcnIubGVuZ3RoOyBpKyspXG4gICAgY29kZSArPSBzdGF0ZW1lbnQoaSwgYXJyKTtcbiAgcmV0dXJuIGNvZGU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBVUkkgPSByZXF1aXJlKCd1cmktanMnKVxuICAsIGVxdWFsID0gcmVxdWlyZSgnZmFzdC1kZWVwLWVxdWFsJylcbiAgLCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJylcbiAgLCBTY2hlbWFPYmplY3QgPSByZXF1aXJlKCcuL3NjaGVtYV9vYmonKVxuICAsIHRyYXZlcnNlID0gcmVxdWlyZSgnanNvbi1zY2hlbWEtdHJhdmVyc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlO1xuXG5yZXNvbHZlLm5vcm1hbGl6ZUlkID0gbm9ybWFsaXplSWQ7XG5yZXNvbHZlLmZ1bGxQYXRoID0gZ2V0RnVsbFBhdGg7XG5yZXNvbHZlLnVybCA9IHJlc29sdmVVcmw7XG5yZXNvbHZlLmlkcyA9IHJlc29sdmVJZHM7XG5yZXNvbHZlLmlubGluZVJlZiA9IGlubGluZVJlZjtcbnJlc29sdmUuc2NoZW1hID0gcmVzb2x2ZVNjaGVtYTtcblxuLyoqXG4gKiBbcmVzb2x2ZSBhbmQgY29tcGlsZSB0aGUgcmVmZXJlbmNlcyAoJHJlZildXG4gKiBAdGhpcyAgIEFqdlxuICogQHBhcmFtICB7RnVuY3Rpb259IGNvbXBpbGUgcmVmZXJlbmNlIHRvIHNjaGVtYSBjb21waWxhdGlvbiBmdW5jaXRvbiAobG9jYWxDb21waWxlKVxuICogQHBhcmFtICB7T2JqZWN0fSByb290IG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHRoZSByb290IHNjaGVtYSBmb3IgdGhlIGN1cnJlbnQgc2NoZW1hXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHJlZiByZWZlcmVuY2UgdG8gcmVzb2x2ZVxuICogQHJldHVybiB7T2JqZWN0fEZ1bmN0aW9ufSBzY2hlbWEgb2JqZWN0IChpZiB0aGUgc2NoZW1hIGNhbiBiZSBpbmxpbmVkKSBvciB2YWxpZGF0aW9uIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmUoY29tcGlsZSwgcm9vdCwgcmVmKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIHJlZlZhbCA9IHRoaXMuX3JlZnNbcmVmXTtcbiAgaWYgKHR5cGVvZiByZWZWYWwgPT0gJ3N0cmluZycpIHtcbiAgICBpZiAodGhpcy5fcmVmc1tyZWZWYWxdKSByZWZWYWwgPSB0aGlzLl9yZWZzW3JlZlZhbF07XG4gICAgZWxzZSByZXR1cm4gcmVzb2x2ZS5jYWxsKHRoaXMsIGNvbXBpbGUsIHJvb3QsIHJlZlZhbCk7XG4gIH1cblxuICByZWZWYWwgPSByZWZWYWwgfHwgdGhpcy5fc2NoZW1hc1tyZWZdO1xuICBpZiAocmVmVmFsIGluc3RhbmNlb2YgU2NoZW1hT2JqZWN0KSB7XG4gICAgcmV0dXJuIGlubGluZVJlZihyZWZWYWwuc2NoZW1hLCB0aGlzLl9vcHRzLmlubGluZVJlZnMpXG4gICAgICAgICAgICA/IHJlZlZhbC5zY2hlbWFcbiAgICAgICAgICAgIDogcmVmVmFsLnZhbGlkYXRlIHx8IHRoaXMuX2NvbXBpbGUocmVmVmFsKTtcbiAgfVxuXG4gIHZhciByZXMgPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgcmVmKTtcbiAgdmFyIHNjaGVtYSwgdiwgYmFzZUlkO1xuICBpZiAocmVzKSB7XG4gICAgc2NoZW1hID0gcmVzLnNjaGVtYTtcbiAgICByb290ID0gcmVzLnJvb3Q7XG4gICAgYmFzZUlkID0gcmVzLmJhc2VJZDtcbiAgfVxuXG4gIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBTY2hlbWFPYmplY3QpIHtcbiAgICB2ID0gc2NoZW1hLnZhbGlkYXRlIHx8IGNvbXBpbGUuY2FsbCh0aGlzLCBzY2hlbWEuc2NoZW1hLCByb290LCB1bmRlZmluZWQsIGJhc2VJZCk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcbiAgICB2ID0gaW5saW5lUmVmKHNjaGVtYSwgdGhpcy5fb3B0cy5pbmxpbmVSZWZzKVxuICAgICAgICA/IHNjaGVtYVxuICAgICAgICA6IGNvbXBpbGUuY2FsbCh0aGlzLCBzY2hlbWEsIHJvb3QsIHVuZGVmaW5lZCwgYmFzZUlkKTtcbiAgfVxuXG4gIHJldHVybiB2O1xufVxuXG5cbi8qKlxuICogUmVzb2x2ZSBzY2hlbWEsIGl0cyByb290IGFuZCBiYXNlSWRcbiAqIEB0aGlzIEFqdlxuICogQHBhcmFtICB7T2JqZWN0fSByb290IHJvb3Qgb2JqZWN0IHdpdGggcHJvcGVydGllcyBzY2hlbWEsIHJlZlZhbCwgcmVmc1xuICogQHBhcmFtICB7U3RyaW5nfSByZWYgIHJlZmVyZW5jZSB0byByZXNvbHZlXG4gKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHByb3BlcnRpZXMgc2NoZW1hLCByb290LCBiYXNlSWRcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNjaGVtYShyb290LCByZWYpIHtcbiAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICB2YXIgcCA9IFVSSS5wYXJzZShyZWYpXG4gICAgLCByZWZQYXRoID0gX2dldEZ1bGxQYXRoKHApXG4gICAgLCBiYXNlSWQgPSBnZXRGdWxsUGF0aCh0aGlzLl9nZXRJZChyb290LnNjaGVtYSkpO1xuICBpZiAoT2JqZWN0LmtleXMocm9vdC5zY2hlbWEpLmxlbmd0aCA9PT0gMCB8fCByZWZQYXRoICE9PSBiYXNlSWQpIHtcbiAgICB2YXIgaWQgPSBub3JtYWxpemVJZChyZWZQYXRoKTtcbiAgICB2YXIgcmVmVmFsID0gdGhpcy5fcmVmc1tpZF07XG4gICAgaWYgKHR5cGVvZiByZWZWYWwgPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiByZXNvbHZlUmVjdXJzaXZlLmNhbGwodGhpcywgcm9vdCwgcmVmVmFsLCBwKTtcbiAgICB9IGVsc2UgaWYgKHJlZlZhbCBpbnN0YW5jZW9mIFNjaGVtYU9iamVjdCkge1xuICAgICAgaWYgKCFyZWZWYWwudmFsaWRhdGUpIHRoaXMuX2NvbXBpbGUocmVmVmFsKTtcbiAgICAgIHJvb3QgPSByZWZWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZlZhbCA9IHRoaXMuX3NjaGVtYXNbaWRdO1xuICAgICAgaWYgKHJlZlZhbCBpbnN0YW5jZW9mIFNjaGVtYU9iamVjdCkge1xuICAgICAgICBpZiAoIXJlZlZhbC52YWxpZGF0ZSkgdGhpcy5fY29tcGlsZShyZWZWYWwpO1xuICAgICAgICBpZiAoaWQgPT0gbm9ybWFsaXplSWQocmVmKSlcbiAgICAgICAgICByZXR1cm4geyBzY2hlbWE6IHJlZlZhbCwgcm9vdDogcm9vdCwgYmFzZUlkOiBiYXNlSWQgfTtcbiAgICAgICAgcm9vdCA9IHJlZlZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFyb290LnNjaGVtYSkgcmV0dXJuO1xuICAgIGJhc2VJZCA9IGdldEZ1bGxQYXRoKHRoaXMuX2dldElkKHJvb3Quc2NoZW1hKSk7XG4gIH1cbiAgcmV0dXJuIGdldEpzb25Qb2ludGVyLmNhbGwodGhpcywgcCwgYmFzZUlkLCByb290LnNjaGVtYSwgcm9vdCk7XG59XG5cblxuLyogQHRoaXMgQWp2ICovXG5mdW5jdGlvbiByZXNvbHZlUmVjdXJzaXZlKHJvb3QsIHJlZiwgcGFyc2VkUmVmKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIHJlcyA9IHJlc29sdmVTY2hlbWEuY2FsbCh0aGlzLCByb290LCByZWYpO1xuICBpZiAocmVzKSB7XG4gICAgdmFyIHNjaGVtYSA9IHJlcy5zY2hlbWE7XG4gICAgdmFyIGJhc2VJZCA9IHJlcy5iYXNlSWQ7XG4gICAgcm9vdCA9IHJlcy5yb290O1xuICAgIHZhciBpZCA9IHRoaXMuX2dldElkKHNjaGVtYSk7XG4gICAgaWYgKGlkKSBiYXNlSWQgPSByZXNvbHZlVXJsKGJhc2VJZCwgaWQpO1xuICAgIHJldHVybiBnZXRKc29uUG9pbnRlci5jYWxsKHRoaXMsIHBhcnNlZFJlZiwgYmFzZUlkLCBzY2hlbWEsIHJvb3QpO1xuICB9XG59XG5cblxudmFyIFBSRVZFTlRfU0NPUEVfQ0hBTkdFID0gdXRpbC50b0hhc2goWydwcm9wZXJ0aWVzJywgJ3BhdHRlcm5Qcm9wZXJ0aWVzJywgJ2VudW0nLCAnZGVwZW5kZW5jaWVzJywgJ2RlZmluaXRpb25zJ10pO1xuLyogQHRoaXMgQWp2ICovXG5mdW5jdGlvbiBnZXRKc29uUG9pbnRlcihwYXJzZWRSZWYsIGJhc2VJZCwgc2NoZW1hLCByb290KSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgcGFyc2VkUmVmLmZyYWdtZW50ID0gcGFyc2VkUmVmLmZyYWdtZW50IHx8ICcnO1xuICBpZiAocGFyc2VkUmVmLmZyYWdtZW50LnNsaWNlKDAsMSkgIT0gJy8nKSByZXR1cm47XG4gIHZhciBwYXJ0cyA9IHBhcnNlZFJlZi5mcmFnbWVudC5zcGxpdCgnLycpO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0KSB7XG4gICAgICBwYXJ0ID0gdXRpbC51bmVzY2FwZUZyYWdtZW50KHBhcnQpO1xuICAgICAgc2NoZW1hID0gc2NoZW1hW3BhcnRdO1xuICAgICAgaWYgKHNjaGVtYSA9PT0gdW5kZWZpbmVkKSBicmVhaztcbiAgICAgIHZhciBpZDtcbiAgICAgIGlmICghUFJFVkVOVF9TQ09QRV9DSEFOR0VbcGFydF0pIHtcbiAgICAgICAgaWQgPSB0aGlzLl9nZXRJZChzY2hlbWEpO1xuICAgICAgICBpZiAoaWQpIGJhc2VJZCA9IHJlc29sdmVVcmwoYmFzZUlkLCBpZCk7XG4gICAgICAgIGlmIChzY2hlbWEuJHJlZikge1xuICAgICAgICAgIHZhciAkcmVmID0gcmVzb2x2ZVVybChiYXNlSWQsIHNjaGVtYS4kcmVmKTtcbiAgICAgICAgICB2YXIgcmVzID0gcmVzb2x2ZVNjaGVtYS5jYWxsKHRoaXMsIHJvb3QsICRyZWYpO1xuICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHNjaGVtYSA9IHJlcy5zY2hlbWE7XG4gICAgICAgICAgICByb290ID0gcmVzLnJvb3Q7XG4gICAgICAgICAgICBiYXNlSWQgPSByZXMuYmFzZUlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQgJiYgc2NoZW1hICE9PSByb290LnNjaGVtYSlcbiAgICByZXR1cm4geyBzY2hlbWE6IHNjaGVtYSwgcm9vdDogcm9vdCwgYmFzZUlkOiBiYXNlSWQgfTtcbn1cblxuXG52YXIgU0lNUExFX0lOTElORUQgPSB1dGlsLnRvSGFzaChbXG4gICd0eXBlJywgJ2Zvcm1hdCcsICdwYXR0ZXJuJyxcbiAgJ21heExlbmd0aCcsICdtaW5MZW5ndGgnLFxuICAnbWF4UHJvcGVydGllcycsICdtaW5Qcm9wZXJ0aWVzJyxcbiAgJ21heEl0ZW1zJywgJ21pbkl0ZW1zJyxcbiAgJ21heGltdW0nLCAnbWluaW11bScsXG4gICd1bmlxdWVJdGVtcycsICdtdWx0aXBsZU9mJyxcbiAgJ3JlcXVpcmVkJywgJ2VudW0nXG5dKTtcbmZ1bmN0aW9uIGlubGluZVJlZihzY2hlbWEsIGxpbWl0KSB7XG4gIGlmIChsaW1pdCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgaWYgKGxpbWl0ID09PSB1bmRlZmluZWQgfHwgbGltaXQgPT09IHRydWUpIHJldHVybiBjaGVja05vUmVmKHNjaGVtYSk7XG4gIGVsc2UgaWYgKGxpbWl0KSByZXR1cm4gY291bnRLZXlzKHNjaGVtYSkgPD0gbGltaXQ7XG59XG5cblxuZnVuY3Rpb24gY2hlY2tOb1JlZihzY2hlbWEpIHtcbiAgdmFyIGl0ZW07XG4gIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8c2NoZW1hLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpdGVtID0gc2NoZW1hW2ldO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09ICdvYmplY3QnICYmICFjaGVja05vUmVmKGl0ZW0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIGlmIChrZXkgPT0gJyRyZWYnKSByZXR1cm4gZmFsc2U7XG4gICAgICBpdGVtID0gc2NoZW1hW2tleV07XG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT0gJ29iamVjdCcgJiYgIWNoZWNrTm9SZWYoaXRlbSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gY291bnRLZXlzKHNjaGVtYSkge1xuICB2YXIgY291bnQgPSAwLCBpdGVtO1xuICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgZm9yICh2YXIgaT0wOyBpPHNjaGVtYS5sZW5ndGg7IGkrKykge1xuICAgICAgaXRlbSA9IHNjaGVtYVtpXTtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PSAnb2JqZWN0JykgY291bnQgKz0gY291bnRLZXlzKGl0ZW0pO1xuICAgICAgaWYgKGNvdW50ID09IEluZmluaXR5KSByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIGlmIChrZXkgPT0gJyRyZWYnKSByZXR1cm4gSW5maW5pdHk7XG4gICAgICBpZiAoU0lNUExFX0lOTElORURba2V5XSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbSA9IHNjaGVtYVtrZXldO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT0gJ29iamVjdCcpIGNvdW50ICs9IGNvdW50S2V5cyhpdGVtKSArIDE7XG4gICAgICAgIGlmIChjb3VudCA9PSBJbmZpbml0eSkgcmV0dXJuIEluZmluaXR5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cblxuZnVuY3Rpb24gZ2V0RnVsbFBhdGgoaWQsIG5vcm1hbGl6ZSkge1xuICBpZiAobm9ybWFsaXplICE9PSBmYWxzZSkgaWQgPSBub3JtYWxpemVJZChpZCk7XG4gIHZhciBwID0gVVJJLnBhcnNlKGlkKTtcbiAgcmV0dXJuIF9nZXRGdWxsUGF0aChwKTtcbn1cblxuXG5mdW5jdGlvbiBfZ2V0RnVsbFBhdGgocCkge1xuICByZXR1cm4gVVJJLnNlcmlhbGl6ZShwKS5zcGxpdCgnIycpWzBdICsgJyMnO1xufVxuXG5cbnZhciBUUkFJTElOR19TTEFTSF9IQVNIID0gLyNcXC8/JC87XG5mdW5jdGlvbiBub3JtYWxpemVJZChpZCkge1xuICByZXR1cm4gaWQgPyBpZC5yZXBsYWNlKFRSQUlMSU5HX1NMQVNIX0hBU0gsICcnKSA6ICcnO1xufVxuXG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZUlkLCBpZCkge1xuICBpZCA9IG5vcm1hbGl6ZUlkKGlkKTtcbiAgcmV0dXJuIFVSSS5yZXNvbHZlKGJhc2VJZCwgaWQpO1xufVxuXG5cbi8qIEB0aGlzIEFqdiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUlkcyhzY2hlbWEpIHtcbiAgdmFyIHNjaGVtYUlkID0gbm9ybWFsaXplSWQodGhpcy5fZ2V0SWQoc2NoZW1hKSk7XG4gIHZhciBiYXNlSWRzID0geycnOiBzY2hlbWFJZH07XG4gIHZhciBmdWxsUGF0aHMgPSB7Jyc6IGdldEZ1bGxQYXRoKHNjaGVtYUlkLCBmYWxzZSl9O1xuICB2YXIgbG9jYWxSZWZzID0ge307XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cmF2ZXJzZShzY2hlbWEsIHthbGxLZXlzOiB0cnVlfSwgZnVuY3Rpb24oc2NoLCBqc29uUHRyLCByb290U2NoZW1hLCBwYXJlbnRKc29uUHRyLCBwYXJlbnRLZXl3b3JkLCBwYXJlbnRTY2hlbWEsIGtleUluZGV4KSB7XG4gICAgaWYgKGpzb25QdHIgPT09ICcnKSByZXR1cm47XG4gICAgdmFyIGlkID0gc2VsZi5fZ2V0SWQoc2NoKTtcbiAgICB2YXIgYmFzZUlkID0gYmFzZUlkc1twYXJlbnRKc29uUHRyXTtcbiAgICB2YXIgZnVsbFBhdGggPSBmdWxsUGF0aHNbcGFyZW50SnNvblB0cl0gKyAnLycgKyBwYXJlbnRLZXl3b3JkO1xuICAgIGlmIChrZXlJbmRleCAhPT0gdW5kZWZpbmVkKVxuICAgICAgZnVsbFBhdGggKz0gJy8nICsgKHR5cGVvZiBrZXlJbmRleCA9PSAnbnVtYmVyJyA/IGtleUluZGV4IDogdXRpbC5lc2NhcGVGcmFnbWVudChrZXlJbmRleCkpO1xuXG4gICAgaWYgKHR5cGVvZiBpZCA9PSAnc3RyaW5nJykge1xuICAgICAgaWQgPSBiYXNlSWQgPSBub3JtYWxpemVJZChiYXNlSWQgPyBVUkkucmVzb2x2ZShiYXNlSWQsIGlkKSA6IGlkKTtcblxuICAgICAgdmFyIHJlZlZhbCA9IHNlbGYuX3JlZnNbaWRdO1xuICAgICAgaWYgKHR5cGVvZiByZWZWYWwgPT0gJ3N0cmluZycpIHJlZlZhbCA9IHNlbGYuX3JlZnNbcmVmVmFsXTtcbiAgICAgIGlmIChyZWZWYWwgJiYgcmVmVmFsLnNjaGVtYSkge1xuICAgICAgICBpZiAoIWVxdWFsKHNjaCwgcmVmVmFsLnNjaGVtYSkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBcIicgKyBpZCArICdcIiByZXNvbHZlcyB0byBtb3JlIHRoYW4gb25lIHNjaGVtYScpO1xuICAgICAgfSBlbHNlIGlmIChpZCAhPSBub3JtYWxpemVJZChmdWxsUGF0aCkpIHtcbiAgICAgICAgaWYgKGlkWzBdID09ICcjJykge1xuICAgICAgICAgIGlmIChsb2NhbFJlZnNbaWRdICYmICFlcXVhbChzY2gsIGxvY2FsUmVmc1tpZF0pKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZCBcIicgKyBpZCArICdcIiByZXNvbHZlcyB0byBtb3JlIHRoYW4gb25lIHNjaGVtYScpO1xuICAgICAgICAgIGxvY2FsUmVmc1tpZF0gPSBzY2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5fcmVmc1tpZF0gPSBmdWxsUGF0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBiYXNlSWRzW2pzb25QdHJdID0gYmFzZUlkO1xuICAgIGZ1bGxQYXRoc1tqc29uUHRyXSA9IGZ1bGxQYXRoO1xuICB9KTtcblxuICByZXR1cm4gbG9jYWxSZWZzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcnVsZU1vZHVsZXMgPSByZXF1aXJlKCcuLi9kb3RqcycpXG4gICwgdG9IYXNoID0gcmVxdWlyZSgnLi91dGlsJykudG9IYXNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJ1bGVzKCkge1xuICB2YXIgUlVMRVMgPSBbXG4gICAgeyB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHJ1bGVzOiBbIHsgJ21heGltdW0nOiBbJ2V4Y2x1c2l2ZU1heGltdW0nXSB9LFxuICAgICAgICAgICAgICAgeyAnbWluaW11bSc6IFsnZXhjbHVzaXZlTWluaW11bSddIH0sICdtdWx0aXBsZU9mJywgJ2Zvcm1hdCddIH0sXG4gICAgeyB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIHJ1bGVzOiBbICdtYXhMZW5ndGgnLCAnbWluTGVuZ3RoJywgJ3BhdHRlcm4nLCAnZm9ybWF0JyBdIH0sXG4gICAgeyB0eXBlOiAnYXJyYXknLFxuICAgICAgcnVsZXM6IFsgJ21heEl0ZW1zJywgJ21pbkl0ZW1zJywgJ2l0ZW1zJywgJ2NvbnRhaW5zJywgJ3VuaXF1ZUl0ZW1zJyBdIH0sXG4gICAgeyB0eXBlOiAnb2JqZWN0JyxcbiAgICAgIHJ1bGVzOiBbICdtYXhQcm9wZXJ0aWVzJywgJ21pblByb3BlcnRpZXMnLCAncmVxdWlyZWQnLCAnZGVwZW5kZW5jaWVzJywgJ3Byb3BlcnR5TmFtZXMnLFxuICAgICAgICAgICAgICAgeyAncHJvcGVydGllcyc6IFsnYWRkaXRpb25hbFByb3BlcnRpZXMnLCAncGF0dGVyblByb3BlcnRpZXMnXSB9IF0gfSxcbiAgICB7IHJ1bGVzOiBbICckcmVmJywgJ2NvbnN0JywgJ2VudW0nLCAnbm90JywgJ2FueU9mJywgJ29uZU9mJywgJ2FsbE9mJywgJ2lmJyBdIH1cbiAgXTtcblxuICB2YXIgQUxMID0gWyAndHlwZScsICckY29tbWVudCcgXTtcbiAgdmFyIEtFWVdPUkRTID0gW1xuICAgICckc2NoZW1hJywgJyRpZCcsICdpZCcsICckZGF0YScsICd0aXRsZScsXG4gICAgJ2Rlc2NyaXB0aW9uJywgJ2RlZmF1bHQnLCAnZGVmaW5pdGlvbnMnLFxuICAgICdleGFtcGxlcycsICdyZWFkT25seScsICd3cml0ZU9ubHknLFxuICAgICdjb250ZW50TWVkaWFUeXBlJywgJ2NvbnRlbnRFbmNvZGluZycsXG4gICAgJ2FkZGl0aW9uYWxJdGVtcycsICd0aGVuJywgJ2Vsc2UnXG4gIF07XG4gIHZhciBUWVBFUyA9IFsgJ251bWJlcicsICdpbnRlZ2VyJywgJ3N0cmluZycsICdhcnJheScsICdvYmplY3QnLCAnYm9vbGVhbicsICdudWxsJyBdO1xuICBSVUxFUy5hbGwgPSB0b0hhc2goQUxMKTtcbiAgUlVMRVMudHlwZXMgPSB0b0hhc2goVFlQRVMpO1xuXG4gIFJVTEVTLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgZ3JvdXAucnVsZXMgPSBncm91cC5ydWxlcy5tYXAoZnVuY3Rpb24gKGtleXdvcmQpIHtcbiAgICAgIHZhciBpbXBsS2V5d29yZHM7XG4gICAgICBpZiAodHlwZW9mIGtleXdvcmQgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKGtleXdvcmQpWzBdO1xuICAgICAgICBpbXBsS2V5d29yZHMgPSBrZXl3b3JkW2tleV07XG4gICAgICAgIGtleXdvcmQgPSBrZXk7XG4gICAgICAgIGltcGxLZXl3b3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgQUxMLnB1c2goayk7XG4gICAgICAgICAgUlVMRVMuYWxsW2tdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBBTEwucHVzaChrZXl3b3JkKTtcbiAgICAgIHZhciBydWxlID0gUlVMRVMuYWxsW2tleXdvcmRdID0ge1xuICAgICAgICBrZXl3b3JkOiBrZXl3b3JkLFxuICAgICAgICBjb2RlOiBydWxlTW9kdWxlc1trZXl3b3JkXSxcbiAgICAgICAgaW1wbGVtZW50czogaW1wbEtleXdvcmRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfSk7XG5cbiAgICBSVUxFUy5hbGwuJGNvbW1lbnQgPSB7XG4gICAgICBrZXl3b3JkOiAnJGNvbW1lbnQnLFxuICAgICAgY29kZTogcnVsZU1vZHVsZXMuJGNvbW1lbnRcbiAgICB9O1xuXG4gICAgaWYgKGdyb3VwLnR5cGUpIFJVTEVTLnR5cGVzW2dyb3VwLnR5cGVdID0gZ3JvdXA7XG4gIH0pO1xuXG4gIFJVTEVTLmtleXdvcmRzID0gdG9IYXNoKEFMTC5jb25jYXQoS0VZV09SRFMpKTtcbiAgUlVMRVMuY3VzdG9tID0ge307XG5cbiAgcmV0dXJuIFJVTEVTO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWFPYmplY3Q7XG5cbmZ1bmN0aW9uIFNjaGVtYU9iamVjdChvYmopIHtcbiAgdXRpbC5jb3B5KG9iaiwgdGhpcyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMgLSBwdW55Y29kZS51Y3MyLmRlY29kZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB1Y3MybGVuZ3RoKHN0cikge1xuICB2YXIgbGVuZ3RoID0gMFxuICAgICwgbGVuID0gc3RyLmxlbmd0aFxuICAgICwgcG9zID0gMFxuICAgICwgdmFsdWU7XG4gIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICBsZW5ndGgrKztcbiAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcysrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBwb3MgPCBsZW4pIHtcbiAgICAgIC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MpO1xuICAgICAgaWYgKCh2YWx1ZSAmIDB4RkMwMCkgPT0gMHhEQzAwKSBwb3MrKzsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29weTogY29weSxcbiAgY2hlY2tEYXRhVHlwZTogY2hlY2tEYXRhVHlwZSxcbiAgY2hlY2tEYXRhVHlwZXM6IGNoZWNrRGF0YVR5cGVzLFxuICBjb2VyY2VUb1R5cGVzOiBjb2VyY2VUb1R5cGVzLFxuICB0b0hhc2g6IHRvSGFzaCxcbiAgZ2V0UHJvcGVydHk6IGdldFByb3BlcnR5LFxuICBlc2NhcGVRdW90ZXM6IGVzY2FwZVF1b3RlcyxcbiAgZXF1YWw6IHJlcXVpcmUoJ2Zhc3QtZGVlcC1lcXVhbCcpLFxuICB1Y3MybGVuZ3RoOiByZXF1aXJlKCcuL3VjczJsZW5ndGgnKSxcbiAgdmFyT2NjdXJlbmNlczogdmFyT2NjdXJlbmNlcyxcbiAgdmFyUmVwbGFjZTogdmFyUmVwbGFjZSxcbiAgY2xlYW5VcENvZGU6IGNsZWFuVXBDb2RlLFxuICBmaW5hbENsZWFuVXBDb2RlOiBmaW5hbENsZWFuVXBDb2RlLFxuICBzY2hlbWFIYXNSdWxlczogc2NoZW1hSGFzUnVsZXMsXG4gIHNjaGVtYUhhc1J1bGVzRXhjZXB0OiBzY2hlbWFIYXNSdWxlc0V4Y2VwdCxcbiAgdG9RdW90ZWRTdHJpbmc6IHRvUXVvdGVkU3RyaW5nLFxuICBnZXRQYXRoRXhwcjogZ2V0UGF0aEV4cHIsXG4gIGdldFBhdGg6IGdldFBhdGgsXG4gIGdldERhdGE6IGdldERhdGEsXG4gIHVuZXNjYXBlRnJhZ21lbnQ6IHVuZXNjYXBlRnJhZ21lbnQsXG4gIHVuZXNjYXBlSnNvblBvaW50ZXI6IHVuZXNjYXBlSnNvblBvaW50ZXIsXG4gIGVzY2FwZUZyYWdtZW50OiBlc2NhcGVGcmFnbWVudCxcbiAgZXNjYXBlSnNvblBvaW50ZXI6IGVzY2FwZUpzb25Qb2ludGVyXG59O1xuXG5cbmZ1bmN0aW9uIGNvcHkobywgdG8pIHtcbiAgdG8gPSB0byB8fCB7fTtcbiAgZm9yICh2YXIga2V5IGluIG8pIHRvW2tleV0gPSBvW2tleV07XG4gIHJldHVybiB0bztcbn1cblxuXG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlKGRhdGFUeXBlLCBkYXRhLCBuZWdhdGUpIHtcbiAgdmFyIEVRVUFMID0gbmVnYXRlID8gJyAhPT0gJyA6ICcgPT09ICdcbiAgICAsIEFORCA9IG5lZ2F0ZSA/ICcgfHwgJyA6ICcgJiYgJ1xuICAgICwgT0sgPSBuZWdhdGUgPyAnIScgOiAnJ1xuICAgICwgTk9UID0gbmVnYXRlID8gJycgOiAnISc7XG4gIHN3aXRjaCAoZGF0YVR5cGUpIHtcbiAgICBjYXNlICdudWxsJzogcmV0dXJuIGRhdGEgKyBFUVVBTCArICdudWxsJztcbiAgICBjYXNlICdhcnJheSc6IHJldHVybiBPSyArICdBcnJheS5pc0FycmF5KCcgKyBkYXRhICsgJyknO1xuICAgIGNhc2UgJ29iamVjdCc6IHJldHVybiAnKCcgKyBPSyArIGRhdGEgKyBBTkQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZW9mICcgKyBkYXRhICsgRVFVQUwgKyAnXCJvYmplY3RcIicgKyBBTkQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBOT1QgKyAnQXJyYXkuaXNBcnJheSgnICsgZGF0YSArICcpKSc7XG4gICAgY2FzZSAnaW50ZWdlcic6IHJldHVybiAnKHR5cGVvZiAnICsgZGF0YSArIEVRVUFMICsgJ1wibnVtYmVyXCInICsgQU5EICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIE5PVCArICcoJyArIGRhdGEgKyAnICUgMSknICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEFORCArIGRhdGEgKyBFUVVBTCArIGRhdGEgKyAnKSc7XG4gICAgZGVmYXVsdDogcmV0dXJuICd0eXBlb2YgJyArIGRhdGEgKyBFUVVBTCArICdcIicgKyBkYXRhVHlwZSArICdcIic7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlcyhkYXRhVHlwZXMsIGRhdGEpIHtcbiAgc3dpdGNoIChkYXRhVHlwZXMubGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gY2hlY2tEYXRhVHlwZShkYXRhVHlwZXNbMF0sIGRhdGEsIHRydWUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgdmFyIHR5cGVzID0gdG9IYXNoKGRhdGFUeXBlcyk7XG4gICAgICBpZiAodHlwZXMuYXJyYXkgJiYgdHlwZXMub2JqZWN0KSB7XG4gICAgICAgIGNvZGUgPSB0eXBlcy5udWxsID8gJygnOiAnKCEnICsgZGF0YSArICcgfHwgJztcbiAgICAgICAgY29kZSArPSAndHlwZW9mICcgKyBkYXRhICsgJyAhPT0gXCJvYmplY3RcIiknO1xuICAgICAgICBkZWxldGUgdHlwZXMubnVsbDtcbiAgICAgICAgZGVsZXRlIHR5cGVzLmFycmF5O1xuICAgICAgICBkZWxldGUgdHlwZXMub2JqZWN0O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVzLm51bWJlcikgZGVsZXRlIHR5cGVzLmludGVnZXI7XG4gICAgICBmb3IgKHZhciB0IGluIHR5cGVzKVxuICAgICAgICBjb2RlICs9IChjb2RlID8gJyAmJiAnIDogJycgKSArIGNoZWNrRGF0YVR5cGUodCwgZGF0YSwgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiBjb2RlO1xuICB9XG59XG5cblxudmFyIENPRVJDRV9UT19UWVBFUyA9IHRvSGFzaChbICdzdHJpbmcnLCAnbnVtYmVyJywgJ2ludGVnZXInLCAnYm9vbGVhbicsICdudWxsJyBdKTtcbmZ1bmN0aW9uIGNvZXJjZVRvVHlwZXMob3B0aW9uQ29lcmNlVHlwZXMsIGRhdGFUeXBlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhVHlwZXMpKSB7XG4gICAgdmFyIHR5cGVzID0gW107XG4gICAgZm9yICh2YXIgaT0wOyBpPGRhdGFUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHQgPSBkYXRhVHlwZXNbaV07XG4gICAgICBpZiAoQ09FUkNFX1RPX1RZUEVTW3RdKSB0eXBlc1t0eXBlcy5sZW5ndGhdID0gdDtcbiAgICAgIGVsc2UgaWYgKG9wdGlvbkNvZXJjZVR5cGVzID09PSAnYXJyYXknICYmIHQgPT09ICdhcnJheScpIHR5cGVzW3R5cGVzLmxlbmd0aF0gPSB0O1xuICAgIH1cbiAgICBpZiAodHlwZXMubGVuZ3RoKSByZXR1cm4gdHlwZXM7XG4gIH0gZWxzZSBpZiAoQ09FUkNFX1RPX1RZUEVTW2RhdGFUeXBlc10pIHtcbiAgICByZXR1cm4gW2RhdGFUeXBlc107XG4gIH0gZWxzZSBpZiAob3B0aW9uQ29lcmNlVHlwZXMgPT09ICdhcnJheScgJiYgZGF0YVR5cGVzID09PSAnYXJyYXknKSB7XG4gICAgcmV0dXJuIFsnYXJyYXknXTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSGFzaChhcnIpIHtcbiAgdmFyIGhhc2ggPSB7fTtcbiAgZm9yICh2YXIgaT0wOyBpPGFyci5sZW5ndGg7IGkrKykgaGFzaFthcnJbaV1dID0gdHJ1ZTtcbiAgcmV0dXJuIGhhc2g7XG59XG5cblxudmFyIElERU5USUZJRVIgPSAvXlthLXokX11bYS16JF8wLTldKiQvaTtcbnZhciBTSU5HTEVfUVVPVEUgPSAvJ3xcXFxcL2c7XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIHR5cGVvZiBrZXkgPT0gJ251bWJlcidcbiAgICAgICAgICA/ICdbJyArIGtleSArICddJ1xuICAgICAgICAgIDogSURFTlRJRklFUi50ZXN0KGtleSlcbiAgICAgICAgICAgID8gJy4nICsga2V5XG4gICAgICAgICAgICA6IFwiWydcIiArIGVzY2FwZVF1b3RlcyhrZXkpICsgXCInXVwiO1xufVxuXG5cbmZ1bmN0aW9uIGVzY2FwZVF1b3RlcyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKFNJTkdMRV9RVU9URSwgJ1xcXFwkJicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxmL2csICdcXFxcZicpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFx0L2csICdcXFxcdCcpO1xufVxuXG5cbmZ1bmN0aW9uIHZhck9jY3VyZW5jZXMoc3RyLCBkYXRhVmFyKSB7XG4gIGRhdGFWYXIgKz0gJ1teMC05XSc7XG4gIHZhciBtYXRjaGVzID0gc3RyLm1hdGNoKG5ldyBSZWdFeHAoZGF0YVZhciwgJ2cnKSk7XG4gIHJldHVybiBtYXRjaGVzID8gbWF0Y2hlcy5sZW5ndGggOiAwO1xufVxuXG5cbmZ1bmN0aW9uIHZhclJlcGxhY2Uoc3RyLCBkYXRhVmFyLCBleHByKSB7XG4gIGRhdGFWYXIgKz0gJyhbXjAtOV0pJztcbiAgZXhwciA9IGV4cHIucmVwbGFjZSgvXFwkL2csICckJCQkJyk7XG4gIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKGRhdGFWYXIsICdnJyksIGV4cHIgKyAnJDEnKTtcbn1cblxuXG52YXIgRU1QVFlfRUxTRSA9IC9lbHNlXFxzKntcXHMqfS9nXG4gICwgRU1QVFlfSUZfTk9fRUxTRSA9IC9pZlxccypcXChbXildK1xcKVxccypcXHtcXHMqXFx9KD8hXFxzKmVsc2UpL2dcbiAgLCBFTVBUWV9JRl9XSVRIX0VMU0UgPSAvaWZcXHMqXFwoKFteKV0rKVxcKVxccypcXHtcXHMqXFx9XFxzKmVsc2UoPyFcXHMqaWYpL2c7XG5mdW5jdGlvbiBjbGVhblVwQ29kZShvdXQpIHtcbiAgcmV0dXJuIG91dC5yZXBsYWNlKEVNUFRZX0VMU0UsICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoRU1QVFlfSUZfTk9fRUxTRSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZShFTVBUWV9JRl9XSVRIX0VMU0UsICdpZiAoISgkMSkpJyk7XG59XG5cblxudmFyIEVSUk9SU19SRUdFWFAgPSAvW152Ll1lcnJvcnMvZ1xuICAsIFJFTU9WRV9FUlJPUlMgPSAvdmFyIGVycm9ycyA9IDA7fHZhciB2RXJyb3JzID0gbnVsbDt8dmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsvZ1xuICAsIFJFTU9WRV9FUlJPUlNfQVNZTkMgPSAvdmFyIGVycm9ycyA9IDA7fHZhciB2RXJyb3JzID0gbnVsbDsvZ1xuICAsIFJFVFVSTl9WQUxJRCA9ICdyZXR1cm4gZXJyb3JzID09PSAwOydcbiAgLCBSRVRVUk5fVFJVRSA9ICd2YWxpZGF0ZS5lcnJvcnMgPSBudWxsOyByZXR1cm4gdHJ1ZTsnXG4gICwgUkVUVVJOX0FTWU5DID0gL2lmIFxcKGVycm9ycyA9PT0gMFxcKSByZXR1cm4gZGF0YTtcXHMqZWxzZSB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yXFwodkVycm9yc1xcKTsvXG4gICwgUkVUVVJOX0RBVEFfQVNZTkMgPSAncmV0dXJuIGRhdGE7J1xuICAsIFJPT1REQVRBX1JFR0VYUCA9IC9bXkEtWmEtel8kXXJvb3REYXRhW15BLVphLXowLTlfJF0vZ1xuICAsIFJFTU9WRV9ST09UREFUQSA9IC9pZiBcXChyb290RGF0YSA9PT0gdW5kZWZpbmVkXFwpIHJvb3REYXRhID0gZGF0YTsvO1xuXG5mdW5jdGlvbiBmaW5hbENsZWFuVXBDb2RlKG91dCwgYXN5bmMpIHtcbiAgdmFyIG1hdGNoZXMgPSBvdXQubWF0Y2goRVJST1JTX1JFR0VYUCk7XG4gIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID09IDIpIHtcbiAgICBvdXQgPSBhc3luY1xuICAgICAgICAgID8gb3V0LnJlcGxhY2UoUkVNT1ZFX0VSUk9SU19BU1lOQywgJycpXG4gICAgICAgICAgICAgICAucmVwbGFjZShSRVRVUk5fQVNZTkMsIFJFVFVSTl9EQVRBX0FTWU5DKVxuICAgICAgICAgIDogb3V0LnJlcGxhY2UoUkVNT1ZFX0VSUk9SUywgJycpXG4gICAgICAgICAgICAgICAucmVwbGFjZShSRVRVUk5fVkFMSUQsIFJFVFVSTl9UUlVFKTtcbiAgfVxuXG4gIG1hdGNoZXMgPSBvdXQubWF0Y2goUk9PVERBVEFfUkVHRVhQKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoICE9PSAzKSByZXR1cm4gb3V0O1xuICByZXR1cm4gb3V0LnJlcGxhY2UoUkVNT1ZFX1JPT1REQVRBLCAnJyk7XG59XG5cblxuZnVuY3Rpb24gc2NoZW1hSGFzUnVsZXMoc2NoZW1hLCBydWxlcykge1xuICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnYm9vbGVhbicpIHJldHVybiAhc2NoZW1hO1xuICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSBpZiAocnVsZXNba2V5XSkgcmV0dXJuIHRydWU7XG59XG5cblxuZnVuY3Rpb24gc2NoZW1hSGFzUnVsZXNFeGNlcHQoc2NoZW1hLCBydWxlcywgZXhjZXB0S2V5d29yZCkge1xuICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnYm9vbGVhbicpIHJldHVybiAhc2NoZW1hICYmIGV4Y2VwdEtleXdvcmQgIT0gJ25vdCc7XG4gIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIGlmIChrZXkgIT0gZXhjZXB0S2V5d29yZCAmJiBydWxlc1trZXldKSByZXR1cm4gdHJ1ZTtcbn1cblxuXG5mdW5jdGlvbiB0b1F1b3RlZFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuICdcXCcnICsgZXNjYXBlUXVvdGVzKHN0cikgKyAnXFwnJztcbn1cblxuXG5mdW5jdGlvbiBnZXRQYXRoRXhwcihjdXJyZW50UGF0aCwgZXhwciwganNvblBvaW50ZXJzLCBpc051bWJlcikge1xuICB2YXIgcGF0aCA9IGpzb25Qb2ludGVycyAvLyBmYWxzZSBieSBkZWZhdWx0XG4gICAgICAgICAgICAgID8gJ1xcJy9cXCcgKyAnICsgZXhwciArIChpc051bWJlciA/ICcnIDogJy5yZXBsYWNlKC9+L2csIFxcJ34wXFwnKS5yZXBsYWNlKC9cXFxcLy9nLCBcXCd+MVxcJyknKVxuICAgICAgICAgICAgICA6IChpc051bWJlciA/ICdcXCdbXFwnICsgJyArIGV4cHIgKyAnICsgXFwnXVxcJycgOiAnXFwnW1xcXFxcXCdcXCcgKyAnICsgZXhwciArICcgKyBcXCdcXFxcXFwnXVxcJycpO1xuICByZXR1cm4gam9pblBhdGhzKGN1cnJlbnRQYXRoLCBwYXRoKTtcbn1cblxuXG5mdW5jdGlvbiBnZXRQYXRoKGN1cnJlbnRQYXRoLCBwcm9wLCBqc29uUG9pbnRlcnMpIHtcbiAgdmFyIHBhdGggPSBqc29uUG9pbnRlcnMgLy8gZmFsc2UgYnkgZGVmYXVsdFxuICAgICAgICAgICAgICA/IHRvUXVvdGVkU3RyaW5nKCcvJyArIGVzY2FwZUpzb25Qb2ludGVyKHByb3ApKVxuICAgICAgICAgICAgICA6IHRvUXVvdGVkU3RyaW5nKGdldFByb3BlcnR5KHByb3ApKTtcbiAgcmV0dXJuIGpvaW5QYXRocyhjdXJyZW50UGF0aCwgcGF0aCk7XG59XG5cblxudmFyIEpTT05fUE9JTlRFUiA9IC9eXFwvKD86W15+XXx+MHx+MSkqJC87XG52YXIgUkVMQVRJVkVfSlNPTl9QT0lOVEVSID0gL14oWzAtOV0rKSgjfFxcLyg/Oltefl18fjB8fjEpKik/JC87XG5mdW5jdGlvbiBnZXREYXRhKCRkYXRhLCBsdmwsIHBhdGhzKSB7XG4gIHZhciB1cCwganNvblBvaW50ZXIsIGRhdGEsIG1hdGNoZXM7XG4gIGlmICgkZGF0YSA9PT0gJycpIHJldHVybiAncm9vdERhdGEnO1xuICBpZiAoJGRhdGFbMF0gPT0gJy8nKSB7XG4gICAgaWYgKCFKU09OX1BPSU5URVIudGVzdCgkZGF0YSkpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OLXBvaW50ZXI6ICcgKyAkZGF0YSk7XG4gICAganNvblBvaW50ZXIgPSAkZGF0YTtcbiAgICBkYXRhID0gJ3Jvb3REYXRhJztcbiAgfSBlbHNlIHtcbiAgICBtYXRjaGVzID0gJGRhdGEubWF0Y2goUkVMQVRJVkVfSlNPTl9QT0lOVEVSKTtcbiAgICBpZiAoIW1hdGNoZXMpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBKU09OLXBvaW50ZXI6ICcgKyAkZGF0YSk7XG4gICAgdXAgPSArbWF0Y2hlc1sxXTtcbiAgICBqc29uUG9pbnRlciA9IG1hdGNoZXNbMl07XG4gICAgaWYgKGpzb25Qb2ludGVyID09ICcjJykge1xuICAgICAgaWYgKHVwID49IGx2bCkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWNjZXNzIHByb3BlcnR5L2luZGV4ICcgKyB1cCArICcgbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICcgKyBsdmwpO1xuICAgICAgcmV0dXJuIHBhdGhzW2x2bCAtIHVwXTtcbiAgICB9XG5cbiAgICBpZiAodXAgPiBsdmwpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFjY2VzcyBkYXRhICcgKyB1cCArICcgbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICcgKyBsdmwpO1xuICAgIGRhdGEgPSAnZGF0YScgKyAoKGx2bCAtIHVwKSB8fCAnJyk7XG4gICAgaWYgKCFqc29uUG9pbnRlcikgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgZXhwciA9IGRhdGE7XG4gIHZhciBzZWdtZW50cyA9IGpzb25Qb2ludGVyLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGk9MDsgaTxzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgIGRhdGEgKz0gZ2V0UHJvcGVydHkodW5lc2NhcGVKc29uUG9pbnRlcihzZWdtZW50KSk7XG4gICAgICBleHByICs9ICcgJiYgJyArIGRhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBleHByO1xufVxuXG5cbmZ1bmN0aW9uIGpvaW5QYXRocyAoYSwgYikge1xuICBpZiAoYSA9PSAnXCJcIicpIHJldHVybiBiO1xuICByZXR1cm4gKGEgKyAnICsgJyArIGIpLnJlcGxhY2UoLycgXFwrICcvZywgJycpO1xufVxuXG5cbmZ1bmN0aW9uIHVuZXNjYXBlRnJhZ21lbnQoc3RyKSB7XG4gIHJldHVybiB1bmVzY2FwZUpzb25Qb2ludGVyKGRlY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVGcmFnbWVudChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlc2NhcGVKc29uUG9pbnRlcihzdHIpKTtcbn1cblxuXG5mdW5jdGlvbiBlc2NhcGVKc29uUG9pbnRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cblxuXG5mdW5jdGlvbiB1bmVzY2FwZUpzb25Qb2ludGVyKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL34xL2csICcvJykucmVwbGFjZSgvfjAvZywgJ34nKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEtFWVdPUkRTID0gW1xuICAnbXVsdGlwbGVPZicsXG4gICdtYXhpbXVtJyxcbiAgJ2V4Y2x1c2l2ZU1heGltdW0nLFxuICAnbWluaW11bScsXG4gICdleGNsdXNpdmVNaW5pbXVtJyxcbiAgJ21heExlbmd0aCcsXG4gICdtaW5MZW5ndGgnLFxuICAncGF0dGVybicsXG4gICdhZGRpdGlvbmFsSXRlbXMnLFxuICAnbWF4SXRlbXMnLFxuICAnbWluSXRlbXMnLFxuICAndW5pcXVlSXRlbXMnLFxuICAnbWF4UHJvcGVydGllcycsXG4gICdtaW5Qcm9wZXJ0aWVzJyxcbiAgJ3JlcXVpcmVkJyxcbiAgJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJyxcbiAgJ2VudW0nLFxuICAnZm9ybWF0JyxcbiAgJ2NvbnN0J1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0YVNjaGVtYSwga2V5d29yZHNKc29uUG9pbnRlcnMpIHtcbiAgZm9yICh2YXIgaT0wOyBpPGtleXdvcmRzSnNvblBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWV0YVNjaGVtYSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobWV0YVNjaGVtYSkpO1xuICAgIHZhciBzZWdtZW50cyA9IGtleXdvcmRzSnNvblBvaW50ZXJzW2ldLnNwbGl0KCcvJyk7XG4gICAgdmFyIGtleXdvcmRzID0gbWV0YVNjaGVtYTtcbiAgICB2YXIgajtcbiAgICBmb3IgKGo9MTsgajxzZWdtZW50cy5sZW5ndGg7IGorKylcbiAgICAgIGtleXdvcmRzID0ga2V5d29yZHNbc2VnbWVudHNbal1dO1xuXG4gICAgZm9yIChqPTA7IGo8S0VZV09SRFMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBrZXkgPSBLRVlXT1JEU1tqXTtcbiAgICAgIHZhciBzY2hlbWEgPSBrZXl3b3Jkc1trZXldO1xuICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICBrZXl3b3Jkc1trZXldID0ge1xuICAgICAgICAgIGFueU9mOiBbXG4gICAgICAgICAgICBzY2hlbWEsXG4gICAgICAgICAgICB7ICRyZWY6ICdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZXBvYmVyZXpraW4vYWp2L21hc3Rlci9saWIvcmVmcy9kYXRhLmpzb24jJyB9XG4gICAgICAgICAgXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZXRhU2NoZW1hO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfX2xpbWl0KGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRpc01heCA9ICRrZXl3b3JkID09ICdtYXhpbXVtJyxcbiAgICAkZXhjbHVzaXZlS2V5d29yZCA9ICRpc01heCA/ICdleGNsdXNpdmVNYXhpbXVtJyA6ICdleGNsdXNpdmVNaW5pbXVtJyxcbiAgICAkc2NoZW1hRXhjbCA9IGl0LnNjaGVtYVskZXhjbHVzaXZlS2V5d29yZF0sXG4gICAgJGlzRGF0YUV4Y2wgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWFFeGNsICYmICRzY2hlbWFFeGNsLiRkYXRhLFxuICAgICRvcCA9ICRpc01heCA/ICc8JyA6ICc+JyxcbiAgICAkbm90T3AgPSAkaXNNYXggPyAnPicgOiAnPCcsXG4gICAgJGVycm9yS2V5d29yZCA9IHVuZGVmaW5lZDtcbiAgaWYgKCRpc0RhdGFFeGNsKSB7XG4gICAgdmFyICRzY2hlbWFWYWx1ZUV4Y2wgPSBpdC51dGlsLmdldERhdGEoJHNjaGVtYUV4Y2wuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFyciksXG4gICAgICAkZXhjbHVzaXZlID0gJ2V4Y2x1c2l2ZScgKyAkbHZsLFxuICAgICAgJGV4Y2xUeXBlID0gJ2V4Y2xUeXBlJyArICRsdmwsXG4gICAgICAkZXhjbElzTnVtYmVyID0gJ2V4Y2xJc051bWJlcicgKyAkbHZsLFxuICAgICAgJG9wRXhwciA9ICdvcCcgKyAkbHZsLFxuICAgICAgJG9wU3RyID0gJ1xcJyArICcgKyAkb3BFeHByICsgJyArIFxcJyc7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYUV4Y2wnICsgKCRsdmwpICsgJyA9ICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZUV4Y2wgPSAnc2NoZW1hRXhjbCcgKyAkbHZsO1xuICAgIG91dCArPSAnIHZhciAnICsgKCRleGNsdXNpdmUpICsgJzsgdmFyICcgKyAoJGV4Y2xUeXBlKSArICcgPSB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWVFeGNsKSArICc7IGlmICgnICsgKCRleGNsVHlwZSkgKyAnICE9IFxcJ2Jvb2xlYW5cXCcgJiYgJyArICgkZXhjbFR5cGUpICsgJyAhPSBcXCd1bmRlZmluZWRcXCcgJiYgJyArICgkZXhjbFR5cGUpICsgJyAhPSBcXCdudW1iZXJcXCcpIHsgJztcbiAgICB2YXIgJGVycm9yS2V5d29yZCA9ICRleGNsdXNpdmVLZXl3b3JkO1xuICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19leGNsdXNpdmVMaW1pdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnICsgKCRleGNsdXNpdmVLZXl3b3JkKSArICcgc2hvdWxkIGJlIGJvb2xlYW5cXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gZWxzZSBpZiAoICc7XG4gICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgIG91dCArPSAnICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnbnVtYmVyXFwnKSB8fCAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyAnICsgKCRleGNsVHlwZSkgKyAnID09IFxcJ251bWJlclxcJyA/ICggKCcgKyAoJGV4Y2x1c2l2ZSkgKyAnID0gJyArICgkc2NoZW1hVmFsdWUpICsgJyA9PT0gdW5kZWZpbmVkIHx8ICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnICcgKyAoJG9wKSArICc9ICcgKyAoJHNjaGVtYVZhbHVlKSArICcpID8gJyArICgkZGF0YSkgKyAnICcgKyAoJG5vdE9wKSArICc9ICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnIDogJyArICgkZGF0YSkgKyAnICcgKyAoJG5vdE9wKSArICcgJyArICgkc2NoZW1hVmFsdWUpICsgJyApIDogKCAoJyArICgkZXhjbHVzaXZlKSArICcgPSAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyA9PT0gdHJ1ZSkgPyAnICsgKCRkYXRhKSArICcgJyArICgkbm90T3ApICsgJz0gJyArICgkc2NoZW1hVmFsdWUpICsgJyA6ICcgKyAoJGRhdGEpICsgJyAnICsgKCRub3RPcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcgKSB8fCAnICsgKCRkYXRhKSArICcgIT09ICcgKyAoJGRhdGEpICsgJykgeyB2YXIgb3AnICsgKCRsdmwpICsgJyA9ICcgKyAoJGV4Y2x1c2l2ZSkgKyAnID8gXFwnJyArICgkb3ApICsgJ1xcJyA6IFxcJycgKyAoJG9wKSArICc9XFwnOyAnO1xuICAgIGlmICgkc2NoZW1hID09PSB1bmRlZmluZWQpIHtcbiAgICAgICRlcnJvcktleXdvcmQgPSAkZXhjbHVzaXZlS2V5d29yZDtcbiAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRleGNsdXNpdmVLZXl3b3JkO1xuICAgICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYVZhbHVlRXhjbDtcbiAgICAgICRpc0RhdGEgPSAkaXNEYXRhRXhjbDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyICRleGNsSXNOdW1iZXIgPSB0eXBlb2YgJHNjaGVtYUV4Y2wgPT0gJ251bWJlcicsXG4gICAgICAkb3BTdHIgPSAkb3A7XG4gICAgaWYgKCRleGNsSXNOdW1iZXIgJiYgJGlzRGF0YSkge1xuICAgICAgdmFyICRvcEV4cHIgPSAnXFwnJyArICRvcFN0ciArICdcXCcnO1xuICAgICAgb3V0ICs9ICcgaWYgKCAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICcgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPSBcXCdudW1iZXJcXCcpIHx8ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAoICcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCB8fCAnICsgKCRzY2hlbWFFeGNsKSArICcgJyArICgkb3ApICsgJz0gJyArICgkc2NoZW1hVmFsdWUpICsgJyA/ICcgKyAoJGRhdGEpICsgJyAnICsgKCRub3RPcCkgKyAnPSAnICsgKCRzY2hlbWFFeGNsKSArICcgOiAnICsgKCRkYXRhKSArICcgJyArICgkbm90T3ApICsgJyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICkgfHwgJyArICgkZGF0YSkgKyAnICE9PSAnICsgKCRkYXRhKSArICcpIHsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCRleGNsSXNOdW1iZXIgJiYgJHNjaGVtYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICRleGNsdXNpdmUgPSB0cnVlO1xuICAgICAgICAkZXJyb3JLZXl3b3JkID0gJGV4Y2x1c2l2ZUtleXdvcmQ7XG4gICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRleGNsdXNpdmVLZXl3b3JkO1xuICAgICAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hRXhjbDtcbiAgICAgICAgJG5vdE9wICs9ICc9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkZXhjbElzTnVtYmVyKSAkc2NoZW1hVmFsdWUgPSBNYXRoWyRpc01heCA/ICdtaW4nIDogJ21heCddKCRzY2hlbWFFeGNsLCAkc2NoZW1hKTtcbiAgICAgICAgaWYgKCRzY2hlbWFFeGNsID09PSAoJGV4Y2xJc051bWJlciA/ICRzY2hlbWFWYWx1ZSA6IHRydWUpKSB7XG4gICAgICAgICAgJGV4Y2x1c2l2ZSA9IHRydWU7XG4gICAgICAgICAgJGVycm9yS2V5d29yZCA9ICRleGNsdXNpdmVLZXl3b3JkO1xuICAgICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRleGNsdXNpdmVLZXl3b3JkO1xuICAgICAgICAgICRub3RPcCArPSAnPSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGV4Y2x1c2l2ZSA9IGZhbHNlO1xuICAgICAgICAgICRvcFN0ciArPSAnPSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciAkb3BFeHByID0gJ1xcJycgKyAkb3BTdHIgKyAnXFwnJztcbiAgICAgIG91dCArPSAnIGlmICggJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnbnVtYmVyXFwnKSB8fCAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgJyArICgkZGF0YSkgKyAnICcgKyAoJG5vdE9wKSArICcgJyArICgkc2NoZW1hVmFsdWUpICsgJyB8fCAnICsgKCRkYXRhKSArICcgIT09ICcgKyAoJGRhdGEpICsgJykgeyAnO1xuICAgIH1cbiAgfVxuICAkZXJyb3JLZXl3b3JkID0gJGVycm9yS2V5d29yZCB8fCAka2V5d29yZDtcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19saW1pdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgY29tcGFyaXNvbjogJyArICgkb3BFeHByKSArICcsIGxpbWl0OiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnLCBleGNsdXNpdmU6ICcgKyAoJGV4Y2x1c2l2ZSkgKyAnIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGJlICcgKyAoJG9wU3RyKSArICcgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWFWYWx1ZSkgKyAnXFwnJztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6ICAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICd2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArICgkc2NoZW1hKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnICAgICAgICAgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIHZhciBfX2VyciA9IG91dDtcbiAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9fbGltaXRJdGVtcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGVycm9yS2V5d29yZDtcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkb3AgPSAka2V5d29yZCA9PSAnbWF4SXRlbXMnID8gJz4nIDogJzwnO1xuICBvdXQgKz0gJ2lmICggJztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgfVxuICBvdXQgKz0gJyAnICsgKCRkYXRhKSArICcubGVuZ3RoICcgKyAoJG9wKSArICcgJyArICgkc2NoZW1hVmFsdWUpICsgJykgeyAnO1xuICB2YXIgJGVycm9yS2V5d29yZCA9ICRrZXl3b3JkO1xuICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJGVycm9yS2V5d29yZCB8fCAnX2xpbWl0SXRlbXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGxpbWl0OiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBoYXZlICc7XG4gICAgICBpZiAoJGtleXdvcmQgPT0gJ21heEl0ZW1zJykge1xuICAgICAgICBvdXQgKz0gJ21vcmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICdsZXNzJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIHRoYW4gJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBpdGVtc1xcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWEpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICd9ICc7XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfX2xpbWl0TGVuZ3RoKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRvcCA9ICRrZXl3b3JkID09ICdtYXhMZW5ndGgnID8gJz4nIDogJzwnO1xuICBvdXQgKz0gJ2lmICggJztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyAoJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ251bWJlclxcJykgfHwgJztcbiAgfVxuICBpZiAoaXQub3B0cy51bmljb2RlID09PSBmYWxzZSkge1xuICAgIG91dCArPSAnICcgKyAoJGRhdGEpICsgJy5sZW5ndGggJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB1Y3MybGVuZ3RoKCcgKyAoJGRhdGEpICsgJykgJztcbiAgfVxuICBvdXQgKz0gJyAnICsgKCRvcCkgKyAnICcgKyAoJHNjaGVtYVZhbHVlKSArICcpIHsgJztcbiAgdmFyICRlcnJvcktleXdvcmQgPSAka2V5d29yZDtcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ19saW1pdExlbmd0aCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbGltaXQ6ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgTk9UIGJlICc7XG4gICAgICBpZiAoJGtleXdvcmQgPT0gJ21heExlbmd0aCcpIHtcbiAgICAgICAgb3V0ICs9ICdsb25nZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICdzaG9ydGVyJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIHRoYW4gJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBjaGFyYWN0ZXJzXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJ30gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9fbGltaXRQcm9wZXJ0aWVzKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRvcCA9ICRrZXl3b3JkID09ICdtYXhQcm9wZXJ0aWVzJyA/ICc+JyA6ICc8JztcbiAgb3V0ICs9ICdpZiAoICc7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPSBcXCdudW1iZXJcXCcpIHx8ICc7XG4gIH1cbiAgb3V0ICs9ICcgT2JqZWN0LmtleXMoJyArICgkZGF0YSkgKyAnKS5sZW5ndGggJyArICgkb3ApICsgJyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnKSB7ICc7XG4gIHZhciAkZXJyb3JLZXl3b3JkID0gJGtleXdvcmQ7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdfbGltaXRQcm9wZXJ0aWVzJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBsaW1pdDogJyArICgkc2NoZW1hVmFsdWUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBOT1QgaGF2ZSAnO1xuICAgICAgaWYgKCRrZXl3b3JkID09ICdtYXhQcm9wZXJ0aWVzJykge1xuICAgICAgICBvdXQgKz0gJ21vcmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICdsZXNzJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIHRoYW4gJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyBwcm9wZXJ0aWVzXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJ30gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9hbGxPZihpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGN1cnJlbnRCYXNlSWQgPSAkaXQuYmFzZUlkLFxuICAgICRhbGxTY2hlbWFzRW1wdHkgPSB0cnVlO1xuICB2YXIgYXJyMSA9ICRzY2hlbWE7XG4gIGlmIChhcnIxKSB7XG4gICAgdmFyICRzY2gsICRpID0gLTEsXG4gICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoJGkgPCBsMSkge1xuICAgICAgJHNjaCA9IGFycjFbJGkgKz0gMV07XG4gICAgICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICAgICRhbGxTY2hlbWFzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICRpdC5zY2hlbWFQYXRoID0gJHNjaGVtYVBhdGggKyAnWycgKyAkaSArICddJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRpO1xuICAgICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIGlmICgkYWxsU2NoZW1hc0VtcHR5KSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzLnNsaWNlKDAsIC0xKSkgKyAnICc7XG4gICAgfVxuICB9XG4gIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfYW55T2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRub0VtcHR5U2NoZW1hID0gJHNjaGVtYS5ldmVyeShmdW5jdGlvbigkc2NoKSB7XG4gICAgcmV0dXJuIGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKTtcbiAgfSk7XG4gIGlmICgkbm9FbXB0eVNjaGVtYSkge1xuICAgIHZhciAkY3VycmVudEJhc2VJZCA9ICRpdC5iYXNlSWQ7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsgdmFyICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgICc7XG4gICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9IHRydWU7XG4gICAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICAgIGlmIChhcnIxKSB7XG4gICAgICB2YXIgJHNjaCwgJGkgPSAtMSxcbiAgICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoJGkgPCBsMSkge1xuICAgICAgICAkc2NoID0gYXJyMVskaSArPSAxXTtcbiAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICRpdC5zY2hlbWFQYXRoID0gJHNjaGVtYVBhdGggKyAnWycgKyAkaSArICddJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRpO1xuICAgICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkdmFsaWQpICsgJyB8fCAnICsgKCRuZXh0VmFsaWQpICsgJzsgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICc7XG4gICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgIH1cbiAgICB9XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdhbnlPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggc29tZSBzY2hlbWEgaW4gYW55T2ZcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHZFcnJvcnMpOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXQgKz0gJyB9IGVsc2UgeyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSAnO1xuICAgIGlmIChpdC5vcHRzLmFsbEVycm9ycykge1xuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2NvbW1lbnQoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGNvbW1lbnQgPSBpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRzY2hlbWEpO1xuICBpZiAoaXQub3B0cy4kY29tbWVudCA9PT0gdHJ1ZSkge1xuICAgIG91dCArPSAnIGNvbnNvbGUubG9nKCcgKyAoJGNvbW1lbnQpICsgJyk7JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgaXQub3B0cy4kY29tbWVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgb3V0ICs9ICcgc2VsZi5fb3B0cy4kY29tbWVudCgnICsgKCRjb21tZW50KSArICcsICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJywgdmFsaWRhdGUucm9vdC5zY2hlbWEpOyc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfY29uc3QoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgaWYgKCEkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnOyc7XG4gIH1cbiAgb3V0ICs9ICd2YXIgJyArICgkdmFsaWQpICsgJyA9IGVxdWFsKCcgKyAoJGRhdGEpICsgJywgc2NoZW1hJyArICgkbHZsKSArICcpOyBpZiAoIScgKyAoJHZhbGlkKSArICcpIHsgICAnO1xuICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ2NvbnN0JykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBhbGxvd2VkVmFsdWU6IHNjaGVtYScgKyAoJGx2bCkgKyAnIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGJlIGVxdWFsIHRvIGNvbnN0YW50XFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIHZhciBfX2VyciA9IG91dDtcbiAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICB9XG4gIG91dCArPSAnIH0nO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2NvbnRhaW5zKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgdmFyICRjbG9zaW5nQnJhY2VzID0gJyc7XG4gICRpdC5sZXZlbCsrO1xuICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gIHZhciAkaWR4ID0gJ2knICsgJGx2bCxcbiAgICAkZGF0YU54dCA9ICRpdC5kYXRhTGV2ZWwgPSBpdC5kYXRhTGV2ZWwgKyAxLFxuICAgICRuZXh0RGF0YSA9ICdkYXRhJyArICRkYXRhTnh0LFxuICAgICRjdXJyZW50QmFzZUlkID0gaXQuYmFzZUlkLFxuICAgICRub25FbXB0eVNjaGVtYSA9IGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaGVtYSwgaXQuUlVMRVMuYWxsKTtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCR2YWxpZCkgKyAnOyc7XG4gIGlmICgkbm9uRW1wdHlTY2hlbWEpIHtcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHRWYWxpZCkgKyAnID0gZmFsc2U7IGZvciAodmFyICcgKyAoJGlkeCkgKyAnID0gMDsgJyArICgkaWR4KSArICcgPCAnICsgKCRkYXRhKSArICcubGVuZ3RoOyAnICsgKCRpZHgpICsgJysrKSB7ICc7XG4gICAgJGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAkaWR4LCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGlkeCArICddJztcbiAgICAkaXQuZGF0YVBhdGhBcnJbJGRhdGFOeHRdID0gJGlkeDtcbiAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7IH0gICc7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgeyc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGEpICsgJy5sZW5ndGggPT0gMCkgeyc7XG4gIH1cbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdjb250YWlucycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBjb250YWluIGEgdmFsaWQgaXRlbVxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJyB9IGVsc2UgeyAnO1xuICBpZiAoJG5vbkVtcHR5U2NoZW1hKSB7XG4gICAgb3V0ICs9ICcgIGVycm9ycyA9ICcgKyAoJGVycnMpICsgJzsgaWYgKHZFcnJvcnMgIT09IG51bGwpIHsgaWYgKCcgKyAoJGVycnMpICsgJykgdkVycm9ycy5sZW5ndGggPSAnICsgKCRlcnJzKSArICc7IGVsc2UgdkVycm9ycyA9IG51bGw7IH0gJztcbiAgfVxuICBpZiAoaXQub3B0cy5hbGxFcnJvcnMpIHtcbiAgICBvdXQgKz0gJyB9ICc7XG4gIH1cbiAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9jdXN0b20oaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRlcnJvcktleXdvcmQ7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRydWxlID0gdGhpcyxcbiAgICAkZGVmaW5pdGlvbiA9ICdkZWZpbml0aW9uJyArICRsdmwsXG4gICAgJHJEZWYgPSAkcnVsZS5kZWZpbml0aW9uLFxuICAgICRjbG9zaW5nQnJhY2VzID0gJyc7XG4gIHZhciAkY29tcGlsZSwgJGlubGluZSwgJG1hY3JvLCAkcnVsZVZhbGlkYXRlLCAkdmFsaWRhdGVDb2RlO1xuICBpZiAoJGlzRGF0YSAmJiAkckRlZi4kZGF0YSkge1xuICAgICR2YWxpZGF0ZUNvZGUgPSAna2V5d29yZFZhbGlkYXRlJyArICRsdmw7XG4gICAgdmFyICR2YWxpZGF0ZVNjaGVtYSA9ICRyRGVmLnZhbGlkYXRlU2NoZW1hO1xuICAgIG91dCArPSAnIHZhciAnICsgKCRkZWZpbml0aW9uKSArICcgPSBSVUxFUy5jdXN0b21bXFwnJyArICgka2V5d29yZCkgKyAnXFwnXS5kZWZpbml0aW9uOyB2YXIgJyArICgkdmFsaWRhdGVDb2RlKSArICcgPSAnICsgKCRkZWZpbml0aW9uKSArICcudmFsaWRhdGU7JztcbiAgfSBlbHNlIHtcbiAgICAkcnVsZVZhbGlkYXRlID0gaXQudXNlQ3VzdG9tUnVsZSgkcnVsZSwgJHNjaGVtYSwgaXQuc2NoZW1hLCBpdCk7XG4gICAgaWYgKCEkcnVsZVZhbGlkYXRlKSByZXR1cm47XG4gICAgJHNjaGVtYVZhbHVlID0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAkc2NoZW1hUGF0aDtcbiAgICAkdmFsaWRhdGVDb2RlID0gJHJ1bGVWYWxpZGF0ZS5jb2RlO1xuICAgICRjb21waWxlID0gJHJEZWYuY29tcGlsZTtcbiAgICAkaW5saW5lID0gJHJEZWYuaW5saW5lO1xuICAgICRtYWNybyA9ICRyRGVmLm1hY3JvO1xuICB9XG4gIHZhciAkcnVsZUVycnMgPSAkdmFsaWRhdGVDb2RlICsgJy5lcnJvcnMnLFxuICAgICRpID0gJ2knICsgJGx2bCxcbiAgICAkcnVsZUVyciA9ICdydWxlRXJyJyArICRsdmwsXG4gICAgJGFzeW5jS2V5d29yZCA9ICRyRGVmLmFzeW5jO1xuICBpZiAoJGFzeW5jS2V5d29yZCAmJiAhaXQuYXN5bmMpIHRocm93IG5ldyBFcnJvcignYXN5bmMga2V5d29yZCBpbiBzeW5jIHNjaGVtYScpO1xuICBpZiAoISgkaW5saW5lIHx8ICRtYWNybykpIHtcbiAgICBvdXQgKz0gJycgKyAoJHJ1bGVFcnJzKSArICcgPSBudWxsOyc7XG4gIH1cbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCR2YWxpZCkgKyAnOyc7XG4gIGlmICgkaXNEYXRhICYmICRyRGVmLiRkYXRhKSB7XG4gICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgIG91dCArPSAnIGlmICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnID09PSB1bmRlZmluZWQpIHsgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IH0gZWxzZSB7ICc7XG4gICAgaWYgKCR2YWxpZGF0ZVNjaGVtYSkge1xuICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICcgKyAoJGRlZmluaXRpb24pICsgJy52YWxpZGF0ZVNjaGVtYSgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnKTsgaWYgKCcgKyAoJHZhbGlkKSArICcpIHsgJztcbiAgICB9XG4gIH1cbiAgaWYgKCRpbmxpbmUpIHtcbiAgICBpZiAoJHJEZWYuc3RhdGVtZW50cykge1xuICAgICAgb3V0ICs9ICcgJyArICgkcnVsZVZhbGlkYXRlLnZhbGlkYXRlKSArICcgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICcgKyAoJHJ1bGVWYWxpZGF0ZS52YWxpZGF0ZSkgKyAnOyAnO1xuICAgIH1cbiAgfSBlbHNlIGlmICgkbWFjcm8pIHtcbiAgICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgICAkaXQubGV2ZWwrKztcbiAgICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gICAgJGl0LnNjaGVtYSA9ICRydWxlVmFsaWRhdGUudmFsaWRhdGU7XG4gICAgJGl0LnNjaGVtYVBhdGggPSAnJztcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpLnJlcGxhY2UoL3ZhbGlkYXRlXFwuc2NoZW1hL2csICR2YWxpZGF0ZUNvZGUpO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgb3V0ICs9ICcgJyArICgkY29kZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnO1xuICAgIG91dCArPSAnICAnICsgKCR2YWxpZGF0ZUNvZGUpICsgJy5jYWxsKCAnO1xuICAgIGlmIChpdC5vcHRzLnBhc3NDb250ZXh0KSB7XG4gICAgICBvdXQgKz0gJ3RoaXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJ3NlbGYnO1xuICAgIH1cbiAgICBpZiAoJGNvbXBpbGUgfHwgJHJEZWYuc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCAnICsgKCRkYXRhKSArICcgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgLCAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICwgJyArICgkZGF0YSkgKyAnICwgdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgLCAoZGF0YVBhdGggfHwgXFwnXFwnKSc7XG4gICAgaWYgKGl0LmVycm9yUGF0aCAhPSAnXCJcIicpIHtcbiAgICAgIG91dCArPSAnICsgJyArIChpdC5lcnJvclBhdGgpO1xuICAgIH1cbiAgICB2YXIgJHBhcmVudERhdGEgPSAkZGF0YUx2bCA/ICdkYXRhJyArICgoJGRhdGFMdmwgLSAxKSB8fCAnJykgOiAncGFyZW50RGF0YScsXG4gICAgICAkcGFyZW50RGF0YVByb3BlcnR5ID0gJGRhdGFMdmwgPyBpdC5kYXRhUGF0aEFyclskZGF0YUx2bF0gOiAncGFyZW50RGF0YVByb3BlcnR5JztcbiAgICBvdXQgKz0gJyAsICcgKyAoJHBhcmVudERhdGEpICsgJyAsICcgKyAoJHBhcmVudERhdGFQcm9wZXJ0eSkgKyAnICwgcm9vdERhdGEgKSAgJztcbiAgICB2YXIgZGVmX2NhbGxSdWxlVmFsaWRhdGUgPSBvdXQ7XG4gICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICBpZiAoJHJEZWYuZXJyb3JzID09PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICc7XG4gICAgICBpZiAoJGFzeW5jS2V5d29yZCkge1xuICAgICAgICBvdXQgKz0gJ2F3YWl0ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJycgKyAoZGVmX2NhbGxSdWxlVmFsaWRhdGUpICsgJzsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCRhc3luY0tleXdvcmQpIHtcbiAgICAgICAgJHJ1bGVFcnJzID0gJ2N1c3RvbUVycm9ycycgKyAkbHZsO1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkcnVsZUVycnMpICsgJyA9IG51bGw7IHRyeSB7ICcgKyAoJHZhbGlkKSArICcgPSBhd2FpdCAnICsgKGRlZl9jYWxsUnVsZVZhbGlkYXRlKSArICc7IH0gY2F0Y2ggKGUpIHsgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBpZiAoZSBpbnN0YW5jZW9mIFZhbGlkYXRpb25FcnJvcikgJyArICgkcnVsZUVycnMpICsgJyA9IGUuZXJyb3JzOyBlbHNlIHRocm93IGU7IH0gJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnICcgKyAoJHJ1bGVFcnJzKSArICcgPSBudWxsOyAnICsgKCR2YWxpZCkgKyAnID0gJyArIChkZWZfY2FsbFJ1bGVWYWxpZGF0ZSkgKyAnOyAnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJHJEZWYubW9kaWZ5aW5nKSB7XG4gICAgb3V0ICs9ICcgaWYgKCcgKyAoJHBhcmVudERhdGEpICsgJykgJyArICgkZGF0YSkgKyAnID0gJyArICgkcGFyZW50RGF0YSkgKyAnWycgKyAoJHBhcmVudERhdGFQcm9wZXJ0eSkgKyAnXTsnO1xuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcyk7XG4gIGlmICgkckRlZi52YWxpZCkge1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyBpZiAoICc7XG4gICAgaWYgKCRyRGVmLnZhbGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dCArPSAnICEnO1xuICAgICAgaWYgKCRtYWNybykge1xuICAgICAgICBvdXQgKz0gJycgKyAoJG5leHRWYWxpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHZhbGlkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgJyArICghJHJEZWYudmFsaWQpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJykgeyAnO1xuICAgICRlcnJvcktleXdvcmQgPSAkcnVsZS5rZXl3b3JkO1xuICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICBvdXQgPSAnJztcbiAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdjdXN0b20nKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGtleXdvcmQ6IFxcJycgKyAoJHJ1bGUua2V5d29yZCkgKyAnXFwnIH0gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBwYXNzIFwiJyArICgkcnVsZS5rZXl3b3JkKSArICdcIiBrZXl3b3JkIHZhbGlkYXRpb25cXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIHZhciBkZWZfY3VzdG9tRXJyb3IgPSBvdXQ7XG4gICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICBpZiAoJGlubGluZSkge1xuICAgICAgaWYgKCRyRGVmLmVycm9ycykge1xuICAgICAgICBpZiAoJHJEZWYuZXJyb3JzICE9ICdmdWxsJykge1xuICAgICAgICAgIG91dCArPSAnICBmb3IgKHZhciAnICsgKCRpKSArICc9JyArICgkZXJycykgKyAnOyAnICsgKCRpKSArICc8ZXJyb3JzOyAnICsgKCRpKSArICcrKykgeyB2YXIgJyArICgkcnVsZUVycikgKyAnID0gdkVycm9yc1snICsgKCRpKSArICddOyBpZiAoJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID09PSB1bmRlZmluZWQpICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhUGF0aCA9IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJzsgaWYgKCcgKyAoJHJ1bGVFcnIpICsgJy5zY2hlbWFQYXRoID09PSB1bmRlZmluZWQpIHsgJyArICgkcnVsZUVycikgKyAnLnNjaGVtYVBhdGggPSBcIicgKyAoJGVyclNjaGVtYVBhdGgpICsgJ1wiOyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgJyArICgkcnVsZUVycikgKyAnLnNjaGVtYSA9ICcgKyAoJHNjaGVtYVZhbHVlKSArICc7ICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhID0gJyArICgkZGF0YSkgKyAnOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkckRlZi5lcnJvcnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgJyArIChkZWZfY3VzdG9tRXJyb3IpICsgJyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7ICcgKyAoZGVmX2N1c3RvbUVycm9yKSArICcgfSBlbHNlIHsgIGZvciAodmFyICcgKyAoJGkpICsgJz0nICsgKCRlcnJzKSArICc7ICcgKyAoJGkpICsgJzxlcnJvcnM7ICcgKyAoJGkpICsgJysrKSB7IHZhciAnICsgKCRydWxlRXJyKSArICcgPSB2RXJyb3JzWycgKyAoJGkpICsgJ107IGlmICgnICsgKCRydWxlRXJyKSArICcuZGF0YVBhdGggPT09IHVuZGVmaW5lZCkgJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID0gKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnOyBpZiAoJyArICgkcnVsZUVycikgKyAnLnNjaGVtYVBhdGggPT09IHVuZGVmaW5lZCkgeyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hUGF0aCA9IFwiJyArICgkZXJyU2NoZW1hUGF0aCkgKyAnXCI7IH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hID0gJyArICgkc2NoZW1hVmFsdWUpICsgJzsgJyArICgkcnVsZUVycikgKyAnLmRhdGEgPSAnICsgKCRkYXRhKSArICc7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gfSAnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkbWFjcm8pIHtcbiAgICAgIG91dCArPSAnICAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdjdXN0b20nKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGtleXdvcmQ6IFxcJycgKyAoJHJ1bGUua2V5d29yZCkgKyAnXFwnIH0gJztcbiAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgcGFzcyBcIicgKyAoJHJ1bGUua2V5d29yZCkgKyAnXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSB2RXJyb3JzOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCRyRGVmLmVycm9ycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArIChkZWZfY3VzdG9tRXJyb3IpICsgJyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKEFycmF5LmlzQXJyYXkoJyArICgkcnVsZUVycnMpICsgJykpIHsgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSAnICsgKCRydWxlRXJycykgKyAnOyBlbHNlIHZFcnJvcnMgPSB2RXJyb3JzLmNvbmNhdCgnICsgKCRydWxlRXJycykgKyAnKTsgZXJyb3JzID0gdkVycm9ycy5sZW5ndGg7ICBmb3IgKHZhciAnICsgKCRpKSArICc9JyArICgkZXJycykgKyAnOyAnICsgKCRpKSArICc8ZXJyb3JzOyAnICsgKCRpKSArICcrKykgeyB2YXIgJyArICgkcnVsZUVycikgKyAnID0gdkVycm9yc1snICsgKCRpKSArICddOyBpZiAoJyArICgkcnVsZUVycikgKyAnLmRhdGFQYXRoID09PSB1bmRlZmluZWQpICcgKyAoJHJ1bGVFcnIpICsgJy5kYXRhUGF0aCA9IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJzsgICcgKyAoJHJ1bGVFcnIpICsgJy5zY2hlbWFQYXRoID0gXCInICsgKCRlcnJTY2hlbWFQYXRoKSArICdcIjsgICc7XG4gICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAnICsgKCRydWxlRXJyKSArICcuc2NoZW1hID0gJyArICgkc2NoZW1hVmFsdWUpICsgJzsgJyArICgkcnVsZUVycikgKyAnLmRhdGEgPSAnICsgKCRkYXRhKSArICc7ICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSB9IGVsc2UgeyAnICsgKGRlZl9jdXN0b21FcnJvcikgKyAnIH0gJztcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfZGVwZW5kZW5jaWVzKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJHNjaGVtYURlcHMgPSB7fSxcbiAgICAkcHJvcGVydHlEZXBzID0ge30sXG4gICAgJG93blByb3BlcnRpZXMgPSBpdC5vcHRzLm93blByb3BlcnRpZXM7XG4gIGZvciAoJHByb3BlcnR5IGluICRzY2hlbWEpIHtcbiAgICB2YXIgJHNjaCA9ICRzY2hlbWFbJHByb3BlcnR5XTtcbiAgICB2YXIgJGRlcHMgPSBBcnJheS5pc0FycmF5KCRzY2gpID8gJHByb3BlcnR5RGVwcyA6ICRzY2hlbWFEZXBzO1xuICAgICRkZXBzWyRwcm9wZXJ0eV0gPSAkc2NoO1xuICB9XG4gIG91dCArPSAndmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsnO1xuICB2YXIgJGN1cnJlbnRFcnJvclBhdGggPSBpdC5lcnJvclBhdGg7XG4gIG91dCArPSAndmFyIG1pc3NpbmcnICsgKCRsdmwpICsgJzsnO1xuICBmb3IgKHZhciAkcHJvcGVydHkgaW4gJHByb3BlcnR5RGVwcykge1xuICAgICRkZXBzID0gJHByb3BlcnR5RGVwc1skcHJvcGVydHldO1xuICAgIGlmICgkZGVwcy5sZW5ndGgpIHtcbiAgICAgIG91dCArPSAnIGlmICggJyArICgkZGF0YSkgKyAoaXQudXRpbC5nZXRQcm9wZXJ0eSgkcHJvcGVydHkpKSArICcgIT09IHVuZGVmaW5lZCAnO1xuICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG91dCArPSAnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnXFwnKSAnO1xuICAgICAgfVxuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgJiYgKCAnO1xuICAgICAgICB2YXIgYXJyMSA9ICRkZXBzO1xuICAgICAgICBpZiAoYXJyMSkge1xuICAgICAgICAgIHZhciAkcHJvcGVydHlLZXksICRpID0gLTEsXG4gICAgICAgICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICAgICAgICB3aGlsZSAoJGkgPCBsMSkge1xuICAgICAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyMVskaSArPSAxXTtcbiAgICAgICAgICAgIGlmICgkaSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyICRwcm9wID0gaXQudXRpbC5nZXRQcm9wZXJ0eSgkcHJvcGVydHlLZXkpLFxuICAgICAgICAgICAgICAkdXNlRGF0YSA9ICRkYXRhICsgJHByb3A7XG4gICAgICAgICAgICBvdXQgKz0gJyAoICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcpICYmIChtaXNzaW5nJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoaXQub3B0cy5qc29uUG9pbnRlcnMgPyAkcHJvcGVydHlLZXkgOiAkcHJvcCkpICsgJykgKSAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJykpIHsgICc7XG4gICAgICAgIHZhciAkcHJvcGVydHlQYXRoID0gJ21pc3NpbmcnICsgJGx2bCxcbiAgICAgICAgICAkbWlzc2luZ1Byb3BlcnR5ID0gJ1xcJyArICcgKyAkcHJvcGVydHlQYXRoICsgJyArIFxcJyc7XG4gICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICBpdC5lcnJvclBhdGggPSBpdC5vcHRzLmpzb25Qb2ludGVycyA/IGl0LnV0aWwuZ2V0UGF0aEV4cHIoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eVBhdGgsIHRydWUpIDogJGN1cnJlbnRFcnJvclBhdGggKyAnICsgJyArICRwcm9wZXJ0eVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdkZXBlbmRlbmNpZXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IHByb3BlcnR5OiBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eSkpICsgJ1xcJywgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJywgZGVwc0NvdW50OiAnICsgKCRkZXBzLmxlbmd0aCkgKyAnLCBkZXBzOiBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRkZXBzLmxlbmd0aCA9PSAxID8gJGRlcHNbMF0gOiAkZGVwcy5qb2luKFwiLCBcIikpKSArICdcXCcgfSAnO1xuICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgaGF2ZSAnO1xuICAgICAgICAgICAgaWYgKCRkZXBzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgIG91dCArPSAncHJvcGVydHkgJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwc1swXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICdwcm9wZXJ0aWVzICcgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJGRlcHMuam9pbihcIiwgXCIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJyB3aGVuIHByb3BlcnR5ICcgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnIGlzIHByZXNlbnRcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnICkgeyAnO1xuICAgICAgICB2YXIgYXJyMiA9ICRkZXBzO1xuICAgICAgICBpZiAoYXJyMikge1xuICAgICAgICAgIHZhciAkcHJvcGVydHlLZXksIGkyID0gLTEsXG4gICAgICAgICAgICBsMiA9IGFycjIubGVuZ3RoIC0gMTtcbiAgICAgICAgICB3aGlsZSAoaTIgPCBsMikge1xuICAgICAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyMltpMiArPSAxXTtcbiAgICAgICAgICAgIHZhciAkcHJvcCA9IGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9IGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICAgICR1c2VEYXRhID0gJGRhdGEgKyAkcHJvcDtcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoKCRjdXJyZW50RXJyb3JQYXRoLCAkcHJvcGVydHlLZXksIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnIGlmICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB8fCAhIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSkgKyAnXFwnKSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcpIHsgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ2RlcGVuZGVuY2llcycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcHJvcGVydHk6IFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnXFwnLCBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnLCBkZXBzQ291bnQ6ICcgKyAoJGRlcHMubGVuZ3RoKSArICcsIGRlcHM6IFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJGRlcHMubGVuZ3RoID09IDEgPyAkZGVwc1swXSA6ICRkZXBzLmpvaW4oXCIsIFwiKSkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGhhdmUgJztcbiAgICAgICAgICAgICAgICBpZiAoJGRlcHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAncHJvcGVydHkgJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwc1swXSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJ3Byb3BlcnRpZXMgJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkZGVwcy5qb2luKFwiLCBcIikpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgd2hlbiBwcm9wZXJ0eSAnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eSkpICsgJyBpcyBwcmVzZW50XFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7IH0gJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gICAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXQuZXJyb3JQYXRoID0gJGN1cnJlbnRFcnJvclBhdGg7XG4gIHZhciAkY3VycmVudEJhc2VJZCA9ICRpdC5iYXNlSWQ7XG4gIGZvciAodmFyICRwcm9wZXJ0eSBpbiAkc2NoZW1hRGVwcykge1xuICAgIHZhciAkc2NoID0gJHNjaGVtYURlcHNbJHByb3BlcnR5XTtcbiAgICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7IGlmICggJyArICgkZGF0YSkgKyAoaXQudXRpbC5nZXRQcm9wZXJ0eSgkcHJvcGVydHkpKSArICcgIT09IHVuZGVmaW5lZCAnO1xuICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG91dCArPSAnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgnICsgKCRkYXRhKSArICcsIFxcJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5KSkgKyAnXFwnKSAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcpIHsgJztcbiAgICAgICRpdC5zY2hlbWEgPSAkc2NoO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJHByb3BlcnR5KTtcbiAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGggKyAnLycgKyBpdC51dGlsLmVzY2FwZUZyYWdtZW50KCRwcm9wZXJ0eSk7XG4gICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgIG91dCArPSAnIH0gICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnICAgJyArICgkY2xvc2luZ0JyYWNlcykgKyAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7JztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2VudW0oaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGlzRGF0YSA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYSAmJiAkc2NoZW1hLiRkYXRhLFxuICAgICRzY2hlbWFWYWx1ZTtcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hJyArICgkbHZsKSArICcgPSAnICsgKGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hLiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlID0gJ3NjaGVtYScgKyAkbHZsO1xuICB9IGVsc2Uge1xuICAgICRzY2hlbWFWYWx1ZSA9ICRzY2hlbWE7XG4gIH1cbiAgdmFyICRpID0gJ2knICsgJGx2bCxcbiAgICAkdlNjaGVtYSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgaWYgKCEkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJHZTY2hlbWEpICsgJyA9IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJzsnO1xuICB9XG4gIG91dCArPSAndmFyICcgKyAoJHZhbGlkKSArICc7JztcbiAgaWYgKCRpc0RhdGEpIHtcbiAgICBvdXQgKz0gJyBpZiAoc2NoZW1hJyArICgkbHZsKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYScgKyAoJGx2bCkgKyAnKSkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsnO1xuICB9XG4gIG91dCArPSAnJyArICgkdmFsaWQpICsgJyA9IGZhbHNlO2ZvciAodmFyICcgKyAoJGkpICsgJz0wOyAnICsgKCRpKSArICc8JyArICgkdlNjaGVtYSkgKyAnLmxlbmd0aDsgJyArICgkaSkgKyAnKyspIGlmIChlcXVhbCgnICsgKCRkYXRhKSArICcsICcgKyAoJHZTY2hlbWEpICsgJ1snICsgKCRpKSArICddKSkgeyAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgYnJlYWs7IH0nO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnICB9ICAnO1xuICB9XG4gIG91dCArPSAnIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgICc7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnZW51bScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgYWxsb3dlZFZhbHVlczogc2NoZW1hJyArICgkbHZsKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgYmUgZXF1YWwgdG8gb25lIG9mIHRoZSBhbGxvd2VkIHZhbHVlc1xcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJyB9JztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9mb3JtYXQoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgaWYgKGl0Lm9wdHMuZm9ybWF0ID09PSBmYWxzZSkge1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHZhciAkaXNEYXRhID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hICYmICRzY2hlbWEuJGRhdGEsXG4gICAgJHNjaGVtYVZhbHVlO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC5nZXREYXRhKCRzY2hlbWEuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFycikpICsgJzsgJztcbiAgICAkc2NoZW1hVmFsdWUgPSAnc2NoZW1hJyArICRsdmw7XG4gIH0gZWxzZSB7XG4gICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYTtcbiAgfVxuICB2YXIgJHVua25vd25Gb3JtYXRzID0gaXQub3B0cy51bmtub3duRm9ybWF0cyxcbiAgICAkYWxsb3dVbmtub3duID0gQXJyYXkuaXNBcnJheSgkdW5rbm93bkZvcm1hdHMpO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIHZhciAkZm9ybWF0ID0gJ2Zvcm1hdCcgKyAkbHZsLFxuICAgICAgJGlzT2JqZWN0ID0gJ2lzT2JqZWN0JyArICRsdmwsXG4gICAgICAkZm9ybWF0VHlwZSA9ICdmb3JtYXRUeXBlJyArICRsdmw7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGZvcm1hdCkgKyAnID0gZm9ybWF0c1snICsgKCRzY2hlbWFWYWx1ZSkgKyAnXTsgdmFyICcgKyAoJGlzT2JqZWN0KSArICcgPSB0eXBlb2YgJyArICgkZm9ybWF0KSArICcgPT0gXFwnb2JqZWN0XFwnICYmICEoJyArICgkZm9ybWF0KSArICcgaW5zdGFuY2VvZiBSZWdFeHApICYmICcgKyAoJGZvcm1hdCkgKyAnLnZhbGlkYXRlOyB2YXIgJyArICgkZm9ybWF0VHlwZSkgKyAnID0gJyArICgkaXNPYmplY3QpICsgJyAmJiAnICsgKCRmb3JtYXQpICsgJy50eXBlIHx8IFxcJ3N0cmluZ1xcJzsgaWYgKCcgKyAoJGlzT2JqZWN0KSArICcpIHsgJztcbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHZhciBhc3luYycgKyAoJGx2bCkgKyAnID0gJyArICgkZm9ybWF0KSArICcuYXN5bmM7ICc7XG4gICAgfVxuICAgIG91dCArPSAnICcgKyAoJGZvcm1hdCkgKyAnID0gJyArICgkZm9ybWF0KSArICcudmFsaWRhdGU7IH0gaWYgKCAgJztcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPSBcXCdzdHJpbmdcXCcpIHx8ICc7XG4gICAgfVxuICAgIG91dCArPSAnICgnO1xuICAgIGlmICgkdW5rbm93bkZvcm1hdHMgIT0gJ2lnbm9yZScpIHtcbiAgICAgIG91dCArPSAnICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICYmICEnICsgKCRmb3JtYXQpICsgJyAnO1xuICAgICAgaWYgKCRhbGxvd1Vua25vd24pIHtcbiAgICAgICAgb3V0ICs9ICcgJiYgc2VsZi5fb3B0cy51bmtub3duRm9ybWF0cy5pbmRleE9mKCcgKyAoJHNjaGVtYVZhbHVlKSArICcpID09IC0xICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJykgfHwgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgKCcgKyAoJGZvcm1hdCkgKyAnICYmICcgKyAoJGZvcm1hdFR5cGUpICsgJyA9PSBcXCcnICsgKCRydWxlVHlwZSkgKyAnXFwnICYmICEodHlwZW9mICcgKyAoJGZvcm1hdCkgKyAnID09IFxcJ2Z1bmN0aW9uXFwnID8gJztcbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIChhc3luYycgKyAoJGx2bCkgKyAnID8gYXdhaXQgJyArICgkZm9ybWF0KSArICcoJyArICgkZGF0YSkgKyAnKSA6ICcgKyAoJGZvcm1hdCkgKyAnKCcgKyAoJGRhdGEpICsgJykpICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnICcgKyAoJGZvcm1hdCkgKyAnKCcgKyAoJGRhdGEpICsgJykgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgOiAnICsgKCRmb3JtYXQpICsgJy50ZXN0KCcgKyAoJGRhdGEpICsgJykpKSkpIHsnO1xuICB9IGVsc2Uge1xuICAgIHZhciAkZm9ybWF0ID0gaXQuZm9ybWF0c1skc2NoZW1hXTtcbiAgICBpZiAoISRmb3JtYXQpIHtcbiAgICAgIGlmICgkdW5rbm93bkZvcm1hdHMgPT0gJ2lnbm9yZScpIHtcbiAgICAgICAgaXQubG9nZ2VyLndhcm4oJ3Vua25vd24gZm9ybWF0IFwiJyArICRzY2hlbWEgKyAnXCIgaWdub3JlZCBpbiBzY2hlbWEgYXQgcGF0aCBcIicgKyBpdC5lcnJTY2hlbWFQYXRoICsgJ1wiJyk7XG4gICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgb3V0ICs9ICcgaWYgKHRydWUpIHsgJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSBlbHNlIGlmICgkYWxsb3dVbmtub3duICYmICR1bmtub3duRm9ybWF0cy5pbmRleE9mKCRzY2hlbWEpID49IDApIHtcbiAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gZm9ybWF0IFwiJyArICRzY2hlbWEgKyAnXCIgaXMgdXNlZCBpbiBzY2hlbWEgYXQgcGF0aCBcIicgKyBpdC5lcnJTY2hlbWFQYXRoICsgJ1wiJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciAkaXNPYmplY3QgPSB0eXBlb2YgJGZvcm1hdCA9PSAnb2JqZWN0JyAmJiAhKCRmb3JtYXQgaW5zdGFuY2VvZiBSZWdFeHApICYmICRmb3JtYXQudmFsaWRhdGU7XG4gICAgdmFyICRmb3JtYXRUeXBlID0gJGlzT2JqZWN0ICYmICRmb3JtYXQudHlwZSB8fCAnc3RyaW5nJztcbiAgICBpZiAoJGlzT2JqZWN0KSB7XG4gICAgICB2YXIgJGFzeW5jID0gJGZvcm1hdC5hc3luYyA9PT0gdHJ1ZTtcbiAgICAgICRmb3JtYXQgPSAkZm9ybWF0LnZhbGlkYXRlO1xuICAgIH1cbiAgICBpZiAoJGZvcm1hdFR5cGUgIT0gJHJ1bGVUeXBlKSB7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgaWYgKCRhc3luYykge1xuICAgICAgaWYgKCFpdC5hc3luYykgdGhyb3cgbmV3IEVycm9yKCdhc3luYyBmb3JtYXQgaW4gc3luYyBzY2hlbWEnKTtcbiAgICAgIHZhciAkZm9ybWF0UmVmID0gJ2Zvcm1hdHMnICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgkc2NoZW1hKSArICcudmFsaWRhdGUnO1xuICAgICAgb3V0ICs9ICcgaWYgKCEoYXdhaXQgJyArICgkZm9ybWF0UmVmKSArICcoJyArICgkZGF0YSkgKyAnKSkpIHsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgaWYgKCEgJztcbiAgICAgIHZhciAkZm9ybWF0UmVmID0gJ2Zvcm1hdHMnICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgkc2NoZW1hKTtcbiAgICAgIGlmICgkaXNPYmplY3QpICRmb3JtYXRSZWYgKz0gJy52YWxpZGF0ZSc7XG4gICAgICBpZiAodHlwZW9mICRmb3JtYXQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRmb3JtYXRSZWYpICsgJygnICsgKCRkYXRhKSArICcpICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRmb3JtYXRSZWYpICsgJy50ZXN0KCcgKyAoJGRhdGEpICsgJykgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnKSB7ICc7XG4gICAgfVxuICB9XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnZm9ybWF0JykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBmb3JtYXQ6ICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyAgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggZm9ybWF0IFwiJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICdcIlxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICcgfSAnO1xuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX2lmKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICR0aGVuU2NoID0gaXQuc2NoZW1hWyd0aGVuJ10sXG4gICAgJGVsc2VTY2ggPSBpdC5zY2hlbWFbJ2Vsc2UnXSxcbiAgICAkdGhlblByZXNlbnQgPSAkdGhlblNjaCAhPT0gdW5kZWZpbmVkICYmIGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHRoZW5TY2gsIGl0LlJVTEVTLmFsbCksXG4gICAgJGVsc2VQcmVzZW50ID0gJGVsc2VTY2ggIT09IHVuZGVmaW5lZCAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRlbHNlU2NoLCBpdC5SVUxFUy5hbGwpLFxuICAgICRjdXJyZW50QmFzZUlkID0gJGl0LmJhc2VJZDtcbiAgaWYgKCR0aGVuUHJlc2VudCB8fCAkZWxzZVByZXNlbnQpIHtcbiAgICB2YXIgJGlmQ2xhdXNlO1xuICAgICRpdC5jcmVhdGVFcnJvcnMgPSBmYWxzZTtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsgdmFyICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyAgJztcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgJGl0LmNyZWF0ZUVycm9ycyA9IHRydWU7XG4gICAgb3V0ICs9ICcgIGVycm9ycyA9ICcgKyAoJGVycnMpICsgJzsgaWYgKHZFcnJvcnMgIT09IG51bGwpIHsgaWYgKCcgKyAoJGVycnMpICsgJykgdkVycm9ycy5sZW5ndGggPSAnICsgKCRlcnJzKSArICc7IGVsc2UgdkVycm9ycyA9IG51bGw7IH0gICc7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gJHdhc0NvbXBvc2l0ZTtcbiAgICBpZiAoJHRoZW5QcmVzZW50KSB7XG4gICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgICc7XG4gICAgICAkaXQuc2NoZW1hID0gaXQuc2NoZW1hWyd0aGVuJ107XG4gICAgICAkaXQuc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyAnLnRoZW4nO1xuICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy90aGVuJztcbiAgICAgIG91dCArPSAnICAnICsgKGl0LnZhbGlkYXRlKCRpdCkpICsgJyAnO1xuICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICcgKyAoJG5leHRWYWxpZCkgKyAnOyAnO1xuICAgICAgaWYgKCR0aGVuUHJlc2VudCAmJiAkZWxzZVByZXNlbnQpIHtcbiAgICAgICAgJGlmQ2xhdXNlID0gJ2lmQ2xhdXNlJyArICRsdmw7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCRpZkNsYXVzZSkgKyAnID0gXFwndGhlblxcJzsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRpZkNsYXVzZSA9ICdcXCd0aGVuXFwnJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICAgIGlmICgkZWxzZVByZXNlbnQpIHtcbiAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICB9XG4gICAgaWYgKCRlbHNlUHJlc2VudCkge1xuICAgICAgJGl0LnNjaGVtYSA9IGl0LnNjaGVtYVsnZWxzZSddO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5lbHNlJztcbiAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvZWxzZSc7XG4gICAgICBvdXQgKz0gJyAgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgIG91dCArPSAnICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsgJztcbiAgICAgIGlmICgkdGhlblByZXNlbnQgJiYgJGVsc2VQcmVzZW50KSB7XG4gICAgICAgICRpZkNsYXVzZSA9ICdpZkNsYXVzZScgKyAkbHZsO1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkaWZDbGF1c2UpICsgJyA9IFxcJ2Vsc2VcXCc7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkaWZDbGF1c2UgPSAnXFwnZWxzZVxcJyc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgfVxuICAgIG91dCArPSAnIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnaWYnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGZhaWxpbmdLZXl3b3JkOiAnICsgKCRpZkNsYXVzZSkgKyAnIH0gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBtYXRjaCBcIlxcJyArICcgKyAoJGlmQ2xhdXNlKSArICcgKyBcXCdcIiBzY2hlbWFcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHZFcnJvcnMpOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXQgKz0gJyB9ICAgJztcbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgfVxuICAgIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgaWYgKHRydWUpIHsgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLy9hbGwgcmVxdWlyZXMgbXVzdCBiZSBleHBsaWNpdCBiZWNhdXNlIGJyb3dzZXJpZnkgd29uJ3Qgd29yayB3aXRoIGR5bmFtaWMgcmVxdWlyZXNcbm1vZHVsZS5leHBvcnRzID0ge1xuICAnJHJlZic6IHJlcXVpcmUoJy4vcmVmJyksXG4gIGFsbE9mOiByZXF1aXJlKCcuL2FsbE9mJyksXG4gIGFueU9mOiByZXF1aXJlKCcuL2FueU9mJyksXG4gICckY29tbWVudCc6IHJlcXVpcmUoJy4vY29tbWVudCcpLFxuICBjb25zdDogcmVxdWlyZSgnLi9jb25zdCcpLFxuICBjb250YWluczogcmVxdWlyZSgnLi9jb250YWlucycpLFxuICBkZXBlbmRlbmNpZXM6IHJlcXVpcmUoJy4vZGVwZW5kZW5jaWVzJyksXG4gICdlbnVtJzogcmVxdWlyZSgnLi9lbnVtJyksXG4gIGZvcm1hdDogcmVxdWlyZSgnLi9mb3JtYXQnKSxcbiAgJ2lmJzogcmVxdWlyZSgnLi9pZicpLFxuICBpdGVtczogcmVxdWlyZSgnLi9pdGVtcycpLFxuICBtYXhpbXVtOiByZXF1aXJlKCcuL19saW1pdCcpLFxuICBtaW5pbXVtOiByZXF1aXJlKCcuL19saW1pdCcpLFxuICBtYXhJdGVtczogcmVxdWlyZSgnLi9fbGltaXRJdGVtcycpLFxuICBtaW5JdGVtczogcmVxdWlyZSgnLi9fbGltaXRJdGVtcycpLFxuICBtYXhMZW5ndGg6IHJlcXVpcmUoJy4vX2xpbWl0TGVuZ3RoJyksXG4gIG1pbkxlbmd0aDogcmVxdWlyZSgnLi9fbGltaXRMZW5ndGgnKSxcbiAgbWF4UHJvcGVydGllczogcmVxdWlyZSgnLi9fbGltaXRQcm9wZXJ0aWVzJyksXG4gIG1pblByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX2xpbWl0UHJvcGVydGllcycpLFxuICBtdWx0aXBsZU9mOiByZXF1aXJlKCcuL211bHRpcGxlT2YnKSxcbiAgbm90OiByZXF1aXJlKCcuL25vdCcpLFxuICBvbmVPZjogcmVxdWlyZSgnLi9vbmVPZicpLFxuICBwYXR0ZXJuOiByZXF1aXJlKCcuL3BhdHRlcm4nKSxcbiAgcHJvcGVydGllczogcmVxdWlyZSgnLi9wcm9wZXJ0aWVzJyksXG4gIHByb3BlcnR5TmFtZXM6IHJlcXVpcmUoJy4vcHJvcGVydHlOYW1lcycpLFxuICByZXF1aXJlZDogcmVxdWlyZSgnLi9yZXF1aXJlZCcpLFxuICB1bmlxdWVJdGVtczogcmVxdWlyZSgnLi91bmlxdWVJdGVtcycpLFxuICB2YWxpZGF0ZTogcmVxdWlyZSgnLi92YWxpZGF0ZScpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9pdGVtcyhpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGlkeCA9ICdpJyArICRsdmwsXG4gICAgJGRhdGFOeHQgPSAkaXQuZGF0YUxldmVsID0gaXQuZGF0YUxldmVsICsgMSxcbiAgICAkbmV4dERhdGEgPSAnZGF0YScgKyAkZGF0YU54dCxcbiAgICAkY3VycmVudEJhc2VJZCA9IGl0LmJhc2VJZDtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCR2YWxpZCkgKyAnOyc7XG4gIGlmIChBcnJheS5pc0FycmF5KCRzY2hlbWEpKSB7XG4gICAgdmFyICRhZGRpdGlvbmFsSXRlbXMgPSBpdC5zY2hlbWEuYWRkaXRpb25hbEl0ZW1zO1xuICAgIGlmICgkYWRkaXRpb25hbEl0ZW1zID09PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgJyArICgkdmFsaWQpICsgJyA9ICcgKyAoJGRhdGEpICsgJy5sZW5ndGggPD0gJyArICgkc2NoZW1hLmxlbmd0aCkgKyAnOyAnO1xuICAgICAgdmFyICRjdXJyRXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoO1xuICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgb3V0ICs9ICcgIGlmICghJyArICgkdmFsaWQpICsgJykgeyAgICc7XG4gICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdhZGRpdGlvbmFsSXRlbXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGxpbWl0OiAnICsgKCRzY2hlbWEubGVuZ3RoKSArICcgfSAnO1xuICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBOT1QgaGF2ZSBtb3JlIHRoYW4gJyArICgkc2NoZW1hLmxlbmd0aCkgKyAnIGl0ZW1zXFwnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiBmYWxzZSAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgfVxuICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAkZXJyU2NoZW1hUGF0aCA9ICRjdXJyRXJyU2NoZW1hUGF0aDtcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhcnIxID0gJHNjaGVtYTtcbiAgICBpZiAoYXJyMSkge1xuICAgICAgdmFyICRzY2gsICRpID0gLTEsXG4gICAgICAgIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICAgJHNjaCA9IGFycjFbJGkgKz0gMV07XG4gICAgICAgIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2gsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAgICAgICBvdXQgKz0gJyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7IGlmICgnICsgKCRkYXRhKSArICcubGVuZ3RoID4gJyArICgkaSkgKyAnKSB7ICc7XG4gICAgICAgICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGkgKyAnXSc7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRpICsgJ10nO1xuICAgICAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGggKyAnLycgKyAkaTtcbiAgICAgICAgICAkaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoRXhwcihpdC5lcnJvclBhdGgsICRpLCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpO1xuICAgICAgICAgIHZhciAkY29kZSA9IGl0LnZhbGlkYXRlKCRpdCk7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICAgIGlmIChpdC51dGlsLnZhck9jY3VyZW5jZXMoJGNvZGUsICRuZXh0RGF0YSkgPCAyKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnV0aWwudmFyUmVwbGFjZSgkY29kZSwgJG5leHREYXRhLCAkcGFzc0RhdGEpKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJG5leHREYXRhKSArICcgPSAnICsgKCRwYXNzRGF0YSkgKyAnOyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAgJztcbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICc7XG4gICAgICAgICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgJGFkZGl0aW9uYWxJdGVtcyA9PSAnb2JqZWN0JyAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRhZGRpdGlvbmFsSXRlbXMsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAgICRpdC5zY2hlbWEgPSAkYWRkaXRpb25hbEl0ZW1zO1xuICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsSXRlbXMnO1xuICAgICAgb3V0ICs9ICcgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyBpZiAoJyArICgkZGF0YSkgKyAnLmxlbmd0aCA+ICcgKyAoJHNjaGVtYS5sZW5ndGgpICsgJykgeyAgZm9yICh2YXIgJyArICgkaWR4KSArICcgPSAnICsgKCRzY2hlbWEubGVuZ3RoKSArICc7ICcgKyAoJGlkeCkgKyAnIDwgJyArICgkZGF0YSkgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyAnO1xuICAgICAgJGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAkaWR4LCBpdC5vcHRzLmpzb25Qb2ludGVycywgdHJ1ZSk7XG4gICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAkaWR4ICsgJ10nO1xuICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpZHg7XG4gICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dERhdGEpICsgJyA9ICcgKyAoJHBhc3NEYXRhKSArICc7ICcgKyAoJGNvZGUpICsgJyAnO1xuICAgICAgfVxuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9IH0gICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkbmV4dFZhbGlkKSArICcpIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2hlbWEsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgIGZvciAodmFyICcgKyAoJGlkeCkgKyAnID0gJyArICgwKSArICc7ICcgKyAoJGlkeCkgKyAnIDwgJyArICgkZGF0YSkgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyAnO1xuICAgICRpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGhFeHByKGl0LmVycm9yUGF0aCwgJGlkeCwgaXQub3B0cy5qc29uUG9pbnRlcnMsIHRydWUpO1xuICAgIHZhciAkcGFzc0RhdGEgPSAkZGF0YSArICdbJyArICRpZHggKyAnXSc7XG4gICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRpZHg7XG4gICAgdmFyICRjb2RlID0gaXQudmFsaWRhdGUoJGl0KTtcbiAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgIG91dCArPSAnICcgKyAoaXQudXRpbC52YXJSZXBsYWNlKCRjb2RlLCAkbmV4dERhdGEsICRwYXNzRGF0YSkpICsgJyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dERhdGEpICsgJyA9ICcgKyAoJHBhc3NEYXRhKSArICc7ICcgKyAoJGNvZGUpICsgJyAnO1xuICAgIH1cbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0nO1xuICB9XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgJyArICgkY2xvc2luZ0JyYWNlcykgKyAnIGlmICgnICsgKCRlcnJzKSArICcgPT0gZXJyb3JzKSB7JztcbiAgfVxuICBvdXQgPSBpdC51dGlsLmNsZWFuVXBDb2RlKG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX211bHRpcGxlT2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIG91dCArPSAndmFyIGRpdmlzaW9uJyArICgkbHZsKSArICc7aWYgKCc7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgJyArICgkc2NoZW1hVmFsdWUpICsgJyAhPT0gdW5kZWZpbmVkICYmICggdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnbnVtYmVyXFwnIHx8ICc7XG4gIH1cbiAgb3V0ICs9ICcgKGRpdmlzaW9uJyArICgkbHZsKSArICcgPSAnICsgKCRkYXRhKSArICcgLyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnLCAnO1xuICBpZiAoaXQub3B0cy5tdWx0aXBsZU9mUHJlY2lzaW9uKSB7XG4gICAgb3V0ICs9ICcgTWF0aC5hYnMoTWF0aC5yb3VuZChkaXZpc2lvbicgKyAoJGx2bCkgKyAnKSAtIGRpdmlzaW9uJyArICgkbHZsKSArICcpID4gMWUtJyArIChpdC5vcHRzLm11bHRpcGxlT2ZQcmVjaXNpb24pICsgJyAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIGRpdmlzaW9uJyArICgkbHZsKSArICcgIT09IHBhcnNlSW50KGRpdmlzaW9uJyArICgkbHZsKSArICcpICc7XG4gIH1cbiAgb3V0ICs9ICcgKSAnO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnICApICAnO1xuICB9XG4gIG91dCArPSAnICkgeyAgICc7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnbXVsdGlwbGVPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbXVsdGlwbGVPZjogJyArICgkc2NoZW1hVmFsdWUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSBtdWx0aXBsZSBvZiAnO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICdcXCcgKyAnICsgKCRzY2hlbWFWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKSArICdcXCcnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWEpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIH1cbiAgb3V0ICs9ICd9ICc7XG4gIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfbm90KGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gICRpdC5sZXZlbCsrO1xuICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2hlbWEsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAkaXQuc2NoZW1hID0gJHNjaGVtYTtcbiAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoO1xuICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGVycnMpICsgJyA9IGVycm9yczsgICc7XG4gICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9IHRydWU7XG4gICAgJGl0LmNyZWF0ZUVycm9ycyA9IGZhbHNlO1xuICAgIHZhciAkYWxsRXJyb3JzT3B0aW9uO1xuICAgIGlmICgkaXQub3B0cy5hbGxFcnJvcnMpIHtcbiAgICAgICRhbGxFcnJvcnNPcHRpb24gPSAkaXQub3B0cy5hbGxFcnJvcnM7XG4gICAgICAkaXQub3B0cy5hbGxFcnJvcnMgPSBmYWxzZTtcbiAgICB9XG4gICAgb3V0ICs9ICcgJyArIChpdC52YWxpZGF0ZSgkaXQpKSArICcgJztcbiAgICAkaXQuY3JlYXRlRXJyb3JzID0gdHJ1ZTtcbiAgICBpZiAoJGFsbEVycm9yc09wdGlvbikgJGl0Lm9wdHMuYWxsRXJyb3JzID0gJGFsbEVycm9yc09wdGlvbjtcbiAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSAkd2FzQ29tcG9zaXRlO1xuICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAgICc7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ25vdCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgTk9UIGJlIHZhbGlkXFwnICc7XG4gICAgICB9XG4gICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgfVxuICAgIHZhciBfX2VyciA9IG91dDtcbiAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9IGVsc2UgeyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSAnO1xuICAgIGlmIChpdC5vcHRzLmFsbEVycm9ycykge1xuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdub3QnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7fSAnO1xuICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBiZSB2YWxpZFxcJyAnO1xuICAgICAgfVxuICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB7fSAnO1xuICAgIH1cbiAgICBvdXQgKz0gJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAoZmFsc2UpIHsgJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfb25lT2YoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGVycnMgPSAnZXJyc19fJyArICRsdmw7XG4gIHZhciAkaXQgPSBpdC51dGlsLmNvcHkoaXQpO1xuICB2YXIgJGNsb3NpbmdCcmFjZXMgPSAnJztcbiAgJGl0LmxldmVsKys7XG4gIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgdmFyICRjdXJyZW50QmFzZUlkID0gJGl0LmJhc2VJZCxcbiAgICAkcHJldlZhbGlkID0gJ3ByZXZWYWxpZCcgKyAkbHZsLFxuICAgICRwYXNzaW5nU2NoZW1hcyA9ICdwYXNzaW5nU2NoZW1hcycgKyAkbHZsO1xuICBvdXQgKz0gJ3ZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnMgLCAnICsgKCRwcmV2VmFsaWQpICsgJyA9IGZhbHNlICwgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlICwgJyArICgkcGFzc2luZ1NjaGVtYXMpICsgJyA9IG51bGw7ICc7XG4gIHZhciAkd2FzQ29tcG9zaXRlID0gaXQuY29tcG9zaXRlUnVsZTtcbiAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICBpZiAoYXJyMSkge1xuICAgIHZhciAkc2NoLCAkaSA9IC0xLFxuICAgICAgbDEgPSBhcnIxLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKCRpIDwgbDEpIHtcbiAgICAgICRzY2ggPSBhcnIxWyRpICs9IDFdO1xuICAgICAgaWYgKGl0LnV0aWwuc2NoZW1hSGFzUnVsZXMoJHNjaCwgaXQuUlVMRVMuYWxsKSkge1xuICAgICAgICAkaXQuc2NoZW1hID0gJHNjaDtcbiAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRpICsgJ10nO1xuICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGk7XG4gICAgICAgIG91dCArPSAnICAnICsgKGl0LnZhbGlkYXRlKCRpdCkpICsgJyAnO1xuICAgICAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSB0cnVlOyAnO1xuICAgICAgfVxuICAgICAgaWYgKCRpKSB7XG4gICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJyAmJiAnICsgKCRwcmV2VmFsaWQpICsgJykgeyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgPSBbJyArICgkcGFzc2luZ1NjaGVtYXMpICsgJywgJyArICgkaSkgKyAnXTsgfSBlbHNlIHsgJztcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJG5leHRWYWxpZCkgKyAnKSB7ICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRwcmV2VmFsaWQpICsgJyA9IHRydWU7ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgPSAnICsgKCRpKSArICc7IH0nO1xuICAgIH1cbiAgfVxuICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSAkd2FzQ29tcG9zaXRlO1xuICBvdXQgKz0gJycgKyAoJGNsb3NpbmdCcmFjZXMpICsgJ2lmICghJyArICgkdmFsaWQpICsgJykgeyAgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdvbmVPZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcGFzc2luZ1NjaGVtYXM6ICcgKyAoJHBhc3NpbmdTY2hlbWFzKSArICcgfSAnO1xuICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgbWF0Y2ggZXhhY3RseSBvbmUgc2NoZW1hIGluIG9uZU9mXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgfSBlbHNlIHtcbiAgICBvdXQgKz0gJyB7fSAnO1xuICB9XG4gIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsgcmV0dXJuIGZhbHNlOyAnO1xuICAgIH1cbiAgfVxuICBvdXQgKz0gJ30gZWxzZSB7ICBlcnJvcnMgPSAnICsgKCRlcnJzKSArICc7IGlmICh2RXJyb3JzICE9PSBudWxsKSB7IGlmICgnICsgKCRlcnJzKSArICcpIHZFcnJvcnMubGVuZ3RoID0gJyArICgkZXJycykgKyAnOyBlbHNlIHZFcnJvcnMgPSBudWxsOyB9JztcbiAgaWYgKGl0Lm9wdHMuYWxsRXJyb3JzKSB7XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX3BhdHRlcm4oaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkcmVnZXhwID0gJGlzRGF0YSA/ICcobmV3IFJlZ0V4cCgnICsgJHNjaGVtYVZhbHVlICsgJykpJyA6IGl0LnVzZVBhdHRlcm4oJHNjaGVtYSk7XG4gIG91dCArPSAnaWYgKCAnO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnICgnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICcgKyAoJHNjaGVtYVZhbHVlKSArICcgIT0gXFwnc3RyaW5nXFwnKSB8fCAnO1xuICB9XG4gIG91dCArPSAnICEnICsgKCRyZWdleHApICsgJy50ZXN0KCcgKyAoJGRhdGEpICsgJykgKSB7ICAgJztcbiAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdwYXR0ZXJuJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBwYXR0ZXJuOiAgJztcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcnICsgKCRzY2hlbWFWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRzY2hlbWEpKTtcbiAgICB9XG4gICAgb3V0ICs9ICcgIH0gJztcbiAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIG1hdGNoIHBhdHRlcm4gXCInO1xuICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgb3V0ICs9ICdcXCcgKyAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICsgXFwnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnJyArIChpdC51dGlsLmVzY2FwZVF1b3Rlcygkc2NoZW1hKSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJ1wiXFwnICc7XG4gICAgfVxuICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgIG91dCArPSAnICwgc2NoZW1hOiAgJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAndmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSk7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAgICAgICAgICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgIH1cbiAgICBvdXQgKz0gJyB9ICc7XG4gIH0gZWxzZSB7XG4gICAgb3V0ICs9ICcge30gJztcbiAgfVxuICB2YXIgX19lcnIgPSBvdXQ7XG4gIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJ30gJztcbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9wcm9wZXJ0aWVzKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICB2YXIgJGtleSA9ICdrZXknICsgJGx2bCxcbiAgICAkaWR4ID0gJ2lkeCcgKyAkbHZsLFxuICAgICRkYXRhTnh0ID0gJGl0LmRhdGFMZXZlbCA9IGl0LmRhdGFMZXZlbCArIDEsXG4gICAgJG5leHREYXRhID0gJ2RhdGEnICsgJGRhdGFOeHQsXG4gICAgJGRhdGFQcm9wZXJ0aWVzID0gJ2RhdGFQcm9wZXJ0aWVzJyArICRsdmw7XG4gIHZhciAkc2NoZW1hS2V5cyA9IE9iamVjdC5rZXlzKCRzY2hlbWEgfHwge30pLFxuICAgICRwUHJvcGVydGllcyA9IGl0LnNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcyB8fCB7fSxcbiAgICAkcFByb3BlcnR5S2V5cyA9IE9iamVjdC5rZXlzKCRwUHJvcGVydGllcyksXG4gICAgJGFQcm9wZXJ0aWVzID0gaXQuc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLFxuICAgICRzb21lUHJvcGVydGllcyA9ICRzY2hlbWFLZXlzLmxlbmd0aCB8fCAkcFByb3BlcnR5S2V5cy5sZW5ndGgsXG4gICAgJG5vQWRkaXRpb25hbCA9ICRhUHJvcGVydGllcyA9PT0gZmFsc2UsXG4gICAgJGFkZGl0aW9uYWxJc1NjaGVtYSA9IHR5cGVvZiAkYVByb3BlcnRpZXMgPT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoJGFQcm9wZXJ0aWVzKS5sZW5ndGgsXG4gICAgJHJlbW92ZUFkZGl0aW9uYWwgPSBpdC5vcHRzLnJlbW92ZUFkZGl0aW9uYWwsXG4gICAgJGNoZWNrQWRkaXRpb25hbCA9ICRub0FkZGl0aW9uYWwgfHwgJGFkZGl0aW9uYWxJc1NjaGVtYSB8fCAkcmVtb3ZlQWRkaXRpb25hbCxcbiAgICAkb3duUHJvcGVydGllcyA9IGl0Lm9wdHMub3duUHJvcGVydGllcyxcbiAgICAkY3VycmVudEJhc2VJZCA9IGl0LmJhc2VJZDtcbiAgdmFyICRyZXF1aXJlZCA9IGl0LnNjaGVtYS5yZXF1aXJlZDtcbiAgaWYgKCRyZXF1aXJlZCAmJiAhKGl0Lm9wdHMuJGRhdGEgJiYgJHJlcXVpcmVkLiRkYXRhKSAmJiAkcmVxdWlyZWQubGVuZ3RoIDwgaXQub3B0cy5sb29wUmVxdWlyZWQpIHZhciAkcmVxdWlyZWRIYXNoID0gaXQudXRpbC50b0hhc2goJHJlcXVpcmVkKTtcbiAgb3V0ICs9ICd2YXIgJyArICgkZXJycykgKyAnID0gZXJyb3JzO3ZhciAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7JztcbiAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgPSB1bmRlZmluZWQ7JztcbiAgfVxuICBpZiAoJGNoZWNrQWRkaXRpb25hbCkge1xuICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgb3V0ICs9ICcgJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyA9ICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgfHwgT2JqZWN0LmtleXMoJyArICgkZGF0YSkgKyAnKTsgZm9yICh2YXIgJyArICgkaWR4KSArICc9MDsgJyArICgkaWR4KSArICc8JyArICgkZGF0YVByb3BlcnRpZXMpICsgJy5sZW5ndGg7ICcgKyAoJGlkeCkgKyAnKyspIHsgdmFyICcgKyAoJGtleSkgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJ1snICsgKCRpZHgpICsgJ107ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIGZvciAodmFyICcgKyAoJGtleSkgKyAnIGluICcgKyAoJGRhdGEpICsgJykgeyAnO1xuICAgIH1cbiAgICBpZiAoJHNvbWVQcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyB2YXIgaXNBZGRpdGlvbmFsJyArICgkbHZsKSArICcgPSAhKGZhbHNlICc7XG4gICAgICBpZiAoJHNjaGVtYUtleXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICgkc2NoZW1hS2V5cy5sZW5ndGggPiA4KSB7XG4gICAgICAgICAgb3V0ICs9ICcgfHwgdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnLmhhc093blByb3BlcnR5KCcgKyAoJGtleSkgKyAnKSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcnIxID0gJHNjaGVtYUtleXM7XG4gICAgICAgICAgaWYgKGFycjEpIHtcbiAgICAgICAgICAgIHZhciAkcHJvcGVydHlLZXksIGkxID0gLTEsXG4gICAgICAgICAgICAgIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKGkxIDwgbDEpIHtcbiAgICAgICAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyMVtpMSArPSAxXTtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgJyArICgka2V5KSArICcgPT0gJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRwcm9wZXJ0eUtleSkpICsgJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCRwUHJvcGVydHlLZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyMiA9ICRwUHJvcGVydHlLZXlzO1xuICAgICAgICBpZiAoYXJyMikge1xuICAgICAgICAgIHZhciAkcFByb3BlcnR5LCAkaSA9IC0xLFxuICAgICAgICAgICAgbDIgPSBhcnIyLmxlbmd0aCAtIDE7XG4gICAgICAgICAgd2hpbGUgKCRpIDwgbDIpIHtcbiAgICAgICAgICAgICRwUHJvcGVydHkgPSBhcnIyWyRpICs9IDFdO1xuICAgICAgICAgICAgb3V0ICs9ICcgfHwgJyArIChpdC51c2VQYXR0ZXJuKCRwUHJvcGVydHkpKSArICcudGVzdCgnICsgKCRrZXkpICsgJykgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG91dCArPSAnICk7IGlmIChpc0FkZGl0aW9uYWwnICsgKCRsdmwpICsgJykgeyAnO1xuICAgIH1cbiAgICBpZiAoJHJlbW92ZUFkZGl0aW9uYWwgPT0gJ2FsbCcpIHtcbiAgICAgIG91dCArPSAnIGRlbGV0ZSAnICsgKCRkYXRhKSArICdbJyArICgka2V5KSArICddOyAnO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgJGN1cnJlbnRFcnJvclBhdGggPSBpdC5lcnJvclBhdGg7XG4gICAgICB2YXIgJGFkZGl0aW9uYWxQcm9wZXJ0eSA9ICdcXCcgKyAnICsgJGtleSArICcgKyBcXCcnO1xuICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICBpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGhFeHByKGl0LmVycm9yUGF0aCwgJGtleSwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgfVxuICAgICAgaWYgKCRub0FkZGl0aW9uYWwpIHtcbiAgICAgICAgaWYgKCRyZW1vdmVBZGRpdGlvbmFsKSB7XG4gICAgICAgICAgb3V0ICs9ICcgZGVsZXRlICcgKyAoJGRhdGEpICsgJ1snICsgKCRrZXkpICsgJ107ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcgJyArICgkbmV4dFZhbGlkKSArICcgPSBmYWxzZTsgJztcbiAgICAgICAgICB2YXIgJGN1cnJFcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGg7XG4gICAgICAgICAgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsUHJvcGVydGllcyc7XG4gICAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBhZGRpdGlvbmFsUHJvcGVydHk6IFxcJycgKyAoJGFkZGl0aW9uYWxQcm9wZXJ0eSkgKyAnXFwnIH0gJztcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJ2lzIGFuIGludmFsaWQgYWRkaXRpb25hbCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICdzaG91bGQgTk9UIGhhdmUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvdXQgKz0gJ1xcJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogZmFsc2UgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZXJyU2NoZW1hUGF0aCA9ICRjdXJyRXJyU2NoZW1hUGF0aDtcbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgYnJlYWs7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCRhZGRpdGlvbmFsSXNTY2hlbWEpIHtcbiAgICAgICAgaWYgKCRyZW1vdmVBZGRpdGlvbmFsID09ICdmYWlsaW5nJykge1xuICAgICAgICAgIG91dCArPSAnIHZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7ICAnO1xuICAgICAgICAgIHZhciAkd2FzQ29tcG9zaXRlID0gaXQuY29tcG9zaXRlUnVsZTtcbiAgICAgICAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSB0cnVlO1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkYVByb3BlcnRpZXM7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5hZGRpdGlvbmFsUHJvcGVydGllcyc7XG4gICAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsUHJvcGVydGllcyc7XG4gICAgICAgICAgJGl0LmVycm9yUGF0aCA9IGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSA/IGl0LmVycm9yUGF0aCA6IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAka2V5LCBpdC5vcHRzLmpzb25Qb2ludGVycyk7XG4gICAgICAgICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGtleSArICddJztcbiAgICAgICAgICAkaXQuZGF0YVBhdGhBcnJbJGRhdGFOeHRdID0gJGtleTtcbiAgICAgICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgICAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIGlmICghJyArICgkbmV4dFZhbGlkKSArICcpIHsgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodmFsaWRhdGUuZXJyb3JzICE9PSBudWxsKSB7IGlmIChlcnJvcnMpIHZhbGlkYXRlLmVycm9ycy5sZW5ndGggPSBlcnJvcnM7IGVsc2UgdmFsaWRhdGUuZXJyb3JzID0gbnVsbDsgfSBkZWxldGUgJyArICgkZGF0YSkgKyAnWycgKyAoJGtleSkgKyAnXTsgfSAgJztcbiAgICAgICAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSAkd2FzQ29tcG9zaXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkYVByb3BlcnRpZXM7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5hZGRpdGlvbmFsUHJvcGVydGllcyc7XG4gICAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy9hZGRpdGlvbmFsUHJvcGVydGllcyc7XG4gICAgICAgICAgJGl0LmVycm9yUGF0aCA9IGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSA/IGl0LmVycm9yUGF0aCA6IGl0LnV0aWwuZ2V0UGF0aEV4cHIoaXQuZXJyb3JQYXRoLCAka2V5LCBpdC5vcHRzLmpzb25Qb2ludGVycyk7XG4gICAgICAgICAgdmFyICRwYXNzRGF0YSA9ICRkYXRhICsgJ1snICsgJGtleSArICddJztcbiAgICAgICAgICAkaXQuZGF0YVBhdGhBcnJbJGRhdGFOeHRdID0gJGtleTtcbiAgICAgICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgICAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyBpZiAoIScgKyAoJG5leHRWYWxpZCkgKyAnKSBicmVhazsgJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGl0LmVycm9yUGF0aCA9ICRjdXJyZW50RXJyb3JQYXRoO1xuICAgIH1cbiAgICBpZiAoJHNvbWVQcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gICc7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgIH1cbiAgfVxuICB2YXIgJHVzZURlZmF1bHRzID0gaXQub3B0cy51c2VEZWZhdWx0cyAmJiAhaXQuY29tcG9zaXRlUnVsZTtcbiAgaWYgKCRzY2hlbWFLZXlzLmxlbmd0aCkge1xuICAgIHZhciBhcnIzID0gJHNjaGVtYUtleXM7XG4gICAgaWYgKGFycjMpIHtcbiAgICAgIHZhciAkcHJvcGVydHlLZXksIGkzID0gLTEsXG4gICAgICAgIGwzID0gYXJyMy5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkzIDwgbDMpIHtcbiAgICAgICAgJHByb3BlcnR5S2V5ID0gYXJyM1tpMyArPSAxXTtcbiAgICAgICAgdmFyICRzY2ggPSAkc2NoZW1hWyRwcm9wZXJ0eUtleV07XG4gICAgICAgIGlmIChpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2gsIGl0LlJVTEVTLmFsbCkpIHtcbiAgICAgICAgICB2YXIgJHByb3AgPSBpdC51dGlsLmdldFByb3BlcnR5KCRwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICAkcGFzc0RhdGEgPSAkZGF0YSArICRwcm9wLFxuICAgICAgICAgICAgJGhhc0RlZmF1bHQgPSAkdXNlRGVmYXVsdHMgJiYgJHNjaC5kZWZhdWx0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICRwcm9wO1xuICAgICAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGggKyAnLycgKyBpdC51dGlsLmVzY2FwZUZyYWdtZW50KCRwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgJGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aChpdC5lcnJvclBhdGgsICRwcm9wZXJ0eUtleSwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgICAgICRpdC5kYXRhUGF0aEFyclskZGF0YU54dF0gPSBpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgdmFyICRjb2RlID0gaXQudmFsaWRhdGUoJGl0KTtcbiAgICAgICAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgICAgICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgICAgICAgICRjb2RlID0gaXQudXRpbC52YXJSZXBsYWNlKCRjb2RlLCAkbmV4dERhdGEsICRwYXNzRGF0YSk7XG4gICAgICAgICAgICB2YXIgJHVzZURhdGEgPSAkcGFzc0RhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciAkdXNlRGF0YSA9ICRuZXh0RGF0YTtcbiAgICAgICAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRoYXNEZWZhdWx0KSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCRyZXF1aXJlZEhhc2ggJiYgJHJlcXVpcmVkSGFzaFskcHJvcGVydHlLZXldKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIGlmICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgfHwgISBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJyArICgkZGF0YSkgKyAnLCBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSkpICsgJ1xcJykgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvdXQgKz0gJykgeyAnICsgKCRuZXh0VmFsaWQpICsgJyA9IGZhbHNlOyAnO1xuICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRFcnJvclBhdGggPSBpdC5lcnJvclBhdGgsXG4gICAgICAgICAgICAgICAgJGN1cnJFcnJTY2hlbWFQYXRoID0gJGVyclNjaGVtYVBhdGgsXG4gICAgICAgICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9IGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGgoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eUtleSwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvcmVxdWlyZWQnO1xuICAgICAgICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICAgICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgICAgICAgICAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3JlcXVpcmVkJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnIH0gJztcbiAgICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnJztcbiAgICAgICAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICdpcyBhIHJlcXVpcmVkIHByb3BlcnR5JztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnc2hvdWxkIGhhdmUgcmVxdWlyZWQgcHJvcGVydHkgXFxcXFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFxcXFxcJyc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJ1xcJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAkZXJyU2NoZW1hUGF0aCA9ICRjdXJyRXJyU2NoZW1hUGF0aDtcbiAgICAgICAgICAgICAgaXQuZXJyb3JQYXRoID0gJGN1cnJlbnRFcnJvclBhdGg7XG4gICAgICAgICAgICAgIG91dCArPSAnIH0gZWxzZSB7ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgICAgIG91dCArPSAnIGlmICggJyArICgkdXNlRGF0YSkgKyAnID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgICAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnIHx8ICEgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkcHJvcGVydHlLZXkpKSArICdcXCcpICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCArPSAnKSB7ICcgKyAoJG5leHRWYWxpZCkgKyAnID0gdHJ1ZTsgfSBlbHNlIHsgJztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkdXNlRGF0YSkgKyAnICE9PSB1bmRlZmluZWQgJztcbiAgICAgICAgICAgICAgICBpZiAoJG93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnICYmICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkcHJvcGVydHlLZXkpKSArICdcXCcpICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCArPSAnICkgeyAnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRjb2RlKSArICcgfSAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJHBQcm9wZXJ0eUtleXMubGVuZ3RoKSB7XG4gICAgdmFyIGFycjQgPSAkcFByb3BlcnR5S2V5cztcbiAgICBpZiAoYXJyNCkge1xuICAgICAgdmFyICRwUHJvcGVydHksIGk0ID0gLTEsXG4gICAgICAgIGw0ID0gYXJyNC5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGk0IDwgbDQpIHtcbiAgICAgICAgJHBQcm9wZXJ0eSA9IGFycjRbaTQgKz0gMV07XG4gICAgICAgIHZhciAkc2NoID0gJHBQcm9wZXJ0aWVzWyRwUHJvcGVydHldO1xuICAgICAgICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgICAgICAgJGl0LnNjaGVtYSA9ICRzY2g7XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgJy5wYXR0ZXJuUHJvcGVydGllcycgKyBpdC51dGlsLmdldFByb3BlcnR5KCRwUHJvcGVydHkpO1xuICAgICAgICAgICRpdC5lcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvcGF0dGVyblByb3BlcnRpZXMvJyArIGl0LnV0aWwuZXNjYXBlRnJhZ21lbnQoJHBQcm9wZXJ0eSk7XG4gICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyB8fCBPYmplY3Qua2V5cygnICsgKCRkYXRhKSArICcpOyBmb3IgKHZhciAnICsgKCRpZHgpICsgJz0wOyAnICsgKCRpZHgpICsgJzwnICsgKCRkYXRhUHJvcGVydGllcykgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyB2YXIgJyArICgka2V5KSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnWycgKyAoJGlkeCkgKyAnXTsgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgZm9yICh2YXIgJyArICgka2V5KSArICcgaW4gJyArICgkZGF0YSkgKyAnKSB7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKGl0LnVzZVBhdHRlcm4oJHBQcm9wZXJ0eSkpICsgJy50ZXN0KCcgKyAoJGtleSkgKyAnKSkgeyAnO1xuICAgICAgICAgICRpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGhFeHByKGl0LmVycm9yUGF0aCwgJGtleSwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgICAgIHZhciAkcGFzc0RhdGEgPSAkZGF0YSArICdbJyArICRrZXkgKyAnXSc7XG4gICAgICAgICAgJGl0LmRhdGFQYXRoQXJyWyRkYXRhTnh0XSA9ICRrZXk7XG4gICAgICAgICAgdmFyICRjb2RlID0gaXQudmFsaWRhdGUoJGl0KTtcbiAgICAgICAgICAkaXQuYmFzZUlkID0gJGN1cnJlbnRCYXNlSWQ7XG4gICAgICAgICAgaWYgKGl0LnV0aWwudmFyT2NjdXJlbmNlcygkY29kZSwgJG5leHREYXRhKSA8IDIpIHtcbiAgICAgICAgICAgIG91dCArPSAnICcgKyAoaXQudXRpbC52YXJSZXBsYWNlKCRjb2RlLCAkbmV4dERhdGEsICRwYXNzRGF0YSkpICsgJyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dERhdGEpICsgJyA9ICcgKyAoJHBhc3NEYXRhKSArICc7ICcgKyAoJGNvZGUpICsgJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgYnJlYWs7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgZWxzZSAnICsgKCRuZXh0VmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gICc7XG4gICAgICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnICcgKyAoJGNsb3NpbmdCcmFjZXMpICsgJyBpZiAoJyArICgkZXJycykgKyAnID09IGVycm9ycykgeyc7XG4gIH1cbiAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9wcm9wZXJ0eU5hbWVzKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkZXJycyA9ICdlcnJzX18nICsgJGx2bDtcbiAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gIHZhciAkY2xvc2luZ0JyYWNlcyA9ICcnO1xuICAkaXQubGV2ZWwrKztcbiAgdmFyICRuZXh0VmFsaWQgPSAndmFsaWQnICsgJGl0LmxldmVsO1xuICBpZiAoaXQudXRpbC5zY2hlbWFIYXNSdWxlcygkc2NoZW1hLCBpdC5SVUxFUy5hbGwpKSB7XG4gICAgJGl0LnNjaGVtYSA9ICRzY2hlbWE7XG4gICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aDtcbiAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoO1xuICAgIHZhciAka2V5ID0gJ2tleScgKyAkbHZsLFxuICAgICAgJGlkeCA9ICdpZHgnICsgJGx2bCxcbiAgICAgICRpID0gJ2knICsgJGx2bCxcbiAgICAgICRpbnZhbGlkTmFtZSA9ICdcXCcgKyAnICsgJGtleSArICcgKyBcXCcnLFxuICAgICAgJGRhdGFOeHQgPSAkaXQuZGF0YUxldmVsID0gaXQuZGF0YUxldmVsICsgMSxcbiAgICAgICRuZXh0RGF0YSA9ICdkYXRhJyArICRkYXRhTnh0LFxuICAgICAgJGRhdGFQcm9wZXJ0aWVzID0gJ2RhdGFQcm9wZXJ0aWVzJyArICRsdmwsXG4gICAgICAkb3duUHJvcGVydGllcyA9IGl0Lm9wdHMub3duUHJvcGVydGllcyxcbiAgICAgICRjdXJyZW50QmFzZUlkID0gaXQuYmFzZUlkO1xuICAgIG91dCArPSAnIHZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7ICc7XG4gICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyA9IHVuZGVmaW5lZDsgJztcbiAgICB9XG4gICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICBvdXQgKz0gJyAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnID0gJyArICgkZGF0YVByb3BlcnRpZXMpICsgJyB8fCBPYmplY3Qua2V5cygnICsgKCRkYXRhKSArICcpOyBmb3IgKHZhciAnICsgKCRpZHgpICsgJz0wOyAnICsgKCRpZHgpICsgJzwnICsgKCRkYXRhUHJvcGVydGllcykgKyAnLmxlbmd0aDsgJyArICgkaWR4KSArICcrKykgeyB2YXIgJyArICgka2V5KSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnWycgKyAoJGlkeCkgKyAnXTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgZm9yICh2YXIgJyArICgka2V5KSArICcgaW4gJyArICgkZGF0YSkgKyAnKSB7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciBzdGFydEVycnMnICsgKCRsdmwpICsgJyA9IGVycm9yczsgJztcbiAgICB2YXIgJHBhc3NEYXRhID0gJGtleTtcbiAgICB2YXIgJHdhc0NvbXBvc2l0ZSA9IGl0LmNvbXBvc2l0ZVJ1bGU7XG4gICAgaXQuY29tcG9zaXRlUnVsZSA9ICRpdC5jb21wb3NpdGVSdWxlID0gdHJ1ZTtcbiAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpO1xuICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICBpZiAoaXQudXRpbC52YXJPY2N1cmVuY2VzKCRjb2RlLCAkbmV4dERhdGEpIDwgMikge1xuICAgICAgb3V0ICs9ICcgJyArIChpdC51dGlsLnZhclJlcGxhY2UoJGNvZGUsICRuZXh0RGF0YSwgJHBhc3NEYXRhKSkgKyAnICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhciAnICsgKCRuZXh0RGF0YSkgKyAnID0gJyArICgkcGFzc0RhdGEpICsgJzsgJyArICgkY29kZSkgKyAnICc7XG4gICAgfVxuICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgb3V0ICs9ICcgaWYgKCEnICsgKCRuZXh0VmFsaWQpICsgJykgeyBmb3IgKHZhciAnICsgKCRpKSArICc9c3RhcnRFcnJzJyArICgkbHZsKSArICc7ICcgKyAoJGkpICsgJzxlcnJvcnM7ICcgKyAoJGkpICsgJysrKSB7IHZFcnJvcnNbJyArICgkaSkgKyAnXS5wcm9wZXJ0eU5hbWUgPSAnICsgKCRrZXkpICsgJzsgfSAgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgncHJvcGVydHlOYW1lcycpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcHJvcGVydHlOYW1lOiBcXCcnICsgKCRpbnZhbGlkTmFtZSkgKyAnXFwnIH0gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Byb3BlcnR5IG5hbWUgXFxcXFxcJycgKyAoJGludmFsaWROYW1lKSArICdcXFxcXFwnIGlzIGludmFsaWRcXCcgJztcbiAgICAgIH1cbiAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKHZFcnJvcnMpOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgYnJlYWs7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gfSc7XG4gIH1cbiAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzKSArICcgaWYgKCcgKyAoJGVycnMpICsgJyA9PSBlcnJvcnMpIHsnO1xuICB9XG4gIG91dCA9IGl0LnV0aWwuY2xlYW5VcENvZGUob3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfcmVmKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGRhdGEgPSAnZGF0YScgKyAoJGRhdGFMdmwgfHwgJycpO1xuICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gIHZhciAkYXN5bmMsICRyZWZDb2RlO1xuICBpZiAoJHNjaGVtYSA9PSAnIycgfHwgJHNjaGVtYSA9PSAnIy8nKSB7XG4gICAgaWYgKGl0LmlzUm9vdCkge1xuICAgICAgJGFzeW5jID0gaXQuYXN5bmM7XG4gICAgICAkcmVmQ29kZSA9ICd2YWxpZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICRhc3luYyA9IGl0LnJvb3Quc2NoZW1hLiRhc3luYyA9PT0gdHJ1ZTtcbiAgICAgICRyZWZDb2RlID0gJ3Jvb3QucmVmVmFsWzBdJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyICRyZWZWYWwgPSBpdC5yZXNvbHZlUmVmKGl0LmJhc2VJZCwgJHNjaGVtYSwgaXQuaXNSb290KTtcbiAgICBpZiAoJHJlZlZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgJG1lc3NhZ2UgPSBpdC5NaXNzaW5nUmVmRXJyb3IubWVzc2FnZShpdC5iYXNlSWQsICRzY2hlbWEpO1xuICAgICAgaWYgKGl0Lm9wdHMubWlzc2luZ1JlZnMgPT0gJ2ZhaWwnKSB7XG4gICAgICAgIGl0LmxvZ2dlci5lcnJvcigkbWVzc2FnZSk7XG4gICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgnJHJlZicpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgcmVmOiBcXCcnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRzY2hlbWEpKSArICdcXCcgfSAnO1xuICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdjYW5cXFxcXFwndCByZXNvbHZlIHJlZmVyZW5jZSAnICsgKGl0LnV0aWwuZXNjYXBlUXVvdGVzKCRzY2hlbWEpKSArICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmIChmYWxzZSkgeyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGl0Lm9wdHMubWlzc2luZ1JlZnMgPT0gJ2lnbm9yZScpIHtcbiAgICAgICAgaXQubG9nZ2VyLndhcm4oJG1lc3NhZ2UpO1xuICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgIG91dCArPSAnIGlmICh0cnVlKSB7ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBpdC5NaXNzaW5nUmVmRXJyb3IoaXQuYmFzZUlkLCAkc2NoZW1hLCAkbWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgkcmVmVmFsLmlubGluZSkge1xuICAgICAgdmFyICRpdCA9IGl0LnV0aWwuY29weShpdCk7XG4gICAgICAkaXQubGV2ZWwrKztcbiAgICAgIHZhciAkbmV4dFZhbGlkID0gJ3ZhbGlkJyArICRpdC5sZXZlbDtcbiAgICAgICRpdC5zY2hlbWEgPSAkcmVmVmFsLnNjaGVtYTtcbiAgICAgICRpdC5zY2hlbWFQYXRoID0gJyc7XG4gICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRzY2hlbWE7XG4gICAgICB2YXIgJGNvZGUgPSBpdC52YWxpZGF0ZSgkaXQpLnJlcGxhY2UoL3ZhbGlkYXRlXFwuc2NoZW1hL2csICRyZWZWYWwuY29kZSk7XG4gICAgICBvdXQgKz0gJyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgIG91dCArPSAnIGlmICgnICsgKCRuZXh0VmFsaWQpICsgJykgeyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAkYXN5bmMgPSAkcmVmVmFsLiRhc3luYyA9PT0gdHJ1ZSB8fCAoaXQuYXN5bmMgJiYgJHJlZlZhbC4kYXN5bmMgIT09IGZhbHNlKTtcbiAgICAgICRyZWZDb2RlID0gJHJlZlZhbC5jb2RlO1xuICAgIH1cbiAgfVxuICBpZiAoJHJlZkNvZGUpIHtcbiAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgb3V0ID0gJyc7XG4gICAgaWYgKGl0Lm9wdHMucGFzc0NvbnRleHQpIHtcbiAgICAgIG91dCArPSAnICcgKyAoJHJlZkNvZGUpICsgJy5jYWxsKHRoaXMsICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnICcgKyAoJHJlZkNvZGUpICsgJyggJztcbiAgICB9XG4gICAgb3V0ICs9ICcgJyArICgkZGF0YSkgKyAnLCAoZGF0YVBhdGggfHwgXFwnXFwnKSc7XG4gICAgaWYgKGl0LmVycm9yUGF0aCAhPSAnXCJcIicpIHtcbiAgICAgIG91dCArPSAnICsgJyArIChpdC5lcnJvclBhdGgpO1xuICAgIH1cbiAgICB2YXIgJHBhcmVudERhdGEgPSAkZGF0YUx2bCA/ICdkYXRhJyArICgoJGRhdGFMdmwgLSAxKSB8fCAnJykgOiAncGFyZW50RGF0YScsXG4gICAgICAkcGFyZW50RGF0YVByb3BlcnR5ID0gJGRhdGFMdmwgPyBpdC5kYXRhUGF0aEFyclskZGF0YUx2bF0gOiAncGFyZW50RGF0YVByb3BlcnR5JztcbiAgICBvdXQgKz0gJyAsICcgKyAoJHBhcmVudERhdGEpICsgJyAsICcgKyAoJHBhcmVudERhdGFQcm9wZXJ0eSkgKyAnLCByb290RGF0YSkgICc7XG4gICAgdmFyIF9fY2FsbFZhbGlkYXRlID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCRhc3luYykge1xuICAgICAgaWYgKCFpdC5hc3luYykgdGhyb3cgbmV3IEVycm9yKCdhc3luYyBzY2hlbWEgcmVmZXJlbmNlZCBieSBzeW5jIHNjaGVtYScpO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJHZhbGlkKSArICc7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB0cnkgeyBhd2FpdCAnICsgKF9fY2FsbFZhbGlkYXRlKSArICc7ICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gY2F0Y2ggKGUpIHsgaWYgKCEoZSBpbnN0YW5jZW9mIFZhbGlkYXRpb25FcnJvcikpIHRocm93IGU7IGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gZS5lcnJvcnM7IGVsc2UgdkVycm9ycyA9IHZFcnJvcnMuY29uY2F0KGUuZXJyb3JzKTsgZXJyb3JzID0gdkVycm9ycy5sZW5ndGg7ICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkdmFsaWQpICsgJykgeyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyBpZiAoIScgKyAoX19jYWxsVmFsaWRhdGUpICsgJykgeyBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9ICcgKyAoJHJlZkNvZGUpICsgJy5lcnJvcnM7IGVsc2UgdkVycm9ycyA9IHZFcnJvcnMuY29uY2F0KCcgKyAoJHJlZkNvZGUpICsgJy5lcnJvcnMpOyBlcnJvcnMgPSB2RXJyb3JzLmxlbmd0aDsgfSAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX3JlcXVpcmVkKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIHZhciAkdlNjaGVtYSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgaWYgKCEkaXNEYXRhKSB7XG4gICAgaWYgKCRzY2hlbWEubGVuZ3RoIDwgaXQub3B0cy5sb29wUmVxdWlyZWQgJiYgaXQuc2NoZW1hLnByb3BlcnRpZXMgJiYgT2JqZWN0LmtleXMoaXQuc2NoZW1hLnByb3BlcnRpZXMpLmxlbmd0aCkge1xuICAgICAgdmFyICRyZXF1aXJlZCA9IFtdO1xuICAgICAgdmFyIGFycjEgPSAkc2NoZW1hO1xuICAgICAgaWYgKGFycjEpIHtcbiAgICAgICAgdmFyICRwcm9wZXJ0eSwgaTEgPSAtMSxcbiAgICAgICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKGkxIDwgbDEpIHtcbiAgICAgICAgICAkcHJvcGVydHkgPSBhcnIxW2kxICs9IDFdO1xuICAgICAgICAgIHZhciAkcHJvcGVydHlTY2ggPSBpdC5zY2hlbWEucHJvcGVydGllc1skcHJvcGVydHldO1xuICAgICAgICAgIGlmICghKCRwcm9wZXJ0eVNjaCAmJiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRwcm9wZXJ0eVNjaCwgaXQuUlVMRVMuYWxsKSkpIHtcbiAgICAgICAgICAgICRyZXF1aXJlZFskcmVxdWlyZWQubGVuZ3RoXSA9ICRwcm9wZXJ0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyICRyZXF1aXJlZCA9ICRzY2hlbWE7XG4gICAgfVxuICB9XG4gIGlmICgkaXNEYXRhIHx8ICRyZXF1aXJlZC5sZW5ndGgpIHtcbiAgICB2YXIgJGN1cnJlbnRFcnJvclBhdGggPSBpdC5lcnJvclBhdGgsXG4gICAgICAkbG9vcFJlcXVpcmVkID0gJGlzRGF0YSB8fCAkcmVxdWlyZWQubGVuZ3RoID49IGl0Lm9wdHMubG9vcFJlcXVpcmVkLFxuICAgICAgJG93blByb3BlcnRpZXMgPSBpdC5vcHRzLm93blByb3BlcnRpZXM7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIHZhciBtaXNzaW5nJyArICgkbHZsKSArICc7ICc7XG4gICAgICBpZiAoJGxvb3BSZXF1aXJlZCkge1xuICAgICAgICBpZiAoISRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkdlNjaGVtYSkgKyAnID0gdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnOyAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkaSA9ICdpJyArICRsdmwsXG4gICAgICAgICAgJHByb3BlcnR5UGF0aCA9ICdzY2hlbWEnICsgJGx2bCArICdbJyArICRpICsgJ10nLFxuICAgICAgICAgICRtaXNzaW5nUHJvcGVydHkgPSAnXFwnICsgJyArICRwcm9wZXJ0eVBhdGggKyAnICsgXFwnJztcbiAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgIGl0LmVycm9yUGF0aCA9IGl0LnV0aWwuZ2V0UGF0aEV4cHIoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eVBhdGgsIGl0Lm9wdHMuanNvblBvaW50ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkdmFsaWQpICsgJyA9IHRydWU7ICc7XG4gICAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgICAgb3V0ICs9ICcgaWYgKHNjaGVtYScgKyAoJGx2bCkgKyAnID09PSB1bmRlZmluZWQpICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEnICsgKCRsdmwpICsgJykpICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgZWxzZSB7JztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyBmb3IgKHZhciAnICsgKCRpKSArICcgPSAwOyAnICsgKCRpKSArICcgPCAnICsgKCR2U2NoZW1hKSArICcubGVuZ3RoOyAnICsgKCRpKSArICcrKykgeyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkZGF0YSkgKyAnWycgKyAoJHZTY2hlbWEpICsgJ1snICsgKCRpKSArICddXSAhPT0gdW5kZWZpbmVkICc7XG4gICAgICAgIGlmICgkb3duUHJvcGVydGllcykge1xuICAgICAgICAgIG91dCArPSAnICYmICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgJyArICgkdlNjaGVtYSkgKyAnWycgKyAoJGkpICsgJ10pICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICc7IGlmICghJyArICgkdmFsaWQpICsgJykgYnJlYWs7IH0gJztcbiAgICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyAgfSAgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJyAgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgJztcbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdyZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1Byb3BlcnR5OiBcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIG91dCArPSAnaXMgYSByZXF1aXJlZCBwcm9wZXJ0eSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJ3Nob3VsZCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5IFxcXFxcXCcnICsgKCRtaXNzaW5nUHJvcGVydHkpICsgJ1xcXFxcXCcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSBlbHNlIHsgJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIGlmICggJztcbiAgICAgICAgdmFyIGFycjIgPSAkcmVxdWlyZWQ7XG4gICAgICAgIGlmIChhcnIyKSB7XG4gICAgICAgICAgdmFyICRwcm9wZXJ0eUtleSwgJGkgPSAtMSxcbiAgICAgICAgICAgIGwyID0gYXJyMi5sZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlICgkaSA8IGwyKSB7XG4gICAgICAgICAgICAkcHJvcGVydHlLZXkgPSBhcnIyWyRpICs9IDFdO1xuICAgICAgICAgICAgaWYgKCRpKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIHx8ICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgJHByb3AgPSBpdC51dGlsLmdldFByb3BlcnR5KCRwcm9wZXJ0eUtleSksXG4gICAgICAgICAgICAgICR1c2VEYXRhID0gJGRhdGEgKyAkcHJvcDtcbiAgICAgICAgICAgIG91dCArPSAnICggKCAnICsgKCR1c2VEYXRhKSArICcgPT09IHVuZGVmaW5lZCAnO1xuICAgICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIHx8ICEgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkcHJvcGVydHlLZXkpKSArICdcXCcpICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJykgJiYgKG1pc3NpbmcnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZyhpdC5vcHRzLmpzb25Qb2ludGVycyA/ICRwcm9wZXJ0eUtleSA6ICRwcm9wKSkgKyAnKSApICc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnKSB7ICAnO1xuICAgICAgICB2YXIgJHByb3BlcnR5UGF0aCA9ICdtaXNzaW5nJyArICRsdmwsXG4gICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9ICdcXCcgKyAnICsgJHByb3BlcnR5UGF0aCArICcgKyBcXCcnO1xuICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQub3B0cy5qc29uUG9pbnRlcnMgPyBpdC51dGlsLmdldFBhdGhFeHByKCRjdXJyZW50RXJyb3JQYXRoLCAkcHJvcGVydHlQYXRoLCB0cnVlKSA6ICRjdXJyZW50RXJyb3JQYXRoICsgJyArICcgKyAkcHJvcGVydHlQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgncmVxdWlyZWQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IG1pc3NpbmdQcm9wZXJ0eTogXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXCcgfSAnO1xuICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCcnO1xuICAgICAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJ2lzIGEgcmVxdWlyZWQgcHJvcGVydHknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0eSBcXFxcXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXFxcXFwnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnXFwnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIH0gZWxzZSB7ICc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgkbG9vcFJlcXVpcmVkKSB7XG4gICAgICAgIGlmICghJGlzRGF0YSkge1xuICAgICAgICAgIG91dCArPSAnIHZhciAnICsgKCR2U2NoZW1hKSArICcgPSB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICc7ICc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRpID0gJ2knICsgJGx2bCxcbiAgICAgICAgICAkcHJvcGVydHlQYXRoID0gJ3NjaGVtYScgKyAkbHZsICsgJ1snICsgJGkgKyAnXScsXG4gICAgICAgICAgJG1pc3NpbmdQcm9wZXJ0eSA9ICdcXCcgKyAnICsgJHByb3BlcnR5UGF0aCArICcgKyBcXCcnO1xuICAgICAgICBpZiAoaXQub3B0cy5fZXJyb3JEYXRhUGF0aFByb3BlcnR5KSB7XG4gICAgICAgICAgaXQuZXJyb3JQYXRoID0gaXQudXRpbC5nZXRQYXRoRXhwcigkY3VycmVudEVycm9yUGF0aCwgJHByb3BlcnR5UGF0aCwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHZTY2hlbWEpICsgJyAmJiAhQXJyYXkuaXNBcnJheSgnICsgKCR2U2NoZW1hKSArICcpKSB7ICB2YXIgZXJyID0gICAnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3JlcXVpcmVkJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnIH0gJztcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJ2lzIGEgcmVxdWlyZWQgcHJvcGVydHknO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSAnc2hvdWxkIGhhdmUgcmVxdWlyZWQgcHJvcGVydHkgXFxcXFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFxcXFxcJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgfSBlbHNlIGlmICgnICsgKCR2U2NoZW1hKSArICcgIT09IHVuZGVmaW5lZCkgeyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIGZvciAodmFyICcgKyAoJGkpICsgJyA9IDA7ICcgKyAoJGkpICsgJyA8ICcgKyAoJHZTY2hlbWEpICsgJy5sZW5ndGg7ICcgKyAoJGkpICsgJysrKSB7IGlmICgnICsgKCRkYXRhKSArICdbJyArICgkdlNjaGVtYSkgKyAnWycgKyAoJGkpICsgJ11dID09PSB1bmRlZmluZWQgJztcbiAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgb3V0ICs9ICcgfHwgISBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJyArICgkZGF0YSkgKyAnLCAnICsgKCR2U2NoZW1hKSArICdbJyArICgkaSkgKyAnXSkgJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJykgeyAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3JlcXVpcmVkJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHk6IFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFwnIH0gJztcbiAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnJztcbiAgICAgICAgICAgIGlmIChpdC5vcHRzLl9lcnJvckRhdGFQYXRoUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICdpcyBhIHJlcXVpcmVkIHByb3BlcnR5JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG91dCArPSAnc2hvdWxkIGhhdmUgcmVxdWlyZWQgcHJvcGVydHkgXFxcXFxcJycgKyAoJG1pc3NpbmdQcm9wZXJ0eSkgKyAnXFxcXFxcJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJ1xcJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgfVxuICAgICAgICBvdXQgKz0gJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyB9IH0gJztcbiAgICAgICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgICAgICBvdXQgKz0gJyAgfSAgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFycjMgPSAkcmVxdWlyZWQ7XG4gICAgICAgIGlmIChhcnIzKSB7XG4gICAgICAgICAgdmFyICRwcm9wZXJ0eUtleSwgaTMgPSAtMSxcbiAgICAgICAgICAgIGwzID0gYXJyMy5sZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlIChpMyA8IGwzKSB7XG4gICAgICAgICAgICAkcHJvcGVydHlLZXkgPSBhcnIzW2kzICs9IDFdO1xuICAgICAgICAgICAgdmFyICRwcm9wID0gaXQudXRpbC5nZXRQcm9wZXJ0eSgkcHJvcGVydHlLZXkpLFxuICAgICAgICAgICAgICAkbWlzc2luZ1Byb3BlcnR5ID0gaXQudXRpbC5lc2NhcGVRdW90ZXMoJHByb3BlcnR5S2V5KSxcbiAgICAgICAgICAgICAgJHVzZURhdGEgPSAkZGF0YSArICRwcm9wO1xuICAgICAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICBpdC5lcnJvclBhdGggPSBpdC51dGlsLmdldFBhdGgoJGN1cnJlbnRFcnJvclBhdGgsICRwcm9wZXJ0eUtleSwgaXQub3B0cy5qc29uUG9pbnRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCAnICsgKCR1c2VEYXRhKSArICcgPT09IHVuZGVmaW5lZCAnO1xuICAgICAgICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIHx8ICEgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCcgKyAoJGRhdGEpICsgJywgXFwnJyArIChpdC51dGlsLmVzY2FwZVF1b3RlcygkcHJvcGVydHlLZXkpKSArICdcXCcpICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJykgeyAgdmFyIGVyciA9ICAgJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgncmVxdWlyZWQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IG1pc3NpbmdQcm9wZXJ0eTogXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXCcgfSAnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJyc7XG4gICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMuX2Vycm9yRGF0YVBhdGhQcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICdpcyBhIHJlcXVpcmVkIHByb3BlcnR5JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICdzaG91bGQgaGF2ZSByZXF1aXJlZCBwcm9wZXJ0eSBcXFxcXFwnJyArICgkbWlzc2luZ1Byb3BlcnR5KSArICdcXFxcXFwnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0ICs9ICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgfSAnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpdC5lcnJvclBhdGggPSAkY3VycmVudEVycm9yUGF0aDtcbiAgfSBlbHNlIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgb3V0ICs9ICcgaWYgKHRydWUpIHsnO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX3VuaXF1ZUl0ZW1zKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRpc0RhdGEgPSBpdC5vcHRzLiRkYXRhICYmICRzY2hlbWEgJiYgJHNjaGVtYS4kZGF0YSxcbiAgICAkc2NoZW1hVmFsdWU7XG4gIGlmICgkaXNEYXRhKSB7XG4gICAgb3V0ICs9ICcgdmFyIHNjaGVtYScgKyAoJGx2bCkgKyAnID0gJyArIChpdC51dGlsLmdldERhdGEoJHNjaGVtYS4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSkgKyAnOyAnO1xuICAgICRzY2hlbWFWYWx1ZSA9ICdzY2hlbWEnICsgJGx2bDtcbiAgfSBlbHNlIHtcbiAgICAkc2NoZW1hVmFsdWUgPSAkc2NoZW1hO1xuICB9XG4gIGlmICgoJHNjaGVtYSB8fCAkaXNEYXRhKSAmJiBpdC5vcHRzLnVuaXF1ZUl0ZW1zICE9PSBmYWxzZSkge1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkdmFsaWQpICsgJzsgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IGZhbHNlIHx8ICcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ2Jvb2xlYW5cXCcpICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgZWxzZSB7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciBpID0gJyArICgkZGF0YSkgKyAnLmxlbmd0aCAsICcgKyAoJHZhbGlkKSArICcgPSB0cnVlICwgajsgaWYgKGkgPiAxKSB7ICc7XG4gICAgdmFyICRpdGVtVHlwZSA9IGl0LnNjaGVtYS5pdGVtcyAmJiBpdC5zY2hlbWEuaXRlbXMudHlwZSxcbiAgICAgICR0eXBlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoJGl0ZW1UeXBlKTtcbiAgICBpZiAoISRpdGVtVHlwZSB8fCAkaXRlbVR5cGUgPT0gJ29iamVjdCcgfHwgJGl0ZW1UeXBlID09ICdhcnJheScgfHwgKCR0eXBlSXNBcnJheSAmJiAoJGl0ZW1UeXBlLmluZGV4T2YoJ29iamVjdCcpID49IDAgfHwgJGl0ZW1UeXBlLmluZGV4T2YoJ2FycmF5JykgPj0gMCkpKSB7XG4gICAgICBvdXQgKz0gJyBvdXRlcjogZm9yICg7aS0tOykgeyBmb3IgKGogPSBpOyBqLS07KSB7IGlmIChlcXVhbCgnICsgKCRkYXRhKSArICdbaV0sICcgKyAoJGRhdGEpICsgJ1tqXSkpIHsgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBicmVhayBvdXRlcjsgfSB9IH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFyIGl0ZW1JbmRpY2VzID0ge30sIGl0ZW07IGZvciAoO2ktLTspIHsgdmFyIGl0ZW0gPSAnICsgKCRkYXRhKSArICdbaV07ICc7XG4gICAgICB2YXIgJG1ldGhvZCA9ICdjaGVja0RhdGFUeXBlJyArICgkdHlwZUlzQXJyYXkgPyAncycgOiAnJyk7XG4gICAgICBvdXQgKz0gJyBpZiAoJyArIChpdC51dGlsWyRtZXRob2RdKCRpdGVtVHlwZSwgJ2l0ZW0nLCB0cnVlKSkgKyAnKSBjb250aW51ZTsgJztcbiAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgb3V0ICs9ICcgaWYgKHR5cGVvZiBpdGVtID09IFxcJ3N0cmluZ1xcJykgaXRlbSA9IFxcJ1wiXFwnICsgaXRlbTsgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIGlmICh0eXBlb2YgaXRlbUluZGljZXNbaXRlbV0gPT0gXFwnbnVtYmVyXFwnKSB7ICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgaiA9IGl0ZW1JbmRpY2VzW2l0ZW1dOyBicmVhazsgfSBpdGVtSW5kaWNlc1tpdGVtXSA9IGk7IH0gJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJyAgfSAgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICAgJztcbiAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgndW5pcXVlSXRlbXMnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGk6IGksIGo6IGogfSAnO1xuICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIE5PVCBoYXZlIGR1cGxpY2F0ZSBpdGVtcyAoaXRlbXMgIyMgXFwnICsgaiArIFxcJyBhbmQgXFwnICsgaSArIFxcJyBhcmUgaWRlbnRpY2FsKVxcJyAnO1xuICAgICAgfVxuICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgICAgb3V0ICs9ICd2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnIH0gJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcge30gJztcbiAgICB9XG4gICAgdmFyIF9fZXJyID0gb3V0O1xuICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gJztcbiAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICBvdXQgKz0gJyBpZiAodHJ1ZSkgeyAnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV92YWxpZGF0ZShpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyc7XG4gIHZhciAkYXN5bmMgPSBpdC5zY2hlbWEuJGFzeW5jID09PSB0cnVlLFxuICAgICRyZWZLZXl3b3JkcyA9IGl0LnV0aWwuc2NoZW1hSGFzUnVsZXNFeGNlcHQoaXQuc2NoZW1hLCBpdC5SVUxFUy5hbGwsICckcmVmJyksXG4gICAgJGlkID0gaXQuc2VsZi5fZ2V0SWQoaXQuc2NoZW1hKTtcbiAgaWYgKGl0LmlzVG9wKSB7XG4gICAgb3V0ICs9ICcgdmFyIHZhbGlkYXRlID0gJztcbiAgICBpZiAoJGFzeW5jKSB7XG4gICAgICBpdC5hc3luYyA9IHRydWU7XG4gICAgICBvdXQgKz0gJ2FzeW5jICc7XG4gICAgfVxuICAgIG91dCArPSAnZnVuY3Rpb24oZGF0YSwgZGF0YVBhdGgsIHBhcmVudERhdGEsIHBhcmVudERhdGFQcm9wZXJ0eSwgcm9vdERhdGEpIHsgXFwndXNlIHN0cmljdFxcJzsgJztcbiAgICBpZiAoJGlkICYmIChpdC5vcHRzLnNvdXJjZUNvZGUgfHwgaXQub3B0cy5wcm9jZXNzQ29kZSkpIHtcbiAgICAgIG91dCArPSAnICcgKyAoJy9cXCojIHNvdXJjZVVSTD0nICsgJGlkICsgJyAqLycpICsgJyAnO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIGl0LnNjaGVtYSA9PSAnYm9vbGVhbicgfHwgISgkcmVmS2V5d29yZHMgfHwgaXQuc2NoZW1hLiRyZWYpKSB7XG4gICAgdmFyICRrZXl3b3JkID0gJ2ZhbHNlIHNjaGVtYSc7XG4gICAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gICAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICAgIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gICAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gICAgdmFyICRlcnJvcktleXdvcmQ7XG4gICAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgICB2YXIgJHZhbGlkID0gJ3ZhbGlkJyArICRsdmw7XG4gICAgaWYgKGl0LnNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChpdC5pc1RvcCkge1xuICAgICAgICAkYnJlYWtPbkVycm9yID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCR2YWxpZCkgKyAnID0gZmFsc2U7ICc7XG4gICAgICB9XG4gICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ2ZhbHNlIHNjaGVtYScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHt9ICc7XG4gICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnYm9vbGVhbiBzY2hlbWEgaXMgZmFsc2VcXCcgJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IGZhbHNlICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICB9XG4gICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGl0LmlzVG9wKSB7XG4gICAgICAgIGlmICgkYXN5bmMpIHtcbiAgICAgICAgICBvdXQgKz0gJyByZXR1cm4gZGF0YTsgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBudWxsOyByZXR1cm4gdHJ1ZTsgJztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJHZhbGlkKSArICcgPSB0cnVlOyAnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXQuaXNUb3ApIHtcbiAgICAgIG91dCArPSAnIH07IHJldHVybiB2YWxpZGF0ZTsgJztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuICBpZiAoaXQuaXNUb3ApIHtcbiAgICB2YXIgJHRvcCA9IGl0LmlzVG9wLFxuICAgICAgJGx2bCA9IGl0LmxldmVsID0gMCxcbiAgICAgICRkYXRhTHZsID0gaXQuZGF0YUxldmVsID0gMCxcbiAgICAgICRkYXRhID0gJ2RhdGEnO1xuICAgIGl0LnJvb3RJZCA9IGl0LnJlc29sdmUuZnVsbFBhdGgoaXQuc2VsZi5fZ2V0SWQoaXQucm9vdC5zY2hlbWEpKTtcbiAgICBpdC5iYXNlSWQgPSBpdC5iYXNlSWQgfHwgaXQucm9vdElkO1xuICAgIGRlbGV0ZSBpdC5pc1RvcDtcbiAgICBpdC5kYXRhUGF0aEFyciA9IFt1bmRlZmluZWRdO1xuICAgIG91dCArPSAnIHZhciB2RXJyb3JzID0gbnVsbDsgJztcbiAgICBvdXQgKz0gJyB2YXIgZXJyb3JzID0gMDsgICAgICc7XG4gICAgb3V0ICs9ICcgaWYgKHJvb3REYXRhID09PSB1bmRlZmluZWQpIHJvb3REYXRhID0gZGF0YTsgJztcbiAgfSBlbHNlIHtcbiAgICB2YXIgJGx2bCA9IGl0LmxldmVsLFxuICAgICAgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWwsXG4gICAgICAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gICAgaWYgKCRpZCkgaXQuYmFzZUlkID0gaXQucmVzb2x2ZS51cmwoaXQuYmFzZUlkLCAkaWQpO1xuICAgIGlmICgkYXN5bmMgJiYgIWl0LmFzeW5jKSB0aHJvdyBuZXcgRXJyb3IoJ2FzeW5jIHNjaGVtYSBpbiBzeW5jIHNjaGVtYScpO1xuICAgIG91dCArPSAnIHZhciBlcnJzXycgKyAoJGx2bCkgKyAnID0gZXJyb3JzOyc7XG4gIH1cbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsLFxuICAgICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnMsXG4gICAgJGNsb3NpbmdCcmFjZXMxID0gJycsXG4gICAgJGNsb3NpbmdCcmFjZXMyID0gJyc7XG4gIHZhciAkZXJyb3JLZXl3b3JkO1xuICB2YXIgJHR5cGVTY2hlbWEgPSBpdC5zY2hlbWEudHlwZSxcbiAgICAkdHlwZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCR0eXBlU2NoZW1hKTtcbiAgaWYgKCR0eXBlSXNBcnJheSAmJiAkdHlwZVNjaGVtYS5sZW5ndGggPT0gMSkge1xuICAgICR0eXBlU2NoZW1hID0gJHR5cGVTY2hlbWFbMF07XG4gICAgJHR5cGVJc0FycmF5ID0gZmFsc2U7XG4gIH1cbiAgaWYgKGl0LnNjaGVtYS4kcmVmICYmICRyZWZLZXl3b3Jkcykge1xuICAgIGlmIChpdC5vcHRzLmV4dGVuZFJlZnMgPT0gJ2ZhaWwnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJyRyZWY6IHZhbGlkYXRpb24ga2V5d29yZHMgdXNlZCBpbiBzY2hlbWEgYXQgcGF0aCBcIicgKyBpdC5lcnJTY2hlbWFQYXRoICsgJ1wiIChzZWUgb3B0aW9uIGV4dGVuZFJlZnMpJyk7XG4gICAgfSBlbHNlIGlmIChpdC5vcHRzLmV4dGVuZFJlZnMgIT09IHRydWUpIHtcbiAgICAgICRyZWZLZXl3b3JkcyA9IGZhbHNlO1xuICAgICAgaXQubG9nZ2VyLndhcm4oJyRyZWY6IGtleXdvcmRzIGlnbm9yZWQgaW4gc2NoZW1hIGF0IHBhdGggXCInICsgaXQuZXJyU2NoZW1hUGF0aCArICdcIicpO1xuICAgIH1cbiAgfVxuICBpZiAoaXQuc2NoZW1hLiRjb21tZW50ICYmIGl0Lm9wdHMuJGNvbW1lbnQpIHtcbiAgICBvdXQgKz0gJyAnICsgKGl0LlJVTEVTLmFsbC4kY29tbWVudC5jb2RlKGl0LCAnJGNvbW1lbnQnKSk7XG4gIH1cbiAgaWYgKCR0eXBlU2NoZW1hKSB7XG4gICAgaWYgKGl0Lm9wdHMuY29lcmNlVHlwZXMpIHtcbiAgICAgIHZhciAkY29lcmNlVG9UeXBlcyA9IGl0LnV0aWwuY29lcmNlVG9UeXBlcyhpdC5vcHRzLmNvZXJjZVR5cGVzLCAkdHlwZVNjaGVtYSk7XG4gICAgfVxuICAgIHZhciAkcnVsZXNHcm91cCA9IGl0LlJVTEVTLnR5cGVzWyR0eXBlU2NoZW1hXTtcbiAgICBpZiAoJGNvZXJjZVRvVHlwZXMgfHwgJHR5cGVJc0FycmF5IHx8ICRydWxlc0dyb3VwID09PSB0cnVlIHx8ICgkcnVsZXNHcm91cCAmJiAhJHNob3VsZFVzZUdyb3VwKCRydWxlc0dyb3VwKSkpIHtcbiAgICAgIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyAnLnR5cGUnLFxuICAgICAgICAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnL3R5cGUnO1xuICAgICAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArICcudHlwZScsXG4gICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvdHlwZScsXG4gICAgICAgICRtZXRob2QgPSAkdHlwZUlzQXJyYXkgPyAnY2hlY2tEYXRhVHlwZXMnIDogJ2NoZWNrRGF0YVR5cGUnO1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoaXQudXRpbFskbWV0aG9kXSgkdHlwZVNjaGVtYSwgJGRhdGEsIHRydWUpKSArICcpIHsgJztcbiAgICAgIGlmICgkY29lcmNlVG9UeXBlcykge1xuICAgICAgICB2YXIgJGRhdGFUeXBlID0gJ2RhdGFUeXBlJyArICRsdmwsXG4gICAgICAgICAgJGNvZXJjZWQgPSAnY29lcmNlZCcgKyAkbHZsO1xuICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkZGF0YVR5cGUpICsgJyA9IHR5cGVvZiAnICsgKCRkYXRhKSArICc7ICc7XG4gICAgICAgIGlmIChpdC5vcHRzLmNvZXJjZVR5cGVzID09ICdhcnJheScpIHtcbiAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdvYmplY3RcXCcgJiYgQXJyYXkuaXNBcnJheSgnICsgKCRkYXRhKSArICcpKSAnICsgKCRkYXRhVHlwZSkgKyAnID0gXFwnYXJyYXlcXCc7ICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgdmFyICcgKyAoJGNvZXJjZWQpICsgJyA9IHVuZGVmaW5lZDsgJztcbiAgICAgICAgdmFyICRicmFjZXNDb2VyY2lvbiA9ICcnO1xuICAgICAgICB2YXIgYXJyMSA9ICRjb2VyY2VUb1R5cGVzO1xuICAgICAgICBpZiAoYXJyMSkge1xuICAgICAgICAgIHZhciAkdHlwZSwgJGkgPSAtMSxcbiAgICAgICAgICAgIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgICAgICAgIHdoaWxlICgkaSA8IGwxKSB7XG4gICAgICAgICAgICAkdHlwZSA9IGFycjFbJGkgKz0gMV07XG4gICAgICAgICAgICBpZiAoJGkpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGNvZXJjZWQpICsgJyA9PT0gdW5kZWZpbmVkKSB7ICc7XG4gICAgICAgICAgICAgICRicmFjZXNDb2VyY2lvbiArPSAnfSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXQub3B0cy5jb2VyY2VUeXBlcyA9PSAnYXJyYXknICYmICR0eXBlICE9ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGFUeXBlKSArICcgPT0gXFwnYXJyYXlcXCcgJiYgJyArICgkZGF0YSkgKyAnLmxlbmd0aCA9PSAxKSB7ICcgKyAoJGNvZXJjZWQpICsgJyA9ICcgKyAoJGRhdGEpICsgJyA9ICcgKyAoJGRhdGEpICsgJ1swXTsgJyArICgkZGF0YVR5cGUpICsgJyA9IHR5cGVvZiAnICsgKCRkYXRhKSArICc7ICB9ICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoJHR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGFUeXBlKSArICcgPT0gXFwnbnVtYmVyXFwnIHx8ICcgKyAoJGRhdGFUeXBlKSArICcgPT0gXFwnYm9vbGVhblxcJykgJyArICgkY29lcmNlZCkgKyAnID0gXFwnXFwnICsgJyArICgkZGF0YSkgKyAnOyBlbHNlIGlmICgnICsgKCRkYXRhKSArICcgPT09IG51bGwpICcgKyAoJGNvZXJjZWQpICsgJyA9IFxcJ1xcJzsgJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHR5cGUgPT0gJ251bWJlcicgfHwgJHR5cGUgPT0gJ2ludGVnZXInKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ2Jvb2xlYW5cXCcgfHwgJyArICgkZGF0YSkgKyAnID09PSBudWxsIHx8ICgnICsgKCRkYXRhVHlwZSkgKyAnID09IFxcJ3N0cmluZ1xcJyAmJiAnICsgKCRkYXRhKSArICcgJiYgJyArICgkZGF0YSkgKyAnID09ICsnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICAgICAgaWYgKCR0eXBlID09ICdpbnRlZ2VyJykge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICYmICEoJyArICgkZGF0YSkgKyAnICUgMSknO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG91dCArPSAnKSkgJyArICgkY29lcmNlZCkgKyAnID0gKycgKyAoJGRhdGEpICsgJzsgJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHR5cGUgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnIGlmICgnICsgKCRkYXRhKSArICcgPT09IFxcJ2ZhbHNlXFwnIHx8ICcgKyAoJGRhdGEpICsgJyA9PT0gMCB8fCAnICsgKCRkYXRhKSArICcgPT09IG51bGwpICcgKyAoJGNvZXJjZWQpICsgJyA9IGZhbHNlOyBlbHNlIGlmICgnICsgKCRkYXRhKSArICcgPT09IFxcJ3RydWVcXCcgfHwgJyArICgkZGF0YSkgKyAnID09PSAxKSAnICsgKCRjb2VyY2VkKSArICcgPSB0cnVlOyAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkdHlwZSA9PSAnbnVsbCcpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJGRhdGEpICsgJyA9PT0gXFwnXFwnIHx8ICcgKyAoJGRhdGEpICsgJyA9PT0gMCB8fCAnICsgKCRkYXRhKSArICcgPT09IGZhbHNlKSAnICsgKCRjb2VyY2VkKSArICcgPSBudWxsOyAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpdC5vcHRzLmNvZXJjZVR5cGVzID09ICdhcnJheScgJiYgJHR5cGUgPT0gJ2FycmF5Jykge1xuICAgICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdzdHJpbmdcXCcgfHwgJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdudW1iZXJcXCcgfHwgJyArICgkZGF0YVR5cGUpICsgJyA9PSBcXCdib29sZWFuXFwnIHx8ICcgKyAoJGRhdGEpICsgJyA9PSBudWxsKSAnICsgKCRjb2VyY2VkKSArICcgPSBbJyArICgkZGF0YSkgKyAnXTsgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgJyArICgkYnJhY2VzQ29lcmNpb24pICsgJyBpZiAoJyArICgkY29lcmNlZCkgKyAnID09PSB1bmRlZmluZWQpIHsgICAnO1xuICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgICAgICBvdXQgPSAnJzsgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJGVycm9yS2V5d29yZCB8fCAndHlwZScpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgdHlwZTogXFwnJztcbiAgICAgICAgICBpZiAoJHR5cGVJc0FycmF5KSB7XG4gICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEuam9pbihcIixcIikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJ1xcJyB9ICc7XG4gICAgICAgICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSAnO1xuICAgICAgICAgICAgaWYgKCR0eXBlSXNBcnJheSkge1xuICAgICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEuam9pbihcIixcIikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnXFwnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdC5vcHRzLnZlcmJvc2UpIHtcbiAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgKz0gJyB7fSAnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICAgICAgaWYgKCFpdC5jb21wb3NpdGVSdWxlICYmICRicmVha09uRXJyb3IpIHsgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKFsnICsgKF9fZXJyKSArICddKTsgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnIH0gZWxzZSB7ICAnO1xuICAgICAgICB2YXIgJHBhcmVudERhdGEgPSAkZGF0YUx2bCA/ICdkYXRhJyArICgoJGRhdGFMdmwgLSAxKSB8fCAnJykgOiAncGFyZW50RGF0YScsXG4gICAgICAgICAgJHBhcmVudERhdGFQcm9wZXJ0eSA9ICRkYXRhTHZsID8gaXQuZGF0YVBhdGhBcnJbJGRhdGFMdmxdIDogJ3BhcmVudERhdGFQcm9wZXJ0eSc7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGRhdGEpICsgJyA9ICcgKyAoJGNvZXJjZWQpICsgJzsgJztcbiAgICAgICAgaWYgKCEkZGF0YUx2bCkge1xuICAgICAgICAgIG91dCArPSAnaWYgKCcgKyAoJHBhcmVudERhdGEpICsgJyAhPT0gdW5kZWZpbmVkKSc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgJyArICgkcGFyZW50RGF0YSkgKyAnWycgKyAoJHBhcmVudERhdGFQcm9wZXJ0eSkgKyAnXSA9ICcgKyAoJGNvZXJjZWQpICsgJzsgfSAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgb3V0ID0gJyc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCRlcnJvcktleXdvcmQgfHwgJ3R5cGUnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IHR5cGU6IFxcJyc7XG4gICAgICAgICAgaWYgKCR0eXBlSXNBcnJheSkge1xuICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3V0ICs9ICdcXCcgfSAnO1xuICAgICAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3V0ICs9ICcgLCBtZXNzYWdlOiBcXCdzaG91bGQgYmUgJztcbiAgICAgICAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcnICsgKCR0eXBlU2NoZW1hLmpvaW4oXCIsXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXQgKz0gJ1xcJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB9ICc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgIGlmICghaXQuY29tcG9zaXRlUnVsZSAmJiAkYnJlYWtPbkVycm9yKSB7IC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmIChpdC5hc3luYykge1xuICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH1cbiAgfVxuICBpZiAoaXQuc2NoZW1hLiRyZWYgJiYgISRyZWZLZXl3b3Jkcykge1xuICAgIG91dCArPSAnICcgKyAoaXQuUlVMRVMuYWxsLiRyZWYuY29kZShpdCwgJyRyZWYnKSkgKyAnICc7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgIG91dCArPSAnIH0gaWYgKGVycm9ycyA9PT0gJztcbiAgICAgIGlmICgkdG9wKSB7XG4gICAgICAgIG91dCArPSAnMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJ2VycnNfJyArICgkbHZsKTtcbiAgICAgIH1cbiAgICAgIG91dCArPSAnKSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlczIgKz0gJ30nO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYXJyMiA9IGl0LlJVTEVTO1xuICAgIGlmIChhcnIyKSB7XG4gICAgICB2YXIgJHJ1bGVzR3JvdXAsIGkyID0gLTEsXG4gICAgICAgIGwyID0gYXJyMi5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkyIDwgbDIpIHtcbiAgICAgICAgJHJ1bGVzR3JvdXAgPSBhcnIyW2kyICs9IDFdO1xuICAgICAgICBpZiAoJHNob3VsZFVzZUdyb3VwKCRydWxlc0dyb3VwKSkge1xuICAgICAgICAgIGlmICgkcnVsZXNHcm91cC50eXBlKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyBpZiAoJyArIChpdC51dGlsLmNoZWNrRGF0YVR5cGUoJHJ1bGVzR3JvdXAudHlwZSwgJGRhdGEpKSArICcpIHsgJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0Lm9wdHMudXNlRGVmYXVsdHMgJiYgIWl0LmNvbXBvc2l0ZVJ1bGUpIHtcbiAgICAgICAgICAgIGlmICgkcnVsZXNHcm91cC50eXBlID09ICdvYmplY3QnICYmIGl0LnNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hLnByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgJHNjaGVtYUtleXMgPSBPYmplY3Qua2V5cygkc2NoZW1hKTtcbiAgICAgICAgICAgICAgdmFyIGFycjMgPSAkc2NoZW1hS2V5cztcbiAgICAgICAgICAgICAgaWYgKGFycjMpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByb3BlcnR5S2V5LCBpMyA9IC0xLFxuICAgICAgICAgICAgICAgICAgbDMgPSBhcnIzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkzIDwgbDMpIHtcbiAgICAgICAgICAgICAgICAgICRwcm9wZXJ0eUtleSA9IGFycjNbaTMgKz0gMV07XG4gICAgICAgICAgICAgICAgICB2YXIgJHNjaCA9ICRzY2hlbWFbJHByb3BlcnR5S2V5XTtcbiAgICAgICAgICAgICAgICAgIGlmICgkc2NoLmRlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyBpdC51dGlsLmdldFByb3BlcnR5KCRwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnICBpZiAoJyArICgkcGFzc0RhdGEpICsgJyA9PT0gdW5kZWZpbmVkKSAnICsgKCRwYXNzRGF0YSkgKyAnID0gJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudXNlRGVmYXVsdHMgPT0gJ3NoYXJlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJyAnICsgKGl0LnVzZURlZmF1bHQoJHNjaC5kZWZhdWx0KSkgKyAnICc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgJyArIChKU09OLnN0cmluZ2lmeSgkc2NoLmRlZmF1bHQpKSArICcgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJzsgJztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHJ1bGVzR3JvdXAudHlwZSA9PSAnYXJyYXknICYmIEFycmF5LmlzQXJyYXkoaXQuc2NoZW1hLml0ZW1zKSkge1xuICAgICAgICAgICAgICB2YXIgYXJyNCA9IGl0LnNjaGVtYS5pdGVtcztcbiAgICAgICAgICAgICAgaWYgKGFycjQpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHNjaCwgJGkgPSAtMSxcbiAgICAgICAgICAgICAgICAgIGw0ID0gYXJyNC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIHdoaWxlICgkaSA8IGw0KSB7XG4gICAgICAgICAgICAgICAgICAkc2NoID0gYXJyNFskaSArPSAxXTtcbiAgICAgICAgICAgICAgICAgIGlmICgkc2NoLmRlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJHBhc3NEYXRhID0gJGRhdGEgKyAnWycgKyAkaSArICddJztcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgIGlmICgnICsgKCRwYXNzRGF0YSkgKyAnID09PSB1bmRlZmluZWQpICcgKyAoJHBhc3NEYXRhKSArICcgPSAnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQub3B0cy51c2VEZWZhdWx0cyA9PSAnc2hhcmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgIG91dCArPSAnICcgKyAoaXQudXNlRGVmYXVsdCgkc2NoLmRlZmF1bHQpKSArICcgJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJyAnICsgKEpTT04uc3RyaW5naWZ5KCRzY2guZGVmYXVsdCkpICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnOyAnO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgYXJyNSA9ICRydWxlc0dyb3VwLnJ1bGVzO1xuICAgICAgICAgIGlmIChhcnI1KSB7XG4gICAgICAgICAgICB2YXIgJHJ1bGUsIGk1ID0gLTEsXG4gICAgICAgICAgICAgIGw1ID0gYXJyNS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgd2hpbGUgKGk1IDwgbDUpIHtcbiAgICAgICAgICAgICAgJHJ1bGUgPSBhcnI1W2k1ICs9IDFdO1xuICAgICAgICAgICAgICBpZiAoJHNob3VsZFVzZVJ1bGUoJHJ1bGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyICRjb2RlID0gJHJ1bGUuY29kZShpdCwgJHJ1bGUua2V5d29yZCwgJHJ1bGVzR3JvdXAudHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKCRjb2RlKSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRjb2RlKSArICcgJztcbiAgICAgICAgICAgICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICRjbG9zaW5nQnJhY2VzMSArPSAnfSc7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkYnJlYWtPbkVycm9yKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyAnICsgKCRjbG9zaW5nQnJhY2VzMSkgKyAnICc7XG4gICAgICAgICAgICAkY2xvc2luZ0JyYWNlczEgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRydWxlc0dyb3VwLnR5cGUpIHtcbiAgICAgICAgICAgIG91dCArPSAnIH0gJztcbiAgICAgICAgICAgIGlmICgkdHlwZVNjaGVtYSAmJiAkdHlwZVNjaGVtYSA9PT0gJHJ1bGVzR3JvdXAudHlwZSAmJiAhJGNvZXJjZVRvVHlwZXMpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgZWxzZSB7ICc7XG4gICAgICAgICAgICAgIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyAnLnR5cGUnLFxuICAgICAgICAgICAgICAgICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvdHlwZSc7XG4gICAgICAgICAgICAgIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgICAgICAgICAgICAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gICAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICd0eXBlJykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczogeyB0eXBlOiBcXCcnO1xuICAgICAgICAgICAgICAgIGlmICgkdHlwZUlzQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dCArPSAnXFwnIH0gJztcbiAgICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnICwgbWVzc2FnZTogXFwnc2hvdWxkIGJlICc7XG4gICAgICAgICAgICAgICAgICBpZiAoJHR5cGVJc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dCArPSAnJyArICgkdHlwZVNjaGVtYS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXQgKz0gJycgKyAoJHR5cGVTY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgb3V0ICs9ICdcXCcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgICAgb3V0ICs9ICcgLCBzY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpICsgJyAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dCArPSAnIHt9ICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIF9fZXJyID0gb3V0O1xuICAgICAgICAgICAgICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikgeyAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgIG91dCArPSAnIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoWycgKyAoX19lcnIpICsgJ10pOyAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgb3V0ICs9ICcgaWYgKGVycm9ycyA9PT0gJztcbiAgICAgICAgICAgIGlmICgkdG9wKSB7XG4gICAgICAgICAgICAgIG91dCArPSAnMCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXQgKz0gJ2VycnNfJyArICgkbHZsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSAnKSB7ICc7XG4gICAgICAgICAgICAkY2xvc2luZ0JyYWNlczIgKz0gJ30nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoJGJyZWFrT25FcnJvcikge1xuICAgIG91dCArPSAnICcgKyAoJGNsb3NpbmdCcmFjZXMyKSArICcgJztcbiAgfVxuICBpZiAoJHRvcCkge1xuICAgIGlmICgkYXN5bmMpIHtcbiAgICAgIG91dCArPSAnIGlmIChlcnJvcnMgPT09IDApIHJldHVybiBkYXRhOyAgICAgICAgICAgJztcbiAgICAgIG91dCArPSAnIGVsc2UgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcih2RXJyb3JzKTsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gdkVycm9yczsgJztcbiAgICAgIG91dCArPSAnIHJldHVybiBlcnJvcnMgPT09IDA7ICAgICAgICc7XG4gICAgfVxuICAgIG91dCArPSAnIH07IHJldHVybiB2YWxpZGF0ZTsnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciAnICsgKCR2YWxpZCkgKyAnID0gZXJyb3JzID09PSBlcnJzXycgKyAoJGx2bCkgKyAnOyc7XG4gIH1cbiAgb3V0ID0gaXQudXRpbC5jbGVhblVwQ29kZShvdXQpO1xuICBpZiAoJHRvcCkge1xuICAgIG91dCA9IGl0LnV0aWwuZmluYWxDbGVhblVwQ29kZShvdXQsICRhc3luYyk7XG4gIH1cblxuICBmdW5jdGlvbiAkc2hvdWxkVXNlR3JvdXAoJHJ1bGVzR3JvdXApIHtcbiAgICB2YXIgcnVsZXMgPSAkcnVsZXNHcm91cC5ydWxlcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKVxuICAgICAgaWYgKCRzaG91bGRVc2VSdWxlKHJ1bGVzW2ldKSkgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiAkc2hvdWxkVXNlUnVsZSgkcnVsZSkge1xuICAgIHJldHVybiBpdC5zY2hlbWFbJHJ1bGUua2V5d29yZF0gIT09IHVuZGVmaW5lZCB8fCAoJHJ1bGUuaW1wbGVtZW50cyAmJiAkcnVsZUltcGxlbWVudHNTb21lS2V5d29yZCgkcnVsZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gJHJ1bGVJbXBsZW1lbnRzU29tZUtleXdvcmQoJHJ1bGUpIHtcbiAgICB2YXIgaW1wbCA9ICRydWxlLmltcGxlbWVudHM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbXBsLmxlbmd0aDsgaSsrKVxuICAgICAgaWYgKGl0LnNjaGVtYVtpbXBsW2ldXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSURFTlRJRklFUiA9IC9eW2Etel8kXVthLXowLTlfJC1dKiQvaTtcbnZhciBjdXN0b21SdWxlQ29kZSA9IHJlcXVpcmUoJy4vZG90anMvY3VzdG9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZEtleXdvcmQsXG4gIGdldDogZ2V0S2V5d29yZCxcbiAgcmVtb3ZlOiByZW1vdmVLZXl3b3JkXG59O1xuXG4vKipcbiAqIERlZmluZSBjdXN0b20ga2V5d29yZFxuICogQHRoaXMgIEFqdlxuICogQHBhcmFtIHtTdHJpbmd9IGtleXdvcmQgY3VzdG9tIGtleXdvcmQsIHNob3VsZCBiZSB1bmlxdWUgKGluY2x1ZGluZyBkaWZmZXJlbnQgZnJvbSBhbGwgc3RhbmRhcmQsIGN1c3RvbSBhbmQgbWFjcm8ga2V5d29yZHMpLlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmluaXRpb24ga2V5d29yZCBkZWZpbml0aW9uIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgYHR5cGVgICh0eXBlKHMpIHdoaWNoIHRoZSBrZXl3b3JkIGFwcGxpZXMgdG8pLCBgdmFsaWRhdGVgIG9yIGBjb21waWxlYC5cbiAqIEByZXR1cm4ge0Fqdn0gdGhpcyBmb3IgbWV0aG9kIGNoYWluaW5nXG4gKi9cbmZ1bmN0aW9uIGFkZEtleXdvcmQoa2V5d29yZCwgZGVmaW5pdGlvbikge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gIC8qIGVzbGludCBuby1zaGFkb3c6IDAgKi9cbiAgdmFyIFJVTEVTID0gdGhpcy5SVUxFUztcblxuICBpZiAoUlVMRVMua2V5d29yZHNba2V5d29yZF0pXG4gICAgdGhyb3cgbmV3IEVycm9yKCdLZXl3b3JkICcgKyBrZXl3b3JkICsgJyBpcyBhbHJlYWR5IGRlZmluZWQnKTtcblxuICBpZiAoIUlERU5USUZJRVIudGVzdChrZXl3b3JkKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0tleXdvcmQgJyArIGtleXdvcmQgKyAnIGlzIG5vdCBhIHZhbGlkIGlkZW50aWZpZXInKTtcblxuICBpZiAoZGVmaW5pdGlvbikge1xuICAgIGlmIChkZWZpbml0aW9uLm1hY3JvICYmIGRlZmluaXRpb24udmFsaWQgIT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJ2YWxpZFwiIG9wdGlvbiBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hY3JvIGtleXdvcmRzJyk7XG5cbiAgICB2YXIgZGF0YVR5cGUgPSBkZWZpbml0aW9uLnR5cGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVR5cGUpKSB7XG4gICAgICB2YXIgaSwgbGVuID0gZGF0YVR5cGUubGVuZ3RoO1xuICAgICAgZm9yIChpPTA7IGk8bGVuOyBpKyspIGNoZWNrRGF0YVR5cGUoZGF0YVR5cGVbaV0pO1xuICAgICAgZm9yIChpPTA7IGk8bGVuOyBpKyspIF9hZGRSdWxlKGtleXdvcmQsIGRhdGFUeXBlW2ldLCBkZWZpbml0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRhdGFUeXBlKSBjaGVja0RhdGFUeXBlKGRhdGFUeXBlKTtcbiAgICAgIF9hZGRSdWxlKGtleXdvcmQsIGRhdGFUeXBlLCBkZWZpbml0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgJGRhdGEgPSBkZWZpbml0aW9uLiRkYXRhID09PSB0cnVlICYmIHRoaXMuX29wdHMuJGRhdGE7XG4gICAgaWYgKCRkYXRhICYmICFkZWZpbml0aW9uLnZhbGlkYXRlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCckZGF0YSBzdXBwb3J0OiBcInZhbGlkYXRlXCIgZnVuY3Rpb24gaXMgbm90IGRlZmluZWQnKTtcblxuICAgIHZhciBtZXRhU2NoZW1hID0gZGVmaW5pdGlvbi5tZXRhU2NoZW1hO1xuICAgIGlmIChtZXRhU2NoZW1hKSB7XG4gICAgICBpZiAoJGRhdGEpIHtcbiAgICAgICAgbWV0YVNjaGVtYSA9IHtcbiAgICAgICAgICBhbnlPZjogW1xuICAgICAgICAgICAgbWV0YVNjaGVtYSxcbiAgICAgICAgICAgIHsgJyRyZWYnOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Vwb2JlcmV6a2luL2Fqdi9tYXN0ZXIvbGliL3JlZnMvZGF0YS5qc29uIycgfVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGRlZmluaXRpb24udmFsaWRhdGVTY2hlbWEgPSB0aGlzLmNvbXBpbGUobWV0YVNjaGVtYSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgUlVMRVMua2V5d29yZHNba2V5d29yZF0gPSBSVUxFUy5hbGxba2V5d29yZF0gPSB0cnVlO1xuXG5cbiAgZnVuY3Rpb24gX2FkZFJ1bGUoa2V5d29yZCwgZGF0YVR5cGUsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgcnVsZUdyb3VwO1xuICAgIGZvciAodmFyIGk9MDsgaTxSVUxFUy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJnID0gUlVMRVNbaV07XG4gICAgICBpZiAocmcudHlwZSA9PSBkYXRhVHlwZSkge1xuICAgICAgICBydWxlR3JvdXAgPSByZztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFydWxlR3JvdXApIHtcbiAgICAgIHJ1bGVHcm91cCA9IHsgdHlwZTogZGF0YVR5cGUsIHJ1bGVzOiBbXSB9O1xuICAgICAgUlVMRVMucHVzaChydWxlR3JvdXApO1xuICAgIH1cblxuICAgIHZhciBydWxlID0ge1xuICAgICAga2V5d29yZDoga2V5d29yZCxcbiAgICAgIGRlZmluaXRpb246IGRlZmluaXRpb24sXG4gICAgICBjdXN0b206IHRydWUsXG4gICAgICBjb2RlOiBjdXN0b21SdWxlQ29kZSxcbiAgICAgIGltcGxlbWVudHM6IGRlZmluaXRpb24uaW1wbGVtZW50c1xuICAgIH07XG4gICAgcnVsZUdyb3VwLnJ1bGVzLnB1c2gocnVsZSk7XG4gICAgUlVMRVMuY3VzdG9tW2tleXdvcmRdID0gcnVsZTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gY2hlY2tEYXRhVHlwZShkYXRhVHlwZSkge1xuICAgIGlmICghUlVMRVMudHlwZXNbZGF0YVR5cGVdKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZSAnICsgZGF0YVR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cblxuLyoqXG4gKiBHZXQga2V5d29yZFxuICogQHRoaXMgIEFqdlxuICogQHBhcmFtIHtTdHJpbmd9IGtleXdvcmQgcHJlLWRlZmluZWQgb3IgY3VzdG9tIGtleXdvcmQuXG4gKiBAcmV0dXJuIHtPYmplY3R8Qm9vbGVhbn0gY3VzdG9tIGtleXdvcmQgZGVmaW5pdGlvbiwgYHRydWVgIGlmIGl0IGlzIGEgcHJlZGVmaW5lZCBrZXl3b3JkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gZ2V0S2V5d29yZChrZXl3b3JkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIHJ1bGUgPSB0aGlzLlJVTEVTLmN1c3RvbVtrZXl3b3JkXTtcbiAgcmV0dXJuIHJ1bGUgPyBydWxlLmRlZmluaXRpb24gOiB0aGlzLlJVTEVTLmtleXdvcmRzW2tleXdvcmRdIHx8IGZhbHNlO1xufVxuXG5cbi8qKlxuICogUmVtb3ZlIGtleXdvcmRcbiAqIEB0aGlzICBBanZcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXl3b3JkIHByZS1kZWZpbmVkIG9yIGN1c3RvbSBrZXl3b3JkLlxuICogQHJldHVybiB7QWp2fSB0aGlzIGZvciBtZXRob2QgY2hhaW5pbmdcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlS2V5d29yZChrZXl3b3JkKSB7XG4gIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgdmFyIFJVTEVTID0gdGhpcy5SVUxFUztcbiAgZGVsZXRlIFJVTEVTLmtleXdvcmRzW2tleXdvcmRdO1xuICBkZWxldGUgUlVMRVMuYWxsW2tleXdvcmRdO1xuICBkZWxldGUgUlVMRVMuY3VzdG9tW2tleXdvcmRdO1xuICBmb3IgKHZhciBpPTA7IGk8UlVMRVMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcnVsZXMgPSBSVUxFU1tpXS5ydWxlcztcbiAgICBmb3IgKHZhciBqPTA7IGo8cnVsZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmIChydWxlc1tqXS5rZXl3b3JkID09IGtleXdvcmQpIHtcbiAgICAgICAgcnVsZXMuc3BsaWNlKGosIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuLi9hc24xJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgYXBpID0gZXhwb3J0cztcblxuYXBpLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShuYW1lLCBib2R5KSB7XG4gIHJldHVybiBuZXcgRW50aXR5KG5hbWUsIGJvZHkpO1xufTtcblxuZnVuY3Rpb24gRW50aXR5KG5hbWUsIGJvZHkpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5ib2R5ID0gYm9keTtcblxuICB0aGlzLmRlY29kZXJzID0ge307XG4gIHRoaXMuZW5jb2RlcnMgPSB7fTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2NyZWF0ZU5hbWVkID0gZnVuY3Rpb24gY3JlYXRlTmFtZWQoYmFzZSkge1xuICB2YXIgbmFtZWQ7XG4gIHRyeSB7XG4gICAgbmFtZWQgPSByZXF1aXJlKCd2bScpLnJ1bkluVGhpc0NvbnRleHQoXG4gICAgICAnKGZ1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKGVudGl0eSkge1xcbicgK1xuICAgICAgJyAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XFxuJyArXG4gICAgICAnfSknXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIG5hbWVkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XG4gICAgfTtcbiAgfVxuICBpbmhlcml0cyhuYW1lZCwgYmFzZSk7XG4gIG5hbWVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gaW5pdG5hbWVkKGVudGl0eSkge1xuICAgIGJhc2UuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB9O1xuXG4gIHJldHVybiBuZXcgbmFtZWQodGhpcyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXREZWNvZGVyID0gZnVuY3Rpb24gX2dldERlY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBlbmNvZGVyXG4gIGlmICghdGhpcy5lbmNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZW5jb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsIC8qIGludGVybmFsICovIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLl9nZXRFbmNvZGVyKGVuYykuZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIFJlcG9ydGVyID0gcmVxdWlyZSgnLi4vYmFzZScpLlJlcG9ydGVyO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICByZXR1cm4geyBvZmZzZXQ6IHRoaXMub2Zmc2V0LCByZXBvcnRlcjogUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUuY2FsbCh0aGlzKSB9O1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoc2F2ZSkge1xuICAvLyBSZXR1cm4gc2tpcHBlZCBkYXRhXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuICByZXMub2Zmc2V0ID0gc2F2ZS5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldDtcblxuICB0aGlzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICBSZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZS5jYWxsKHRoaXMsIHNhdmUucmVwb3J0ZXIpO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0aGlzLmxlbmd0aDtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OChmYWlsKSB7XG4gIGlmICh0aGlzLm9mZnNldCArIDEgPD0gdGhpcy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5yZWFkVUludDgodGhpcy5vZmZzZXQrKywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAoYnl0ZXMsIGZhaWwpIHtcbiAgaWYgKCEodGhpcy5vZmZzZXQgKyBieXRlcyA8PSB0aGlzLmxlbmd0aCkpXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG5cbiAgdmFyIHJlcyA9IG5ldyBEZWNvZGVyQnVmZmVyKHRoaXMuYmFzZSk7XG5cbiAgLy8gU2hhcmUgcmVwb3J0ZXIgc3RhdGVcbiAgcmVzLl9yZXBvcnRlclN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXMub2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gIHJlcy5sZW5ndGggPSB0aGlzLm9mZnNldCArIGJ5dGVzO1xuICB0aGlzLm9mZnNldCArPSBieXRlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUucmF3ID0gZnVuY3Rpb24gcmF3KHNhdmUpIHtcbiAgcmV0dXJuIHRoaXMuYmFzZS5zbGljZShzYXZlID8gc2F2ZS5vZmZzZXQgOiB0aGlzLm9mZnNldCwgdGhpcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIShpdGVtIGluc3RhbmNlb2YgRW5jb2RlckJ1ZmZlcikpXG4gICAgICAgIGl0ZW0gPSBuZXcgRW5jb2RlckJ1ZmZlcihpdGVtLCByZXBvcnRlcik7XG4gICAgICB0aGlzLmxlbmd0aCArPSBpdGVtLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0sIHRoaXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoISgwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDB4ZmYpKVxuICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdub24tYnl0ZSBFbmNvZGVyQnVmZmVyIHZhbHVlJyk7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbnN1cHBvcnRlZCB0eXBlOiAnICsgdHlwZW9mIHZhbHVlKTtcbiAgfVxufVxuZXhwb3J0cy5FbmNvZGVyQnVmZmVyID0gRW5jb2RlckJ1ZmZlcjtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gbmV3IEJ1ZmZlcih0aGlzLmxlbmd0aCk7XG4gIGlmICghb2Zmc2V0KVxuICAgIG9mZnNldCA9IDA7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBvdXQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnZhbHVlLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaXRlbS5qb2luKG91dCwgb2Zmc2V0KTtcbiAgICAgIG9mZnNldCArPSBpdGVtLmxlbmd0aDtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgb3V0W29mZnNldF0gPSB0aGlzLnZhbHVlO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJylcbiAgICAgIG91dC53cml0ZSh0aGlzLnZhbHVlLCBvZmZzZXQpO1xuICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcih0aGlzLnZhbHVlKSlcbiAgICAgIHRoaXMudmFsdWUuY29weShvdXQsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IHRoaXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4iLCJ2YXIgYmFzZSA9IGV4cG9ydHM7XG5cbmJhc2UuUmVwb3J0ZXIgPSByZXF1aXJlKCcuL3JlcG9ydGVyJykuUmVwb3J0ZXI7XG5iYXNlLkRlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkRlY29kZXJCdWZmZXI7XG5iYXNlLkVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkVuY29kZXJCdWZmZXI7XG5iYXNlLk5vZGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbiIsInZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZScpLkVuY29kZXJCdWZmZXI7XG52YXIgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5EZWNvZGVyQnVmZmVyO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuLy8gU3VwcG9ydGVkIHRhZ3NcbnZhciB0YWdzID0gW1xuICAnc2VxJywgJ3NlcW9mJywgJ3NldCcsICdzZXRvZicsICdvYmppZCcsICdib29sJyxcbiAgJ2dlbnRpbWUnLCAndXRjdGltZScsICdudWxsXycsICdlbnVtJywgJ2ludCcsICdvYmpEZXNjJyxcbiAgJ2JpdHN0cicsICdibXBzdHInLCAnY2hhcnN0cicsICdnZW5zdHInLCAnZ3JhcGhzdHInLCAnaWE1c3RyJywgJ2lzbzY0NnN0cicsXG4gICdudW1zdHInLCAnb2N0c3RyJywgJ3ByaW50c3RyJywgJ3Q2MXN0cicsICd1bmlzdHInLCAndXRmOHN0cicsICd2aWRlb3N0cidcbl07XG5cbi8vIFB1YmxpYyBtZXRob2RzIGxpc3RcbnZhciBtZXRob2RzID0gW1xuICAna2V5JywgJ29iaicsICd1c2UnLCAnb3B0aW9uYWwnLCAnZXhwbGljaXQnLCAnaW1wbGljaXQnLCAnZGVmJywgJ2Nob2ljZScsXG4gICdhbnknLCAnY29udGFpbnMnXG5dLmNvbmNhdCh0YWdzKTtcblxuLy8gT3ZlcnJpZGVkIG1ldGhvZHMgbGlzdFxudmFyIG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB7fTtcbiAgdGhpcy5fYmFzZVN0YXRlID0gc3RhdGU7XG5cbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICBzdGF0ZS5jb250YWlucyA9IG51bGw7XG5cbiAgLy8gU2hvdWxkIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugb24gZWFjaCBtZXRob2RcbiAgaWYgKCFzdGF0ZS5wYXJlbnQpIHtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX3dyYXAoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG52YXIgc3RhdGVQcm9wcyA9IFtcbiAgJ2VuYycsICdwYXJlbnQnLCAnY2hpbGRyZW4nLCAndGFnJywgJ2FyZ3MnLCAncmV2ZXJzZUFyZ3MnLCAnY2hvaWNlJyxcbiAgJ29wdGlvbmFsJywgJ2FueScsICdvYmonLCAndXNlJywgJ2FsdGVyZWRVc2UnLCAna2V5JywgJ2RlZmF1bHQnLCAnZXhwbGljaXQnLFxuICAnaW1wbGljaXQnLCAnY29udGFpbnMnXG5dO1xuXG5Ob2RlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBjc3RhdGUgPSB7fTtcbiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTtcbiAgfSk7XG4gIHZhciByZXMgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihjc3RhdGUucGFyZW50KTtcbiAgcmVzLl9iYXNlU3RhdGUgPSBjc3RhdGU7XG4gIHJldHVybiByZXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fd3JhcCA9IGZ1bmN0aW9uIHdyYXAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIHRoaXNbbWV0aG9kXSA9IGZ1bmN0aW9uIF93cmFwcGVkTWV0aG9kKCkge1xuICAgICAgdmFyIGNsb25lID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5wdXNoKGNsb25lKTtcbiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGJvZHkpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5wYXJlbnQgPT09IG51bGwpO1xuICBib2R5LmNhbGwodGhpcyk7XG5cbiAgLy8gRmlsdGVyIGNoaWxkcmVuXG4gIHN0YXRlLmNoaWxkcmVuID0gc3RhdGUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLl9iYXNlU3RhdGUucGFyZW50ID09PSB0aGlzO1xuICB9LCB0aGlzKTtcbiAgYXNzZXJ0LmVxdWFsKHN0YXRlLmNoaWxkcmVuLmxlbmd0aCwgMSwgJ1Jvb3Qgbm9kZSBjYW4gaGF2ZSBvbmx5IG9uZSBjaGlsZCcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3VzZUFyZ3MgPSBmdW5jdGlvbiB1c2VBcmdzKGFyZ3MpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlbiBhbmQgYXJnc1xuICB2YXIgY2hpbGRyZW4gPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfSwgdGhpcyk7XG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gIShhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5jaGlsZHJlbiA9PT0gbnVsbCk7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgIC8vIFJlcGxhY2UgcGFyZW50IHRvIG1haW50YWluIGJhY2t3YXJkIGxpbmtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9IHRoaXM7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmFyZ3MgPT09IG51bGwpO1xuICAgIHN0YXRlLmFyZ3MgPSBhcmdzO1xuICAgIHN0YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcgfHwgYXJnLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpXG4gICAgICAgIHJldHVybiBhcmc7XG5cbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGFyZykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAoa2V5IHwgMCkpXG4gICAgICAgICAga2V5IHw9IDA7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ1trZXldO1xuICAgICAgICByZXNbdmFsdWVdID0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICB9XG59O1xuXG4vL1xuLy8gT3ZlcnJpZGVkIG1ldGhvZHNcbi8vXG5cbm92ZXJyaWRlZC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBOb2RlLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gX292ZXJyaWRlZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogJyArIHN0YXRlLmVuYyk7XG4gIH07XG59KTtcblxuLy9cbi8vIFB1YmxpYyBtZXRob2RzXG4vL1xuXG50YWdzLmZvckVhY2goZnVuY3Rpb24odGFnKSB7XG4gIE5vZGUucHJvdG90eXBlW3RhZ10gPSBmdW5jdGlvbiBfdGFnTWV0aG9kKCkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBhc3NlcnQoc3RhdGUudGFnID09PSBudWxsKTtcbiAgICBzdGF0ZS50YWcgPSB0YWc7XG5cbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuTm9kZS5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGl0ZW0pIHtcbiAgYXNzZXJ0KGl0ZW0pO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZGVmID0gZnVuY3Rpb24gZGVmKHZhbCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpO1xuICBzdGF0ZVsnZGVmYXVsdCddID0gdmFsO1xuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5leHBsaWNpdCA9IGZ1bmN0aW9uIGV4cGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuaW1wbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vYmogPSBmdW5jdGlvbiBvYmooKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUua2V5ID09PSBudWxsKTtcbiAgc3RhdGUua2V5ID0gbmV3S2V5O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gYW55KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgc3RhdGUuYW55ID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmNob2ljZSA9IGZ1bmN0aW9uIGNob2ljZShvYmopIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS5jb250YWlucyA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gRGVjb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQud3JhcFJlc3VsdChzdGF0ZS5jaGlsZHJlblswXS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKSk7XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlWydkZWZhdWx0J107XG4gIHZhciBwcmVzZW50ID0gdHJ1ZTtcblxuICB2YXIgcHJldktleSA9IG51bGw7XG4gIGlmIChzdGF0ZS5rZXkgIT09IG51bGwpXG4gICAgcHJldktleSA9IGlucHV0LmVudGVyS2V5KHN0YXRlLmtleSk7XG5cbiAgLy8gQ2hlY2sgaWYgdGFnIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCkge1xuICAgIHZhciB0YWcgPSBudWxsO1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmV4cGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUuaW1wbGljaXQ7XG4gICAgZWxzZSBpZiAoc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgdGFnID0gc3RhdGUudGFnO1xuXG4gICAgaWYgKHRhZyA9PT0gbnVsbCAmJiAhc3RhdGUuYW55KSB7XG4gICAgICAvLyBUcmlhbCBhbmQgRXJyb3JcbiAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgICAgICB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgcHJlc2VudCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXNlbnQgPSB0aGlzLl9wZWVrVGFnKGlucHV0LCB0YWcsIHN0YXRlLmFueSk7XG5cbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHByZXNlbnQpKVxuICAgICAgICByZXR1cm4gcHJlc2VudDtcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIG9iamVjdCBvbiBzdGFja1xuICB2YXIgcHJldk9iajtcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHByZXZPYmogPSBpbnB1dC5lbnRlck9iamVjdCgpO1xuXG4gIGlmIChwcmVzZW50KSB7XG4gICAgLy8gVW53cmFwIGV4cGxpY2l0IHZhbHVlc1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGV4cGxpY2l0ID0gdGhpcy5fZGVjb2RlVGFnKGlucHV0LCBzdGF0ZS5leHBsaWNpdCk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihleHBsaWNpdCkpXG4gICAgICAgIHJldHVybiBleHBsaWNpdDtcbiAgICAgIGlucHV0ID0gZXhwbGljaXQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0ID0gaW5wdXQub2Zmc2V0O1xuXG4gICAgLy8gVW53cmFwIGltcGxpY2l0IGFuZCBub3JtYWwgdmFsdWVzXG4gICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbCAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdmFyIGJvZHkgPSB0aGlzLl9kZWNvZGVUYWcoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbCA/IHN0YXRlLmltcGxpY2l0IDogc3RhdGUudGFnLFxuICAgICAgICBzdGF0ZS5hbnlcbiAgICAgICk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihib2R5KSlcbiAgICAgICAgcmV0dXJuIGJvZHk7XG5cbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHJlc3VsdCA9IGlucHV0LnJhdyhzYXZlKTtcbiAgICAgIGVsc2VcbiAgICAgICAgaW5wdXQgPSBib2R5O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIHN0YXJ0LCBpbnB1dC5sZW5ndGgsICd0YWdnZWQnKTtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHJhY2sgJiYgc3RhdGUudGFnICE9PSBudWxsKVxuICAgICAgb3B0aW9ucy50cmFjayhpbnB1dC5wYXRoKCksIGlucHV0Lm9mZnNldCwgaW5wdXQubGVuZ3RoLCAnY29udGVudCcpO1xuXG4gICAgLy8gU2VsZWN0IHByb3BlciBtZXRob2QgZm9yIHRhZ1xuICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICByZXN1bHQgPSByZXN1bHQ7XG4gICAgZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICBlbHNlXG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGlucHV0LmlzRXJyb3IocmVzdWx0KSlcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBEZWNvZGUgY2hpbGRyZW5cbiAgICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwgJiYgc3RhdGUuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIHN0YXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gZGVjb2RlQ2hpbGRyZW4oY2hpbGQpIHtcbiAgICAgICAgLy8gTk9URTogV2UgYXJlIGlnbm9yaW5nIGVycm9ycyBoZXJlLCB0byBsZXQgcGFyc2VyIGNvbnRpbnVlIHdpdGggb3RoZXJcbiAgICAgICAgLy8gcGFydHMgb2YgZW5jb2RlZCBkYXRhXG4gICAgICAgIGNoaWxkLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIGNvbnRhaW5lZC9lbmNvZGVkIGJ5IHNjaGVtYSwgb25seSBpbiBiaXQgb3Igb2N0ZXQgc3RyaW5nc1xuICAgIGlmIChzdGF0ZS5jb250YWlucyAmJiAoc3RhdGUudGFnID09PSAnb2N0c3RyJyB8fCBzdGF0ZS50YWcgPT09ICdiaXRzdHInKSkge1xuICAgICAgdmFyIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgICAgLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gUG9wIG9iamVjdFxuICBpZiAoc3RhdGUub2JqICYmIHByZXNlbnQpXG4gICAgcmVzdWx0ID0gaW5wdXQubGVhdmVPYmplY3QocHJldk9iaik7XG5cbiAgLy8gU2V0IGtleVxuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsICYmIChyZXN1bHQgIT09IG51bGwgfHwgcHJlc2VudCA9PT0gdHJ1ZSkpXG4gICAgaW5wdXQubGVhdmVLZXkocHJldktleSwgc3RhdGUua2V5LCByZXN1bHQpO1xuICBlbHNlIGlmIChwcmV2S2V5ICE9PSBudWxsKVxuICAgIGlucHV0LmV4aXRLZXkocHJldktleSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVHZW5lcmljID0gZnVuY3Rpb24gZGVjb2RlR2VuZXJpYyh0YWcsIGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTGlzdChpbnB1dCwgdGFnLCBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuXG4gIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCd1bmtub3duIHRhZzogJyArIHRhZyk7XG4gIH1cbn07XG5cbk5vZGUucHJvdG90eXBlLl9nZXRVc2UgPSBmdW5jdGlvbiBfZ2V0VXNlKGVudGl0eSwgb2JqKSB7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgbWF0Y2ggPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpLnNvbWUoZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbHVlID0gbm9kZS5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXN1bHQgPSB7IHR5cGU6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgICBtYXRjaCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaW5wdXQucmVzdG9yZShzYXZlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIHRoaXMpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIGlucHV0LmVycm9yKCdDaG9pY2Ugbm90IG1hdGNoZWQnKTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy9cbi8vIEVuY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fY3JlYXRlRW5jb2RlckJ1ZmZlciA9IGZ1bmN0aW9uIGNyZWF0ZUVuY29kZXJCdWZmZXIoZGF0YSkge1xuICByZXR1cm4gbmV3IEVuY29kZXJCdWZmZXIoZGF0YSwgdGhpcy5yZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbCAmJiBzdGF0ZVsnZGVmYXVsdCddID09PSBkYXRhKVxuICAgIHJldHVybjtcblxuICB2YXIgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgLy8gRGVjb2RlIHJvb3Qgbm9kZVxuICBpZiAoc3RhdGUucGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBzdGF0ZS5jaGlsZHJlblswXS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyIHx8IG5ldyBSZXBvcnRlcigpKTtcblxuICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAvLyBTZXQgcmVwb3J0ZXIgdG8gc2hhcmUgaXQgd2l0aCBhIGNoaWxkIGNsYXNzXG4gIHRoaXMucmVwb3J0ZXIgPSByZXBvcnRlcjtcblxuICAvLyBDaGVjayBpZiBkYXRhIGlzIHRoZXJlXG4gIGlmIChzdGF0ZS5vcHRpb25hbCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSAhPT0gbnVsbClcbiAgICAgIGRhdGEgPSBzdGF0ZVsnZGVmYXVsdCddXG4gICAgZWxzZVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIHZhciBjb250ZW50ID0gbnVsbDtcbiAgdmFyIHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHtcbiAgICBjb250ZW50ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICB2YXIgcHJldktleSA9IHJlcG9ydGVyLmVudGVyS2V5KGNoaWxkLl9iYXNlU3RhdGUua2V5KTtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBleHBlY3RlZCwgYnV0IGlucHV0IGlzIG5vdCBvYmplY3QnKTtcblxuICAgICAgdmFyIHJlcyA9IGNoaWxkLl9lbmNvZGUoZGF0YVtjaGlsZC5fYmFzZVN0YXRlLmtleV0sIHJlcG9ydGVyLCBkYXRhKTtcbiAgICAgIHJlcG9ydGVyLmxlYXZlS2V5KHByZXZLZXkpO1xuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHRoaXMpLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdGF0ZS50YWcgPT09ICdzZXFvZicgfHwgc3RhdGUudGFnID09PSAnc2V0b2YnKSB7XG4gICAgICAvLyBUT0RPKGluZHV0bnkpOiB0aGlzIHNob3VsZCBiZSB0aHJvd24gb24gRFNMIGxldmVsXG4gICAgICBpZiAoIShzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3MubGVuZ3RoID09PSAxKSlcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdUb28gbWFueSBhcmdzIGZvciA6ICcgKyBzdGF0ZS50YWcpO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignc2Vxb2Yvc2V0b2YsIGJ1dCBkYXRhIGlzIG5vdCBBcnJheScpO1xuXG4gICAgICB2YXIgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRVc2Uoc3RhdGUuYXJnc1swXSwgZGF0YSkuX2VuY29kZShpdGVtLCByZXBvcnRlcik7XG4gICAgICB9LCBjaGlsZCkpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9nZXRVc2Uoc3RhdGUudXNlLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5fZW5jb2RlUHJpbWl0aXZlKHN0YXRlLnRhZywgZGF0YSk7XG4gICAgICBwcmltaXRpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEVuY29kZSBkYXRhIGl0c2VsZlxuICB2YXIgcmVzdWx0O1xuICBpZiAoIXN0YXRlLmFueSAmJiBzdGF0ZS5jaG9pY2UgPT09IG51bGwpIHtcbiAgICB2YXIgdGFnID0gc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZztcbiAgICB2YXIgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgdmFyIG5vZGUgPSBzdGF0ZS5jaG9pY2VbZGF0YS50eXBlXTtcbiAgaWYgKCFub2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgc3RhdGUucmV2ZXJzZUFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIG51bGwsIG51bGwpO1xuICBlbHNlIGlmICh0YWcgPT09ICdnZW50aW1lJyB8fCB0YWcgPT09ICd1dGN0aW1lJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlVGltZShkYXRhLCB0YWcpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU51bGwoKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlSW50KGRhdGEsIHN0YXRlLmFyZ3MgJiYgc3RhdGUucmV2ZXJzZUFyZ3NbMF0pO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlQm9vbChkYXRhKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihkYXRhLCB0YWcpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB0YWc6ICcgKyB0YWcpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzTnVtc3RyID0gZnVuY3Rpb24gaXNOdW1zdHIoc3RyKSB7XG4gIHJldHVybiAvXlswLTkgXSokLy50ZXN0KHN0cik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNQcmludHN0ciA9IGZ1bmN0aW9uIGlzUHJpbnRzdHIoc3RyKSB7XG4gIHJldHVybiAvXltBLVphLXowLTkgJ1xcKFxcKVxcKyxcXC1cXC5cXC86PVxcP10qJC8udGVzdChzdHIpO1xufTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmZ1bmN0aW9uIFJlcG9ydGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5fcmVwb3J0ZXJTdGF0ZSA9IHtcbiAgICBvYmo6IG51bGwsXG4gICAgcGF0aDogW10sXG4gICAgb3B0aW9uczogb3B0aW9ucyB8fCB7fSxcbiAgICBlcnJvcnM6IFtdXG4gIH07XG59XG5leHBvcnRzLlJlcG9ydGVyID0gUmVwb3J0ZXI7XG5cblJlcG9ydGVyLnByb3RvdHlwZS5pc0Vycm9yID0gZnVuY3Rpb24gaXNFcnJvcihvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmV0dXJuIHsgb2JqOiBzdGF0ZS5vYmosIHBhdGhMZW46IHN0YXRlLnBhdGgubGVuZ3RoIH07XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoZGF0YSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLm9iaiA9IGRhdGEub2JqO1xuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBkYXRhLnBhdGhMZW4pO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyS2V5ID0gZnVuY3Rpb24gZW50ZXJLZXkoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGgucHVzaChrZXkpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmV4aXRLZXkgPSBmdW5jdGlvbiBleGl0S2V5KGluZGV4KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgaW5kZXggLSAxKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZUtleSA9IGZ1bmN0aW9uIGxlYXZlS2V5KGluZGV4LCBrZXksIHZhbHVlKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdGhpcy5leGl0S2V5KGluZGV4KTtcbiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbClcbiAgICBzdGF0ZS5vYmpba2V5XSA9IHZhbHVlO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLmpvaW4oJy8nKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBwcmV2ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSB7fTtcbiAgcmV0dXJuIHByZXY7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVPYmplY3QgPSBmdW5jdGlvbiBsZWF2ZU9iamVjdChwcmV2KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIG5vdyA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0gcHJldjtcbiAgcmV0dXJuIG5vdztcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICB2YXIgZXJyO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBpbmhlcml0ZWQgPSBtc2cgaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xuICBpZiAoaW5oZXJpdGVkKSB7XG4gICAgZXJyID0gbXNnO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBSZXBvcnRlckVycm9yKHN0YXRlLnBhdGgubWFwKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgIHJldHVybiAnWycgKyBKU09OLnN0cmluZ2lmeShlbGVtKSArICddJztcbiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spO1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgdGhyb3cgZXJyO1xuXG4gIGlmICghaW5oZXJpdGVkKVxuICAgIHN0YXRlLmVycm9ycy5wdXNoKGVycik7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS53cmFwUmVzdWx0ID0gZnVuY3Rpb24gd3JhcFJlc3VsdChyZXN1bHQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgcmV0dXJuIHJlc3VsdDtcblxuICByZXR1cm4ge1xuICAgIHJlc3VsdDogdGhpcy5pc0Vycm9yKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0LFxuICAgIGVycm9yczogc3RhdGUuZXJyb3JzXG4gIH07XG59O1xuXG5mdW5jdGlvbiBSZXBvcnRlckVycm9yKHBhdGgsIG1zZykge1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnJldGhyb3cobXNnKTtcbn07XG5pbmhlcml0cyhSZXBvcnRlckVycm9yLCBFcnJvcik7XG5cblJlcG9ydGVyRXJyb3IucHJvdG90eXBlLnJldGhyb3cgPSBmdW5jdGlvbiByZXRocm93KG1zZykge1xuICB0aGlzLm1lc3NhZ2UgPSBtc2cgKyAnIGF0OiAnICsgKHRoaXMucGF0aCB8fCAnKHNoYWxsb3cpJyk7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBSZXBvcnRlckVycm9yKTtcblxuICBpZiAoIXRoaXMuc3RhY2spIHtcbiAgICB0cnkge1xuICAgICAgLy8gSUUgb25seSBhZGRzIHN0YWNrIHdoZW4gdGhyb3duXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnN0YWNrID0gZS5zdGFjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLnRhZ0NsYXNzID0ge1xuICAwOiAndW5pdmVyc2FsJyxcbiAgMTogJ2FwcGxpY2F0aW9uJyxcbiAgMjogJ2NvbnRleHQnLFxuICAzOiAncHJpdmF0ZSdcbn07XG5leHBvcnRzLnRhZ0NsYXNzQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnQ2xhc3MpO1xuXG5leHBvcnRzLnRhZyA9IHtcbiAgMHgwMDogJ2VuZCcsXG4gIDB4MDE6ICdib29sJyxcbiAgMHgwMjogJ2ludCcsXG4gIDB4MDM6ICdiaXRzdHInLFxuICAweDA0OiAnb2N0c3RyJyxcbiAgMHgwNTogJ251bGxfJyxcbiAgMHgwNjogJ29iamlkJyxcbiAgMHgwNzogJ29iakRlc2MnLFxuICAweDA4OiAnZXh0ZXJuYWwnLFxuICAweDA5OiAncmVhbCcsXG4gIDB4MGE6ICdlbnVtJyxcbiAgMHgwYjogJ2VtYmVkJyxcbiAgMHgwYzogJ3V0ZjhzdHInLFxuICAweDBkOiAncmVsYXRpdmVPaWQnLFxuICAweDEwOiAnc2VxJyxcbiAgMHgxMTogJ3NldCcsXG4gIDB4MTI6ICdudW1zdHInLFxuICAweDEzOiAncHJpbnRzdHInLFxuICAweDE0OiAndDYxc3RyJyxcbiAgMHgxNTogJ3ZpZGVvc3RyJyxcbiAgMHgxNjogJ2lhNXN0cicsXG4gIDB4MTc6ICd1dGN0aW1lJyxcbiAgMHgxODogJ2dlbnRpbWUnLFxuICAweDE5OiAnZ3JhcGhzdHInLFxuICAweDFhOiAnaXNvNjQ2c3RyJyxcbiAgMHgxYjogJ2dlbnN0cicsXG4gIDB4MWM6ICd1bmlzdHInLFxuICAweDFkOiAnY2hhcnN0cicsXG4gIDB4MWU6ICdibXBzdHInXG59O1xuZXhwb3J0cy50YWdCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWcpO1xuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8XG4gICAgKGRlY29kZWRUYWcudGFnU3RyICsgJ29mJykgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIHZhciBudW1zdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihudW1zdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdudW1zdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpbnRzdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRzdHI7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU9iamlkID0gZnVuY3Rpb24gZGVjb2RlT2JqaWQoYnVmZmVyLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICB2YXIgaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgc3ViaWRlbnQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWRlbnQgPDw9IDc7XG4gICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmO1xuICAgIGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkge1xuICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG4gICAgICBpZGVudCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzdWJpZGVudCAmIDB4ODApXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG5cbiAgdmFyIGZpcnN0ID0gKGlkZW50aWZpZXJzWzBdIC8gNDApIHwgMDtcbiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIHZhciB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbChidWZmZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIHZhciByZXMgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVzICE9PSAwO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChidWZmZXIsIHZhbHVlcykge1xuICAvLyBCaWdpbnQsIHJldHVybiBhcyBpdCBpcyAoYXNzdW1lIGJpZyBlbmRpYW4pXG4gIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gIHZhciByZXMgPSBuZXcgYmlnbnVtKHJhdyk7XG5cbiAgaWYgKHZhbHVlcylcbiAgICByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXREZWNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHtcbiAgdmFyIHRhZyA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcih0YWcpKVxuICAgIHJldHVybiB0YWc7XG5cbiAgdmFyIGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIHZhciBwcmltaXRpdmUgPSAodGFnICYgMHgyMCkgPT09IDA7XG5cbiAgLy8gTXVsdGktb2N0ZXQgdGFnIC0gbG9hZFxuICBpZiAoKHRhZyAmIDB4MWYpID09PSAweDFmKSB7XG4gICAgdmFyIG9jdCA9IHRhZztcbiAgICB0YWcgPSAwO1xuICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHtcbiAgICAgIG9jdCA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgICBpZiAoYnVmLmlzRXJyb3Iob2N0KSlcbiAgICAgICAgcmV0dXJuIG9jdDtcblxuICAgICAgdGFnIDw8PSA3O1xuICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZyAmPSAweDFmO1xuICB9XG4gIHZhciB0YWdTdHIgPSBkZXIudGFnW3RhZ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbHM6IGNscyxcbiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICB0YWc6IHRhZyxcbiAgICB0YWdTdHI6IHRhZ1N0clxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgLy8gSW5kZWZpbml0ZSBmb3JtXG4gIGlmICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MClcbiAgICByZXR1cm4gbnVsbDtcblxuICAvLyBEZWZpbml0ZSBmb3JtXG4gIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAvLyBTaG9ydCBmb3JtXG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICB2YXIgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBkZWNvZGVycyA9IGV4cG9ydHM7XG5cbmRlY29kZXJzLmRlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5kZWNvZGVycy5wZW0gPSByZXF1aXJlKCcuL3BlbScpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRGVjb2RlciwgREVSRGVjb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTURlY29kZXI7XG5cblBFTURlY29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBsaW5lcyA9IGRhdGEudG9TdHJpbmcoKS5zcGxpdCgvW1xcclxcbl0rL2cpO1xuXG4gIHZhciBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICB2YXIgcmUgPSAvXi0tLS0tKEJFR0lOfEVORCkgKFteLV0rKS0tLS0tJC87XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWF0Y2ggPSBsaW5lc1tpXS5tYXRjaChyZSk7XG4gICAgaWYgKG1hdGNoID09PSBudWxsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAobWF0Y2hbMl0gIT09IGxhYmVsKVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdCRUdJTicpXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3RhcnQgPSBpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobWF0Y2hbMV0gIT09ICdFTkQnKVxuICAgICAgICBicmVhaztcbiAgICAgIGVuZCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKVxuICAgIHRocm93IG5ldyBFcnJvcignUEVNIHNlY3Rpb24gbm90IGZvdW5kIGZvcjogJyArIGxhYmVsKTtcblxuICB2YXIgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05XFwrXFwvPV0rL2dpLCAnJyk7XG5cbiAgdmFyIGlucHV0ID0gbmV3IEJ1ZmZlcihiYXNlNjQsICdiYXNlNjQnKTtcbiAgcmV0dXJuIERFUkRlY29kZXIucHJvdG90eXBlLmRlY29kZS5jYWxsKHRoaXMsIGlucHV0LCBvcHRpb25zKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkVuY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQ29tcG9zaXRlID0gZnVuY3Rpb24gZW5jb2RlQ29tcG9zaXRlKHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQpIHtcbiAgdmFyIGVuY29kZWRUYWcgPSBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgdGhpcy5yZXBvcnRlcik7XG5cbiAgLy8gU2hvcnQgZm9ybVxuICBpZiAoY29udGVudC5sZW5ndGggPCAweDgwKSB7XG4gICAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMik7XG4gICAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgICBoZWFkZXJbMV0gPSBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICAvLyBDb3VudCBvY3RldHMgcmVxdWlyZWQgdG8gc3RvcmUgbGVuZ3RoXG4gIHZhciBsZW5PY3RldHMgPSAxO1xuICBmb3IgKHZhciBpID0gY29udGVudC5sZW5ndGg7IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgbGVuT2N0ZXRzKys7XG5cbiAgdmFyIGhlYWRlciA9IG5ldyBCdWZmZXIoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAodmFyIGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIHZhciBidWYgPSBuZXcgQnVmZmVyKHN0ci5sZW5ndGggKiAyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoc3RyLmNoYXJDb2RlQXQoaSksIGkgKiAyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoYnVmKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdudW1zdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IG51bXN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGRpZ2l0cyBhbmQgc3BhY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzUHJpbnRzdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBwcmludHN0ciBzdXBwb3J0cyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmx5IGxhdGluIHVwcGVyIGFuZCBsb3dlciBjYXNlIGxldHRlcnMsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpZ2l0cywgc3BhY2UsIGFwb3N0cm9waGUsIGxlZnQgYW5kIHJpZ3RoICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudGhlc2lzLCBwbHVzIHNpZ24sIGNvbW1hLCBoeXBoZW4sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvdCwgc2xhc2gsIGNvbG9uLCBlcXVhbCBzaWduLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdxdWVzdGlvbiBtYXJrJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyB1bnN1cHBvcnRlZCcpO1xuICB9XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlT2JqaWQgPSBmdW5jdGlvbiBlbmNvZGVPYmppZChpZCwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ3N0cmluZyBvYmppZCBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAgZm91bmQnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpZCkpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQgbm90IGZvdW5kIGluIHZhbHVlcyBtYXAnKTtcbiAgICBpZCA9IHZhbHVlc1tpZF0uc3BsaXQoL1tcXHNcXC5dKy9nKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIGlkID0gaWQuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKVxuICAgICAgaWRbaV0gfD0gMDtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignb2JqaWQoKSBzaG91bGQgYmUgZWl0aGVyIGFycmF5IG9yIHN0cmluZywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dvdDogJyArIEpTT04uc3RyaW5naWZ5KGlkKSk7XG4gIH1cblxuICBpZiAoIXJlbGF0aXZlKSB7XG4gICAgaWYgKGlkWzFdID49IDQwKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1NlY29uZCBvYmppZCBpZGVudGlmaWVyIE9PQicpO1xuICAgIGlkLnNwbGljZSgwLCAyLCBpZFswXSAqIDQwICsgaWRbMV0pO1xuICB9XG5cbiAgLy8gQ291bnQgbnVtYmVyIG9mIG9jdGV0c1xuICB2YXIgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBmb3IgKHNpemUrKzsgaWRlbnQgPj0gMHg4MDsgaWRlbnQgPj49IDcpXG4gICAgICBzaXplKys7XG4gIH1cblxuICB2YXIgb2JqaWQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICB2YXIgb2Zmc2V0ID0gb2JqaWQubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgaSA9IGlkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgb2JqaWRbb2Zmc2V0LS1dID0gaWRlbnQgJiAweDdmO1xuICAgIHdoaWxlICgoaWRlbnQgPj49IDcpID4gMClcbiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCAoaWRlbnQgJiAweDdmKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG9iamlkKTtcbn07XG5cbmZ1bmN0aW9uIHR3byhudW0pIHtcbiAgaWYgKG51bSA8IDEwKVxuICAgIHJldHVybiAnMCcgKyBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gbnVtO1xufVxuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlVGltZSA9IGZ1bmN0aW9uIGVuY29kZVRpbWUodGltZSwgdGFnKSB7XG4gIHZhciBzdHI7XG4gIHZhciBkYXRlID0gbmV3IERhdGUodGltZSk7XG5cbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpICUgMTAwKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKHN0ciwgJ29jdHN0cicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU51bGwgPSBmdW5jdGlvbiBlbmNvZGVOdWxsKCkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcignJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSwgdmFsdWVzKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnc3RyaW5nJykge1xuICAgIGlmICghdmFsdWVzKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1N0cmluZyBpbnQgb3IgZW51bSBnaXZlbiwgYnV0IG5vIHZhbHVlcyBtYXAnKTtcbiAgICBpZiAoIXZhbHVlcy5oYXNPd25Qcm9wZXJ0eShudW0pKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignVmFsdWVzIG1hcCBkb2VzblxcJ3QgY29udGFpbjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShudW0pKTtcbiAgICB9XG4gICAgbnVtID0gdmFsdWVzW251bV07XG4gIH1cblxuICAvLyBCaWdudW0sIGFzc3VtZSBiaWcgZW5kaWFuXG4gIGlmICh0eXBlb2YgbnVtICE9PSAnbnVtYmVyJyAmJiAhQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgbnVtQXJyYXkgPSBudW0udG9BcnJheSgpO1xuICAgIGlmICghbnVtLnNpZ24gJiYgbnVtQXJyYXlbMF0gJiAweDgwKSB7XG4gICAgICBudW1BcnJheS51bnNoaWZ0KDApO1xuICAgIH1cbiAgICBudW0gPSBuZXcgQnVmZmVyKG51bUFycmF5KTtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBzaXplID0gbnVtLmxlbmd0aDtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIHNpemUrKztcblxuICAgIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNpemUpO1xuICAgIG51bS5jb3B5KG91dCk7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBvdXRbMF0gPSAwXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob3V0KTtcbiAgfVxuXG4gIGlmIChudW0gPCAweDgwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG51bSk7XG5cbiAgaWYgKG51bSA8IDB4MTAwKVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFswLCBudW1dKTtcblxuICB2YXIgc2l6ZSA9IDE7XG4gIGZvciAodmFyIGkgPSBudW07IGkgPj0gMHgxMDA7IGkgPj49IDgpXG4gICAgc2l6ZSsrO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGZvciAodmFyIGkgPSBvdXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBvdXRbaV0gPSBudW0gJiAweGZmO1xuICAgIG51bSA+Pj0gODtcbiAgfVxuICBpZihvdXRbMF0gJiAweDgwKSB7XG4gICAgb3V0LnVuc2hpZnQoMCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihuZXcgQnVmZmVyKG91dCkpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUJvb2wgPSBmdW5jdGlvbiBlbmNvZGVCb29sKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHZhbHVlID8gMHhmZiA6IDApO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RW5jb2RlcignZGVyJykudHJlZTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwRGVmYXVsdCA9IGZ1bmN0aW9uIHNraXBEZWZhdWx0KGRhdGFCdWZmZXIsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgaTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkYXRhID0gZGF0YUJ1ZmZlci5qb2luKCk7XG4gIGlmIChzdGF0ZS5kZWZhdWx0QnVmZmVyID09PSB1bmRlZmluZWQpXG4gICAgc3RhdGUuZGVmYXVsdEJ1ZmZlciA9IHRoaXMuX2VuY29kZVZhbHVlKHN0YXRlWydkZWZhdWx0J10sIHJlcG9ydGVyLCBwYXJlbnQpLmpvaW4oKTtcblxuICBpZiAoZGF0YS5sZW5ndGggIT09IHN0YXRlLmRlZmF1bHRCdWZmZXIubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspXG4gICAgaWYgKGRhdGFbaV0gIT09IHN0YXRlLmRlZmF1bHRCdWZmZXJbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBVdGlsaXR5IG1ldGhvZHNcblxuZnVuY3Rpb24gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHJlcG9ydGVyKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJylcbiAgICB0YWcgPSAnc2VxJztcbiAgZWxzZSBpZiAodGFnID09PSAnc2V0b2YnKVxuICAgIHRhZyA9ICdzZXQnO1xuXG4gIGlmIChkZXIudGFnQnlOYW1lLmhhc093blByb3BlcnR5KHRhZykpXG4gICAgcmVzID0gZGVyLnRhZ0J5TmFtZVt0YWddO1xuICBlbHNlIGlmICh0eXBlb2YgdGFnID09PSAnbnVtYmVyJyAmJiAodGFnIHwgMCkgPT09IHRhZylcbiAgICByZXMgPSB0YWc7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ1Vua25vd24gdGFnOiAnICsgdGFnKTtcblxuICBpZiAocmVzID49IDB4MWYpXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdNdWx0aS1vY3RldCB0YWcgZW5jb2RpbmcgdW5zdXBwb3J0ZWQnKTtcblxuICBpZiAoIXByaW1pdGl2ZSlcbiAgICByZXMgfD0gMHgyMDtcblxuICByZXMgfD0gKGRlci50YWdDbGFzc0J5TmFtZVtjbHMgfHwgJ3VuaXZlcnNhbCddIDw8IDYpO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCJ2YXIgZW5jb2RlcnMgPSBleHBvcnRzO1xuXG5lbmNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZW5jb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBERVJFbmNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRW5jb2RlcihlbnRpdHkpIHtcbiAgREVSRW5jb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59O1xuaW5oZXJpdHMoUEVNRW5jb2RlciwgREVSRW5jb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7XG5cblBFTUVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBidWYgPSBERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUuY2FsbCh0aGlzLCBkYXRhKTtcblxuICB2YXIgcCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG4gIHZhciBvdXQgPSBbICctLS0tLUJFR0lOICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyBdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KVxuICAgIG91dC5wdXNoKHAuc2xpY2UoaSwgaSArIDY0KSk7XG4gIG91dC5wdXNoKCctLS0tLUVORCAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScpO1xuICByZXR1cm4gb3V0LmpvaW4oJ1xcbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyogYmlnLmpzIHYzLjEuMyBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvTElDRU5DRSAqL1xyXG47KGZ1bmN0aW9uIChnbG9iYWwpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbi8qXHJcbiAgYmlnLmpzIHYzLjEuM1xyXG4gIEEgc21hbGwsIGZhc3QsIGVhc3ktdG8tdXNlIGxpYnJhcnkgZm9yIGFyYml0cmFyeS1wcmVjaXNpb24gZGVjaW1hbCBhcml0aG1ldGljLlxyXG4gIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlTWNsL2JpZy5qcy9cclxuICBDb3B5cmlnaHQgKGMpIDIwMTQgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cclxuICBNSVQgRXhwYXQgTGljZW5jZVxyXG4qL1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVESVRBQkxFIERFRkFVTFRTICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAvLyBUaGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cgbXVzdCBiZSBpbnRlZ2VycyB3aXRoaW4gdGhlIHN0YXRlZCByYW5nZXMuXHJcblxyXG4gICAgLypcclxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBvZiB0aGUgcmVzdWx0cyBvZiBvcGVyYXRpb25zXHJcbiAgICAgKiBpbnZvbHZpbmcgZGl2aXNpb246IGRpdiBhbmQgc3FydCwgYW5kIHBvdyB3aXRoIG5lZ2F0aXZlIGV4cG9uZW50cy5cclxuICAgICAqL1xyXG4gICAgdmFyIERQID0gMjAsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfRFBcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogMCBUb3dhcmRzIHplcm8gKGkuZS4gdHJ1bmNhdGUsIG5vIHJvdW5kaW5nKS4gICAgICAgKFJPVU5EX0RPV04pXHJcbiAgICAgICAgICogMSBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHJvdW5kIHVwLiAgKFJPVU5EX0hBTEZfVVApXHJcbiAgICAgICAgICogMiBUbyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvIGV2ZW4uICAgKFJPVU5EX0hBTEZfRVZFTilcclxuICAgICAgICAgKiAzIEF3YXkgZnJvbSB6ZXJvLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoUk9VTkRfVVApXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUk0gPSAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwLCAxLCAyIG9yIDNcclxuXHJcbiAgICAgICAgLy8gVGhlIG1heGltdW0gdmFsdWUgb2YgRFAgYW5kIEJpZy5EUC5cclxuICAgICAgICBNQVhfRFAgPSAxRTYsICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gMTAwMDAwMFxyXG5cclxuICAgICAgICAvLyBUaGUgbWF4aW11bSBtYWduaXR1ZGUgb2YgdGhlIGV4cG9uZW50IGFyZ3VtZW50IHRvIHRoZSBwb3cgbWV0aG9kLlxyXG4gICAgICAgIE1BWF9QT1dFUiA9IDFFNiwgICAgICAgICAgICAgICAgICAgLy8gMSB0byAxMDAwMDAwXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIGV4cG9uZW50IHZhbHVlIGF0IGFuZCBiZW5lYXRoIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWxcclxuICAgICAgICAgKiBub3RhdGlvbi5cclxuICAgICAgICAgKiBKYXZhU2NyaXB0J3MgTnVtYmVyIHR5cGU6IC03XHJcbiAgICAgICAgICogLTEwMDAwMDAgaXMgdGhlIG1pbmltdW0gcmVjb21tZW5kZWQgZXhwb25lbnQgdmFsdWUgb2YgYSBCaWcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRV9ORUcgPSAtNywgICAgICAgICAgICAgICAgICAgLy8gMCB0byAtMTAwMDAwMFxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFRoZSBleHBvbmVudCB2YWx1ZSBhdCBhbmQgYWJvdmUgd2hpY2ggdG9TdHJpbmcgcmV0dXJucyBleHBvbmVudGlhbFxyXG4gICAgICAgICAqIG5vdGF0aW9uLlxyXG4gICAgICAgICAqIEphdmFTY3JpcHQncyBOdW1iZXIgdHlwZTogMjFcclxuICAgICAgICAgKiAxMDAwMDAwIGlzIHRoZSBtYXhpbXVtIHJlY29tbWVuZGVkIGV4cG9uZW50IHZhbHVlIG9mIGEgQmlnLlxyXG4gICAgICAgICAqIChUaGlzIGxpbWl0IGlzIG5vdCBlbmZvcmNlZCBvciBjaGVja2VkLilcclxuICAgICAgICAgKi9cclxuICAgICAgICBFX1BPUyA9IDIxLCAgICAgICAgICAgICAgICAgICAvLyAwIHRvIDEwMDAwMDBcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgICAgIC8vIFRoZSBzaGFyZWQgcHJvdG90eXBlIG9iamVjdC5cclxuICAgICAgICBQID0ge30sXHJcbiAgICAgICAgaXNWYWxpZCA9IC9eLT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pLFxyXG4gICAgICAgIEJpZztcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgQmlnIGNvbnN0cnVjdG9yLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYmlnRmFjdG9yeSgpIHtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBUaGUgQmlnIGNvbnN0cnVjdG9yIGFuZCBleHBvcnRlZCBmdW5jdGlvbi5cclxuICAgICAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJpZyBudW1iZXIgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWd9IEEgbnVtZXJpYyB2YWx1ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBCaWcobikge1xyXG4gICAgICAgICAgICB2YXIgeCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBFbmFibGUgY29uc3RydWN0b3IgdXNhZ2Ugd2l0aG91dCBuZXcuXHJcbiAgICAgICAgICAgIGlmICghKHggaW5zdGFuY2VvZiBCaWcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbiA9PT0gdm9pZCAwID8gYmlnRmFjdG9yeSgpIDogbmV3IEJpZyhuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRHVwbGljYXRlLlxyXG4gICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIEJpZykge1xyXG4gICAgICAgICAgICAgICAgeC5zID0gbi5zO1xyXG4gICAgICAgICAgICAgICAgeC5lID0gbi5lO1xyXG4gICAgICAgICAgICAgICAgeC5jID0gbi5jLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwYXJzZSh4LCBuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogUmV0YWluIGEgcmVmZXJlbmNlIHRvIHRoaXMgQmlnIGNvbnN0cnVjdG9yLCBhbmQgc2hhZG93XHJcbiAgICAgICAgICAgICAqIEJpZy5wcm90b3R5cGUuY29uc3RydWN0b3Igd2hpY2ggcG9pbnRzIHRvIE9iamVjdC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHguY29uc3RydWN0b3IgPSBCaWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBCaWcucHJvdG90eXBlID0gUDtcclxuICAgICAgICBCaWcuRFAgPSBEUDtcclxuICAgICAgICBCaWcuUk0gPSBSTTtcclxuICAgICAgICBCaWcuRV9ORUcgPSBFX05FRztcclxuICAgICAgICBCaWcuRV9QT1MgPSBFX1BPUztcclxuXHJcbiAgICAgICAgcmV0dXJuIEJpZztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIEJpZyB4IGluIG5vcm1hbCBvciBleHBvbmVudGlhbFxyXG4gICAgICogbm90YXRpb24gdG8gZHAgZml4ZWQgZGVjaW1hbCBwbGFjZXMgb3Igc2lnbmlmaWNhbnQgZGlnaXRzLlxyXG4gICAgICpcclxuICAgICAqIHgge0JpZ30gVGhlIEJpZyB0byBmb3JtYXQuXHJcbiAgICAgKiBkcCB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAgICAgKiB0b0Uge251bWJlcn0gMSAodG9FeHBvbmVudGlhbCksIDIgKHRvUHJlY2lzaW9uKSBvciB1bmRlZmluZWQgKHRvRml4ZWQpLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBmb3JtYXQoeCwgZHAsIHRvRSkge1xyXG4gICAgICAgIHZhciBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGluZGV4IChub3JtYWwgbm90YXRpb24pIG9mIHRoZSBkaWdpdCB0aGF0IG1heSBiZSByb3VuZGVkIHVwLlxyXG4gICAgICAgICAgICBpID0gZHAgLSAoeCA9IG5ldyBCaWcoeCkpLmUsXHJcbiAgICAgICAgICAgIGMgPSB4LmM7XHJcblxyXG4gICAgICAgIC8vIFJvdW5kP1xyXG4gICAgICAgIGlmIChjLmxlbmd0aCA+ICsrZHApIHtcclxuICAgICAgICAgICAgcm5kKHgsIGksIEJpZy5STSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNbMF0pIHtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodG9FKSB7XHJcbiAgICAgICAgICAgIGkgPSBkcDtcclxuXHJcbiAgICAgICAgLy8gdG9GaXhlZFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGMgPSB4LmM7XHJcblxyXG4gICAgICAgICAgICAvLyBSZWNhbGN1bGF0ZSBpIGFzIHguZSBtYXkgaGF2ZSBjaGFuZ2VkIGlmIHZhbHVlIHJvdW5kZWQgdXAuXHJcbiAgICAgICAgICAgIGkgPSB4LmUgKyBpICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZCB6ZXJvcz9cclxuICAgICAgICBmb3IgKDsgYy5sZW5ndGggPCBpOyBjLnB1c2goMCkpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgaSA9IHguZTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiB0b1ByZWNpc2lvbiByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoZSBudW1iZXIgb2ZcclxuICAgICAgICAgKiBzaWduaWZpY2FudCBkaWdpdHMgc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0c1xyXG4gICAgICAgICAqIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIGludGVnZXIgcGFydCBvZiB0aGUgdmFsdWUgaW4gbm9ybWFsXHJcbiAgICAgICAgICogbm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIHRvRSA9PT0gMSB8fCB0b0UgJiYgKGRwIDw9IGkgfHwgaSA8PSBCaWcuRV9ORUcpID9cclxuXHJcbiAgICAgICAgICAvLyBFeHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgICAgICh4LnMgPCAwICYmIGNbMF0gPyAnLScgOiAnJykgK1xyXG4gICAgICAgICAgICAoYy5sZW5ndGggPiAxID8gY1swXSArICcuJyArIGMuam9pbignJykuc2xpY2UoMSkgOiBjWzBdKSArXHJcbiAgICAgICAgICAgICAgKGkgPCAwID8gJ2UnIDogJ2UrJykgKyBpXHJcblxyXG4gICAgICAgICAgLy8gTm9ybWFsIG5vdGF0aW9uLlxyXG4gICAgICAgICAgOiB4LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBQYXJzZSB0aGUgbnVtYmVyIG9yIHN0cmluZyB2YWx1ZSBwYXNzZWQgdG8gYSBCaWcgY29uc3RydWN0b3IuXHJcbiAgICAgKlxyXG4gICAgICogeCB7QmlnfSBBIEJpZyBudW1iZXIgaW5zdGFuY2UuXHJcbiAgICAgKiBuIHtudW1iZXJ8c3RyaW5nfSBBIG51bWVyaWMgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHBhcnNlKHgsIG4pIHtcclxuICAgICAgICB2YXIgZSwgaSwgbkw7XHJcblxyXG4gICAgICAgIC8vIE1pbnVzIHplcm8/XHJcbiAgICAgICAgaWYgKG4gPT09IDAgJiYgMSAvIG4gPCAwKSB7XHJcbiAgICAgICAgICAgIG4gPSAnLTAnO1xyXG5cclxuICAgICAgICAvLyBFbnN1cmUgbiBpcyBzdHJpbmcgYW5kIGNoZWNrIHZhbGlkaXR5LlxyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzVmFsaWQudGVzdChuICs9ICcnKSkge1xyXG4gICAgICAgICAgICB0aHJvd0VycihOYU4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHNpZ24uXHJcbiAgICAgICAgeC5zID0gbi5jaGFyQXQoMCkgPT0gJy0nID8gKG4gPSBuLnNsaWNlKDEpLCAtMSkgOiAxO1xyXG5cclxuICAgICAgICAvLyBEZWNpbWFsIHBvaW50P1xyXG4gICAgICAgIGlmICgoZSA9IG4uaW5kZXhPZignLicpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgIG4gPSBuLnJlcGxhY2UoJy4nLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHBvbmVudGlhbCBmb3JtP1xyXG4gICAgICAgIGlmICgoaSA9IG4uc2VhcmNoKC9lL2kpKSA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIC8vIERldGVybWluZSBleHBvbmVudC5cclxuICAgICAgICAgICAgaWYgKGUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlICs9ICtuLnNsaWNlKGkgKyAxKTtcclxuICAgICAgICAgICAgbiA9IG4uc3Vic3RyaW5nKDAsIGkpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGUgPCAwKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBJbnRlZ2VyLlxyXG4gICAgICAgICAgICBlID0gbi5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuTCA9IG4ubGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyBEZXRlcm1pbmUgbGVhZGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbkwgJiYgbi5jaGFyQXQoaSkgPT0gJzAnOyBpKyspIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpID09IG5MKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBaZXJvLlxyXG4gICAgICAgICAgICB4LmMgPSBbIHguZSA9IDAgXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgICAgICBmb3IgKDsgbkwgPiAwICYmIG4uY2hhckF0KC0tbkwpID09ICcwJzspIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgeC5lID0gZSAtIGkgLSAxO1xyXG4gICAgICAgICAgICB4LmMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIGFycmF5IG9mIGRpZ2l0cyB3aXRob3V0IGxlYWRpbmcvdHJhaWxpbmcgemVyb3MuXHJcbiAgICAgICAgICAgIC8vZm9yIChlID0gMDsgaSA8PSBuTDsgeC5jW2UrK10gPSArbi5jaGFyQXQoaSsrKSkge1xyXG4gICAgICAgICAgICBmb3IgKDsgaSA8PSBuTDsgeC5jLnB1c2goK24uY2hhckF0KGkrKykpKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUm91bmQgQmlnIHggdG8gYSBtYXhpbXVtIG9mIGRwIGRlY2ltYWwgcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0uXHJcbiAgICAgKiBDYWxsZWQgYnkgZGl2LCBzcXJ0IGFuZCByb3VuZC5cclxuICAgICAqXHJcbiAgICAgKiB4IHtCaWd9IFRoZSBCaWcgdG8gcm91bmQuXHJcbiAgICAgKiBkcCB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAgICAgKiBybSB7bnVtYmVyfSAwLCAxLCAyIG9yIDMgKERPV04sIEhBTEZfVVAsIEhBTEZfRVZFTiwgVVApXHJcbiAgICAgKiBbbW9yZV0ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlc3VsdCBvZiBkaXZpc2lvbiB3YXMgdHJ1bmNhdGVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBybmQoeCwgZHAsIHJtLCBtb3JlKSB7XHJcbiAgICAgICAgdmFyIHUsXHJcbiAgICAgICAgICAgIHhjID0geC5jLFxyXG4gICAgICAgICAgICBpID0geC5lICsgZHAgKyAxO1xyXG5cclxuICAgICAgICBpZiAocm0gPT09IDEpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHhjW2ldIGlzIHRoZSBkaWdpdCBhZnRlciB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cC5cclxuICAgICAgICAgICAgbW9yZSA9IHhjW2ldID49IDU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChybSA9PT0gMikge1xyXG4gICAgICAgICAgICBtb3JlID0geGNbaV0gPiA1IHx8IHhjW2ldID09IDUgJiZcclxuICAgICAgICAgICAgICAobW9yZSB8fCBpIDwgMCB8fCB4Y1tpICsgMV0gIT09IHUgfHwgeGNbaSAtIDFdICYgMSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChybSA9PT0gMykge1xyXG4gICAgICAgICAgICBtb3JlID0gbW9yZSB8fCB4Y1tpXSAhPT0gdSB8fCBpIDwgMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtb3JlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAocm0gIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93RXJyKCchQmlnLlJNIScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaSA8IDEgfHwgIXhjWzBdKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAobW9yZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIDEsIDAuMSwgMC4wMSwgMC4wMDEsIDAuMDAwMSBldGMuXHJcbiAgICAgICAgICAgICAgICB4LmUgPSAtZHA7XHJcbiAgICAgICAgICAgICAgICB4LmMgPSBbMV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gWmVyby5cclxuICAgICAgICAgICAgICAgIHguYyA9IFt4LmUgPSAwXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYW55IGRpZ2l0cyBhZnRlciB0aGUgcmVxdWlyZWQgZGVjaW1hbCBwbGFjZXMuXHJcbiAgICAgICAgICAgIHhjLmxlbmd0aCA9IGktLTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJvdW5kIHVwP1xyXG4gICAgICAgICAgICBpZiAobW9yZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJvdW5kaW5nIHVwIG1heSBtZWFuIHRoZSBwcmV2aW91cyBkaWdpdCBoYXMgdG8gYmUgcm91bmRlZCB1cC5cclxuICAgICAgICAgICAgICAgIGZvciAoOyArK3hjW2ldID4gOTspIHtcclxuICAgICAgICAgICAgICAgICAgICB4Y1tpXSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsreC5lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4Yy51bnNoaWZ0KDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxyXG4gICAgICAgICAgICBmb3IgKGkgPSB4Yy5sZW5ndGg7ICF4Y1stLWldOyB4Yy5wb3AoKSkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFRocm93IGEgQmlnRXJyb3IuXHJcbiAgICAgKlxyXG4gICAgICogbWVzc2FnZSB7c3RyaW5nfSBUaGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGhyb3dFcnIobWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgZXJyLm5hbWUgPSAnQmlnRXJyb3InO1xyXG5cclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIFByb3RvdHlwZS9pbnN0YW5jZSBtZXRob2RzXHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGlzIEJpZy5cclxuICAgICAqL1xyXG4gICAgUC5hYnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHggPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzKTtcclxuICAgICAgICB4LnMgPSAxO1xyXG5cclxuICAgICAgICByZXR1cm4geDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm5cclxuICAgICAqIDEgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdmFsdWUgb2YgQmlnIHksXHJcbiAgICAgKiAtMSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaXMgbGVzcyB0aGFuIHRoZSB2YWx1ZSBvZiBCaWcgeSwgb3JcclxuICAgICAqIDAgaWYgdGhleSBoYXZlIHRoZSBzYW1lIHZhbHVlLlxyXG4gICAgKi9cclxuICAgIFAuY21wID0gZnVuY3Rpb24gKHkpIHtcclxuICAgICAgICB2YXIgeE5lZyxcclxuICAgICAgICAgICAgeCA9IHRoaXMsXHJcbiAgICAgICAgICAgIHhjID0geC5jLFxyXG4gICAgICAgICAgICB5YyA9ICh5ID0gbmV3IHguY29uc3RydWN0b3IoeSkpLmMsXHJcbiAgICAgICAgICAgIGkgPSB4LnMsXHJcbiAgICAgICAgICAgIGogPSB5LnMsXHJcbiAgICAgICAgICAgIGsgPSB4LmUsXHJcbiAgICAgICAgICAgIGwgPSB5LmU7XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAheGNbMF0gPyAheWNbMF0gPyAwIDogLWogOiBpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2lnbnMgZGlmZmVyP1xyXG4gICAgICAgIGlmIChpICE9IGopIHtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhOZWcgPSBpIDwgMDtcclxuXHJcbiAgICAgICAgLy8gQ29tcGFyZSBleHBvbmVudHMuXHJcbiAgICAgICAgaWYgKGsgIT0gbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gayA+IGwgXiB4TmVnID8gMSA6IC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgIGogPSAoayA9IHhjLmxlbmd0aCkgPCAobCA9IHljLmxlbmd0aCkgPyBrIDogbDtcclxuXHJcbiAgICAgICAgLy8gQ29tcGFyZSBkaWdpdCBieSBkaWdpdC5cclxuICAgICAgICBmb3IgKDsgKytpIDwgajspIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh4Y1tpXSAhPSB5Y1tpXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHhjW2ldID4geWNbaV0gXiB4TmVnID8gMSA6IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb21wYXJlIGxlbmd0aHMuXHJcbiAgICAgICAgcmV0dXJuIGsgPT0gbCA/IDAgOiBrID4gbCBeIHhOZWcgPyAxIDogLTE7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgZGl2aWRlZCBieSB0aGVcclxuICAgICAqIHZhbHVlIG9mIEJpZyB5LCByb3VuZGVkLCBpZiBuZWNlc3NhcnksIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbFxyXG4gICAgICogcGxhY2VzIHVzaW5nIHJvdW5kaW5nIG1vZGUgQmlnLlJNLlxyXG4gICAgICovXHJcbiAgICBQLmRpdiA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgdmFyIHggPSB0aGlzLFxyXG4gICAgICAgICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgICAvLyBkaXZpZGVuZFxyXG4gICAgICAgICAgICBkdmQgPSB4LmMsXHJcbiAgICAgICAgICAgIC8vZGl2aXNvclxyXG4gICAgICAgICAgICBkdnMgPSAoeSA9IG5ldyBCaWcoeSkpLmMsXHJcbiAgICAgICAgICAgIHMgPSB4LnMgPT0geS5zID8gMSA6IC0xLFxyXG4gICAgICAgICAgICBkcCA9IEJpZy5EUDtcclxuXHJcbiAgICAgICAgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgMCB8fCBkcCA+IE1BWF9EUCkge1xyXG4gICAgICAgICAgICB0aHJvd0VycignIUJpZy5EUCEnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciAwP1xyXG4gICAgICAgIGlmICghZHZkWzBdIHx8ICFkdnNbMF0pIHtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIGJvdGggYXJlIDAsIHRocm93IE5hTlxyXG4gICAgICAgICAgICBpZiAoZHZkWzBdID09IGR2c1swXSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3dFcnIoTmFOKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSWYgZHZzIGlzIDAsIHRocm93ICstSW5maW5pdHkuXHJcbiAgICAgICAgICAgIGlmICghZHZzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvd0VycihzIC8gMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGR2ZCBpcyAwLCByZXR1cm4gKy0wLlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZyhzICogMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZHZzTCwgZHZzVCwgbmV4dCwgY21wLCByZW1JLCB1LFxyXG4gICAgICAgICAgICBkdnNaID0gZHZzLnNsaWNlKCksXHJcbiAgICAgICAgICAgIGR2ZEkgPSBkdnNMID0gZHZzLmxlbmd0aCxcclxuICAgICAgICAgICAgZHZkTCA9IGR2ZC5sZW5ndGgsXHJcbiAgICAgICAgICAgIC8vIHJlbWFpbmRlclxyXG4gICAgICAgICAgICByZW0gPSBkdmQuc2xpY2UoMCwgZHZzTCksXHJcbiAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoLFxyXG4gICAgICAgICAgICAvLyBxdW90aWVudFxyXG4gICAgICAgICAgICBxID0geSxcclxuICAgICAgICAgICAgcWMgPSBxLmMgPSBbXSxcclxuICAgICAgICAgICAgcWkgPSAwLFxyXG4gICAgICAgICAgICBkaWdpdHMgPSBkcCArIChxLmUgPSB4LmUgLSB5LmUpICsgMTtcclxuXHJcbiAgICAgICAgcS5zID0gcztcclxuICAgICAgICBzID0gZGlnaXRzIDwgMCA/IDAgOiBkaWdpdHM7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSB2ZXJzaW9uIG9mIGRpdmlzb3Igd2l0aCBsZWFkaW5nIHplcm8uXHJcbiAgICAgICAgZHZzWi51bnNoaWZ0KDApO1xyXG5cclxuICAgICAgICAvLyBBZGQgemVyb3MgdG8gbWFrZSByZW1haW5kZXIgYXMgbG9uZyBhcyBkaXZpc29yLlxyXG4gICAgICAgIGZvciAoOyByZW1MKysgPCBkdnNMOyByZW0ucHVzaCgwKSkge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG8ge1xyXG5cclxuICAgICAgICAgICAgLy8gJ25leHQnIGlzIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byBjdXJyZW50IHJlbWFpbmRlci5cclxuICAgICAgICAgICAgZm9yIChuZXh0ID0gMDsgbmV4dCA8IDEwOyBuZXh0KyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDb21wYXJlIGRpdmlzb3IgYW5kIHJlbWFpbmRlci5cclxuICAgICAgICAgICAgICAgIGlmIChkdnNMICE9IChyZW1MID0gcmVtLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbXAgPSBkdnNMID4gcmVtTCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAocmVtSSA9IC0xLCBjbXAgPSAwOyArK3JlbUkgPCBkdnNMOykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR2c1tyZW1JXSAhPSByZW1bcmVtSV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtcCA9IGR2c1tyZW1JXSA+IHJlbVtyZW1JXSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIGRpdmlzb3IgPCByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXHJcbiAgICAgICAgICAgICAgICBpZiAoY21wIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1haW5kZXIgY2FuJ3QgYmUgbW9yZSB0aGFuIDEgZGlnaXQgbG9uZ2VyIHRoYW4gZGl2aXNvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyBFcXVhbGlzZSBsZW5ndGhzIHVzaW5nIGRpdmlzb3Igd2l0aCBleHRyYSBsZWFkaW5nIHplcm8/XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChkdnNUID0gcmVtTCA9PSBkdnNMID8gZHZzIDogZHZzWjsgcmVtTDspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1bLS1yZW1MXSA8IGR2c1RbcmVtTF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbUkgPSByZW1MO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByZW1JICYmICFyZW1bLS1yZW1JXTsgcmVtW3JlbUldID0gOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1yZW1bcmVtSV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1bcmVtTF0gKz0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtW3JlbUxdIC09IGR2c1RbcmVtTF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyAhcmVtWzBdOyByZW0uc2hpZnQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgJ25leHQnIGRpZ2l0IHRvIHRoZSByZXN1bHQgYXJyYXkuXHJcbiAgICAgICAgICAgIHFjW3FpKytdID0gY21wID8gbmV4dCA6ICsrbmV4dDtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtYWluZGVyLlxyXG4gICAgICAgICAgICBpZiAocmVtWzBdICYmIGNtcCkge1xyXG4gICAgICAgICAgICAgICAgcmVtW3JlbUxdID0gZHZkW2R2ZEldIHx8IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZW0gPSBbIGR2ZFtkdmRJXSBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gd2hpbGUgKChkdmRJKysgPCBkdmRMIHx8IHJlbVswXSAhPT0gdSkgJiYgcy0tKTtcclxuXHJcbiAgICAgICAgLy8gTGVhZGluZyB6ZXJvPyBEbyBub3QgcmVtb3ZlIGlmIHJlc3VsdCBpcyBzaW1wbHkgemVybyAocWkgPT0gMSkuXHJcbiAgICAgICAgaWYgKCFxY1swXSAmJiBxaSAhPSAxKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGVyZSBjYW4ndCBiZSBtb3JlIHRoYW4gb25lIHplcm8uXHJcbiAgICAgICAgICAgIHFjLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHEuZS0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUm91bmQ/XHJcbiAgICAgICAgaWYgKHFpID4gZGlnaXRzKSB7XHJcbiAgICAgICAgICAgIHJuZChxLCBkcCwgQmlnLlJNLCByZW1bMF0gIT09IHUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHE7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZiBCaWcgeSxcclxuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBQLmVxID0gZnVuY3Rpb24gKHkpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuY21wKHkpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAuZ3QgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNtcCh5KSA+IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGVcclxuICAgICAqIHZhbHVlIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5ndGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNtcCh5KSA+IC0xO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZyB5LFxyXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIFAubHQgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNtcCh5KSA8IDA7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWVcclxuICAgICAqIG9mIEJpZyB5LCBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgUC5sdGUgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5jbXAoeSkgPCAxO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIG1pbnVzIHRoZSB2YWx1ZVxyXG4gICAgICogb2YgQmlnIHkuXHJcbiAgICAgKi9cclxuICAgIFAuc3ViID0gUC5taW51cyA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgdmFyIGksIGosIHQsIHhMVHksXHJcbiAgICAgICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgICBhID0geC5zLFxyXG4gICAgICAgICAgICBiID0gKHkgPSBuZXcgQmlnKHkpKS5zO1xyXG5cclxuICAgICAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICAgICAgaWYgKGEgIT0gYikge1xyXG4gICAgICAgICAgICB5LnMgPSAtYjtcclxuICAgICAgICAgICAgcmV0dXJuIHgucGx1cyh5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB4YyA9IHguYy5zbGljZSgpLFxyXG4gICAgICAgICAgICB4ZSA9IHguZSxcclxuICAgICAgICAgICAgeWMgPSB5LmMsXHJcbiAgICAgICAgICAgIHllID0geS5lO1xyXG5cclxuICAgICAgICAvLyBFaXRoZXIgemVybz9cclxuICAgICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG5cclxuICAgICAgICAgICAgLy8geSBpcyBub24temVybz8geCBpcyBub24temVybz8gT3IgYm90aCBhcmUgemVyby5cclxuICAgICAgICAgICAgcmV0dXJuIHljWzBdID8gKHkucyA9IC1iLCB5KSA6IG5ldyBCaWcoeGNbMF0gPyB4IDogMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggaXMgdGhlIGJpZ2dlciBudW1iZXIuXHJcbiAgICAgICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgICAgICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoeExUeSA9IGEgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgICAgICAgICB0ID0geGM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB5ZSA9IHhlO1xyXG4gICAgICAgICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICAgICAgZm9yIChiID0gYTsgYi0tOyB0LnB1c2goMCkpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cclxuICAgICAgICAgICAgaiA9ICgoeExUeSA9IHhjLmxlbmd0aCA8IHljLmxlbmd0aCkgPyB4YyA6IHljKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGEgPSBiID0gMDsgYiA8IGo7IGIrKykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4Y1tiXSAhPSB5Y1tiXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHhMVHkgPSB4Y1tiXSA8IHljW2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB4IDwgeT8gUG9pbnQgeGMgdG8gdGhlIGFycmF5IG9mIHRoZSBiaWdnZXIgbnVtYmVyLlxyXG4gICAgICAgIGlmICh4TFR5KSB7XHJcbiAgICAgICAgICAgIHQgPSB4YztcclxuICAgICAgICAgICAgeGMgPSB5YztcclxuICAgICAgICAgICAgeWMgPSB0O1xyXG4gICAgICAgICAgICB5LnMgPSAteS5zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBBcHBlbmQgemVyb3MgdG8geGMgaWYgc2hvcnRlci4gTm8gbmVlZCB0byBhZGQgemVyb3MgdG8geWMgaWYgc2hvcnRlclxyXG4gICAgICAgICAqIGFzIHN1YnRyYWN0aW9uIG9ubHkgbmVlZHMgdG8gc3RhcnQgYXQgeWMubGVuZ3RoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICgoIGIgPSAoaiA9IHljLmxlbmd0aCkgLSAoaSA9IHhjLmxlbmd0aCkgKSA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoOyBiLS07IHhjW2krK10gPSAwKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXHJcbiAgICAgICAgZm9yIChiID0gaTsgaiA+IGE7KXtcclxuXHJcbiAgICAgICAgICAgIGlmICh4Y1stLWpdIDwgeWNbal0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBqOyBpICYmICF4Y1stLWldOyB4Y1tpXSA9IDkpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC0teGNbaV07XHJcbiAgICAgICAgICAgICAgICB4Y1tqXSArPSAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4Y1tqXSAtPSB5Y1tqXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKDsgeGNbLS1iXSA9PT0gMDsgeGMucG9wKCkpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXHJcbiAgICAgICAgZm9yICg7IHhjWzBdID09PSAwOykge1xyXG4gICAgICAgICAgICB4Yy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAtLXllO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF4Y1swXSkge1xyXG5cclxuICAgICAgICAgICAgLy8gbiAtIG4gPSArMFxyXG4gICAgICAgICAgICB5LnMgPSAxO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVzdWx0IG11c3QgYmUgemVyby5cclxuICAgICAgICAgICAgeGMgPSBbeWUgPSAwXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHkuYyA9IHhjO1xyXG4gICAgICAgIHkuZSA9IHllO1xyXG5cclxuICAgICAgICByZXR1cm4geTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBtb2R1bG8gdGhlXHJcbiAgICAgKiB2YWx1ZSBvZiBCaWcgeS5cclxuICAgICAqL1xyXG4gICAgUC5tb2QgPSBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgIHZhciB5R1R4LFxyXG4gICAgICAgICAgICB4ID0gdGhpcyxcclxuICAgICAgICAgICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgICAgICAgYSA9IHgucyxcclxuICAgICAgICAgICAgYiA9ICh5ID0gbmV3IEJpZyh5KSkucztcclxuXHJcbiAgICAgICAgaWYgKCF5LmNbMF0pIHtcclxuICAgICAgICAgICAgdGhyb3dFcnIoTmFOKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHgucyA9IHkucyA9IDE7XHJcbiAgICAgICAgeUdUeCA9IHkuY21wKHgpID09IDE7XHJcbiAgICAgICAgeC5zID0gYTtcclxuICAgICAgICB5LnMgPSBiO1xyXG5cclxuICAgICAgICBpZiAoeUdUeCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZyh4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGEgPSBCaWcuRFA7XHJcbiAgICAgICAgYiA9IEJpZy5STTtcclxuICAgICAgICBCaWcuRFAgPSBCaWcuUk0gPSAwO1xyXG4gICAgICAgIHggPSB4LmRpdih5KTtcclxuICAgICAgICBCaWcuRFAgPSBhO1xyXG4gICAgICAgIEJpZy5STSA9IGI7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm1pbnVzKCB4LnRpbWVzKHkpICk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcGx1cyB0aGUgdmFsdWVcclxuICAgICAqIG9mIEJpZyB5LlxyXG4gICAgICovXHJcbiAgICBQLmFkZCA9IFAucGx1cyA9IGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgdmFyIHQsXHJcbiAgICAgICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgICBhID0geC5zLFxyXG4gICAgICAgICAgICBiID0gKHkgPSBuZXcgQmlnKHkpKS5zO1xyXG5cclxuICAgICAgICAvLyBTaWducyBkaWZmZXI/XHJcbiAgICAgICAgaWYgKGEgIT0gYikge1xyXG4gICAgICAgICAgICB5LnMgPSAtYjtcclxuICAgICAgICAgICAgcmV0dXJuIHgubWludXMoeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeGUgPSB4LmUsXHJcbiAgICAgICAgICAgIHhjID0geC5jLFxyXG4gICAgICAgICAgICB5ZSA9IHkuZSxcclxuICAgICAgICAgICAgeWMgPSB5LmM7XHJcblxyXG4gICAgICAgIC8vIEVpdGhlciB6ZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0gfHwgIXljWzBdKSB7XHJcblxyXG4gICAgICAgICAgICAvLyB5IGlzIG5vbi16ZXJvPyB4IGlzIG5vbi16ZXJvPyBPciBib3RoIGFyZSB6ZXJvLlxyXG4gICAgICAgICAgICByZXR1cm4geWNbMF0gPyB5IDogbmV3IEJpZyh4Y1swXSA/IHggOiBhICogMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhjID0geGMuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXHJcbiAgICAgICAgLy8gTm90ZTogRmFzdGVyIHRvIHVzZSByZXZlcnNlIHRoZW4gZG8gdW5zaGlmdHMuXHJcbiAgICAgICAgaWYgKGEgPSB4ZSAtIHllKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHllID0geGU7XHJcbiAgICAgICAgICAgICAgICB0ID0geWM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhID0gLWE7XHJcbiAgICAgICAgICAgICAgICB0ID0geGM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHQucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBmb3IgKDsgYS0tOyB0LnB1c2goMCkpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnJldmVyc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFBvaW50IHhjIHRvIHRoZSBsb25nZXIgYXJyYXkuXHJcbiAgICAgICAgaWYgKHhjLmxlbmd0aCAtIHljLmxlbmd0aCA8IDApIHtcclxuICAgICAgICAgICAgdCA9IHljO1xyXG4gICAgICAgICAgICB5YyA9IHhjO1xyXG4gICAgICAgICAgICB4YyA9IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGEgPSB5Yy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogT25seSBzdGFydCBhZGRpbmcgYXQgeWMubGVuZ3RoIC0gMSBhcyB0aGUgZnVydGhlciBkaWdpdHMgb2YgeGMgY2FuIGJlXHJcbiAgICAgICAgICogbGVmdCBhcyB0aGV5IGFyZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmb3IgKGIgPSAwOyBhOykge1xyXG4gICAgICAgICAgICBiID0gKHhjWy0tYV0gPSB4Y1thXSArIHljW2FdICsgYikgLyAxMCB8IDA7XHJcbiAgICAgICAgICAgIHhjW2FdICU9IDEwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgemVybywgYXMgK3ggKyAreSAhPSAwICYmIC14ICsgLXkgIT0gMFxyXG5cclxuICAgICAgICBpZiAoYikge1xyXG4gICAgICAgICAgICB4Yy51bnNoaWZ0KGIpO1xyXG4gICAgICAgICAgICArK3llO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGEgPSB4Yy5sZW5ndGg7IHhjWy0tYV0gPT09IDA7IHhjLnBvcCgpKSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB5LmMgPSB4YztcclxuICAgICAgICB5LmUgPSB5ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyByYWlzZWQgdG8gdGhlIHBvd2VyIG4uXHJcbiAgICAgKiBJZiBuIGlzIG5lZ2F0aXZlLCByb3VuZCwgaWYgbmVjZXNzYXJ5LCB0byBhIG1heGltdW0gb2YgQmlnLkRQIGRlY2ltYWxcclxuICAgICAqIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIEJpZy5STS5cclxuICAgICAqXHJcbiAgICAgKiBuIHtudW1iZXJ9IEludGVnZXIsIC1NQVhfUE9XRVIgdG8gTUFYX1BPV0VSIGluY2x1c2l2ZS5cclxuICAgICAqL1xyXG4gICAgUC5wb3cgPSBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgICAgICAgb25lID0gbmV3IHguY29uc3RydWN0b3IoMSksXHJcbiAgICAgICAgICAgIHkgPSBvbmUsXHJcbiAgICAgICAgICAgIGlzTmVnID0gbiA8IDA7XHJcblxyXG4gICAgICAgIGlmIChuICE9PSB+fm4gfHwgbiA8IC1NQVhfUE9XRVIgfHwgbiA+IE1BWF9QT1dFUikge1xyXG4gICAgICAgICAgICB0aHJvd0VycignIXBvdyEnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG4gPSBpc05lZyA/IC1uIDogbjtcclxuXHJcbiAgICAgICAgZm9yICg7Oykge1xyXG5cclxuICAgICAgICAgICAgaWYgKG4gJiAxKSB7XHJcbiAgICAgICAgICAgICAgICB5ID0geS50aW1lcyh4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuID4+PSAxO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4ID0geC50aW1lcyh4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpc05lZyA/IG9uZS5kaXYoeSkgOiB5O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJldHVybiBhIG5ldyBCaWcgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnIHJvdW5kZWQgdG8gYVxyXG4gICAgICogbWF4aW11bSBvZiBkcCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLlxyXG4gICAgICogSWYgZHAgaXMgbm90IHNwZWNpZmllZCwgcm91bmQgdG8gMCBkZWNpbWFsIHBsYWNlcy5cclxuICAgICAqIElmIHJtIGlzIG5vdCBzcGVjaWZpZWQsIHVzZSBCaWcuUk0uXHJcbiAgICAgKlxyXG4gICAgICogW2RwXSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAgICAgKiBbcm1dIDAsIDEsIDIgb3IgMyAoUk9VTkRfRE9XTiwgUk9VTkRfSEFMRl9VUCwgUk9VTkRfSEFMRl9FVkVOLCBST1VORF9VUClcclxuICAgICAqL1xyXG4gICAgUC5yb3VuZCA9IGZ1bmN0aW9uIChkcCwgcm0pIHtcclxuICAgICAgICB2YXIgeCA9IHRoaXMsXHJcbiAgICAgICAgICAgIEJpZyA9IHguY29uc3RydWN0b3I7XHJcblxyXG4gICAgICAgIGlmIChkcCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRwID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKGRwICE9PSB+fmRwIHx8IGRwIDwgMCB8fCBkcCA+IE1BWF9EUCkge1xyXG4gICAgICAgICAgICB0aHJvd0VycignIXJvdW5kIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBybmQoeCA9IG5ldyBCaWcoeCksIGRwLCBybSA9PSBudWxsID8gQmlnLlJNIDogcm0pO1xyXG5cclxuICAgICAgICByZXR1cm4geDtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBuZXcgQmlnIHdob3NlIHZhbHVlIGlzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWcsXHJcbiAgICAgKiByb3VuZGVkLCBpZiBuZWNlc3NhcnksIHRvIGEgbWF4aW11bSBvZiBCaWcuRFAgZGVjaW1hbCBwbGFjZXMgdXNpbmdcclxuICAgICAqIHJvdW5kaW5nIG1vZGUgQmlnLlJNLlxyXG4gICAgICovXHJcbiAgICBQLnNxcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVzdGltYXRlLCByLCBhcHByb3gsXHJcbiAgICAgICAgICAgIHggPSB0aGlzLFxyXG4gICAgICAgICAgICBCaWcgPSB4LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgICB4YyA9IHguYyxcclxuICAgICAgICAgICAgaSA9IHgucyxcclxuICAgICAgICAgICAgZSA9IHguZSxcclxuICAgICAgICAgICAgaGFsZiA9IG5ldyBCaWcoJzAuNScpO1xyXG5cclxuICAgICAgICAvLyBaZXJvP1xyXG4gICAgICAgIGlmICgheGNbMF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWcoeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBuZWdhdGl2ZSwgdGhyb3cgTmFOLlxyXG4gICAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvd0VycihOYU4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXN0aW1hdGUuXHJcbiAgICAgICAgaSA9IE1hdGguc3FydCh4LnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xyXG4gICAgICAgIC8vIFBhc3MgeCB0byBNYXRoLnNxcnQgYXMgaW50ZWdlciwgdGhlbiBhZGp1c3QgdGhlIHJlc3VsdCBleHBvbmVudC5cclxuICAgICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSAxIC8gMCkge1xyXG4gICAgICAgICAgICBlc3RpbWF0ZSA9IHhjLmpvaW4oJycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEoZXN0aW1hdGUubGVuZ3RoICsgZSAmIDEpKSB7XHJcbiAgICAgICAgICAgICAgICBlc3RpbWF0ZSArPSAnMCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHIgPSBuZXcgQmlnKCBNYXRoLnNxcnQoZXN0aW1hdGUpLnRvU3RyaW5nKCkgKTtcclxuICAgICAgICAgICAgci5lID0gKChlICsgMSkgLyAyIHwgMCkgLSAoZSA8IDAgfHwgZSAmIDEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHIgPSBuZXcgQmlnKGkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpID0gci5lICsgKEJpZy5EUCArPSA0KTtcclxuXHJcbiAgICAgICAgLy8gTmV3dG9uLVJhcGhzb24gaXRlcmF0aW9uLlxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgYXBwcm94ID0gcjtcclxuICAgICAgICAgICAgciA9IGhhbGYudGltZXMoIGFwcHJveC5wbHVzKCB4LmRpdihhcHByb3gpICkgKTtcclxuICAgICAgICB9IHdoaWxlICggYXBwcm94LmMuc2xpY2UoMCwgaSkuam9pbignJykgIT09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgci5jLnNsaWNlKDAsIGkpLmpvaW4oJycpICk7XHJcblxyXG4gICAgICAgIHJuZChyLCBCaWcuRFAgLT0gNCwgQmlnLlJNKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgbmV3IEJpZyB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgdGltZXMgdGhlIHZhbHVlIG9mXHJcbiAgICAgKiBCaWcgeS5cclxuICAgICAqL1xyXG4gICAgUC5tdWwgPSBQLnRpbWVzID0gZnVuY3Rpb24gKHkpIHtcclxuICAgICAgICB2YXIgYyxcclxuICAgICAgICAgICAgeCA9IHRoaXMsXHJcbiAgICAgICAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgICAgICAgIHhjID0geC5jLFxyXG4gICAgICAgICAgICB5YyA9ICh5ID0gbmV3IEJpZyh5KSkuYyxcclxuICAgICAgICAgICAgYSA9IHhjLmxlbmd0aCxcclxuICAgICAgICAgICAgYiA9IHljLmxlbmd0aCxcclxuICAgICAgICAgICAgaSA9IHguZSxcclxuICAgICAgICAgICAgaiA9IHkuZTtcclxuXHJcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHNpZ24gb2YgcmVzdWx0LlxyXG4gICAgICAgIHkucyA9IHgucyA9PSB5LnMgPyAxIDogLTE7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBzaWduZWQgMCBpZiBlaXRoZXIgMC5cclxuICAgICAgICBpZiAoIXhjWzBdIHx8ICF5Y1swXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEJpZyh5LnMgKiAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXhwb25lbnQgb2YgcmVzdWx0IGFzIHguZSArIHkuZS5cclxuICAgICAgICB5LmUgPSBpICsgajtcclxuXHJcbiAgICAgICAgLy8gSWYgYXJyYXkgeGMgaGFzIGZld2VyIGRpZ2l0cyB0aGFuIHljLCBzd2FwIHhjIGFuZCB5YywgYW5kIGxlbmd0aHMuXHJcbiAgICAgICAgaWYgKGEgPCBiKSB7XHJcbiAgICAgICAgICAgIGMgPSB4YztcclxuICAgICAgICAgICAgeGMgPSB5YztcclxuICAgICAgICAgICAgeWMgPSBjO1xyXG4gICAgICAgICAgICBqID0gYTtcclxuICAgICAgICAgICAgYSA9IGI7XHJcbiAgICAgICAgICAgIGIgPSBqO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGlzZSBjb2VmZmljaWVudCBhcnJheSBvZiByZXN1bHQgd2l0aCB6ZXJvcy5cclxuICAgICAgICBmb3IgKGMgPSBuZXcgQXJyYXkoaiA9IGEgKyBiKTsgai0tOyBjW2pdID0gMCkge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTXVsdGlwbHkuXHJcblxyXG4gICAgICAgIC8vIGkgaXMgaW5pdGlhbGx5IHhjLmxlbmd0aC5cclxuICAgICAgICBmb3IgKGkgPSBiOyBpLS07KSB7XHJcbiAgICAgICAgICAgIGIgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gYSBpcyB5Yy5sZW5ndGguXHJcbiAgICAgICAgICAgIGZvciAoaiA9IGEgKyBpOyBqID4gaTspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDdXJyZW50IHN1bSBvZiBwcm9kdWN0cyBhdCB0aGlzIGRpZ2l0IHBvc2l0aW9uLCBwbHVzIGNhcnJ5LlxyXG4gICAgICAgICAgICAgICAgYiA9IGNbal0gKyB5Y1tpXSAqIHhjW2ogLSBpIC0gMV0gKyBiO1xyXG4gICAgICAgICAgICAgICAgY1tqLS1dID0gYiAlIDEwO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNhcnJ5XHJcbiAgICAgICAgICAgICAgICBiID0gYiAvIDEwIHwgMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjW2pdID0gKGNbal0gKyBiKSAlIDEwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSW5jcmVtZW50IHJlc3VsdCBleHBvbmVudCBpZiB0aGVyZSBpcyBhIGZpbmFsIGNhcnJ5LlxyXG4gICAgICAgIGlmIChiKSB7XHJcbiAgICAgICAgICAgICsreS5lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGFueSBsZWFkaW5nIHplcm8uXHJcbiAgICAgICAgaWYgKCFjWzBdKSB7XHJcbiAgICAgICAgICAgIGMuc2hpZnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cclxuICAgICAgICBmb3IgKGkgPSBjLmxlbmd0aDsgIWNbLS1pXTsgYy5wb3AoKSkge1xyXG4gICAgICAgIH1cclxuICAgICAgICB5LmMgPSBjO1xyXG5cclxuICAgICAgICByZXR1cm4geTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZy5cclxuICAgICAqIFJldHVybiBleHBvbmVudGlhbCBub3RhdGlvbiBpZiB0aGlzIEJpZyBoYXMgYSBwb3NpdGl2ZSBleHBvbmVudCBlcXVhbCB0b1xyXG4gICAgICogb3IgZ3JlYXRlciB0aGFuIEJpZy5FX1BPUywgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW5cclxuICAgICAqIEJpZy5FX05FRy5cclxuICAgICAqL1xyXG4gICAgUC50b1N0cmluZyA9IFAudmFsdWVPZiA9IFAudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB4ID0gdGhpcyxcclxuICAgICAgICAgICAgQmlnID0geC5jb25zdHJ1Y3RvcixcclxuICAgICAgICAgICAgZSA9IHguZSxcclxuICAgICAgICAgICAgc3RyID0geC5jLmpvaW4oJycpLFxyXG4gICAgICAgICAgICBzdHJMID0gc3RyLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnRpYWwgbm90YXRpb24/XHJcbiAgICAgICAgaWYgKGUgPD0gQmlnLkVfTkVHIHx8IGUgPj0gQmlnLkVfUE9TKSB7XHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyAoc3RyTCA+IDEgPyAnLicgKyBzdHIuc2xpY2UoMSkgOiAnJykgK1xyXG4gICAgICAgICAgICAgIChlIDwgMCA/ICdlJyA6ICdlKycpICsgZTtcclxuXHJcbiAgICAgICAgLy8gTmVnYXRpdmUgZXhwb25lbnQ/XHJcbiAgICAgICAgfSBlbHNlIGlmIChlIDwgMCkge1xyXG5cclxuICAgICAgICAgICAgLy8gUHJlcGVuZCB6ZXJvcy5cclxuICAgICAgICAgICAgZm9yICg7ICsrZTsgc3RyID0gJzAnICsgc3RyKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyID0gJzAuJyArIHN0cjtcclxuXHJcbiAgICAgICAgLy8gUG9zaXRpdmUgZXhwb25lbnQ/XHJcbiAgICAgICAgfSBlbHNlIGlmIChlID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCsrZSA+IHN0ckwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgemVyb3MuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGUgLT0gc3RyTDsgZS0tIDsgc3RyICs9ICcwJykge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUgPCBzdHJMKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoMCwgZSkgKyAnLicgKyBzdHIuc2xpY2UoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXhwb25lbnQgemVyby5cclxuICAgICAgICB9IGVsc2UgaWYgKHN0ckwgPiAxKSB7XHJcbiAgICAgICAgICAgIHN0ciA9IHN0ci5jaGFyQXQoMCkgKyAnLicgKyBzdHIuc2xpY2UoMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBdm9pZCAnLTAnXHJcbiAgICAgICAgcmV0dXJuIHgucyA8IDAgJiYgeC5jWzBdID8gJy0nICsgc3RyIDogc3RyO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIElmIHRvRXhwb25lbnRpYWwsIHRvRml4ZWQsIHRvUHJlY2lzaW9uIGFuZCBmb3JtYXQgYXJlIG5vdCByZXF1aXJlZCB0aGV5XHJcbiAgICAgKiBjYW4gc2FmZWx5IGJlIGNvbW1lbnRlZC1vdXQgb3IgZGVsZXRlZC4gTm8gcmVkdW5kYW50IGNvZGUgd2lsbCBiZSBsZWZ0LlxyXG4gICAgICogZm9ybWF0IGlzIHVzZWQgb25seSBieSB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkIGFuZCB0b1ByZWNpc2lvbi5cclxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgaW4gZXhwb25lbnRpYWxcclxuICAgICAqIG5vdGF0aW9uIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzIGFuZCByb3VuZGVkLCBpZiBuZWNlc3NhcnksIHVzaW5nXHJcbiAgICAgKiBCaWcuUk0uXHJcbiAgICAgKlxyXG4gICAgICogW2RwXSB7bnVtYmVyfSBJbnRlZ2VyLCAwIHRvIE1BWF9EUCBpbmNsdXNpdmUuXHJcbiAgICAgKi9cclxuICAgIFAudG9FeHBvbmVudGlhbCA9IGZ1bmN0aW9uIChkcCkge1xyXG5cclxuICAgICAgICBpZiAoZHAgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkcCA9IHRoaXMuYy5sZW5ndGggLSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZHAgIT09IH5+ZHAgfHwgZHAgPCAwIHx8IGRwID4gTUFYX0RQKSB7XHJcbiAgICAgICAgICAgIHRocm93RXJyKCchdG9FeHAhJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0KHRoaXMsIGRwLCAxKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZyBpbiBub3JtYWwgbm90YXRpb25cclxuICAgICAqIHRvIGRwIGZpeGVkIGRlY2ltYWwgcGxhY2VzIGFuZCByb3VuZGVkLCBpZiBuZWNlc3NhcnksIHVzaW5nIEJpZy5STS5cclxuICAgICAqXHJcbiAgICAgKiBbZHBdIHtudW1iZXJ9IEludGVnZXIsIDAgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICAgICAqL1xyXG4gICAgUC50b0ZpeGVkID0gZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgdmFyIHN0cixcclxuICAgICAgICAgICAgeCA9IHRoaXMsXHJcbiAgICAgICAgICAgIEJpZyA9IHguY29uc3RydWN0b3IsXHJcbiAgICAgICAgICAgIG5lZyA9IEJpZy5FX05FRyxcclxuICAgICAgICAgICAgcG9zID0gQmlnLkVfUE9TO1xyXG5cclxuICAgICAgICAvLyBQcmV2ZW50IHRoZSBwb3NzaWJpbGl0eSBvZiBleHBvbmVudGlhbCBub3RhdGlvbi5cclxuICAgICAgICBCaWcuRV9ORUcgPSAtKEJpZy5FX1BPUyA9IDEgLyAwKTtcclxuXHJcbiAgICAgICAgaWYgKGRwID09IG51bGwpIHtcclxuICAgICAgICAgICAgc3RyID0geC50b1N0cmluZygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZHAgPT09IH5+ZHAgJiYgZHAgPj0gMCAmJiBkcCA8PSBNQVhfRFApIHtcclxuICAgICAgICAgICAgc3RyID0gZm9ybWF0KHgsIHguZSArIGRwKTtcclxuXHJcbiAgICAgICAgICAgIC8vICgtMCkudG9GaXhlZCgpIGlzICcwJywgYnV0ICgtMC4xKS50b0ZpeGVkKCkgaXMgJy0wJy5cclxuICAgICAgICAgICAgLy8gKC0wKS50b0ZpeGVkKDEpIGlzICcwLjAnLCBidXQgKC0wLjAxKS50b0ZpeGVkKDEpIGlzICctMC4wJy5cclxuICAgICAgICAgICAgaWYgKHgucyA8IDAgJiYgeC5jWzBdICYmIHN0ci5pbmRleE9mKCctJykgPCAwKSB7XHJcbiAgICAgICAgLy9FLmcuIC0wLjUgaWYgcm91bmRlZCB0byAtMCB3aWxsIGNhdXNlIHRvU3RyaW5nIHRvIG9taXQgdGhlIG1pbnVzIHNpZ24uXHJcbiAgICAgICAgICAgICAgICBzdHIgPSAnLScgKyBzdHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgQmlnLkVfTkVHID0gbmVnO1xyXG4gICAgICAgIEJpZy5FX1BPUyA9IHBvcztcclxuXHJcbiAgICAgICAgaWYgKCFzdHIpIHtcclxuICAgICAgICAgICAgdGhyb3dFcnIoJyF0b0ZpeCEnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKlxyXG4gICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWcgcm91bmRlZCB0byBzZFxyXG4gICAgICogc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIEJpZy5STS4gVXNlIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHNkIGlzIGxlc3NcclxuICAgICAqIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHMgbmVjZXNzYXJ5IHRvIHJlcHJlc2VudCB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZVxyXG4gICAgICogdmFsdWUgaW4gbm9ybWFsIG5vdGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIHNkIHtudW1iZXJ9IEludGVnZXIsIDEgdG8gTUFYX0RQIGluY2x1c2l2ZS5cclxuICAgICAqL1xyXG4gICAgUC50b1ByZWNpc2lvbiA9IGZ1bmN0aW9uIChzZCkge1xyXG5cclxuICAgICAgICBpZiAoc2QgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2QgIT09IH5+c2QgfHwgc2QgPCAxIHx8IHNkID4gTUFYX0RQKSB7XHJcbiAgICAgICAgICAgIHRocm93RXJyKCchdG9QcmUhJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0KHRoaXMsIHNkIC0gMSwgMik7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBFeHBvcnRcclxuXHJcblxyXG4gICAgQmlnID0gYmlnRmFjdG9yeSgpO1xyXG5cclxuICAgIC8vQU1ELlxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCaWc7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gTm9kZSBhbmQgb3RoZXIgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLlxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gQmlnO1xyXG4gICAgICAgIG1vZHVsZS5leHBvcnRzLkJpZyA9IEJpZztcclxuXHJcbiAgICAvL0Jyb3dzZXIuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdsb2JhbC5CaWcgPSBCaWc7XHJcbiAgICB9XHJcbn0pKHRoaXMpO1xyXG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCJ2YXIgcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByYW5kKGxlbikge1xuICBpZiAoIXIpXG4gICAgciA9IG5ldyBSYW5kKG51bGwpO1xuXG4gIHJldHVybiByLmdlbmVyYXRlKGxlbik7XG59O1xuXG5mdW5jdGlvbiBSYW5kKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZDtcbn1cbm1vZHVsZS5leHBvcnRzLlJhbmQgPSBSYW5kO1xuXG5SYW5kLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbikge1xuICByZXR1cm4gdGhpcy5fcmFuZChsZW4pO1xufTtcblxuLy8gRW11bGF0ZSBjcnlwdG8gQVBJIHVzaW5nIHJhbmR5XG5SYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgaWYgKHRoaXMucmFuZC5nZXRCeXRlcylcbiAgICByZXR1cm4gdGhpcy5yYW5kLmdldEJ5dGVzKG4pO1xuXG4gIHZhciByZXMgPSBuZXcgVWludDhBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspXG4gICAgcmVzW2ldID0gdGhpcy5yYW5kLmdldEJ5dGUoKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmlmICh0eXBlb2Ygc2VsZiA9PT0gJ29iamVjdCcpIHtcbiAgaWYgKHNlbGYuY3J5cHRvICYmIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIE1vZGVybiBicm93c2Vyc1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycik7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoc2VsZi5tc0NyeXB0byAmJiBzZWxmLm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIElFXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICBzZWxmLm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuXG4gIC8vIFNhZmFyaSdzIFdlYldvcmtlcnMgZG8gbm90IGhhdmUgYGNyeXB0b2BcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE9sZCBqdW5rXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH07XG4gIH1cbn0gZWxzZSB7XG4gIC8vIE5vZGUuanMgb3IgV2ViIHdvcmtlciB3aXRoIG5vIGNyeXB0byBzdXBwb3J0XG4gIHRyeSB7XG4gICAgdmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAgIGlmICh0eXBlb2YgY3J5cHRvLnJhbmRvbUJ5dGVzICE9PSAnZnVuY3Rpb24nKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkJyk7XG5cbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMobik7XG4gICAgfTtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG59XG4iLCIvLyBiYXNlZCBvbiB0aGUgYWVzIGltcGxpbWVudGF0aW9uIGluIHRyaXBsZSBzZWNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZXliYXNlL3RyaXBsZXNlY1xuLy8gd2hpY2ggaXMgaW4gdHVybiBiYXNlZCBvbiB0aGUgb25lIGZyb20gY3J5cHRvLWpzXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGFzVUludDMyQXJyYXkgKGJ1Zikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSBidWYgPSBCdWZmZXIuZnJvbShidWYpXG5cbiAgdmFyIGxlbiA9IChidWYubGVuZ3RoIC8gNCkgfCAwXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkobGVuKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBvdXRbaV0gPSBidWYucmVhZFVJbnQzMkJFKGkgKiA0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzY3J1YlZlYyAodikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyB2KyspIHtcbiAgICB2W2ldID0gMFxuICB9XG59XG5cbmZ1bmN0aW9uIGNyeXB0QmxvY2sgKE0sIGtleVNjaGVkdWxlLCBTVUJfTUlYLCBTQk9YLCBuUm91bmRzKSB7XG4gIHZhciBTVUJfTUlYMCA9IFNVQl9NSVhbMF1cbiAgdmFyIFNVQl9NSVgxID0gU1VCX01JWFsxXVxuICB2YXIgU1VCX01JWDIgPSBTVUJfTUlYWzJdXG4gIHZhciBTVUJfTUlYMyA9IFNVQl9NSVhbM11cblxuICB2YXIgczAgPSBNWzBdIF4ga2V5U2NoZWR1bGVbMF1cbiAgdmFyIHMxID0gTVsxXSBeIGtleVNjaGVkdWxlWzFdXG4gIHZhciBzMiA9IE1bMl0gXiBrZXlTY2hlZHVsZVsyXVxuICB2YXIgczMgPSBNWzNdIF4ga2V5U2NoZWR1bGVbM11cbiAgdmFyIHQwLCB0MSwgdDIsIHQzXG4gIHZhciBrc1JvdyA9IDRcblxuICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuICAgIHQwID0gU1VCX01JWDBbczAgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMyAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MSA9IFNVQl9NSVgwW3MxID4+PiAyNF0gXiBTVUJfTUlYMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDIgPSBTVUJfTUlYMFtzMiA+Pj4gMjRdIF4gU1VCX01JWDFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMCA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQzID0gU1VCX01JWDBbczMgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMiAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICBzMCA9IHQwXG4gICAgczEgPSB0MVxuICAgIHMyID0gdDJcbiAgICBzMyA9IHQzXG4gIH1cblxuICB0MCA9ICgoU0JPWFtzMCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMSA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMyID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMyAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQxID0gKChTQk9YW3MxID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMyID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczMgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MwICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MyA9ICgoU0JPWFtzMyA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMxID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMiAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQwID0gdDAgPj4+IDBcbiAgdDEgPSB0MSA+Pj4gMFxuICB0MiA9IHQyID4+PiAwXG4gIHQzID0gdDMgPj4+IDBcblxuICByZXR1cm4gW3QwLCB0MSwgdDIsIHQzXVxufVxuXG4vLyBBRVMgY29uc3RhbnRzXG52YXIgUkNPTiA9IFsweDAwLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2XVxudmFyIEcgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuICB2YXIgZCA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMjU2OyBqKyspIHtcbiAgICBpZiAoaiA8IDEyOCkge1xuICAgICAgZFtqXSA9IGogPDwgMVxuICAgIH0gZWxzZSB7XG4gICAgICBkW2pdID0gKGogPDwgMSkgXiAweDExYlxuICAgIH1cbiAgfVxuXG4gIHZhciBTQk9YID0gW11cbiAgdmFyIElOVl9TQk9YID0gW11cbiAgdmFyIFNVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG4gIHZhciBJTlZfU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cblxuICAvLyBXYWxrIEdGKDJeOClcbiAgdmFyIHggPSAwXG4gIHZhciB4aSA9IDBcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIC8vIENvbXB1dGUgc2JveFxuICAgIHZhciBzeCA9IHhpIF4gKHhpIDw8IDEpIF4gKHhpIDw8IDIpIF4gKHhpIDw8IDMpIF4gKHhpIDw8IDQpXG4gICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzXG4gICAgU0JPWFt4XSA9IHN4XG4gICAgSU5WX1NCT1hbc3hdID0geFxuXG4gICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxuICAgIHZhciB4MiA9IGRbeF1cbiAgICB2YXIgeDQgPSBkW3gyXVxuICAgIHZhciB4OCA9IGRbeDRdXG5cbiAgICAvLyBDb21wdXRlIHN1YiBieXRlcywgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApXG4gICAgU1VCX01JWFswXVt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIFNVQl9NSVhbMV1beF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgU1VCX01JWFsyXVt4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIFNVQl9NSVhbM11beF0gPSB0XG5cbiAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApXG4gICAgSU5WX1NVQl9NSVhbMF1bc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgSU5WX1NVQl9NSVhbMV1bc3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIElOVl9TVUJfTUlYWzJdW3N4XSA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgIElOVl9TVUJfTUlYWzNdW3N4XSA9IHRcblxuICAgIGlmICh4ID09PSAwKSB7XG4gICAgICB4ID0geGkgPSAxXG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV1cbiAgICAgIHhpIF49IGRbZFt4aV1dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTQk9YOiBTQk9YLFxuICAgIElOVl9TQk9YOiBJTlZfU0JPWCxcbiAgICBTVUJfTUlYOiBTVUJfTUlYLFxuICAgIElOVl9TVUJfTUlYOiBJTlZfU1VCX01JWFxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIEFFUyAoa2V5KSB7XG4gIHRoaXMuX2tleSA9IGFzVUludDMyQXJyYXkoa2V5KVxuICB0aGlzLl9yZXNldCgpXG59XG5cbkFFUy5ibG9ja1NpemUgPSA0ICogNFxuQUVTLmtleVNpemUgPSAyNTYgLyA4XG5BRVMucHJvdG90eXBlLmJsb2NrU2l6ZSA9IEFFUy5ibG9ja1NpemVcbkFFUy5wcm90b3R5cGUua2V5U2l6ZSA9IEFFUy5rZXlTaXplXG5BRVMucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGtleVdvcmRzID0gdGhpcy5fa2V5XG4gIHZhciBrZXlTaXplID0ga2V5V29yZHMubGVuZ3RoXG4gIHZhciBuUm91bmRzID0ga2V5U2l6ZSArIDZcbiAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0XG5cbiAgdmFyIGtleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBrZXlTaXplOyBrKyspIHtcbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVdvcmRzW2tdXG4gIH1cblxuICBmb3IgKGsgPSBrZXlTaXplOyBrIDwga3NSb3dzOyBrKyspIHtcbiAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2sgLSAxXVxuXG4gICAgaWYgKGsgJSBrZXlTaXplID09PSAwKSB7XG4gICAgICB0ID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuXG4gICAgICB0IF49IFJDT05bKGsgLyBrZXlTaXplKSB8IDBdIDw8IDI0XG4gICAgfSBlbHNlIGlmIChrZXlTaXplID4gNiAmJiBrICUga2V5U2l6ZSA9PT0gNCkge1xuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcbiAgICB9XG5cbiAgICBrZXlTY2hlZHVsZVtrXSA9IGtleVNjaGVkdWxlW2sgLSBrZXlTaXplXSBeIHRcbiAgfVxuXG4gIHZhciBpbnZLZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGlrID0gMDsgaWsgPCBrc1Jvd3M7IGlrKyspIHtcbiAgICB2YXIga3NSID0ga3NSb3dzIC0gaWtcbiAgICB2YXIgdHQgPSBrZXlTY2hlZHVsZVtrc1IgLSAoaWsgJSA0ID8gMCA6IDQpXVxuXG4gICAgaWYgKGlrIDwgNCB8fCBrc1IgPD0gNCkge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID0gdHRcbiAgICB9IGVsc2Uge1xuICAgICAgaW52S2V5U2NoZWR1bGVbaWtdID1cbiAgICAgICAgRy5JTlZfU1VCX01JWFswXVtHLlNCT1hbdHQgPj4+IDI0XV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzFdW0cuU0JPWFsodHQgPj4+IDE2KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMl1bRy5TQk9YWyh0dCA+Pj4gOCkgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzNdW0cuU0JPWFt0dCAmIDB4ZmZdXVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX25Sb3VuZHMgPSBuUm91bmRzXG4gIHRoaXMuX2tleVNjaGVkdWxlID0ga2V5U2NoZWR1bGVcbiAgdGhpcy5faW52S2V5U2NoZWR1bGUgPSBpbnZLZXlTY2hlZHVsZVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9ja1JhdyA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG4gIHJldHVybiBjcnlwdEJsb2NrKE0sIHRoaXMuX2tleVNjaGVkdWxlLCBHLlNVQl9NSVgsIEcuU0JPWCwgdGhpcy5fblJvdW5kcylcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgb3V0ID0gdGhpcy5lbmNyeXB0QmxvY2tSYXcoTSlcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLmRlY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIE0gPSBhc1VJbnQzMkFycmF5KE0pXG5cbiAgLy8gc3dhcFxuICB2YXIgbTEgPSBNWzFdXG4gIE1bMV0gPSBNWzNdXG4gIE1bM10gPSBtMVxuXG4gIHZhciBvdXQgPSBjcnlwdEJsb2NrKE0sIHRoaXMuX2ludktleVNjaGVkdWxlLCBHLklOVl9TVUJfTUlYLCBHLklOVl9TQk9YLCB0aGlzLl9uUm91bmRzKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoKSB7XG4gIHNjcnViVmVjKHRoaXMuX2tleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9pbnZLZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5fa2V5KVxufVxuXG5tb2R1bGUuZXhwb3J0cy5BRVMgPSBBRVNcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgR0hBU0ggPSByZXF1aXJlKCcuL2doYXNoJylcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuL2luY3IzMicpXG5cbmZ1bmN0aW9uIHhvclRlc3QgKGEsIGIpIHtcbiAgdmFyIG91dCA9IDBcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgb3V0KytcblxuICB2YXIgbGVuID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgb3V0ICs9IChhW2ldIF4gYltpXSlcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gY2FsY0l2IChzZWxmLCBpdiwgY2spIHtcbiAgaWYgKGl2Lmxlbmd0aCA9PT0gMTIpIHtcbiAgICBzZWxmLl9maW5JRCA9IEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMV0pXSlcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAyXSldKVxuICB9XG4gIHZhciBnaGFzaCA9IG5ldyBHSEFTSChjaylcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgdG9QYWQgPSBsZW4gJSAxNlxuICBnaGFzaC51cGRhdGUoaXYpXG4gIGlmICh0b1BhZCkge1xuICAgIHRvUGFkID0gMTYgLSB0b1BhZFxuICAgIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2ModG9QYWQsIDApKVxuICB9XG4gIGdoYXNoLnVwZGF0ZShCdWZmZXIuYWxsb2MoOCwgMCkpXG4gIHZhciBpdkJpdHMgPSBsZW4gKiA4XG4gIHZhciB0YWlsID0gQnVmZmVyLmFsbG9jKDgpXG4gIHRhaWwud3JpdGVVSW50QkUoaXZCaXRzLCAwLCA4KVxuICBnaGFzaC51cGRhdGUodGFpbClcbiAgc2VsZi5fZmluSUQgPSBnaGFzaC5zdGF0ZVxuICB2YXIgb3V0ID0gQnVmZmVyLmZyb20oc2VsZi5fZmluSUQpXG4gIGluY3IzMihvdXQpXG4gIHJldHVybiBvdXRcbn1cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHZhciBoID0gQnVmZmVyLmFsbG9jKDQsIDApXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB2YXIgY2sgPSB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGgpXG4gIHRoaXMuX2doYXNoID0gbmV3IEdIQVNIKGNrKVxuICBpdiA9IGNhbGNJdih0aGlzLCBpdiwgY2spXG5cbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9hbGVuID0gMFxuICB0aGlzLl9sZW4gPSAwXG4gIHRoaXMuX21vZGUgPSBtb2RlXG5cbiAgdGhpcy5fYXV0aFRhZyA9IG51bGxcbiAgdGhpcy5fY2FsbGVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBpZiAoIXRoaXMuX2NhbGxlZCAmJiB0aGlzLl9hbGVuKSB7XG4gICAgdmFyIHJ1bXAgPSAxNiAtICh0aGlzLl9hbGVuICUgMTYpXG4gICAgaWYgKHJ1bXAgPCAxNikge1xuICAgICAgcnVtcCA9IEJ1ZmZlci5hbGxvYyhydW1wLCAwKVxuICAgICAgdGhpcy5fZ2hhc2gudXBkYXRlKHJ1bXApXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fY2FsbGVkID0gdHJ1ZVxuICB2YXIgb3V0ID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICBpZiAodGhpcy5fZGVjcnlwdCkge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShjaHVuaylcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUob3V0KVxuICB9XG4gIHRoaXMuX2xlbiArPSBjaHVuay5sZW5ndGhcbiAgcmV0dXJuIG91dFxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgIXRoaXMuX2F1dGhUYWcpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB2YXIgdGFnID0geG9yKHRoaXMuX2doYXNoLmZpbmFsKHRoaXMuX2FsZW4gKiA4LCB0aGlzLl9sZW4gKiA4KSwgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh0aGlzLl9maW5JRCkpXG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmIHhvclRlc3QodGFnLCB0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5nZXRBdXRoVGFnID0gZnVuY3Rpb24gZ2V0QXV0aFRhZyAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0IHx8ICFCdWZmZXIuaXNCdWZmZXIodGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBnZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHJldHVybiB0aGlzLl9hdXRoVGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uIHNldEF1dGhUYWcgKHRhZykge1xuICBpZiAoIXRoaXMuX2RlY3J5cHQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgYXV0aCB0YWcgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2F1dGhUYWcgPSB0YWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBQUQgPSBmdW5jdGlvbiBzZXRBQUQgKGJ1Zikge1xuICBpZiAodGhpcy5fY2FsbGVkKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IEFBRCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fZ2hhc2gudXBkYXRlKGJ1ZilcbiAgdGhpcy5fYWxlbiArPSBidWYubGVuZ3RoXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgQXV0aENpcGhlciA9IHJlcXVpcmUoJy4vYXV0aENpcGhlcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNT0RFUyA9IHJlcXVpcmUoJy4vbW9kZXMnKVxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIERlY2lwaGVyIChtb2RlLCBrZXksIGl2KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2FjaGUgPSBuZXcgU3BsaXR0ZXIoKVxuICB0aGlzLl9sYXN0ID0gdm9pZCAwXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9tb2RlID0gbW9kZVxuICB0aGlzLl9hdXRvcGFkZGluZyA9IHRydWVcbn1cblxuaW5oZXJpdHMoRGVjaXBoZXIsIFRyYW5zZm9ybSlcblxuRGVjaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9jYWNoZS5hZGQoZGF0YSlcbiAgdmFyIGNodW5rXG4gIHZhciB0aGluZ1xuICB2YXIgb3V0ID0gW11cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCh0aGlzLl9hdXRvcGFkZGluZykpKSB7XG4gICAgdGhpbmcgPSB0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspXG4gICAgb3V0LnB1c2godGhpbmcpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2h1bmsgPSB0aGlzLl9jYWNoZS5mbHVzaCgpXG4gIGlmICh0aGlzLl9hdXRvcGFkZGluZykge1xuICAgIHJldHVybiB1bnBhZCh0aGlzLl9tb2RlLmRlY3J5cHQodGhpcywgY2h1bmspKVxuICB9IGVsc2UgaWYgKGNodW5rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIG5vdCBtdWx0aXBsZSBvZiBibG9jayBsZW5ndGgnKVxuICB9XG59XG5cbkRlY2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoYXV0b1BhZGRpbmcpIHtcbiAgdmFyIG91dFxuICBpZiAoYXV0b1BhZGRpbmcpIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPiAxNikge1xuICAgICAgb3V0ID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPj0gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2FjaGVcbn1cblxuZnVuY3Rpb24gdW5wYWQgKGxhc3QpIHtcbiAgdmFyIHBhZGRlZCA9IGxhc3RbMTVdXG4gIGlmIChwYWRkZWQgPCAxIHx8IHBhZGRlZCA+IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikgcmV0dXJuXG5cbiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBuZXcgRGVjaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9FUyA9IEJ1ZmZlci5hbGxvYygxNiwgMClcblxuZnVuY3Rpb24gdG9BcnJheSAoYnVmKSB7XG4gIHJldHVybiBbXG4gICAgYnVmLnJlYWRVSW50MzJCRSgwKSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDQpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoOCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSgxMilcbiAgXVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0gPj4+IDAsIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSA+Pj4gMCwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdID4+PiAwLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10gPj4+IDAsIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIEdIQVNIIChrZXkpIHtcbiAgdGhpcy5oID0ga2V5XG4gIHRoaXMuc3RhdGUgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JWaVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCAxMjgpIHtcbiAgICB4aSA9ICh0aGlzLnN0YXRlW35+KGkgLyA4KV0gJiAoMSA8PCAoNyAtIChpICUgOCkpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaVswXSBePSBWaVswXVxuICAgICAgWmlbMV0gXj0gVmlbMV1cbiAgICAgIFppWzJdIF49IFZpWzJdXG4gICAgICBaaVszXSBePSBWaVszXVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBvZiBMU0IoVl9pKVxuICAgIGxzYlZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYlZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5cbkdIQVNILnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBidWZdKVxuICB2YXIgY2h1bmtcbiAgd2hpbGUgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgY2h1bmsgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHRoaXMuZ2hhc2goY2h1bmspXG4gIH1cbn1cblxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpXG4gIH1cblxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbMCwgYWJsLCAwLCBibF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG4iLCJmdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNyMzJcbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkXG4gIHZhciBpID0gLTFcbiAgdmFyIGxlbiA9IDhcbiAgdmFyIG91dCA9IDBcbiAgdmFyIGJpdCwgdmFsdWVcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICBiaXQgPSAoYnl0ZVBhcmFtICYgKDEgPDwgKDcgLSBpKSkpID8gMHg4MCA6IDBcbiAgICB2YWx1ZSA9IHBhZFswXSBeIGJpdFxuICAgIG91dCArPSAoKHZhbHVlICYgMHg4MCkgPj4gKGkgJSA4KSlcbiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzaGlmdEluIChidWZmZXIsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBidWZmZXIubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIEJ1ZmZlci5mcm9tKFt2YWx1ZV0pXSlcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4uL2luY3IzMicpXG5cbmZ1bmN0aW9uIGdldEJsb2NrIChzZWxmKSB7XG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrUmF3KHNlbGYuX3ByZXYpXG4gIGluY3IzMihzZWxmLl9wcmV2KVxuICByZXR1cm4gb3V0XG59XG5cbnZhciBibG9ja1NpemUgPSAxNlxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHZhciBjaHVua051bSA9IE1hdGguY2VpbChjaHVuay5sZW5ndGggLyBibG9ja1NpemUpXG4gIHZhciBzdGFydCA9IHNlbGYuX2NhY2hlLmxlbmd0aFxuICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW1xuICAgIHNlbGYuX2NhY2hlLFxuICAgIEJ1ZmZlci5hbGxvY1Vuc2FmZShjaHVua051bSAqIGJsb2NrU2l6ZSlcbiAgXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHVua051bTsgaSsrKSB7XG4gICAgdmFyIG91dCA9IGdldEJsb2NrKHNlbGYpXG4gICAgdmFyIG9mZnNldCA9IHN0YXJ0ICsgaSAqIGJsb2NrU2l6ZVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzBdLCBvZmZzZXQgKyAwKVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzFdLCBvZmZzZXQgKyA0KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzJdLCBvZmZzZXQgKyA4KVxuICAgIHNlbGYuX2NhY2hlLndyaXRlVUludDMyQkUob3V0WzNdLCBvZmZzZXQgKyAxMilcbiAgfVxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwiZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGJsb2NrKVxufVxuXG5leHBvcnRzLmRlY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5kZWNyeXB0QmxvY2soYmxvY2spXG59XG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbn1cblxuaW5oZXJpdHMoU3RyZWFtQ2lwaGVyLCBUcmFuc2Zvcm0pXG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rLCB0aGlzLl9kZWNyeXB0KVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY2lwaGVyLnNjcnViKClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvYnJvd3NlcicpXG52YXIgYWVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9tb2RlcycpXG52YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUsIGRlY3J5cHQ6IHRydWUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlc01vZGVzKS5jb25jYXQoYWVzLmdldENpcGhlcnMoKSlcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBDaXBoZXJCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGRlcyA9IHJlcXVpcmUoJ2Rlcy5qcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIG1vZGVzID0ge1xuICAnZGVzLWVkZTMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUzJzogZGVzLkVERSxcbiAgJ2Rlcy1lZGUtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUnOiBkZXMuRURFLFxuICAnZGVzLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkRFUyksXG4gICdkZXMtZWNiJzogZGVzLkRFU1xufVxubW9kZXMuZGVzID0gbW9kZXNbJ2Rlcy1jYmMnXVxubW9kZXMuZGVzMyA9IG1vZGVzWydkZXMtZWRlMy1jYmMnXVxubW9kdWxlLmV4cG9ydHMgPSBERVNcbmluaGVyaXRzKERFUywgQ2lwaGVyQmFzZSlcbmZ1bmN0aW9uIERFUyAob3B0cykge1xuICBDaXBoZXJCYXNlLmNhbGwodGhpcylcbiAgdmFyIG1vZGVOYW1lID0gb3B0cy5tb2RlLnRvTG93ZXJDYXNlKClcbiAgdmFyIG1vZGUgPSBtb2Rlc1ttb2RlTmFtZV1cbiAgdmFyIHR5cGVcbiAgaWYgKG9wdHMuZGVjcnlwdCkge1xuICAgIHR5cGUgPSAnZGVjcnlwdCdcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gJ2VuY3J5cHQnXG4gIH1cbiAgdmFyIGtleSA9IG9wdHMua2V5XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpdikpIHtcbiAgICBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB9XG4gIHRoaXMuX2RlcyA9IG1vZGUuY3JlYXRlKHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXYsXG4gICAgdHlwZTogdHlwZVxuICB9KVxufVxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKVxufVxuIiwiZXhwb3J0c1snZGVzLWVjYiddID0ge1xuICBrZXk6IDgsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtY2JjJ10gPSBleHBvcnRzLmRlcyA9IHtcbiAga2V5OiA4LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMtY2JjJ10gPSBleHBvcnRzLmRlczMgPSB7XG4gIGtleTogMjQsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMyddID0ge1xuICBrZXk6IDI0LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWVkZS1jYmMnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDBcbn1cbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBjcnQ7XG5mdW5jdGlvbiBibGluZChwcml2KSB7XG4gIHZhciByID0gZ2V0cihwcml2KTtcbiAgdmFyIGJsaW5kZXIgPSByLnRvUmVkKGJuLm1vbnQocHJpdi5tb2R1bHVzKSlcbiAgLnJlZFBvdyhuZXcgYm4ocHJpdi5wdWJsaWNFeHBvbmVudCkpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBibGluZGVyOiBibGluZGVyLFxuICAgIHVuYmxpbmRlcjpyLmludm0ocHJpdi5tb2R1bHVzKVxuICB9O1xufVxuZnVuY3Rpb24gY3J0KG1zZywgcHJpdikge1xuICB2YXIgYmxpbmRzID0gYmxpbmQocHJpdik7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbW9kID0gYm4ubW9udChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYmxpbmRlZCA9IG5ldyBibihtc2cpLm11bChibGluZHMuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpO1xuICB2YXIgYzEgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTEpKTtcbiAgdmFyIGMyID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUyKSk7XG4gIHZhciBxaW52ID0gcHJpdi5jb2VmZmljaWVudDtcbiAgdmFyIHAgPSBwcml2LnByaW1lMTtcbiAgdmFyIHEgPSBwcml2LnByaW1lMjtcbiAgdmFyIG0xID0gYzEucmVkUG93KHByaXYuZXhwb25lbnQxKTtcbiAgdmFyIG0yID0gYzIucmVkUG93KHByaXYuZXhwb25lbnQyKTtcbiAgbTEgPSBtMS5mcm9tUmVkKCk7XG4gIG0yID0gbTIuZnJvbVJlZCgpO1xuICB2YXIgaCA9IG0xLmlzdWIobTIpLmltdWwocWludikudW1vZChwKTtcbiAgaC5pbXVsKHEpO1xuICBtMi5pYWRkKGgpO1xuICByZXR1cm4gbmV3IEJ1ZmZlcihtMi5pbXVsKGJsaW5kcy51bmJsaW5kZXIpLnVtb2QocHJpdi5tb2R1bHVzKS50b0FycmF5KGZhbHNlLCBsZW4pKTtcbn1cbmNydC5nZXRyID0gZ2V0cjtcbmZ1bmN0aW9uIGdldHIocHJpdikge1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIHdoaWxlIChyLmNtcChwcml2Lm1vZHVsdXMpID49ICAwIHx8ICFyLnVtb2QocHJpdi5wcmltZTEpIHx8ICFyLnVtb2QocHJpdi5wcmltZTIpKSB7XG4gICAgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyL2FsZ29yaXRobXMuanNvbicpXG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpXG5PYmplY3Qua2V5cyhhbGdvcml0aG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3JpdGhtc1trZXldLmlkID0gbmV3IEJ1ZmZlcihhbGdvcml0aG1zW2tleV0uaWQsICdoZXgnKVxuICBhbGdvcml0aG1zW2tleS50b0xvd2VyQ2FzZSgpXSA9IGFsZ29yaXRobXNba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oaGFzaCwga2V5LCB0aGlzLl9oYXNoVHlwZSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcblxuICByZXR1cm4gZW5jID8gc2lnLnRvU3RyaW5nKGVuYykgOiBzaWdcbn1cblxuZnVuY3Rpb24gVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblZlcmlmeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICByZXR1cm4gdmVyaWZ5KHNpZywgaGFzaCwga2V5LCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMCwgMSBdXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAxIDwgbGVuKSBwYWQucHVzaCgweGZmKVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkgcGFkLnB1c2goaGFzaFtpXSlcblxuICB2YXIgb3V0ID0gY3J0KHBhZCwgcHJpdilcbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBlY1NpZ24gKGhhc2gsIHByaXYpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIGtleSA9IGN1cnZlLmtleUZyb21Qcml2YXRlKHByaXYucHJpdmF0ZUtleSlcbiAgdmFyIG91dCA9IGtleS5zaWduKGhhc2gpXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0LnRvREVSKCkpXG59XG5cbmZ1bmN0aW9uIGRzYVNpZ24gKGhhc2gsIHByaXYsIGFsZ28pIHtcbiAgdmFyIHggPSBwcml2LnBhcmFtcy5wcml2X2tleVxuICB2YXIgcCA9IHByaXYucGFyYW1zLnBcbiAgdmFyIHEgPSBwcml2LnBhcmFtcy5xXG4gIHZhciBnID0gcHJpdi5wYXJhbXMuZ1xuICB2YXIgciA9IG5ldyBCTigwKVxuICB2YXIga1xuICB2YXIgSCA9IGJpdHMyaW50KGhhc2gsIHEpLm1vZChxKVxuICB2YXIgcyA9IGZhbHNlXG4gIHZhciBrdiA9IGdldEtleSh4LCBxLCBoYXNoLCBhbGdvKVxuICB3aGlsZSAocyA9PT0gZmFsc2UpIHtcbiAgICBrID0gbWFrZUtleShxLCBrdiwgYWxnbylcbiAgICByID0gbWFrZVIoZywgaywgcCwgcSlcbiAgICBzID0gay5pbnZtKHEpLmltdWwoSC5hZGQoeC5tdWwocikpKS5tb2QocSlcbiAgICBpZiAocy5jbXBuKDApID09PSAwKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkgciA9IFsgMCBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbIDAgXS5jb25jYXQocylcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCB4IF0pXG4gIH1cbiAgdmFyIGhsZW4gPSBoYXNoLmxlbmd0aFxuICB2YXIgaGJpdHMgPSBiaXRzMm9jdGV0cyhoYXNoLCBxKVxuICB2YXIgdiA9IG5ldyBCdWZmZXIoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gbmV3IEJ1ZmZlcihobGVuKVxuICBrLmZpbGwoMClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUobmV3IEJ1ZmZlcihbIDEgXSkpLnVwZGF0ZSh4KS51cGRhdGUoaGJpdHMpLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuICByZXR1cm4geyBrOiBrLCB2OiB2IH1cbn1cblxuZnVuY3Rpb24gYml0czJpbnQgKG9iaXRzLCBxKSB7XG4gIHZhciBiaXRzID0gbmV3IEJOKG9iaXRzKVxuICB2YXIgc2hpZnQgPSAob2JpdHMubGVuZ3RoIDw8IDMpIC0gcS5iaXRMZW5ndGgoKVxuICBpZiAoc2hpZnQgPiAwKSBiaXRzLmlzaHJuKHNoaWZ0KVxuICByZXR1cm4gYml0c1xufVxuXG5mdW5jdGlvbiBiaXRzMm9jdGV0cyAoYml0cywgcSkge1xuICBiaXRzID0gYml0czJpbnQoYml0cywgcSlcbiAgYml0cyA9IGJpdHMubW9kKHEpXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIG91dC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoWyB6ZXJvcywgb3V0IF0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBtYWtlS2V5IChxLCBrdiwgYWxnbykge1xuICB2YXIgdFxuICB2YXIga1xuXG4gIGRvIHtcbiAgICB0ID0gbmV3IEJ1ZmZlcigwKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICAgICAgdCA9IEJ1ZmZlci5jb25jYXQoWyB0LCBrdi52IF0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkuZGlnZXN0KClcbiAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgfSB3aGlsZSAoay5jbXAocSkgIT09IC0xKVxuXG4gIHJldHVybiBrXG59XG5cbmZ1bmN0aW9uIG1ha2VSIChnLCBrLCBwLCBxKSB7XG4gIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2lnblxubW9kdWxlLmV4cG9ydHMuZ2V0S2V5ID0gZ2V0S2V5XG5tb2R1bGUuZXhwb3J0cy5tYWtlS2V5ID0gbWFrZUtleVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lY1xudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxuXG5mdW5jdGlvbiB2ZXJpZnkgKHNpZywgaGFzaCwga2V5LCBzaWduVHlwZSwgdGFnKSB7XG4gIHZhciBwdWIgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHViLnR5cGUgPT09ICdlYycpIHtcbiAgICAvLyByc2Ega2V5cyBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgZWNkc2Egb25lcyBpbiBvcGVuc3NsXG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGRzYVZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHViLm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDEgXVxuICB2YXIgcGFkTnVtID0gMFxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMiA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gICAgcGFkTnVtKytcbiAgfVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkge1xuICAgIHBhZC5wdXNoKGhhc2hbaV0pXG4gIH1cbiAgcGFkID0gbmV3IEJ1ZmZlcihwYWQpXG4gIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKVxuICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpXG5cbiAgc2lnID0gc2lnLnJlZFBvdyhuZXcgQk4ocHViLnB1YmxpY0V4cG9uZW50KSlcbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IHBhZE51bSA8IDggPyAxIDogMFxuICBsZW4gPSBNYXRoLm1pbihzaWcubGVuZ3RoLCBwYWQubGVuZ3RoKVxuICBpZiAoc2lnLmxlbmd0aCAhPT0gcGFkLmxlbmd0aCkgb3V0ID0gMVxuXG4gIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSBvdXQgfD0gc2lnW2ldIF4gcGFkW2ldXG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoeS50b1JlZChtb250cCkucmVkUG93KHIubXVsKHcpLm1vZChxKSkuZnJvbVJlZCgpKVxuICAgIC5tb2QocClcbiAgICAubW9kKHEpXG4gIHJldHVybiB2LmNtcChyKSA9PT0gMFxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIGlmIChiLmNtcChxKSA+PSBxKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVDREggKGN1cnZlKSB7XG4gIHJldHVybiBuZXcgRUNESChjdXJ2ZSlcbn1cblxudmFyIGFsaWFzZXMgPSB7XG4gIHNlY3AyNTZrMToge1xuICAgIG5hbWU6ICdzZWNwMjU2azEnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AyMjRyMToge1xuICAgIG5hbWU6ICdwMjI0JyxcbiAgICBieXRlTGVuZ3RoOiAyOFxuICB9LFxuICBwcmltZTI1NnYxOiB7XG4gICAgbmFtZTogJ3AyNTYnLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHByaW1lMTkydjE6IHtcbiAgICBuYW1lOiAncDE5MicsXG4gICAgYnl0ZUxlbmd0aDogMjRcbiAgfSxcbiAgZWQyNTUxOToge1xuICAgIG5hbWU6ICdlZDI1NTE5JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMzg0cjE6IHtcbiAgICBuYW1lOiAncDM4NCcsXG4gICAgYnl0ZUxlbmd0aDogNDhcbiAgfSxcbiAgc2VjcDUyMXIxOiB7XG4gICAgbmFtZTogJ3A1MjEnLFxuICAgIGJ5dGVMZW5ndGg6IDY2XG4gIH1cbn1cblxuYWxpYXNlcy5wMjI0ID0gYWxpYXNlcy5zZWNwMjI0cjFcbmFsaWFzZXMucDI1NiA9IGFsaWFzZXMuc2VjcDI1NnIxID0gYWxpYXNlcy5wcmltZTI1NnYxXG5hbGlhc2VzLnAxOTIgPSBhbGlhc2VzLnNlY3AxOTJyMSA9IGFsaWFzZXMucHJpbWUxOTJ2MVxuYWxpYXNlcy5wMzg0ID0gYWxpYXNlcy5zZWNwMzg0cjFcbmFsaWFzZXMucDUyMSA9IGFsaWFzZXMuc2VjcDUyMXIxXG5cbmZ1bmN0aW9uIEVDREggKGN1cnZlKSB7XG4gIHRoaXMuY3VydmVUeXBlID0gYWxpYXNlc1tjdXJ2ZV1cbiAgaWYgKCF0aGlzLmN1cnZlVHlwZSkge1xuICAgIHRoaXMuY3VydmVUeXBlID0ge1xuICAgICAgbmFtZTogY3VydmVcbiAgICB9XG4gIH1cbiAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5lYyh0aGlzLmN1cnZlVHlwZS5uYW1lKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgdGhpcy5rZXlzID0gdm9pZCAwXG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoZW5jLCBmb3JtYXQpXG59XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcbiAgaW5lbmMgPSBpbmVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgb3RoZXIgPSBuZXcgQnVmZmVyKG90aGVyLCBpbmVuYylcbiAgfVxuICB2YXIgb3RoZXJQdWIgPSB0aGlzLmN1cnZlLmtleUZyb21QdWJsaWMob3RoZXIpLmdldFB1YmxpYygpXG4gIHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpXG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShvdXQsIGVuYywgdGhpcy5jdXJ2ZVR5cGUuYnl0ZUxlbmd0aClcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKVxuICBpZiAoZm9ybWF0ID09PSAnaHlicmlkJykge1xuICAgIGlmIChrZXlba2V5Lmxlbmd0aCAtIDFdICUgMikge1xuICAgICAga2V5WzBdID0gN1xuICAgIH0gZWxzZSB7XG4gICAgICBrZXlbMF0gPSA2XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZShrZXksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYylcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpXG4gIH1cbiAgdGhpcy5rZXlzLl9pbXBvcnRQdWJsaWMocHViKVxuICByZXR1cm4gdGhpc1xufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKVxuICB9XG5cbiAgdmFyIF9wcml2ID0gbmV3IEJOKHByaXYpXG4gIF9wcml2ID0gX3ByaXYudG9TdHJpbmcoMTYpXG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdilcbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUgKGJuLCBlbmMsIGxlbikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYm4pKSB7XG4gICAgYm4gPSBibi50b0FycmF5KClcbiAgfVxuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibilcbiAgaWYgKGxlbiAmJiBidWYubGVuZ3RoIDwgbGVuKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihsZW4gLSBidWYubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICBidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSlcbiAgfVxuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWZcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYylcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxuZnVuY3Rpb24gSGFzaCAoaGFzaCkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGhhc2hcbn1cblxuaW5oZXJpdHMoSGFzaCwgQmFzZSlcblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhhc2gucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2hhc2guZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIYXNoIChhbGcpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ21kNScpIHJldHVybiBuZXcgTUQ1KClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKVxuXG4gIHJldHVybiBuZXcgSGFzaChzaGEoYWxnKSlcbn1cbiIsInZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG5cbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIHZhciBoYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gICAga2V5ID0gaGFzaC51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG4gIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgdGhpcy5faGFzaC51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBoYXNoID0gdGhpcy5fYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYSh0aGlzLl9hbGcpXG4gIHJldHVybiBoYXNoLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjIChhbGcsIGtleSkge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7XG4gICAgcmV0dXJuIG5ldyBIbWFjKCdybWQxNjAnLCBrZXkpXG4gIH1cbiAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeShtZDUsIGtleSlcbiAgfVxuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBibG9ja3NpemUgPSA2NFxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGFsZyhrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gW2lwYWRdXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnB1c2goZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KHRoaXMuX2hhc2gpKVxuICByZXR1cm4gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQoW3RoaXMuX29wYWQsIGhdKSlcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLnJuZyA9IGV4cG9ydHMucHNldWRvUmFuZG9tQnl0ZXMgPSBleHBvcnRzLnBybmcgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG5leHBvcnRzLmNyZWF0ZUhhc2ggPSBleHBvcnRzLkhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG5leHBvcnRzLmNyZWF0ZUhtYWMgPSBleHBvcnRzLkhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG5cbnZhciBhbGdvcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbi9hbGdvcycpXG52YXIgYWxnb0tleXMgPSBPYmplY3Qua2V5cyhhbGdvcylcbnZhciBoYXNoZXMgPSBbJ3NoYTEnLCAnc2hhMjI0JywgJ3NoYTI1NicsICdzaGEzODQnLCAnc2hhNTEyJywgJ21kNScsICdybWQxNjAnXS5jb25jYXQoYWxnb0tleXMpXG5leHBvcnRzLmdldEhhc2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGhhc2hlc1xufVxuXG52YXIgcCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5leHBvcnRzLnBia2RmMiA9IHAucGJrZGYyXG5leHBvcnRzLnBia2RmMlN5bmMgPSBwLnBia2RmMlN5bmNcblxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktY2lwaGVyJylcblxuZXhwb3J0cy5DaXBoZXIgPSBhZXMuQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGFlcy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuQ2lwaGVyaXYgPSBhZXMuQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBhZXMuY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuRGVjaXBoZXIgPSBhZXMuRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBhZXMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuRGVjaXBoZXJpdiA9IGFlcy5EZWNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBhZXMuY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5nZXRDaXBoZXJzID0gYWVzLmdldENpcGhlcnNcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBhZXMubGlzdENpcGhlcnNcblxudmFyIGRoID0gcmVxdWlyZSgnZGlmZmllLWhlbGxtYW4nKVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLkRpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBkaC5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXBcbmV4cG9ydHMuZ2V0RGlmZmllSGVsbG1hbiA9IGRoLmdldERpZmZpZUhlbGxtYW5cbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGRoLkRpZmZpZUhlbGxtYW5cblxudmFyIHNpZ24gPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24nKVxuXG5leHBvcnRzLmNyZWF0ZVNpZ24gPSBzaWduLmNyZWF0ZVNpZ25cbmV4cG9ydHMuU2lnbiA9IHNpZ24uU2lnblxuZXhwb3J0cy5jcmVhdGVWZXJpZnkgPSBzaWduLmNyZWF0ZVZlcmlmeVxuZXhwb3J0cy5WZXJpZnkgPSBzaWduLlZlcmlmeVxuXG5leHBvcnRzLmNyZWF0ZUVDREggPSByZXF1aXJlKCdjcmVhdGUtZWNkaCcpXG5cbnZhciBwdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgncHVibGljLWVuY3J5cHQnKVxuXG5leHBvcnRzLnB1YmxpY0VuY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnB1YmxpY0VuY3J5cHRcbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnByaXZhdGVFbmNyeXB0XG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnB1YmxpY0RlY3J5cHRcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnByaXZhdGVEZWNyeXB0XG5cbi8vIHRoZSBsZWFzdCBJIGNhbiBkbyBpcyBtYWtlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgcmVzdCBvZiB0aGUgbm9kZS5qcy9jcnlwdG8gYXBpLlxuLy8gO1tcbi8vICAgJ2NyZWF0ZUNyZWRlbnRpYWxzJ1xuLy8gXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4vLyAgIGV4cG9ydHNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdGhyb3cgbmV3IEVycm9yKFtcbi8vICAgICAgICdzb3JyeSwgJyArIG5hbWUgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuLy8gICAgICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbi8vICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4vLyAgICAgXS5qb2luKCdcXG4nKSlcbi8vICAgfVxuLy8gfSlcblxudmFyIHJmID0gcmVxdWlyZSgncmFuZG9tZmlsbCcpXG5cbmV4cG9ydHMucmFuZG9tRmlsbCA9IHJmLnJhbmRvbUZpbGxcbmV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByZi5yYW5kb21GaWxsU3luY1xuXG5leHBvcnRzLmNyZWF0ZUNyZWRlbnRpYWxzID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoW1xuICAgICdzb3JyeSwgY3JlYXRlQ3JlZGVudGlhbHMgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4gICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuICBdLmpvaW4oJ1xcbicpKVxufVxuXG5leHBvcnRzLmNvbnN0YW50cyA9IHtcbiAgJ0RIX0NIRUNLX1BfTk9UX1NBRkVfUFJJTUUnOiAyLFxuICAnREhfQ0hFQ0tfUF9OT1RfUFJJTUUnOiAxLFxuICAnREhfVU5BQkxFX1RPX0NIRUNLX0dFTkVSQVRPUic6IDQsXG4gICdESF9OT1RfU1VJVEFCTEVfR0VORVJBVE9SJzogOCxcbiAgJ05QTl9FTkFCTEVEJzogMSxcbiAgJ0FMUE5fRU5BQkxFRCc6IDEsXG4gICdSU0FfUEtDUzFfUEFERElORyc6IDEsXG4gICdSU0FfU1NMVjIzX1BBRERJTkcnOiAyLFxuICAnUlNBX05PX1BBRERJTkcnOiAzLFxuICAnUlNBX1BLQ1MxX09BRVBfUEFERElORyc6IDQsXG4gICdSU0FfWDkzMV9QQURESU5HJzogNSxcbiAgJ1JTQV9QS0NTMV9QU1NfUEFERElORyc6IDYsXG4gICdQT0lOVF9DT05WRVJTSU9OX0NPTVBSRVNTRUQnOiAyLFxuICAnUE9JTlRfQ09OVkVSU0lPTl9VTkNPTVBSRVNTRUQnOiA0LFxuICAnUE9JTlRfQ09OVkVSU0lPTl9IWUJSSUQnOiA2XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMudXRpbHMgPSByZXF1aXJlKCcuL2Rlcy91dGlscycpO1xuZXhwb3J0cy5DaXBoZXIgPSByZXF1aXJlKCcuL2Rlcy9jaXBoZXInKTtcbmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7XG5leHBvcnRzLkNCQyA9IHJlcXVpcmUoJy4vZGVzL2NiYycpO1xuZXhwb3J0cy5FREUgPSByZXF1aXJlKCcuL2Rlcy9lZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQ2lwaGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLnR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgdGhpcy5ibG9ja1NpemUgPSA4O1xuICB0aGlzLl9pbml0KCk7XG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlcjtcblxuQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkge1xuICAvLyBNaWdodCBiZSBvdmVycmlkZWRcbn07XG5cbkNpcGhlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZGVjcnlwdCcpXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRW5jcnlwdChkYXRhKTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7XG4gIC8vIEFwcGVuZCBkYXRhIHRvIGJ1ZmZlclxuICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5idWZmZXJPZmYsIGRhdGEubGVuZ3RoIC0gb2ZmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW47IGkrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZiArIGldID0gZGF0YVtvZmYgKyBpXTtcbiAgdGhpcy5idWZmZXJPZmYgKz0gbWluO1xuXG4gIC8vIFNoaWZ0IG5leHRcbiAgcmV0dXJuIG1pbjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZsdXNoQnVmZmVyID0gZnVuY3Rpb24gX2ZsdXNoQnVmZmVyKG91dCwgb2ZmKSB7XG4gIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG4gIHJldHVybiB0aGlzLmJsb2NrU2l6ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRW5jcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9ICgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgfCAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIGlmICh0aGlzLmJ1ZmZlck9mZiAhPT0gMCkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICAgIG91dHB1dE9mZiArPSB0aGlzLl9mbHVzaEJ1ZmZlcihvdXQsIG91dHB1dE9mZik7XG4gIH1cblxuICAvLyBXcml0ZSBibG9ja3NcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKChkYXRhLmxlbmd0aCAtIGlucHV0T2ZmKSAlIHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICg7IGlucHV0T2ZmIDwgbWF4OyBpbnB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpO1xuICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgfVxuXG4gIC8vIFF1ZXVlIHJlc3RcbiAgZm9yICg7IGlucHV0T2ZmIDwgZGF0YS5sZW5ndGg7IGlucHV0T2ZmKyssIHRoaXMuYnVmZmVyT2ZmKyspXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZdID0gZGF0YVtpbnB1dE9mZl07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZURlY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRGVjcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9IE1hdGguY2VpbCgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgLSAxO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIFRPRE8oaW5kdXRueSk6IG9wdGltaXplIGl0LCB0aGlzIGlzIGZhciBmcm9tIG9wdGltYWxcbiAgZm9yICg7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dFxuICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gZmluYWwoYnVmZmVyKSB7XG4gIHZhciBmaXJzdDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7XG5cbiAgdmFyIGxhc3Q7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7XG4gIGVsc2VcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7XG5cbiAgaWYgKGZpcnN0KVxuICAgIHJldHVybiBmaXJzdC5jb25jYXQobGFzdCk7XG4gIGVsc2VcbiAgICByZXR1cm4gbGFzdDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgaWYgKG9mZiA9PT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgd2hpbGUgKG9mZiA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgYnVmZmVyW29mZisrXSA9IDA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbEVuY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxFbmNyeXB0KCkge1xuICBpZiAoIXRoaXMuX3BhZCh0aGlzLmJ1ZmZlciwgdGhpcy5idWZmZXJPZmYpKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIDApO1xuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbERlY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxEZWNyeXB0KCkge1xuICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTtcbiAgdmFyIG91dCA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgMCk7XG5cbiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIHV0aWxzID0gZGVzLnV0aWxzO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG5cbmZ1bmN0aW9uIERFU1N0YXRlKCkge1xuICB0aGlzLnRtcCA9IG5ldyBBcnJheSgyKTtcbiAgdGhpcy5rZXlzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gREVTKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7XG4gIHRoaXMuX2Rlc1N0YXRlID0gc3RhdGU7XG5cbiAgdGhpcy5kZXJpdmVLZXlzKHN0YXRlLCBvcHRpb25zLmtleSk7XG59XG5pbmhlcml0cyhERVMsIENpcGhlcik7XG5tb2R1bGUuZXhwb3J0cyA9IERFUztcblxuREVTLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgREVTKG9wdGlvbnMpO1xufTtcblxudmFyIHNoaWZ0VGFibGUgPSBbXG4gIDEsIDEsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDEsIDIsIDIsIDIsIDIsIDIsIDIsIDFcbl07XG5cbkRFUy5wcm90b3R5cGUuZGVyaXZlS2V5cyA9IGZ1bmN0aW9uIGRlcml2ZUtleXMoc3RhdGUsIGtleSkge1xuICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7XG5cbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgMCk7XG4gIHZhciBrUiA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDQpO1xuXG4gIHV0aWxzLnBjMShrTCwga1IsIHN0YXRlLnRtcCwgMCk7XG4gIGtMID0gc3RhdGUudG1wWzBdO1xuICBrUiA9IHN0YXRlLnRtcFsxXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHNoaWZ0ID0gc2hpZnRUYWJsZVtpID4+PiAxXTtcbiAgICBrTCA9IHV0aWxzLnIyOHNobChrTCwgc2hpZnQpO1xuICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7XG4gICAgdXRpbHMucGMyKGtMLCBrUiwgc3RhdGUua2V5cywgaSk7XG4gIH1cbn07XG5cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7XG5cbiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7XG4gIHZhciByID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYgKyA0KTtcblxuICAvLyBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIHRoaXMuX2VuY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGVsc2VcbiAgICB0aGlzLl9kZWNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuXG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIGwsIG91dE9mZik7XG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgdmFyIHZhbHVlID0gYnVmZmVyLmxlbmd0aCAtIG9mZjtcbiAgZm9yICh2YXIgaSA9IG9mZjsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBidWZmZXJbaV0gPSB2YWx1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3VucGFkID0gZnVuY3Rpb24gX3VucGFkKGJ1ZmZlcikge1xuICB2YXIgcGFkID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXTtcbiAgZm9yICh2YXIgaSA9IGJ1ZmZlci5sZW5ndGggLSBwYWQ7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlcltpXSwgcGFkKTtcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGJ1ZmZlci5sZW5ndGggLSBwYWQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZW5jcnlwdCA9IGZ1bmN0aW9uIF9lbmNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSBsU3RhcnQ7XG4gIHZhciByID0gclN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSByO1xuICAgIHIgPSAobCBeIGYpID4+PiAwO1xuICAgIGwgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChyLCBsLCBvdXQsIG9mZik7XG59O1xuXG5ERVMucHJvdG90eXBlLl9kZWNyeXB0ID0gZnVuY3Rpb24gX2RlY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IHJTdGFydDtcbiAgdmFyIHIgPSBsU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gc3RhdGUua2V5cy5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChsLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gbDtcbiAgICBsID0gKHIgXiBmKSA+Pj4gMDtcbiAgICByID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ5dGVzLCBvZmYpIHtcbiAgdmFyIHJlcyA9ICAoYnl0ZXNbMCArIG9mZl0gPDwgMjQpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMSArIG9mZl0gPDwgMTYpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMiArIG9mZl0gPDwgOCkgfFxuICAgICAgICAgICAgIGJ5dGVzWzMgKyBvZmZdO1xuICByZXR1cm4gcmVzID4+PiAwO1xufTtcblxuZXhwb3J0cy53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRShieXRlcywgdmFsdWUsIG9mZikge1xuICBieXRlc1swICsgb2ZmXSA9IHZhbHVlID4+PiAyNDtcbiAgYnl0ZXNbMSArIG9mZl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4ZmY7XG4gIGJ5dGVzWzIgKyBvZmZdID0gKHZhbHVlID4+PiA4KSAmIDB4ZmY7XG4gIGJ5dGVzWzMgKyBvZmZdID0gdmFsdWUgJiAweGZmO1xufTtcblxuZXhwb3J0cy5pcCA9IGZ1bmN0aW9uIGlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yaXAgPSBmdW5jdGlvbiByaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBpID0gNDsgaSA8IDg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYzEgPSBmdW5jdGlvbiBwYzEoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIC8vIDcsIDE1LCAyMywgMzEsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDYsIDE0LCAyMiwgMzAsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDUsIDEzLCAyMSwgMjksIDM5LCA0NywgNTUsIDYzXG4gIC8vIDQsIDEyLCAyMCwgMjhcbiAgZm9yICh2YXIgaSA9IDc7IGkgPj0gNTsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgLy8gMSwgOSwgMTcsIDI1LCAzMywgNDEsIDQ5LCA1N1xuICAvLyAyLCAxMCwgMTgsIDI2LCAzNCwgNDIsIDUwLCA1OFxuICAvLyAzLCAxMSwgMTksIDI3LCAzNSwgNDMsIDUxLCA1OVxuICAvLyAzNiwgNDQsIDUyLCA2MFxuICBmb3IgKHZhciBpID0gMTsgaSA8PSAzOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yMjhzaGwgPSBmdW5jdGlvbiByMjhzaGwobnVtLCBzaGlmdCkge1xuICByZXR1cm4gKChudW0gPDwgc2hpZnQpICYgMHhmZmZmZmZmKSB8IChudW0gPj4+ICgyOCAtIHNoaWZ0KSk7XG59O1xuXG52YXIgcGMydGFibGUgPSBbXG4gIC8vIGluTCA9PiBvdXRMXG4gIDE0LCAxMSwgMTcsIDQsIDI3LCAyMywgMjUsIDAsXG4gIDEzLCAyMiwgNywgMTgsIDUsIDksIDE2LCAyNCxcbiAgMiwgMjAsIDEyLCAyMSwgMSwgOCwgMTUsIDI2LFxuXG4gIC8vIGluUiA9PiBvdXRSXG4gIDE1LCA0LCAyNSwgMTksIDksIDEsIDI2LCAxNixcbiAgNSwgMTEsIDIzLCA4LCAxMiwgNywgMTcsIDAsXG4gIDIyLCAzLCAxMCwgMTQsIDYsIDIwLCAyNywgMjRcbl07XG5cbmV4cG9ydHMucGMyID0gZnVuY3Rpb24gcGMyKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICB2YXIgbGVuID0gcGMydGFibGUubGVuZ3RoID4+PiAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpbkwgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICBmb3IgKHZhciBpID0gbGVuOyBpIDwgcGMydGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluUiA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMuZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKHIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIG91dEwgPSAoKHIgJiAxKSA8PCA1KSB8IChyID4+PiAyNyk7XG4gIGZvciAodmFyIGkgPSAyMzsgaSA+PSAxNTsgaSAtPSA0KSB7XG4gICAgb3V0TCA8PD0gNjtcbiAgICBvdXRMIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDExOyBpID49IDM7IGkgLT0gNCkge1xuICAgIG91dFIgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgICBvdXRSIDw8PSA2O1xuICB9XG4gIG91dFIgfD0gKChyICYgMHgxZikgPDwgMSkgfCAociA+Pj4gMzEpO1xuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG52YXIgc1RhYmxlID0gW1xuICAxNCwgMCwgNCwgMTUsIDEzLCA3LCAxLCA0LCAyLCAxNCwgMTUsIDIsIDExLCAxMywgOCwgMSxcbiAgMywgMTAsIDEwLCA2LCA2LCAxMiwgMTIsIDExLCA1LCA5LCA5LCA1LCAwLCAzLCA3LCA4LFxuICA0LCAxNSwgMSwgMTIsIDE0LCA4LCA4LCAyLCAxMywgNCwgNiwgOSwgMiwgMSwgMTEsIDcsXG4gIDE1LCA1LCAxMiwgMTEsIDksIDMsIDcsIDE0LCAzLCAxMCwgMTAsIDAsIDUsIDYsIDAsIDEzLFxuXG4gIDE1LCAzLCAxLCAxMywgOCwgNCwgMTQsIDcsIDYsIDE1LCAxMSwgMiwgMywgOCwgNCwgMTQsXG4gIDksIDEyLCA3LCAwLCAyLCAxLCAxMywgMTAsIDEyLCA2LCAwLCA5LCA1LCAxMSwgMTAsIDUsXG4gIDAsIDEzLCAxNCwgOCwgNywgMTAsIDExLCAxLCAxMCwgMywgNCwgMTUsIDEzLCA0LCAxLCAyLFxuICA1LCAxMSwgOCwgNiwgMTIsIDcsIDYsIDEyLCA5LCAwLCAzLCA1LCAyLCAxNCwgMTUsIDksXG5cbiAgMTAsIDEzLCAwLCA3LCA5LCAwLCAxNCwgOSwgNiwgMywgMywgNCwgMTUsIDYsIDUsIDEwLFxuICAxLCAyLCAxMywgOCwgMTIsIDUsIDcsIDE0LCAxMSwgMTIsIDQsIDExLCAyLCAxNSwgOCwgMSxcbiAgMTMsIDEsIDYsIDEwLCA0LCAxMywgOSwgMCwgOCwgNiwgMTUsIDksIDMsIDgsIDAsIDcsXG4gIDExLCA0LCAxLCAxNSwgMiwgMTQsIDEyLCAzLCA1LCAxMSwgMTAsIDUsIDE0LCAyLCA3LCAxMixcblxuICA3LCAxMywgMTMsIDgsIDE0LCAxMSwgMywgNSwgMCwgNiwgNiwgMTUsIDksIDAsIDEwLCAzLFxuICAxLCA0LCAyLCA3LCA4LCAyLCA1LCAxMiwgMTEsIDEsIDEyLCAxMCwgNCwgMTQsIDE1LCA5LFxuICAxMCwgMywgNiwgMTUsIDksIDAsIDAsIDYsIDEyLCAxMCwgMTEsIDEsIDcsIDEzLCAxMywgOCxcbiAgMTUsIDksIDEsIDQsIDMsIDUsIDE0LCAxMSwgNSwgMTIsIDIsIDcsIDgsIDIsIDQsIDE0LFxuXG4gIDIsIDE0LCAxMiwgMTEsIDQsIDIsIDEsIDEyLCA3LCA0LCAxMCwgNywgMTEsIDEzLCA2LCAxLFxuICA4LCA1LCA1LCAwLCAzLCAxNSwgMTUsIDEwLCAxMywgMywgMCwgOSwgMTQsIDgsIDksIDYsXG4gIDQsIDExLCAyLCA4LCAxLCAxMiwgMTEsIDcsIDEwLCAxLCAxMywgMTQsIDcsIDIsIDgsIDEzLFxuICAxNSwgNiwgOSwgMTUsIDEyLCAwLCA1LCA5LCA2LCAxMCwgMywgNCwgMCwgNSwgMTQsIDMsXG5cbiAgMTIsIDEwLCAxLCAxNSwgMTAsIDQsIDE1LCAyLCA5LCA3LCAyLCAxMiwgNiwgOSwgOCwgNSxcbiAgMCwgNiwgMTMsIDEsIDMsIDEzLCA0LCAxNCwgMTQsIDAsIDcsIDExLCA1LCAzLCAxMSwgOCxcbiAgOSwgNCwgMTQsIDMsIDE1LCAyLCA1LCAxMiwgMiwgOSwgOCwgNSwgMTIsIDE1LCAzLCAxMCxcbiAgNywgMTEsIDAsIDE0LCA0LCAxLCAxMCwgNywgMSwgNiwgMTMsIDAsIDExLCA4LCA2LCAxMyxcblxuICA0LCAxMywgMTEsIDAsIDIsIDExLCAxNCwgNywgMTUsIDQsIDAsIDksIDgsIDEsIDEzLCAxMCxcbiAgMywgMTQsIDEyLCAzLCA5LCA1LCA3LCAxMiwgNSwgMiwgMTAsIDE1LCA2LCA4LCAxLCA2LFxuICAxLCA2LCA0LCAxMSwgMTEsIDEzLCAxMywgOCwgMTIsIDEsIDMsIDQsIDcsIDEwLCAxNCwgNyxcbiAgMTAsIDksIDE1LCA1LCA2LCAwLCA4LCAxNSwgMCwgMTQsIDUsIDIsIDksIDMsIDIsIDEyLFxuXG4gIDEzLCAxLCAyLCAxNSwgOCwgMTMsIDQsIDgsIDYsIDEwLCAxNSwgMywgMTEsIDcsIDEsIDQsXG4gIDEwLCAxMiwgOSwgNSwgMywgNiwgMTQsIDExLCA1LCAwLCAwLCAxNCwgMTIsIDksIDcsIDIsXG4gIDcsIDIsIDExLCAxLCA0LCAxNCwgMSwgNywgOSwgNCwgMTIsIDEwLCAxNCwgOCwgMiwgMTMsXG4gIDAsIDE1LCA2LCAxMiwgMTAsIDksIDEzLCAwLCAxNSwgMywgMywgNSwgNSwgNiwgOCwgMTFcbl07XG5cbmV4cG9ydHMuc3Vic3RpdHV0ZSA9IGZ1bmN0aW9uIHN1YnN0aXR1dGUoaW5MLCBpblIpIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5MID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpblIgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVs0ICogMHg0MCArIGkgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG52YXIgcGVybXV0ZVRhYmxlID0gW1xuICAxNiwgMjUsIDEyLCAxMSwgMywgMjAsIDQsIDE1LCAzMSwgMTcsIDksIDYsIDI3LCAxNCwgMSwgMjIsXG4gIDMwLCAyNCwgOCwgMTgsIDAsIDUsIDI5LCAyMywgMTMsIDE5LCAyLCAyNiwgMTAsIDIxLCAyOCwgN1xuXTtcblxuZXhwb3J0cy5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShudW0pIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGVybXV0ZVRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0IDw8PSAxO1xuICAgIG91dCB8PSAobnVtID4+PiBwZXJtdXRlVGFibGVbaV0pICYgMHgxO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBhZFNwbGl0ID0gZnVuY3Rpb24gcGFkU3BsaXQobnVtLCBzaXplLCBncm91cCkge1xuICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKDIpO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA8IHNpemUpXG4gICAgc3RyID0gJzAnICsgc3RyO1xuXG4gIHZhciBvdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IGdyb3VwKVxuICAgIG91dC5wdXNoKHN0ci5zbGljZShpLCBpICsgZ3JvdXApKTtcbiAgcmV0dXJuIG91dC5qb2luKCcgJyk7XG59O1xuIiwidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJylcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2xpYi9wcmltZXMuanNvbicpXG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJylcblxuZnVuY3Rpb24gZ2V0RGlmZmllSGVsbG1hbiAobW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKVxuICB2YXIgZ2VuID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5nZW4sICdoZXgnKVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbilcbn1cblxudmFyIEVOQ09ESU5HUyA9IHtcbiAgJ2JpbmFyeSc6IHRydWUsICdoZXgnOiB0cnVlLCAnYmFzZTY0JzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEaWZmaWVIZWxsbWFuIChwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8IEVOQ09ESU5HU1tlbmNdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgJ2JpbmFyeScsIGVuYywgZ2VuZXJhdG9yKVxuICB9XG5cbiAgZW5jID0gZW5jIHx8ICdiaW5hcnknXG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknXG4gIGdlbmVyYXRvciA9IGdlbmVyYXRvciB8fCBuZXcgQnVmZmVyKFsyXSlcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpXG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKVxuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpbWUpKSB7XG4gICAgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lLCBlbmMpXG4gIH1cblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW5lcmF0b3IsIHRydWUpXG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBleHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBjcmVhdGVEaWZmaWVIZWxsbWFuXG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG5cbiAgaWYgKHByaW1lLmlzRXZlbigpIHx8XG4gICAgIXByaW1lcy5zaW1wbGVTaWV2ZSB8fFxuICAgICFwcmltZXMuZmVybWF0VGVzdChwcmltZSkgfHxcbiAgICAhbWlsbGVyUmFiaW4udGVzdChwcmltZSkpIHtcbiAgICAvL25vdCBhIHByaW1lIHNvICsxXG4gICAgZXJyb3IgKz0gMTtcblxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGVycm9yICs9IDQ7XG4gIH1cbiAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7XG4gIHRoaXMuc2V0R2VuZXJhdG9yKGdlbmVyYXRvcik7XG4gIHRoaXMuX19wcmltZSA9IG5ldyBCTihwcmltZSk7XG4gIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUpO1xuICB0aGlzLl9wcmltZUxlbiA9IHByaW1lLmxlbmd0aDtcbiAgdGhpcy5fcHViID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcml2ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcmltZUNvZGUgPSB1bmRlZmluZWQ7XG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ByaW1lQ29kZSA9IDg7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShESC5wcm90b3R5cGUsICd2ZXJpZnlFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9wcmltZUNvZGUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9wcmltZUNvZGUgPSBjaGVja1ByaW1lKHRoaXMuX19wcmltZSwgdGhpcy5fX2dlbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmltZUNvZGU7XG4gIH1cbn0pO1xuREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9wcml2KSB7XG4gICAgdGhpcy5fcHJpdiA9IG5ldyBCTihyYW5kb21CeXRlcyh0aGlzLl9wcmltZUxlbikpO1xuICB9XG4gIHRoaXMuX3B1YiA9IHRoaXMuX2dlbi50b1JlZCh0aGlzLl9wcmltZSkucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KCk7XG59O1xuXG5ESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBvdGhlciA9IG5ldyBCTihvdGhlcik7XG4gIG90aGVyID0gb3RoZXIudG9SZWQodGhpcy5fcHJpbWUpO1xuICB2YXIgc2VjcmV0ID0gb3RoZXIucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2VjcmV0LnRvQXJyYXkoKSk7XG4gIHZhciBwcmltZSA9IHRoaXMuZ2V0UHJpbWUoKTtcbiAgaWYgKG91dC5sZW5ndGggPCBwcmltZS5sZW5ndGgpIHtcbiAgICB2YXIgZnJvbnQgPSBuZXcgQnVmZmVyKHByaW1lLmxlbmd0aCAtIG91dC5sZW5ndGgpO1xuICAgIGZyb250LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbZnJvbnQsIG91dF0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0UHVibGljS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHViLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiBnZXRQcml2YXRlS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHJpdiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcmltZSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX19wcmltZSwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9nZW4sIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuc2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGdlbiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbikpIHtcbiAgICBnZW4gPSBuZXcgQnVmZmVyKGdlbiwgZW5jKTtcbiAgfVxuICB0aGlzLl9fZ2VuID0gZ2VuO1xuICB0aGlzLl9nZW4gPSBuZXcgQk4oZ2VuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jKSB7XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuLnRvQXJyYXkoKSk7XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYyk7XG4gIH1cbn1cbiIsInZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRQcmltZTtcbmZpbmRQcmltZS5zaW1wbGVTaWV2ZSA9IHNpbXBsZVNpZXZlO1xuZmluZFByaW1lLmZlcm1hdFRlc3QgPSBmZXJtYXRUZXN0O1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgT05FID0gbmV3IEJOKDEpO1xudmFyIFRXTyA9IG5ldyBCTigyKTtcbnZhciBGSVZFID0gbmV3IEJOKDUpO1xudmFyIFNJWFRFRU4gPSBuZXcgQk4oMTYpO1xudmFyIEVJR0hUID0gbmV3IEJOKDgpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBGT1VSID0gbmV3IEJOKDQpO1xudmFyIFRXRUxWRSA9IG5ldyBCTigxMik7XG52YXIgcHJpbWVzID0gbnVsbDtcblxuZnVuY3Rpb24gX2dldFByaW1lcygpIHtcbiAgaWYgKHByaW1lcyAhPT0gbnVsbClcbiAgICByZXR1cm4gcHJpbWVzO1xuXG4gIHZhciBsaW1pdCA9IDB4MTAwMDAwO1xuICB2YXIgcmVzID0gW107XG4gIHJlc1swXSA9IDI7XG4gIGZvciAodmFyIGkgPSAxLCBrID0gMzsgayA8IGxpbWl0OyBrICs9IDIpIHtcbiAgICB2YXIgc3FydCA9IE1hdGguY2VpbChNYXRoLnNxcnQoaykpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaSAmJiByZXNbal0gPD0gc3FydDsgaisrKVxuICAgICAgaWYgKGsgJSByZXNbal0gPT09IDApXG4gICAgICAgIGJyZWFrO1xuXG4gICAgaWYgKGkgIT09IGogJiYgcmVzW2pdIDw9IHNxcnQpXG4gICAgICBjb250aW51ZTtcblxuICAgIHJlc1tpKytdID0gaztcbiAgfVxuICBwcmltZXMgPSByZXM7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVNpZXZlKHApIHtcbiAgdmFyIHByaW1lcyA9IF9nZXRQcmltZXMoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW1lcy5sZW5ndGg7IGkrKylcbiAgICBpZiAocC5tb2RuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgIGlmIChwLmNtcG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZlcm1hdFRlc3QocCkge1xuICB2YXIgcmVkID0gQk4ubW9udChwKTtcbiAgcmV0dXJuIFRXTy50b1JlZChyZWQpLnJlZFBvdyhwLnN1Ym4oMSkpLmZyb21SZWQoKS5jbXBuKDEpID09PSAwO1xufVxuXG5mdW5jdGlvbiBmaW5kUHJpbWUoYml0cywgZ2VuKSB7XG4gIGlmIChiaXRzIDwgMTYpIHtcbiAgICAvLyB0aGlzIGlzIHdoYXQgb3BlbnNzbCBkb2VzXG4gICAgaWYgKGdlbiA9PT0gMiB8fCBnZW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4N2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHgyN10pO1xuICAgIH1cbiAgfVxuICBnZW4gPSBuZXcgQk4oZ2VuKTtcblxuICB2YXIgbnVtLCBuMjtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIG51bSA9IG5ldyBCTihyYW5kb21CeXRlcyhNYXRoLmNlaWwoYml0cyAvIDgpKSk7XG4gICAgd2hpbGUgKG51bS5iaXRMZW5ndGgoKSA+IGJpdHMpIHtcbiAgICAgIG51bS5pc2hybigxKTtcbiAgICB9XG4gICAgaWYgKG51bS5pc0V2ZW4oKSkge1xuICAgICAgbnVtLmlhZGQoT05FKTtcbiAgICB9XG4gICAgaWYgKCFudW0udGVzdG4oMSkpIHtcbiAgICAgIG51bS5pYWRkKFRXTyk7XG4gICAgfVxuICAgIGlmICghZ2VuLmNtcChUV08pKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFnZW4uY21wKEZJVkUpKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChURU4pLmNtcChUSFJFRSkpIHtcbiAgICAgICAgbnVtLmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgfVxuICAgIG4yID0gbnVtLnNocm4oMSk7XG4gICAgaWYgKHNpbXBsZVNpZXZlKG4yKSAmJiBzaW1wbGVTaWV2ZShudW0pICYmXG4gICAgICBmZXJtYXRUZXN0KG4yKSAmJiBmZXJtYXRUZXN0KG51bSkgJiZcbiAgICAgIG1pbGxlclJhYmluLnRlc3QobjIpICYmIG1pbGxlclJhYmluLnRlc3QobnVtKSkge1xuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gIH1cblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBrKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29lZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnVtb2QodGhpcy5yZWQubSk7XG4gIHRoaXMuYSA9IHRoaXMuYS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBCTihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBCTihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeTIgPSByaHMucmVkTXVsKGxocy5yZWRJbnZtKCkpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21ZID0gZnVuY3Rpb24gcG9pbnRGcm9tWSh5LCBvZGQpIHtcbiAgeSA9IG5ldyBCTih5LCAxNik7XG4gIGlmICgheS5yZWQpXG4gICAgeSA9IHkudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIHheMiA9ICh5XjIgLSAxKSAvIChkIHleMiArIDEpXG4gIHZhciB5MiA9IHkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB5Mi5yZWRTdWIodGhpcy5vbmUpO1xuICB2YXIgcmhzID0geTIucmVkTXVsKHRoaXMuZCkucmVkQWRkKHRoaXMub25lKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmlzT2RkKCkgIT09IG9kZClcbiAgICB4ID0geC5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIEN1cnZlOiBBICogWF4yICsgWV4yID0gQ14yICogKDEgKyBEICogWF4yICogWV4yKVxuICBwb2ludC5ub3JtYWxpemUoKTtcblxuICB2YXIgeDIgPSBwb2ludC54LnJlZFNxcigpO1xuICB2YXIgeTIgPSBwb2ludC55LnJlZFNxcigpO1xuICB2YXIgbGhzID0geDIucmVkTXVsKHRoaXMuYSkucmVkQWRkKHkyKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkTXVsKHRoaXMub25lLnJlZEFkZCh0aGlzLmQucmVkTXVsKHgyKS5yZWRNdWwoeTIpKSk7XG5cbiAgcmV0dXJuIGxocy5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCB6LCB0KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy56T25lID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0geiA/IG5ldyBCTih6LCAxNikgOiB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0ICYmIG5ldyBCTih0LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKHRoaXMudCAmJiAhdGhpcy50LnJlZClcbiAgICAgIHRoaXMudCA9IHRoaXMudC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcblxuICAgIC8vIFVzZSBleHRlbmRlZCBjb29yZGluYXRlc1xuICAgIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkICYmICF0aGlzLnQpIHtcbiAgICAgIHRoaXMudCA9IHRoaXMueC5yZWRNdWwodGhpcy55KTtcbiAgICAgIGlmICghdGhpcy56T25lKVxuICAgICAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICAgIH1cbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIHosIHQpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdLCBvYmpbMl0pO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy54LmNtcG4oMCkgPT09IDAgJiZcbiAgICAgICAgIHRoaXMueS5jbXAodGhpcy56KSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0RGJsID0gZnVuY3Rpb24gX2V4dERibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtaHdjZFxuICAvLyA0TSArIDRTXG5cbiAgLy8gQSA9IFgxXjJcbiAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEIgPSBZMV4yXG4gIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBDID0gMiAqIFoxXjJcbiAgdmFyIGMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIGMgPSBjLnJlZElBZGQoYyk7XG4gIC8vIEQgPSBhICogQVxuICB2YXIgZCA9IHRoaXMuY3VydmUuX211bEEoYSk7XG4gIC8vIEUgPSAoWDEgKyBZMSleMiAtIEEgLSBCXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihiKTtcbiAgLy8gRyA9IEQgKyBCXG4gIHZhciBnID0gZC5yZWRBZGQoYik7XG4gIC8vIEYgPSBHIC0gQ1xuICB2YXIgZiA9IGcucmVkU3ViKGMpO1xuICAvLyBIID0gRCAtIEJcbiAgdmFyIGggPSBkLnJlZFN1YihiKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qRGJsID0gZnVuY3Rpb24gX3Byb2pEYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWJiamxwXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDctYmxcbiAgLy8gYW5kIG90aGVyc1xuICAvLyBHZW5lcmFsbHkgM00gKyA0UyBvciAyTSArIDRTXG5cbiAgLy8gQiA9IChYMSArIFkxKV4yXG4gIHZhciBiID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpO1xuICAvLyBDID0gWDFeMlxuICB2YXIgYyA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gRCA9IFkxXjJcbiAgdmFyIGQgPSB0aGlzLnkucmVkU3FyKCk7XG5cbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIEUgPSBhICogQ1xuICAgIHZhciBlID0gdGhpcy5jdXJ2ZS5fbXVsQShjKTtcbiAgICAvLyBGID0gRSArIERcbiAgICB2YXIgZiA9IGUucmVkQWRkKGQpO1xuICAgIGlmICh0aGlzLnpPbmUpIHtcbiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZFN1YihkKS5yZWRNdWwoZi5yZWRTdWIodGhpcy5jdXJ2ZS50d28pKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGXjIgLSAyICogRlxuICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEggPSBaMV4yXG4gICAgICB2YXIgaCA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAgIC8vIEogPSBGIC0gMiAqIEhcbiAgICAgIHZhciBqID0gZi5yZWRTdWIoaCkucmVkSVN1YihoKTtcbiAgICAgIC8vIFgzID0gKEItQy1EKSpKXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZElTdWIoZCkucmVkTXVsKGopO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEYgKiBKXG4gICAgICBueiA9IGYucmVkTXVsKGopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFID0gQyArIERcbiAgICB2YXIgZSA9IGMucmVkQWRkKGQpO1xuICAgIC8vIEggPSAoYyAqIFoxKV4yXG4gICAgdmFyIGggPSB0aGlzLmN1cnZlLl9tdWxDKHRoaXMuYy5yZWRNdWwodGhpcy56KSkucmVkU3FyKCk7XG4gICAgLy8gSiA9IEUgLSAyICogSFxuICAgIHZhciBqID0gZS5yZWRTdWIoaCkucmVkU3ViKGgpO1xuICAgIC8vIFgzID0gYyAqIChCIC0gRSkgKiBKXG4gICAgbnggPSB0aGlzLmN1cnZlLl9tdWxDKGIucmVkSVN1YihlKSkucmVkTXVsKGopO1xuICAgIC8vIFkzID0gYyAqIEUgKiAoQyAtIEQpXG4gICAgbnkgPSB0aGlzLmN1cnZlLl9tdWxDKGUpLnJlZE11bChjLnJlZElTdWIoZCkpO1xuICAgIC8vIFozID0gRSAqIEpcbiAgICBueiA9IGUucmVkTXVsKGopO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIERvdWJsZSBpbiBleHRlbmRlZCBjb29yZGluYXRlc1xuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0RGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakRibCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHRBZGQgPSBmdW5jdGlvbiBfZXh0QWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC0zXG4gIC8vIDhNXG5cbiAgLy8gQSA9IChZMSAtIFgxKSAqIChZMiAtIFgyKVxuICB2YXIgYSA9IHRoaXMueS5yZWRTdWIodGhpcy54KS5yZWRNdWwocC55LnJlZFN1YihwLngpKTtcbiAgLy8gQiA9IChZMSArIFgxKSAqIChZMiArIFgyKVxuICB2YXIgYiA9IHRoaXMueS5yZWRBZGQodGhpcy54KS5yZWRNdWwocC55LnJlZEFkZChwLngpKTtcbiAgLy8gQyA9IFQxICogayAqIFQyXG4gIHZhciBjID0gdGhpcy50LnJlZE11bCh0aGlzLmN1cnZlLmRkKS5yZWRNdWwocC50KTtcbiAgLy8gRCA9IFoxICogMiAqIFoyXG4gIHZhciBkID0gdGhpcy56LnJlZE11bChwLnoucmVkQWRkKHAueikpO1xuICAvLyBFID0gQiAtIEFcbiAgdmFyIGUgPSBiLnJlZFN1YihhKTtcbiAgLy8gRiA9IEQgLSBDXG4gIHZhciBmID0gZC5yZWRTdWIoYyk7XG4gIC8vIEcgPSBEICsgQ1xuICB2YXIgZyA9IGQucmVkQWRkKGMpO1xuICAvLyBIID0gQiArIEFcbiAgdmFyIGggPSBiLnJlZEFkZChhKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qQWRkID0gZnVuY3Rpb24gX3Byb2pBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1iYmpscFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA3LWJsXG4gIC8vIDEwTSArIDFTXG5cbiAgLy8gQSA9IFoxICogWjJcbiAgdmFyIGEgPSB0aGlzLnoucmVkTXVsKHAueik7XG4gIC8vIEIgPSBBXjJcbiAgdmFyIGIgPSBhLnJlZFNxcigpO1xuICAvLyBDID0gWDEgKiBYMlxuICB2YXIgYyA9IHRoaXMueC5yZWRNdWwocC54KTtcbiAgLy8gRCA9IFkxICogWTJcbiAgdmFyIGQgPSB0aGlzLnkucmVkTXVsKHAueSk7XG4gIC8vIEUgPSBkICogQyAqIERcbiAgdmFyIGUgPSB0aGlzLmN1cnZlLmQucmVkTXVsKGMpLnJlZE11bChkKTtcbiAgLy8gRiA9IEIgLSBFXG4gIHZhciBmID0gYi5yZWRTdWIoZSk7XG4gIC8vIEcgPSBCICsgRVxuICB2YXIgZyA9IGIucmVkQWRkKGUpO1xuICAvLyBYMyA9IEEgKiBGICogKChYMSArIFkxKSAqIChYMiArIFkyKSAtIEMgLSBEKVxuICB2YXIgdG1wID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZE11bChwLngucmVkQWRkKHAueSkpLnJlZElTdWIoYykucmVkSVN1YihkKTtcbiAgdmFyIG54ID0gYS5yZWRNdWwoZikucmVkTXVsKHRtcCk7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gYSAqIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIodGhpcy5jdXJ2ZS5fbXVsQShjKSkpO1xuICAgIC8vIFozID0gRiAqIEdcbiAgICBueiA9IGYucmVkTXVsKGcpO1xuICB9IGVsc2Uge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIoYykpO1xuICAgIC8vIFozID0gYyAqIEYgKiBHXG4gICAgbnogPSB0aGlzLmN1cnZlLl9tdWxDKGYpLnJlZE11bChnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0QWRkKHApO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pBZGQocCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgZmFsc2UpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICBpZiAodGhpcy56T25lKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB2YXIgemkgPSB0aGlzLnoucmVkSW52bSgpO1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHppKTtcbiAgdGhpcy55ID0gdGhpcy55LnJlZE11bCh6aSk7XG4gIGlmICh0aGlzLnQpXG4gICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh6aSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICB0aGlzLnpPbmUgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWROZWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnosXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudCAmJiB0aGlzLnQucmVkTmVnKCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHxcbiAgICAgICAgIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwICYmXG4gICAgICAgICB0aGlzLmdldFkoKS5jbXAob3RoZXIuZ2V0WSgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwodGhpcy56KTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHRoaXMueik7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIENvbXBhdGliaWxpdHkgd2l0aCBCYXNlQ3VydmVcblBvaW50LnByb3RvdHlwZS50b1AgPSBQb2ludC5wcm90b3R5cGUubm9ybWFsaXplO1xuUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gUG9pbnQucHJvdG90eXBlLmFkZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IHJlcXVpcmUoJy4uL2N1cnZlJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IEJOKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQodXRpbHMudG9BcnJheShieXRlcywgZW5jKSwgMSk7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeikge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHopO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUoKSB7XG4gIC8vIE5vLW9wXG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCkpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXVzaHJuKDEpKVxuICAgIGJpdHMucHVzaCh0LmFuZGxuKDEpKTtcblxuICBmb3IgKHZhciBpID0gYml0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChiaXRzW2ldID09PSAwKSB7XG4gICAgICAvLyBOICogUSArIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSkgKyAoTiAvIDIpICogUVxuICAgICAgYSA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRID0gMiAqICgoTiAvIDIpICogUSArIFEpKVxuICAgICAgYiA9IGIuZGJsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE4gKiBRID0gKChOIC8gMikgKiBRICsgUSkgKyAoKE4gLyAyKSAqIFEpXG4gICAgICBiID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgKyBRID0gMiAqICgoTiAvIDIpICogUSArIFEpXG4gICAgICBhID0gYS5kYmwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGI7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmp1bWxBZGQgPSBmdW5jdGlvbiBqdW1sQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdGhpcy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IHJlcXVpcmUoJy4uL2N1cnZlJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IGN1cnZlLmJhc2U7XG5cbnZhciBhc3NlcnQgPSBlbGxpcHRpYy51dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNob3J0Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ3Nob3J0JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50aW52ID0gdGhpcy50d28ucmVkSW52bSgpO1xuXG4gIHRoaXMuemVyb0EgPSB0aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCkgPT09IDA7XG4gIHRoaXMudGhyZWVBID0gdGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKSA9PT0gMDtcblxuICAvLyBJZiB0aGUgY3VydmUgaXMgZW5kb21vcnBoaWMsIHByZWNhbGN1bGF0ZSBiZXRhIGFuZCBsYW1iZGFcbiAgdGhpcy5lbmRvID0gdGhpcy5fZ2V0RW5kb21vcnBoaXNtKGNvbmYpO1xuICB0aGlzLl9lbmRvV25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl9lbmRvV25hZlQyID0gbmV3IEFycmF5KDQpO1xufVxuaW5oZXJpdHMoU2hvcnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFNob3J0Q3VydmU7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc20gPSBmdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpIHtcbiAgLy8gTm8gZWZmaWNpZW50IGVuZG9tb3JwaGlzbVxuICBpZiAoIXRoaXMuemVyb0EgfHwgIXRoaXMuZyB8fCAhdGhpcy5uIHx8IHRoaXMucC5tb2RuKDMpICE9PSAxKVxuICAgIHJldHVybjtcblxuICAvLyBDb21wdXRlIGJldGEgYW5kIGxhbWJkYSwgdGhhdCBsYW1iZGEgKiBQID0gKGJldGEgKiBQeDsgUHkpXG4gIHZhciBiZXRhO1xuICB2YXIgbGFtYmRhO1xuICBpZiAoY29uZi5iZXRhKSB7XG4gICAgYmV0YSA9IG5ldyBCTihjb25mLmJldGEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7XG4gICAgLy8gQ2hvb3NlIHRoZSBzbWFsbGVzdCBiZXRhXG4gICAgYmV0YSA9IGJldGFzWzBdLmNtcChiZXRhc1sxXSkgPCAwID8gYmV0YXNbMF0gOiBiZXRhc1sxXTtcbiAgICBiZXRhID0gYmV0YS50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbiAgaWYgKGNvbmYubGFtYmRhKSB7XG4gICAgbGFtYmRhID0gbmV3IEJOKGNvbmYubGFtYmRhLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhXG4gICAgdmFyIGxhbWJkYXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtcbiAgICBpZiAodGhpcy5nLm11bChsYW1iZGFzWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzFdO1xuICAgICAgYXNzZXJ0KHRoaXMuZy5tdWwobGFtYmRhKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYmFzaXMgdmVjdG9ycywgdXNlZCBmb3IgYmFsYW5jZWQgbGVuZ3RoLXR3byByZXByZXNlbnRhdGlvblxuICB2YXIgYmFzaXM7XG4gIGlmIChjb25mLmJhc2lzKSB7XG4gICAgYmFzaXMgPSBjb25mLmJhc2lzLm1hcChmdW5jdGlvbih2ZWMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IG5ldyBCTih2ZWMuYSwgMTYpLFxuICAgICAgICBiOiBuZXcgQk4odmVjLmIsIDE2KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXRhOiBiZXRhLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIGJhc2lzOiBiYXNpc1xuICB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cyA9IGZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKSB7XG4gIC8vIEZpbmQgcm9vdHMgb2YgZm9yIHheMiArIHggKyAxIGluIEZcbiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyXG4gIC8vXG4gIHZhciByZWQgPSBudW0gPT09IHRoaXMucCA/IHRoaXMucmVkIDogQk4ubW9udChudW0pO1xuICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTtcbiAgdmFyIG50aW52ID0gdGludi5yZWROZWcoKTtcblxuICB2YXIgcyA9IG5ldyBCTigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7XG5cbiAgdmFyIGwxID0gbnRpbnYucmVkQWRkKHMpLmZyb21SZWQoKTtcbiAgdmFyIGwyID0gbnRpbnYucmVkU3ViKHMpLmZyb21SZWQoKTtcbiAgcmV0dXJuIFsgbDEsIGwyIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb0Jhc2lzID0gZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpIHtcbiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pXG4gIHZhciBhcHJ4U3FydCA9IHRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB5MSA9IG5ldyBCTigwKTtcbiAgdmFyIHgyID0gbmV3IEJOKDApO1xuICB2YXIgeTIgPSBuZXcgQk4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5uZWdhdGl2ZSkge1xuICAgIGExID0gYTEubmVnKCk7XG4gICAgYjEgPSBiMS5uZWcoKTtcbiAgfVxuICBpZiAoYTIubmVnYXRpdmUpIHtcbiAgICBhMiA9IGEyLm5lZygpO1xuICAgIGIyID0gYjIubmVnKCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHsgYTogYTEsIGI6IGIxIH0sXG4gICAgeyBhOiBhMiwgYjogYjIgfVxuICBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9TcGxpdCA9IGZ1bmN0aW9uIF9lbmRvU3BsaXQoaykge1xuICB2YXIgYmFzaXMgPSB0aGlzLmVuZG8uYmFzaXM7XG4gIHZhciB2MSA9IGJhc2lzWzBdO1xuICB2YXIgdjIgPSBiYXNpc1sxXTtcblxuICB2YXIgYzEgPSB2Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuICB2YXIgYzIgPSB2MS5iLm5lZygpLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuXG4gIHZhciBwMSA9IGMxLm11bCh2MS5hKTtcbiAgdmFyIHAyID0gYzIubXVsKHYyLmEpO1xuICB2YXIgcTEgPSBjMS5tdWwodjEuYik7XG4gIHZhciBxMiA9IGMyLm11bCh2Mi5iKTtcblxuICAvLyBDYWxjdWxhdGUgYW5zd2VyXG4gIHZhciBrMSA9IGsuc3ViKHAxKS5zdWIocDIpO1xuICB2YXIgazIgPSBxMS5hZGQocTIpLm5lZygpO1xuICByZXR1cm4geyBrMTogazEsIGsyOiBrMiB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeTIgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKHgucmVkTXVsKHRoaXMuYSkpLnJlZElBZGQodGhpcy5iKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgLy8gWFhYIElzIHRoZXJlIGFueSB3YXkgdG8gdGVsbCBpZiB0aGUgbnVtYmVyIGlzIG9kZCB3aXRob3V0IGNvbnZlcnRpbmcgaXRcbiAgLy8gdG8gbm9uLXJlZCBmb3JtP1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaW5mKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4ID0gcG9pbnQueDtcbiAgdmFyIHkgPSBwb2ludC55O1xuXG4gIHZhciBheCA9IHRoaXMuYS5yZWRNdWwoeCk7XG4gIHZhciByaHMgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKGF4KS5yZWRJQWRkKHRoaXMuYik7XG4gIHJldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApID09PSAwO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkID1cbiAgICBmdW5jdGlvbiBfZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMS5pbmVnKCk7XG4gICAgICBwID0gcC5uZWcodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzcGxpdC5rMi5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazIuaW5lZygpO1xuICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpO1xuICAgIH1cblxuICAgIG5wb2ludHNbaSAqIDJdID0gcDtcbiAgICBucG9pbnRzW2kgKiAyICsgMV0gPSBiZXRhO1xuICAgIG5jb2VmZnNbaSAqIDJdID0gc3BsaXQuazE7XG4gICAgbmNvZWZmc1tpICogMiArIDFdID0gc3BsaXQuazI7XG4gIH1cbiAgdmFyIHJlcyA9IHRoaXMuX3duYWZNdWxBZGQoMSwgbnBvaW50cywgbmNvZWZmcywgaSAqIDIsIGphY29iaWFuUmVzdWx0KTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IEJOKGssIDE2KTtcblxuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzKEpQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikge1xuICByZXR1cm4gbmV3IEpQb2ludCh0aGlzLCB4LCB5LCB6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudG9QID0gZnVuY3Rpb24gdG9QKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIHppbnYgPSB0aGlzLnoucmVkSW52bSgpO1xuICB2YXIgemludjIgPSB6aW52LnJlZFNxcigpO1xuICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTtcbiAgdmFyIGF5ID0gdGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LCBheSk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpLCB0aGlzLnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMTJNICsgNFMgKyA3QVxuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueC5yZWRNdWwocHoyKTtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IGZ1bmN0aW9uIG1peGVkQWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcC50b0ooKTtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDhNICsgM1MgKyA3QVxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueDtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChwb3cpIHtcbiAgaWYgKHBvdyA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoIXBvdylcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSB8fCB0aGlzLmN1cnZlLnRocmVlQSkge1xuICAgIHZhciByID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKVxuICAgICAgciA9IHIuZGJsKCk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICAvLyAxTSArIDJTICsgMUEgKyBOICogKDRTICsgNU0gKyA4QSlcbiAgLy8gTiA9IDEgPT4gNk0gKyA2UyArIDlBXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuICB2YXIgdGludiA9IHRoaXMuY3VydmUudGludjtcblxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgLy8gUmV1c2UgcmVzdWx0c1xuICB2YXIganlkID0gankucmVkQWRkKGp5KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKykge1xuICAgIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgICB2YXIganlkMiA9IGp5ZC5yZWRTcXIoKTtcbiAgICB2YXIganlkNCA9IGp5ZDIucmVkU3FyKCk7XG4gICAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgICB2YXIgdDEgPSBqeC5yZWRNdWwoanlkMik7XG4gICAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICAgIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuICAgIHZhciBkbnkgPSBjLnJlZE11bCh0Mik7XG4gICAgZG55ID0gZG55LnJlZElBZGQoZG55KS5yZWRJU3ViKGp5ZDQpO1xuICAgIHZhciBueiA9IGp5ZC5yZWRNdWwoanopO1xuICAgIGlmIChpICsgMSA8IHBvdylcbiAgICAgIGp6NCA9IGp6NC5yZWRNdWwoanlkNCk7XG5cbiAgICBqeCA9IG54O1xuICAgIGp6ID0gbno7XG4gICAganlkID0gZG55O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGp4LCBqeWQucmVkTXVsKHRpbnYpLCBqeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLl96ZXJvRGJsKCk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUudGhyZWVBKVxuICAgIHJldHVybiB0aGlzLl90aHJlZURibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX2RibCgpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5femVyb0RibCA9IGZ1bmN0aW9uIF96ZXJvRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNEFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhOyBhID0gMFxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgICAvLyBUID0gTSBeIDIgLSAyKlNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuXG4gICAgLy8gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuXG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIqWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDktbFxuICAgIC8vIDJNICsgNVMgKyAxM0FcblxuICAgIC8vIEEgPSBYMV4yXG4gICAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gQiA9IFkxXjJcbiAgICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBDID0gQl4yXG4gICAgdmFyIGMgPSBiLnJlZFNxcigpO1xuICAgIC8vIEQgPSAyICogKChYMSArIEIpXjIgLSBBIC0gQylcbiAgICB2YXIgZCA9IHRoaXMueC5yZWRBZGQoYikucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGMpO1xuICAgIGQgPSBkLnJlZElBZGQoZCk7XG4gICAgLy8gRSA9IDMgKiBBXG4gICAgdmFyIGUgPSBhLnJlZEFkZChhKS5yZWRJQWRkKGEpO1xuICAgIC8vIEYgPSBFXjJcbiAgICB2YXIgZiA9IGUucmVkU3FyKCk7XG5cbiAgICAvLyA4ICogQ1xuICAgIHZhciBjOCA9IGMucmVkSUFkZChjKTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG5cbiAgICAvLyBYMyA9IEYgLSAyICogRFxuICAgIG54ID0gZi5yZWRJU3ViKGQpLnJlZElTdWIoZCk7XG4gICAgLy8gWTMgPSBFICogKEQgLSBYMykgLSA4ICogQ1xuICAgIG55ID0gZS5yZWRNdWwoZC5yZWRJU3ViKG54KSkucmVkSVN1YihjOCk7XG4gICAgLy8gWjMgPSAyICogWTEgKiBaMVxuICAgIG56ID0gdGhpcy55LnJlZE11bCh0aGlzLnopO1xuICAgIG56ID0gbnoucmVkSUFkZChueik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl90aHJlZURibCA9IGZ1bmN0aW9uIF90aHJlZURibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTVBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYVxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KS5yZWRJQWRkKHRoaXMuY3VydmUuYSk7XG4gICAgLy8gVCA9IE1eMiAtIDIgKiBTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyICogWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbCNkb3VibGluZy1kYmwtMjAwMS1iXG4gICAgLy8gM00gKyA1U1xuXG4gICAgLy8gZGVsdGEgPSBaMV4yXG4gICAgdmFyIGRlbHRhID0gdGhpcy56LnJlZFNxcigpO1xuICAgIC8vIGdhbW1hID0gWTFeMlxuICAgIHZhciBnYW1tYSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBiZXRhID0gWDEgKiBnYW1tYVxuICAgIHZhciBiZXRhID0gdGhpcy54LnJlZE11bChnYW1tYSk7XG4gICAgLy8gYWxwaGEgPSAzICogKFgxIC0gZGVsdGEpICogKFgxICsgZGVsdGEpXG4gICAgdmFyIGFscGhhID0gdGhpcy54LnJlZFN1YihkZWx0YSkucmVkTXVsKHRoaXMueC5yZWRBZGQoZGVsdGEpKTtcbiAgICBhbHBoYSA9IGFscGhhLnJlZEFkZChhbHBoYSkucmVkSUFkZChhbHBoYSk7XG4gICAgLy8gWDMgPSBhbHBoYV4yIC0gOCAqIGJldGFcbiAgICB2YXIgYmV0YTQgPSBiZXRhLnJlZElBZGQoYmV0YSk7XG4gICAgYmV0YTQgPSBiZXRhNC5yZWRJQWRkKGJldGE0KTtcbiAgICB2YXIgYmV0YTggPSBiZXRhNC5yZWRBZGQoYmV0YTQpO1xuICAgIG54ID0gYWxwaGEucmVkU3FyKCkucmVkSVN1YihiZXRhOCk7XG4gICAgLy8gWjMgPSAoWTEgKyBaMSleMiAtIGdhbW1hIC0gZGVsdGFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy56KS5yZWRTcXIoKS5yZWRJU3ViKGdhbW1hKS5yZWRJU3ViKGRlbHRhKTtcbiAgICAvLyBZMyA9IGFscGhhICogKDQgKiBiZXRhIC0gWDMpIC0gOCAqIGdhbW1hXjJcbiAgICB2YXIgZ2dhbW1hOCA9IGdhbW1hLnJlZFNxcigpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIG55ID0gYWxwaGEucmVkTXVsKGJldGE0LnJlZElTdWIobngpKS5yZWRJU3ViKGdnYW1tYTgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fZGJsID0gZnVuY3Rpb24gX2RibCgpIHtcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgLy8gNE0gKyA2UyArIDEwQVxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICB2YXIgankyID0gankucmVkU3FyKCk7XG5cbiAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgdmFyIGp4ZDQgPSBqeC5yZWRBZGQoangpO1xuICBqeGQ0ID0ganhkNC5yZWRJQWRkKGp4ZDQpO1xuICB2YXIgdDEgPSBqeGQ0LnJlZE11bChqeTIpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuXG4gIHZhciBqeWQ4ID0gankyLnJlZFNxcigpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0MikucmVkSVN1YihqeWQ4KTtcbiAgdmFyIG56ID0gankucmVkQWRkKGp5KS5yZWRNdWwoanopO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudHJwbCA9IGZ1bmN0aW9uIHRycGwoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKS5hZGQodGhpcyk7XG5cbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWwjdHJpcGxpbmctdHBsLTIwMDctYmxcbiAgLy8gNU0gKyAxMFMgKyAuLi5cblxuICAvLyBYWCA9IFgxXjJcbiAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBZWSA9IFkxXjJcbiAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBaWiA9IFoxXjJcbiAgdmFyIHp6ID0gdGhpcy56LnJlZFNxcigpO1xuICAvLyBZWVlZID0gWVleMlxuICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAvLyBNID0gMyAqIFhYICsgYSAqIFpaMjsgYSA9IDBcbiAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAvLyBNTSA9IE1eMlxuICB2YXIgbW0gPSBtLnJlZFNxcigpO1xuICAvLyBFID0gNiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSkgLSBNTVxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gIGUgPSBlLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZEFkZChlKS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRJU3ViKG1tKTtcbiAgLy8gRUUgPSBFXjJcbiAgdmFyIGVlID0gZS5yZWRTcXIoKTtcbiAgLy8gVCA9IDE2KllZWVlcbiAgdmFyIHQgPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIC8vIFUgPSAoTSArIEUpXjIgLSBNTSAtIEVFIC0gVFxuICB2YXIgdSA9IG0ucmVkSUFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKG1tKS5yZWRJU3ViKGVlKS5yZWRJU3ViKHQpO1xuICAvLyBYMyA9IDQgKiAoWDEgKiBFRSAtIDQgKiBZWSAqIFUpXG4gIHZhciB5eXU0ID0geXkucmVkTXVsKHUpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB2YXIgbnggPSB0aGlzLngucmVkTXVsKGVlKS5yZWRJU3ViKHl5dTQpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICAvLyBZMyA9IDggKiBZMSAqIChVICogKFQgLSBVKSAtIEUgKiBFRSlcbiAgdmFyIG55ID0gdGhpcy55LnJlZE11bCh1LnJlZE11bCh0LnJlZElTdWIodSkpLnJlZElTdWIoZS5yZWRNdWwoZWUpKSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIC8vIFozID0gKFoxICsgRSleMiAtIFpaIC0gRUVcbiAgdmFyIG56ID0gdGhpcy56LnJlZEFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKHp6KS5yZWRJU3ViKGVlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrLCBrYmFzZSkge1xuICBrID0gbmV3IEJOKGssIGtiYXNlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgIHJldHVybiB0aGlzLmVxKHAudG9KKCkpO1xuXG4gIGlmICh0aGlzID09PSBwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIHgxICogejJeMiA9PSB4MiAqIHoxXjJcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICBpZiAodGhpcy54LnJlZE11bChwejIpLnJlZElTdWIocC54LnJlZE11bCh6MikpLmNtcG4oMCkgIT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIHkxICogejJeMyA9PSB5MiAqIHoxXjNcbiAgdmFyIHozID0gejIucmVkTXVsKHRoaXMueik7XG4gIHZhciBwejMgPSBwejIucmVkTXVsKHAueik7XG4gIHJldHVybiB0aGlzLnkucmVkTXVsKHB6MykucmVkSVN1YihwLnkucmVkTXVsKHozKSkuY21wbigwKSA9PT0gMDtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHpzID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwoenMpO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwoenMpO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi9lbGxpcHRpYycpO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5kZWZpbmVDdXJ2ZSgncDE5MicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMTkyJyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyJyxcbiAgICAnMDcxOTJiOTUgZmZjOGRhNzggNjMxMDExZWQgNmIyNGNkZDUgNzNmOTc3YTEgMWU3OTQ4MTEnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AzODQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJyxcbiAgYjogJ2IzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmICcgK1xuICAgICAnNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWYnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgJyArXG4gICAgICdmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycsXG4gIGhhc2g6IGhhc2guc2hhMzg0LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCAnICtcbiAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnLFxuICAgICczNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICtcbiAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7XG4gIHR5cGU6ICdlZHdhcmRzJyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICctMScsXG4gIGM6ICcxJyxcbiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKVxuICBkOiAnNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhMycsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzIxNjkzNmQzY2Q2ZTUzZmVjMGE0ZTIzMWZkZDZkYzVjNjkyY2M3NjA5NTI1YTdiMmM5NTYyZDYwOGYyNWQ1MWEnLFxuXG4gICAgLy8gNC81XG4gICAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXG4gIF1cbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gcmVxdWlyZSgnLi9wcmVjb21wdXRlZC9zZWNwMjU2azEnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMydcbiAgICB9LFxuICAgIHtcbiAgICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLFxuICAgICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1J1xuICAgIH1cbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlXG4gIF1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KGVsbGlwdGljLmN1cnZlcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zKSwgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGVsbGlwdGljLmN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgZWxsaXB0aWMuY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgZWxsaXB0aWMucmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCdcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykge1xuICAgIHZhciBrID0gb3B0aW9ucy5rID9cbiAgICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHZhciBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBLZXlQYWlyKGVjLCBvcHRpb25zKSB7XG4gIHRoaXMuZWMgPSBlYztcbiAgdGhpcy5wcml2ID0gbnVsbDtcbiAgdGhpcy5wdWIgPSBudWxsO1xuXG4gIC8vIEtleVBhaXIoZWMsIHsgcHJpdjogLi4uLCBwdWI6IC4uLiB9KVxuICBpZiAob3B0aW9ucy5wcml2KVxuICAgIHRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LCBvcHRpb25zLnByaXZFbmMpO1xuICBpZiAob3B0aW9ucy5wdWIpXG4gICAgdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLCBvcHRpb25zLnB1YkVuYyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWMsIHB1YiwgZW5jKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHViOiBwdWIsXG4gICAgcHViRW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21Qcml2YXRlID0gZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMsIHByaXYsIGVuYykge1xuICBpZiAocHJpdiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHByaXY7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHJpdjogcHJpdixcbiAgICBwcml2RW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0KGtleS54LCAnTmVlZCB4IGNvb3JkaW5hdGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fFxuICAgICAgICAgICAgICAgdGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnZWR3YXJkcycpIHtcbiAgICAgIGFzc2VydChrZXkueCAmJiBrZXkueSwgJ05lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGUnKTtcbiAgICB9XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksIGVuYyk7XG59O1xuXG4vLyBFQ0RIXG5LZXlQYWlyLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiBkZXJpdmUocHViKSB7XG4gIHJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpO1xufTtcblxuLy8gRUNEU0FcbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLmVjLnNpZ24obXNnLCB0aGlzLCBlbmMsIG9wdGlvbnMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsIGVuYykge1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gb3B0aW9ucztcblxuICBpZiAodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsIGVuYykpXG4gICAgcmV0dXJuO1xuXG4gIGFzc2VydChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBQb3NpdGlvbigpIHtcbiAgdGhpcy5wbGFjZSA9IDA7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aChidWYsIHApIHtcbiAgdmFyIGluaXRpYWwgPSBidWZbcC5wbGFjZSsrXTtcbiAgaWYgKCEoaW5pdGlhbCAmIDB4ODApKSB7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cbiAgdmFyIG9jdGV0TGVuID0gaW5pdGlhbCAmIDB4ZjtcbiAgdmFyIHZhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSBwLnBsYWNlOyBpIDwgb2N0ZXRMZW47IGkrKywgb2ZmKyspIHtcbiAgICB2YWwgPDw9IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZdO1xuICB9XG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlscy50b0FycmF5KGRhdGEsIGVuYyk7XG4gIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKChsZW4gKyBwLnBsYWNlKSAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgdmFyIHIgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHJsZW4gKyBwLnBsYWNlKTtcbiAgcC5wbGFjZSArPSBybGVuO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwICYmIChyWzFdICYgMHg4MCkpIHtcbiAgICByID0gci5zbGljZSgxKTtcbiAgfVxuICBpZiAoc1swXSA9PT0gMCAmJiAoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cblxuICB0aGlzLnIgPSBuZXcgQk4ocik7XG4gIHRoaXMucyA9IG5ldyBCTihzKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdExlbmd0aChhcnIsIGxlbikge1xuICBpZiAobGVuIDwgMHg4MCkge1xuICAgIGFyci5wdXNoKGxlbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvY3RldHMgPSAxICsgKE1hdGgubG9nKGxlbikgLyBNYXRoLkxOMiA+Pj4gMyk7XG4gIGFyci5wdXNoKG9jdGV0cyB8IDB4ODApO1xuICB3aGlsZSAoLS1vY3RldHMpIHtcbiAgICBhcnIucHVzaCgobGVuID4+PiAob2N0ZXRzIDw8IDMpKSAmIDB4ZmYpO1xuICB9XG4gIGFyci5wdXNoKGxlbik7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICByID0gcm1QYWRkaW5nKHIpO1xuICBzID0gcm1QYWRkaW5nKHMpO1xuXG4gIHdoaWxlICghc1swXSAmJiAhKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG4gIHZhciBhcnIgPSBbIDB4MDIgXTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgci5sZW5ndGgpO1xuICBhcnIgPSBhcnIuY29uY2F0KHIpO1xuICBhcnIucHVzaCgweDAyKTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgcy5sZW5ndGgpO1xuICB2YXIgYmFja0hhbGYgPSBhcnIuY29uY2F0KHMpO1xuICB2YXIgcmVzID0gWyAweDMwIF07XG4gIGNvbnN0cnVjdExlbmd0aChyZXMsIGJhY2tIYWxmLmxlbmd0aCk7XG4gIHJlcyA9IHJlcy5jb25jYXQoYmFja0hhbGYpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFRERTQShjdXJ2ZSkge1xuICBhc3NlcnQoY3VydmUgPT09ICdlZDI1NTE5JywgJ29ubHkgdGVzdGVkIHdpdGggZWQyNTUxOSBzbyBmYXInKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUREU0EpKVxuICAgIHJldHVybiBuZXcgRUREU0EoY3VydmUpO1xuXG4gIHZhciBjdXJ2ZSA9IGVsbGlwdGljLmN1cnZlc1tjdXJ2ZV0uY3VydmU7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy5nID0gY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUoY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIHRoaXMucG9pbnRDbGFzcyA9IGN1cnZlLnBvaW50KCkuY29uc3RydWN0b3I7XG4gIHRoaXMuZW5jb2RpbmdMZW5ndGggPSBNYXRoLmNlaWwoY3VydmUubi5iaXRMZW5ndGgoKSAvIDgpO1xuICB0aGlzLmhhc2ggPSBoYXNoLnNoYTUxMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFRERTQTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xLZXlQYWlyfSBzZWNyZXQgLSBzZWNyZXQgYnl0ZXMgb3IgYSBrZXlwYWlyXG4qIEByZXR1cm5zIHtTaWduYXR1cmV9IC0gc2lnbmF0dXJlXG4qL1xuRUREU0EucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UsIHNlY3JldCkge1xuICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVNlY3JldChzZWNyZXQpO1xuICB2YXIgciA9IHRoaXMuaGFzaEludChrZXkubWVzc2FnZVByZWZpeCgpLCBtZXNzYWdlKTtcbiAgdmFyIFIgPSB0aGlzLmcubXVsKHIpO1xuICB2YXIgUmVuY29kZWQgPSB0aGlzLmVuY29kZVBvaW50KFIpO1xuICB2YXIgc18gPSB0aGlzLmhhc2hJbnQoUmVuY29kZWQsIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgLm11bChrZXkucHJpdigpKTtcbiAgdmFyIFMgPSByLmFkZChzXykudW1vZCh0aGlzLmN1cnZlLm4pO1xuICByZXR1cm4gdGhpcy5tYWtlU2lnbmF0dXJlKHsgUjogUiwgUzogUywgUmVuY29kZWQ6IFJlbmNvZGVkIH0pO1xufTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFNpZ25hdHVyZX0gc2lnIC0gc2lnIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFBvaW50fEtleVBhaXJ9IHB1YiAtIHB1YmxpYyBrZXlcbiogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiBwdWJsaWMga2V5IG1hdGNoZXMgc2lnIG9mIG1lc3NhZ2VcbiovXG5FRERTQS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZywgcHViKSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICBzaWcgPSB0aGlzLm1ha2VTaWduYXR1cmUoc2lnKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhwdWIpO1xuICB2YXIgaCA9IHRoaXMuaGFzaEludChzaWcuUmVuY29kZWQoKSwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpO1xuICB2YXIgU0cgPSB0aGlzLmcubXVsKHNpZy5TKCkpO1xuICB2YXIgUnBsdXNBaCA9IHNpZy5SKCkuYWRkKGtleS5wdWIoKS5tdWwoaCkpO1xuICByZXR1cm4gUnBsdXNBaC5lcShTRyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaGFzaEludCA9IGZ1bmN0aW9uIGhhc2hJbnQoKSB7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgIGhhc2gudXBkYXRlKGFyZ3VtZW50c1tpXSk7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoaGFzaC5kaWdlc3QoKSkudW1vZCh0aGlzLmN1cnZlLm4pO1xufTtcblxuRUREU0EucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1Yikge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1Yik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVNlY3JldCA9IGZ1bmN0aW9uIGtleUZyb21TZWNyZXQoc2VjcmV0KSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21TZWNyZXQodGhpcywgc2VjcmV0KTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5tYWtlU2lnbmF0dXJlID0gZnVuY3Rpb24gbWFrZVNpZ25hdHVyZShzaWcpIHtcbiAgaWYgKHNpZyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gc2lnO1xuICByZXR1cm4gbmV3IFNpZ25hdHVyZSh0aGlzLCBzaWcpO1xufTtcblxuLyoqXG4qICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWpvc2Vmc3Nvbi1lZGRzYS1lZDI1NTE5LTAzI3NlY3Rpb24tNS4yXG4qXG4qIEVERFNBIGRlZmluZXMgbWV0aG9kcyBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIHBvaW50cyBhbmQgaW50ZWdlcnMuIFRoZXNlIGFyZVxuKiBoZWxwZXIgY29udmVuaWVuY2UgbWV0aG9kcywgdGhhdCBwYXNzIGFsb25nIHRvIHV0aWxpdHkgZnVuY3Rpb25zIGltcGxpZWRcbiogcGFyYW1ldGVycy5cbipcbiovXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlUG9pbnQgPSBmdW5jdGlvbiBlbmNvZGVQb2ludChwb2ludCkge1xuICB2YXIgZW5jID0gcG9pbnQuZ2V0WSgpLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG4gIGVuY1t0aGlzLmVuY29kaW5nTGVuZ3RoIC0gMV0gfD0gcG9pbnQuZ2V0WCgpLmlzT2RkKCkgPyAweDgwIDogMDtcbiAgcmV0dXJuIGVuYztcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzKSB7XG4gIGJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcyhieXRlcyk7XG5cbiAgdmFyIGxhc3RJeCA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gIHZhciBub3JtZWQgPSBieXRlcy5zbGljZSgwLCBsYXN0SXgpLmNvbmNhdChieXRlc1tsYXN0SXhdICYgfjB4ODApO1xuICB2YXIgeElzT2RkID0gKGJ5dGVzW2xhc3RJeF0gJiAweDgwKSAhPT0gMDtcblxuICB2YXIgeSA9IHV0aWxzLmludEZyb21MRShub3JtZWQpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludEZyb21ZKHksIHhJc09kZCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSkge1xuICByZXR1cm4gbnVtLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ5dGVzKSB7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoYnl0ZXMpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmlzUG9pbnQgPSBmdW5jdGlvbiBpc1BvaW50KHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgdGhpcy5wb2ludENsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZVxuKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcHVibGljL3ByaXZhdGUga2V5IHBhcmFtZXRlcnNcbipcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXNcbiogQHBhcmFtIHtQb2ludH0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCAoYWthIGBBYCBpbiBlZGRzYSB0ZXJtcylcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCBlbmNvZGVkIGFzIGJ5dGVzXG4qXG4qL1xuZnVuY3Rpb24gS2V5UGFpcihlZGRzYSwgcGFyYW1zKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcbiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTtcbiAgaWYgKGVkZHNhLmlzUG9pbnQocGFyYW1zLnB1YikpXG4gICAgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtcbiAgZWxzZVxuICAgIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTtcbn1cblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBwdWI6IHB1YiB9KTtcbn07XG5cbktleVBhaXIuZnJvbVNlY3JldCA9IGZ1bmN0aW9uIGZyb21TZWNyZXQoZWRkc2EsIHNlY3JldCkge1xuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gc2VjcmV0O1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgc2VjcmV0OiBzZWNyZXQgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQoKSB7XG4gIHJldHVybiB0aGlzLl9zZWNyZXQ7XG59O1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5wdWIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YicsIGZ1bmN0aW9uIHB1YigpIHtcbiAgaWYgKHRoaXMuX3B1YkJ5dGVzKVxuICAgIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuX3B1YkJ5dGVzKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2Qnl0ZXMnLCBmdW5jdGlvbiBwcml2Qnl0ZXMoKSB7XG4gIHZhciBlZGRzYSA9IHRoaXMuZWRkc2E7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIHZhciBsYXN0SXggPSBlZGRzYS5lbmNvZGluZ0xlbmd0aCAtIDE7XG5cbiAgdmFyIGEgPSBoYXNoLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbiAgYVswXSAmPSAyNDg7XG4gIGFbbGFzdEl4XSAmPSAxMjc7XG4gIGFbbGFzdEl4XSB8PSA2NDtcblxuICByZXR1cm4gYTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdicsIGZ1bmN0aW9uIHByaXYoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnaGFzaCcsIGZ1bmN0aW9uIGhhc2goKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmhhc2goKS51cGRhdGUodGhpcy5zZWNyZXQoKSkuZGlnZXN0KCk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkge1xuICByZXR1cm4gdGhpcy5oYXNoKCkuc2xpY2UodGhpcy5lZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG59KTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSkge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBjYW4gb25seSB2ZXJpZnknKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EudmVyaWZ5KG1lc3NhZ2UsIHNpZywgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRTZWNyZXQgPSBmdW5jdGlvbiBnZXRTZWNyZXQoZW5jKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGlzIHB1YmxpYyBvbmx5Jyk7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnB1YkJ5dGVzKCksIGVuYyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGVkZHNhIGluc3RhbmNlXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fE9iamVjdH0gc2lnIC1cbiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fGJufSBbc2lnLlNdIC0gUyBzY2FsYXIgYXMgYm4gb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuUmVuY29kZWRdIC0gUiBwb2ludCBlbmNvZGVkXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWRcbiovXG5mdW5jdGlvbiBTaWduYXR1cmUoZWRkc2EsIHNpZykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG5cbiAgaWYgKHR5cGVvZiBzaWcgIT09ICdvYmplY3QnKVxuICAgIHNpZyA9IHBhcnNlQnl0ZXMoc2lnKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgc2lnID0ge1xuICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICAgIFM6IHNpZy5zbGljZShlZGRzYS5lbmNvZGluZ0xlbmd0aClcbiAgICB9O1xuICB9XG5cbiAgYXNzZXJ0KHNpZy5SICYmIHNpZy5TLCAnU2lnbmF0dXJlIHdpdGhvdXQgUiBvciBTJyk7XG5cbiAgaWYgKGVkZHNhLmlzUG9pbnQoc2lnLlIpKVxuICAgIHRoaXMuX1IgPSBzaWcuUjtcbiAgaWYgKHNpZy5TIGluc3RhbmNlb2YgQk4pXG4gICAgdGhpcy5fUyA9IHNpZy5TO1xuXG4gIHRoaXMuX1JlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUikgPyBzaWcuUiA6IHNpZy5SZW5jb2RlZDtcbiAgdGhpcy5fU2VuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5TKSA/IHNpZy5TIDogc2lnLlNlbmNvZGVkO1xufVxuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTJywgZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUicsIGZ1bmN0aW9uIFIoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuUmVuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1NlbmNvZGVkJywgZnVuY3Rpb24gU2VuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7XG59KTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiB0b0hleCgpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnRvQnl0ZXMoKSwgJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG1pbkFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBtaW5VdGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcblxudXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0O1xudXRpbHMudG9BcnJheSA9IG1pblV0aWxzLnRvQXJyYXk7XG51dGlscy56ZXJvMiA9IG1pblV0aWxzLnplcm8yO1xudXRpbHMudG9IZXggPSBtaW5VdGlscy50b0hleDtcbnV0aWxzLmVuY29kZSA9IG1pblV0aWxzLmVuY29kZTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcpIHtcbiAgdmFyIG5hZiA9IFtdO1xuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG4gIHdoaWxlIChrLmNtcG4oMSkgPj0gMCkge1xuICAgIHZhciB6O1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cbiAgICBuYWYucHVzaCh6KTtcblxuICAgIC8vIE9wdGltaXphdGlvbiwgc2hpZnQgYnkgd29yZCBpZiBwb3NzaWJsZVxuICAgIHZhciBzaGlmdCA9IChrLmNtcG4oMCkgIT09IDAgJiYgay5hbmRsbih3cyAtIDEpID09PSAwKSA/ICh3ICsgMSkgOiAxO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2hpZnQ7IGkrKylcbiAgICAgIG5hZi5wdXNoKDApO1xuICAgIGsuaXVzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pdXNocm4oMSk7XG4gICAgazIuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIGpzZjtcbn1cbnV0aWxzLmdldEpTRiA9IGdldEpTRjtcblxuZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkob2JqLCBuYW1lLCBjb21wdXRlcikge1xuICB2YXIga2V5ID0gJ18nICsgbmFtZTtcbiAgb2JqLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KCkge1xuICAgIHJldHVybiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXNba2V5XSA6XG4gICAgICAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgXCLwn4CEXCIsXG4gIFwi8J+Dj1wiLFxuICBcIvCfhbBcIixcbiAgXCLwn4WxXCIsXG4gIFwi8J+FvlwiLFxuICBcIvCfhb9cIixcbiAgXCLwn4aOXCIsXG4gIFwi8J+GkVwiLFxuICBcIvCfhpJcIixcbiAgXCLwn4aTXCIsXG4gIFwi8J+GlFwiLFxuICBcIvCfhpVcIixcbiAgXCLwn4aWXCIsXG4gIFwi8J+Gl1wiLFxuICBcIvCfhphcIixcbiAgXCLwn4aZXCIsXG4gIFwi8J+GmlwiLFxuICBcIvCfh6bwn4eoXCIsXG4gIFwi8J+HpvCfh6lcIixcbiAgXCLwn4em8J+HqlwiLFxuICBcIvCfh6bwn4erXCIsXG4gIFwi8J+HpvCfh6xcIixcbiAgXCLwn4em8J+HrlwiLFxuICBcIvCfh6bwn4exXCIsXG4gIFwi8J+HpvCfh7JcIixcbiAgXCLwn4em8J+HtFwiLFxuICBcIvCfh6bwn4e2XCIsXG4gIFwi8J+HpvCfh7dcIixcbiAgXCLwn4em8J+HuFwiLFxuICBcIvCfh6bwn4e5XCIsXG4gIFwi8J+HpvCfh7pcIixcbiAgXCLwn4em8J+HvFwiLFxuICBcIvCfh6bwn4e9XCIsXG4gIFwi8J+HpvCfh79cIixcbiAgXCLwn4emXCIsXG4gIFwi8J+Hp/Cfh6ZcIixcbiAgXCLwn4en8J+Hp1wiLFxuICBcIvCfh6fwn4epXCIsXG4gIFwi8J+Hp/Cfh6pcIixcbiAgXCLwn4en8J+Hq1wiLFxuICBcIvCfh6fwn4esXCIsXG4gIFwi8J+Hp/Cfh61cIixcbiAgXCLwn4en8J+HrlwiLFxuICBcIvCfh6fwn4evXCIsXG4gIFwi8J+Hp/Cfh7FcIixcbiAgXCLwn4en8J+HslwiLFxuICBcIvCfh6fwn4ezXCIsXG4gIFwi8J+Hp/Cfh7RcIixcbiAgXCLwn4en8J+HtlwiLFxuICBcIvCfh6fwn4e3XCIsXG4gIFwi8J+Hp/Cfh7hcIixcbiAgXCLwn4en8J+HuVwiLFxuICBcIvCfh6fwn4e7XCIsXG4gIFwi8J+Hp/Cfh7xcIixcbiAgXCLwn4en8J+HvlwiLFxuICBcIvCfh6fwn4e/XCIsXG4gIFwi8J+Hp1wiLFxuICBcIvCfh6jwn4emXCIsXG4gIFwi8J+HqPCfh6hcIixcbiAgXCLwn4eo8J+HqVwiLFxuICBcIvCfh6jwn4erXCIsXG4gIFwi8J+HqPCfh6xcIixcbiAgXCLwn4eo8J+HrVwiLFxuICBcIvCfh6jwn4euXCIsXG4gIFwi8J+HqPCfh7BcIixcbiAgXCLwn4eo8J+HsVwiLFxuICBcIvCfh6jwn4eyXCIsXG4gIFwi8J+HqPCfh7NcIixcbiAgXCLwn4eo8J+HtFwiLFxuICBcIvCfh6jwn4e1XCIsXG4gIFwi8J+HqPCfh7dcIixcbiAgXCLwn4eo8J+HulwiLFxuICBcIvCfh6jwn4e7XCIsXG4gIFwi8J+HqPCfh7xcIixcbiAgXCLwn4eo8J+HvVwiLFxuICBcIvCfh6jwn4e+XCIsXG4gIFwi8J+HqPCfh79cIixcbiAgXCLwn4eoXCIsXG4gIFwi8J+HqfCfh6pcIixcbiAgXCLwn4ep8J+HrFwiLFxuICBcIvCfh6nwn4evXCIsXG4gIFwi8J+HqfCfh7BcIixcbiAgXCLwn4ep8J+HslwiLFxuICBcIvCfh6nwn4e0XCIsXG4gIFwi8J+HqfCfh79cIixcbiAgXCLwn4epXCIsXG4gIFwi8J+HqvCfh6ZcIixcbiAgXCLwn4eq8J+HqFwiLFxuICBcIvCfh6rwn4eqXCIsXG4gIFwi8J+HqvCfh6xcIixcbiAgXCLwn4eq8J+HrVwiLFxuICBcIvCfh6rwn4e3XCIsXG4gIFwi8J+HqvCfh7hcIixcbiAgXCLwn4eq8J+HuVwiLFxuICBcIvCfh6rwn4e6XCIsXG4gIFwi8J+HqlwiLFxuICBcIvCfh6vwn4euXCIsXG4gIFwi8J+Hq/Cfh69cIixcbiAgXCLwn4er8J+HsFwiLFxuICBcIvCfh6vwn4eyXCIsXG4gIFwi8J+Hq/Cfh7RcIixcbiAgXCLwn4er8J+Ht1wiLFxuICBcIvCfh6tcIixcbiAgXCLwn4es8J+HplwiLFxuICBcIvCfh6zwn4enXCIsXG4gIFwi8J+HrPCfh6lcIixcbiAgXCLwn4es8J+HqlwiLFxuICBcIvCfh6zwn4erXCIsXG4gIFwi8J+HrPCfh6xcIixcbiAgXCLwn4es8J+HrVwiLFxuICBcIvCfh6zwn4euXCIsXG4gIFwi8J+HrPCfh7FcIixcbiAgXCLwn4es8J+HslwiLFxuICBcIvCfh6zwn4ezXCIsXG4gIFwi8J+HrPCfh7VcIixcbiAgXCLwn4es8J+HtlwiLFxuICBcIvCfh6zwn4e3XCIsXG4gIFwi8J+HrPCfh7hcIixcbiAgXCLwn4es8J+HuVwiLFxuICBcIvCfh6zwn4e6XCIsXG4gIFwi8J+HrPCfh7xcIixcbiAgXCLwn4es8J+HvlwiLFxuICBcIvCfh6xcIixcbiAgXCLwn4et8J+HsFwiLFxuICBcIvCfh63wn4eyXCIsXG4gIFwi8J+HrfCfh7NcIixcbiAgXCLwn4et8J+Ht1wiLFxuICBcIvCfh63wn4e5XCIsXG4gIFwi8J+HrfCfh7pcIixcbiAgXCLwn4etXCIsXG4gIFwi8J+HrvCfh6hcIixcbiAgXCLwn4eu8J+HqVwiLFxuICBcIvCfh67wn4eqXCIsXG4gIFwi8J+HrvCfh7FcIixcbiAgXCLwn4eu8J+HslwiLFxuICBcIvCfh67wn4ezXCIsXG4gIFwi8J+HrvCfh7RcIixcbiAgXCLwn4eu8J+HtlwiLFxuICBcIvCfh67wn4e3XCIsXG4gIFwi8J+HrvCfh7hcIixcbiAgXCLwn4eu8J+HuVwiLFxuICBcIvCfh65cIixcbiAgXCLwn4ev8J+HqlwiLFxuICBcIvCfh6/wn4eyXCIsXG4gIFwi8J+Hr/Cfh7RcIixcbiAgXCLwn4ev8J+HtVwiLFxuICBcIvCfh69cIixcbiAgXCLwn4ew8J+HqlwiLFxuICBcIvCfh7Dwn4esXCIsXG4gIFwi8J+HsPCfh61cIixcbiAgXCLwn4ew8J+HrlwiLFxuICBcIvCfh7Dwn4eyXCIsXG4gIFwi8J+HsPCfh7NcIixcbiAgXCLwn4ew8J+HtVwiLFxuICBcIvCfh7Dwn4e3XCIsXG4gIFwi8J+HsPCfh7xcIixcbiAgXCLwn4ew8J+HvlwiLFxuICBcIvCfh7Dwn4e/XCIsXG4gIFwi8J+HsFwiLFxuICBcIvCfh7Hwn4emXCIsXG4gIFwi8J+HsfCfh6dcIixcbiAgXCLwn4ex8J+HqFwiLFxuICBcIvCfh7Hwn4euXCIsXG4gIFwi8J+HsfCfh7BcIixcbiAgXCLwn4ex8J+Ht1wiLFxuICBcIvCfh7Hwn4e4XCIsXG4gIFwi8J+HsfCfh7lcIixcbiAgXCLwn4ex8J+HulwiLFxuICBcIvCfh7Hwn4e7XCIsXG4gIFwi8J+HsfCfh75cIixcbiAgXCLwn4exXCIsXG4gIFwi8J+HsvCfh6ZcIixcbiAgXCLwn4ey8J+HqFwiLFxuICBcIvCfh7Lwn4epXCIsXG4gIFwi8J+HsvCfh6pcIixcbiAgXCLwn4ey8J+Hq1wiLFxuICBcIvCfh7Lwn4esXCIsXG4gIFwi8J+HsvCfh61cIixcbiAgXCLwn4ey8J+HsFwiLFxuICBcIvCfh7Lwn4exXCIsXG4gIFwi8J+HsvCfh7JcIixcbiAgXCLwn4ey8J+Hs1wiLFxuICBcIvCfh7Lwn4e0XCIsXG4gIFwi8J+HsvCfh7VcIixcbiAgXCLwn4ey8J+HtlwiLFxuICBcIvCfh7Lwn4e3XCIsXG4gIFwi8J+HsvCfh7hcIixcbiAgXCLwn4ey8J+HuVwiLFxuICBcIvCfh7Lwn4e6XCIsXG4gIFwi8J+HsvCfh7tcIixcbiAgXCLwn4ey8J+HvFwiLFxuICBcIvCfh7Lwn4e9XCIsXG4gIFwi8J+HsvCfh75cIixcbiAgXCLwn4ey8J+Hv1wiLFxuICBcIvCfh7JcIixcbiAgXCLwn4ez8J+HplwiLFxuICBcIvCfh7Pwn4eoXCIsXG4gIFwi8J+Hs/Cfh6pcIixcbiAgXCLwn4ez8J+Hq1wiLFxuICBcIvCfh7Pwn4esXCIsXG4gIFwi8J+Hs/Cfh65cIixcbiAgXCLwn4ez8J+HsVwiLFxuICBcIvCfh7Pwn4e0XCIsXG4gIFwi8J+Hs/Cfh7VcIixcbiAgXCLwn4ez8J+Ht1wiLFxuICBcIvCfh7Pwn4e6XCIsXG4gIFwi8J+Hs/Cfh79cIixcbiAgXCLwn4ezXCIsXG4gIFwi8J+HtPCfh7JcIixcbiAgXCLwn4e0XCIsXG4gIFwi8J+HtfCfh6ZcIixcbiAgXCLwn4e18J+HqlwiLFxuICBcIvCfh7Xwn4erXCIsXG4gIFwi8J+HtfCfh6xcIixcbiAgXCLwn4e18J+HrVwiLFxuICBcIvCfh7Xwn4ewXCIsXG4gIFwi8J+HtfCfh7FcIixcbiAgXCLwn4e18J+HslwiLFxuICBcIvCfh7Xwn4ezXCIsXG4gIFwi8J+HtfCfh7dcIixcbiAgXCLwn4e18J+HuFwiLFxuICBcIvCfh7Xwn4e5XCIsXG4gIFwi8J+HtfCfh7xcIixcbiAgXCLwn4e18J+HvlwiLFxuICBcIvCfh7VcIixcbiAgXCLwn4e28J+HplwiLFxuICBcIvCfh7ZcIixcbiAgXCLwn4e38J+HqlwiLFxuICBcIvCfh7fwn4e0XCIsXG4gIFwi8J+Ht/Cfh7hcIixcbiAgXCLwn4e38J+HulwiLFxuICBcIvCfh7fwn4e8XCIsXG4gIFwi8J+Ht1wiLFxuICBcIvCfh7jwn4emXCIsXG4gIFwi8J+HuPCfh6dcIixcbiAgXCLwn4e48J+HqFwiLFxuICBcIvCfh7jwn4epXCIsXG4gIFwi8J+HuPCfh6pcIixcbiAgXCLwn4e48J+HrFwiLFxuICBcIvCfh7jwn4etXCIsXG4gIFwi8J+HuPCfh65cIixcbiAgXCLwn4e48J+Hr1wiLFxuICBcIvCfh7jwn4ewXCIsXG4gIFwi8J+HuPCfh7FcIixcbiAgXCLwn4e48J+HslwiLFxuICBcIvCfh7jwn4ezXCIsXG4gIFwi8J+HuPCfh7RcIixcbiAgXCLwn4e48J+Ht1wiLFxuICBcIvCfh7jwn4e4XCIsXG4gIFwi8J+HuPCfh7lcIixcbiAgXCLwn4e48J+Hu1wiLFxuICBcIvCfh7jwn4e9XCIsXG4gIFwi8J+HuPCfh75cIixcbiAgXCLwn4e48J+Hv1wiLFxuICBcIvCfh7hcIixcbiAgXCLwn4e58J+HplwiLFxuICBcIvCfh7nwn4eoXCIsXG4gIFwi8J+HufCfh6lcIixcbiAgXCLwn4e58J+Hq1wiLFxuICBcIvCfh7nwn4esXCIsXG4gIFwi8J+HufCfh61cIixcbiAgXCLwn4e58J+Hr1wiLFxuICBcIvCfh7nwn4ewXCIsXG4gIFwi8J+HufCfh7FcIixcbiAgXCLwn4e58J+HslwiLFxuICBcIvCfh7nwn4ezXCIsXG4gIFwi8J+HufCfh7RcIixcbiAgXCLwn4e58J+Ht1wiLFxuICBcIvCfh7nwn4e5XCIsXG4gIFwi8J+HufCfh7tcIixcbiAgXCLwn4e58J+HvFwiLFxuICBcIvCfh7nwn4e/XCIsXG4gIFwi8J+HuVwiLFxuICBcIvCfh7rwn4emXCIsXG4gIFwi8J+HuvCfh6xcIixcbiAgXCLwn4e68J+HslwiLFxuICBcIvCfh7rwn4ezXCIsXG4gIFwi8J+HuvCfh7hcIixcbiAgXCLwn4e68J+HvlwiLFxuICBcIvCfh7rwn4e/XCIsXG4gIFwi8J+HulwiLFxuICBcIvCfh7vwn4emXCIsXG4gIFwi8J+Hu/Cfh6hcIixcbiAgXCLwn4e78J+HqlwiLFxuICBcIvCfh7vwn4esXCIsXG4gIFwi8J+Hu/Cfh65cIixcbiAgXCLwn4e78J+Hs1wiLFxuICBcIvCfh7vwn4e6XCIsXG4gIFwi8J+Hu1wiLFxuICBcIvCfh7zwn4erXCIsXG4gIFwi8J+HvPCfh7hcIixcbiAgXCLwn4e8XCIsXG4gIFwi8J+HvfCfh7BcIixcbiAgXCLwn4e9XCIsXG4gIFwi8J+HvvCfh6pcIixcbiAgXCLwn4e+8J+HuVwiLFxuICBcIvCfh75cIixcbiAgXCLwn4e/8J+HplwiLFxuICBcIvCfh7/wn4eyXCIsXG4gIFwi8J+Hv/Cfh7xcIixcbiAgXCLwn4e/XCIsXG4gIFwi8J+IgVwiLFxuICBcIvCfiIJcIixcbiAgXCLwn4iaXCIsXG4gIFwi8J+Ir1wiLFxuICBcIvCfiLJcIixcbiAgXCLwn4izXCIsXG4gIFwi8J+ItFwiLFxuICBcIvCfiLVcIixcbiAgXCLwn4i2XCIsXG4gIFwi8J+It1wiLFxuICBcIvCfiLhcIixcbiAgXCLwn4i5XCIsXG4gIFwi8J+IulwiLFxuICBcIvCfiZBcIixcbiAgXCLwn4mRXCIsXG4gIFwi8J+MgFwiLFxuICBcIvCfjIFcIixcbiAgXCLwn4yCXCIsXG4gIFwi8J+Mg1wiLFxuICBcIvCfjIRcIixcbiAgXCLwn4yFXCIsXG4gIFwi8J+MhlwiLFxuICBcIvCfjIdcIixcbiAgXCLwn4yIXCIsXG4gIFwi8J+MiVwiLFxuICBcIvCfjIpcIixcbiAgXCLwn4yLXCIsXG4gIFwi8J+MjFwiLFxuICBcIvCfjI1cIixcbiAgXCLwn4yOXCIsXG4gIFwi8J+Mj1wiLFxuICBcIvCfjJBcIixcbiAgXCLwn4yRXCIsXG4gIFwi8J+MklwiLFxuICBcIvCfjJNcIixcbiAgXCLwn4yUXCIsXG4gIFwi8J+MlVwiLFxuICBcIvCfjJZcIixcbiAgXCLwn4yXXCIsXG4gIFwi8J+MmFwiLFxuICBcIvCfjJlcIixcbiAgXCLwn4yaXCIsXG4gIFwi8J+Mm1wiLFxuICBcIvCfjJxcIixcbiAgXCLwn4ydXCIsXG4gIFwi8J+MnlwiLFxuICBcIvCfjJ9cIixcbiAgXCLwn4ygXCIsXG4gIFwi8J+MoVwiLFxuICBcIvCfjKRcIixcbiAgXCLwn4ylXCIsXG4gIFwi8J+MplwiLFxuICBcIvCfjKdcIixcbiAgXCLwn4yoXCIsXG4gIFwi8J+MqVwiLFxuICBcIvCfjKpcIixcbiAgXCLwn4yrXCIsXG4gIFwi8J+MrFwiLFxuICBcIvCfjK1cIixcbiAgXCLwn4yuXCIsXG4gIFwi8J+Mr1wiLFxuICBcIvCfjLBcIixcbiAgXCLwn4yxXCIsXG4gIFwi8J+MslwiLFxuICBcIvCfjLNcIixcbiAgXCLwn4y0XCIsXG4gIFwi8J+MtVwiLFxuICBcIvCfjLZcIixcbiAgXCLwn4y3XCIsXG4gIFwi8J+MuFwiLFxuICBcIvCfjLlcIixcbiAgXCLwn4y6XCIsXG4gIFwi8J+Mu1wiLFxuICBcIvCfjLxcIixcbiAgXCLwn4y9XCIsXG4gIFwi8J+MvlwiLFxuICBcIvCfjL9cIixcbiAgXCLwn42AXCIsXG4gIFwi8J+NgVwiLFxuICBcIvCfjYJcIixcbiAgXCLwn42DXCIsXG4gIFwi8J+NhFwiLFxuICBcIvCfjYVcIixcbiAgXCLwn42GXCIsXG4gIFwi8J+Nh1wiLFxuICBcIvCfjYhcIixcbiAgXCLwn42JXCIsXG4gIFwi8J+NilwiLFxuICBcIvCfjYtcIixcbiAgXCLwn42MXCIsXG4gIFwi8J+NjVwiLFxuICBcIvCfjY5cIixcbiAgXCLwn42PXCIsXG4gIFwi8J+NkFwiLFxuICBcIvCfjZFcIixcbiAgXCLwn42SXCIsXG4gIFwi8J+Nk1wiLFxuICBcIvCfjZRcIixcbiAgXCLwn42VXCIsXG4gIFwi8J+NllwiLFxuICBcIvCfjZdcIixcbiAgXCLwn42YXCIsXG4gIFwi8J+NmVwiLFxuICBcIvCfjZpcIixcbiAgXCLwn42bXCIsXG4gIFwi8J+NnFwiLFxuICBcIvCfjZ1cIixcbiAgXCLwn42eXCIsXG4gIFwi8J+Nn1wiLFxuICBcIvCfjaBcIixcbiAgXCLwn42hXCIsXG4gIFwi8J+NolwiLFxuICBcIvCfjaNcIixcbiAgXCLwn42kXCIsXG4gIFwi8J+NpVwiLFxuICBcIvCfjaZcIixcbiAgXCLwn42nXCIsXG4gIFwi8J+NqFwiLFxuICBcIvCfjalcIixcbiAgXCLwn42qXCIsXG4gIFwi8J+Nq1wiLFxuICBcIvCfjaxcIixcbiAgXCLwn42tXCIsXG4gIFwi8J+NrlwiLFxuICBcIvCfja9cIixcbiAgXCLwn42wXCIsXG4gIFwi8J+NsVwiLFxuICBcIvCfjbJcIixcbiAgXCLwn42zXCIsXG4gIFwi8J+NtFwiLFxuICBcIvCfjbVcIixcbiAgXCLwn422XCIsXG4gIFwi8J+Nt1wiLFxuICBcIvCfjbhcIixcbiAgXCLwn425XCIsXG4gIFwi8J+NulwiLFxuICBcIvCfjbtcIixcbiAgXCLwn428XCIsXG4gIFwi8J+NvVwiLFxuICBcIvCfjb5cIixcbiAgXCLwn42/XCIsXG4gIFwi8J+OgFwiLFxuICBcIvCfjoFcIixcbiAgXCLwn46CXCIsXG4gIFwi8J+Og1wiLFxuICBcIvCfjoRcIixcbiAgXCLwn46F8J+Pu1wiLFxuICBcIvCfjoXwn4+8XCIsXG4gIFwi8J+OhfCfj71cIixcbiAgXCLwn46F8J+PvlwiLFxuICBcIvCfjoXwn4+/XCIsXG4gIFwi8J+OhVwiLFxuICBcIvCfjoZcIixcbiAgXCLwn46HXCIsXG4gIFwi8J+OiFwiLFxuICBcIvCfjolcIixcbiAgXCLwn46KXCIsXG4gIFwi8J+Oi1wiLFxuICBcIvCfjoxcIixcbiAgXCLwn46NXCIsXG4gIFwi8J+OjlwiLFxuICBcIvCfjo9cIixcbiAgXCLwn46QXCIsXG4gIFwi8J+OkVwiLFxuICBcIvCfjpJcIixcbiAgXCLwn46TXCIsXG4gIFwi8J+OllwiLFxuICBcIvCfjpdcIixcbiAgXCLwn46ZXCIsXG4gIFwi8J+OmlwiLFxuICBcIvCfjptcIixcbiAgXCLwn46eXCIsXG4gIFwi8J+On1wiLFxuICBcIvCfjqBcIixcbiAgXCLwn46hXCIsXG4gIFwi8J+OolwiLFxuICBcIvCfjqNcIixcbiAgXCLwn46kXCIsXG4gIFwi8J+OpVwiLFxuICBcIvCfjqZcIixcbiAgXCLwn46nXCIsXG4gIFwi8J+OqFwiLFxuICBcIvCfjqlcIixcbiAgXCLwn46qXCIsXG4gIFwi8J+Oq1wiLFxuICBcIvCfjqxcIixcbiAgXCLwn46tXCIsXG4gIFwi8J+OrlwiLFxuICBcIvCfjq9cIixcbiAgXCLwn46wXCIsXG4gIFwi8J+OsVwiLFxuICBcIvCfjrJcIixcbiAgXCLwn46zXCIsXG4gIFwi8J+OtFwiLFxuICBcIvCfjrVcIixcbiAgXCLwn462XCIsXG4gIFwi8J+Ot1wiLFxuICBcIvCfjrhcIixcbiAgXCLwn465XCIsXG4gIFwi8J+OulwiLFxuICBcIvCfjrtcIixcbiAgXCLwn468XCIsXG4gIFwi8J+OvVwiLFxuICBcIvCfjr5cIixcbiAgXCLwn46/XCIsXG4gIFwi8J+PgFwiLFxuICBcIvCfj4FcIixcbiAgXCLwn4+C8J+Pu1wiLFxuICBcIvCfj4Lwn4+8XCIsXG4gIFwi8J+PgvCfj71cIixcbiAgXCLwn4+C8J+PvlwiLFxuICBcIvCfj4Lwn4+/XCIsXG4gIFwi8J+PglwiLFxuICBcIvCfj4Pwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+Pg/Cfj7vigI3imYLvuI9cIixcbiAgXCLwn4+D8J+Pu1wiLFxuICBcIvCfj4Pwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+Pg/Cfj7zigI3imYLvuI9cIixcbiAgXCLwn4+D8J+PvFwiLFxuICBcIvCfj4Pwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+Pg/Cfj73igI3imYLvuI9cIixcbiAgXCLwn4+D8J+PvVwiLFxuICBcIvCfj4Pwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+Pg/Cfj77igI3imYLvuI9cIixcbiAgXCLwn4+D8J+PvlwiLFxuICBcIvCfj4Pwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+Pg/Cfj7/igI3imYLvuI9cIixcbiAgXCLwn4+D8J+Pv1wiLFxuICBcIvCfj4PigI3imYDvuI9cIixcbiAgXCLwn4+D4oCN4pmC77iPXCIsXG4gIFwi8J+Pg1wiLFxuICBcIvCfj4Twn4+74oCN4pmA77iPXCIsXG4gIFwi8J+PhPCfj7vigI3imYLvuI9cIixcbiAgXCLwn4+E8J+Pu1wiLFxuICBcIvCfj4Twn4+84oCN4pmA77iPXCIsXG4gIFwi8J+PhPCfj7zigI3imYLvuI9cIixcbiAgXCLwn4+E8J+PvFwiLFxuICBcIvCfj4Twn4+94oCN4pmA77iPXCIsXG4gIFwi8J+PhPCfj73igI3imYLvuI9cIixcbiAgXCLwn4+E8J+PvVwiLFxuICBcIvCfj4Twn4++4oCN4pmA77iPXCIsXG4gIFwi8J+PhPCfj77igI3imYLvuI9cIixcbiAgXCLwn4+E8J+PvlwiLFxuICBcIvCfj4Twn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+PhPCfj7/igI3imYLvuI9cIixcbiAgXCLwn4+E8J+Pv1wiLFxuICBcIvCfj4TigI3imYDvuI9cIixcbiAgXCLwn4+E4oCN4pmC77iPXCIsXG4gIFwi8J+PhFwiLFxuICBcIvCfj4VcIixcbiAgXCLwn4+GXCIsXG4gIFwi8J+Ph/Cfj7tcIixcbiAgXCLwn4+H8J+PvFwiLFxuICBcIvCfj4fwn4+9XCIsXG4gIFwi8J+Ph/Cfj75cIixcbiAgXCLwn4+H8J+Pv1wiLFxuICBcIvCfj4dcIixcbiAgXCLwn4+IXCIsXG4gIFwi8J+PiVwiLFxuICBcIvCfj4rwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+PivCfj7vigI3imYLvuI9cIixcbiAgXCLwn4+K8J+Pu1wiLFxuICBcIvCfj4rwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+PivCfj7zigI3imYLvuI9cIixcbiAgXCLwn4+K8J+PvFwiLFxuICBcIvCfj4rwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+PivCfj73igI3imYLvuI9cIixcbiAgXCLwn4+K8J+PvVwiLFxuICBcIvCfj4rwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+PivCfj77igI3imYLvuI9cIixcbiAgXCLwn4+K8J+PvlwiLFxuICBcIvCfj4rwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+PivCfj7/igI3imYLvuI9cIixcbiAgXCLwn4+K8J+Pv1wiLFxuICBcIvCfj4rigI3imYDvuI9cIixcbiAgXCLwn4+K4oCN4pmC77iPXCIsXG4gIFwi8J+PilwiLFxuICBcIvCfj4vwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+Pi/Cfj7vigI3imYLvuI9cIixcbiAgXCLwn4+L8J+Pu1wiLFxuICBcIvCfj4vwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+Pi/Cfj7zigI3imYLvuI9cIixcbiAgXCLwn4+L8J+PvFwiLFxuICBcIvCfj4vwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+Pi/Cfj73igI3imYLvuI9cIixcbiAgXCLwn4+L8J+PvVwiLFxuICBcIvCfj4vwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+Pi/Cfj77igI3imYLvuI9cIixcbiAgXCLwn4+L8J+PvlwiLFxuICBcIvCfj4vwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+Pi/Cfj7/igI3imYLvuI9cIixcbiAgXCLwn4+L8J+Pv1wiLFxuICBcIvCfj4vvuI/igI3imYDvuI9cIixcbiAgXCLwn4+L77iP4oCN4pmC77iPXCIsXG4gIFwi8J+Pi1wiLFxuICBcIvCfj4zwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+PjPCfj7vigI3imYLvuI9cIixcbiAgXCLwn4+M8J+Pu1wiLFxuICBcIvCfj4zwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+PjPCfj7zigI3imYLvuI9cIixcbiAgXCLwn4+M8J+PvFwiLFxuICBcIvCfj4zwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+PjPCfj73igI3imYLvuI9cIixcbiAgXCLwn4+M8J+PvVwiLFxuICBcIvCfj4zwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+PjPCfj77igI3imYLvuI9cIixcbiAgXCLwn4+M8J+PvlwiLFxuICBcIvCfj4zwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+PjPCfj7/igI3imYLvuI9cIixcbiAgXCLwn4+M8J+Pv1wiLFxuICBcIvCfj4zvuI/igI3imYDvuI9cIixcbiAgXCLwn4+M77iP4oCN4pmC77iPXCIsXG4gIFwi8J+PjFwiLFxuICBcIvCfj41cIixcbiAgXCLwn4+OXCIsXG4gIFwi8J+Pj1wiLFxuICBcIvCfj5BcIixcbiAgXCLwn4+RXCIsXG4gIFwi8J+PklwiLFxuICBcIvCfj5NcIixcbiAgXCLwn4+UXCIsXG4gIFwi8J+PlVwiLFxuICBcIvCfj5ZcIixcbiAgXCLwn4+XXCIsXG4gIFwi8J+PmFwiLFxuICBcIvCfj5lcIixcbiAgXCLwn4+aXCIsXG4gIFwi8J+Pm1wiLFxuICBcIvCfj5xcIixcbiAgXCLwn4+dXCIsXG4gIFwi8J+PnlwiLFxuICBcIvCfj59cIixcbiAgXCLwn4+gXCIsXG4gIFwi8J+PoVwiLFxuICBcIvCfj6JcIixcbiAgXCLwn4+jXCIsXG4gIFwi8J+PpFwiLFxuICBcIvCfj6VcIixcbiAgXCLwn4+mXCIsXG4gIFwi8J+Pp1wiLFxuICBcIvCfj6hcIixcbiAgXCLwn4+pXCIsXG4gIFwi8J+PqlwiLFxuICBcIvCfj6tcIixcbiAgXCLwn4+sXCIsXG4gIFwi8J+PrVwiLFxuICBcIvCfj65cIixcbiAgXCLwn4+vXCIsXG4gIFwi8J+PsFwiLFxuICBcIvCfj7PvuI/igI3wn4yIXCIsXG4gIFwi8J+Ps1wiLFxuICBcIvCfj7TigI3imKDvuI9cIixcbiAgXCLwn4+0XCIsXG4gIFwi8J+PtVwiLFxuICBcIvCfj7dcIixcbiAgXCLwn4+4XCIsXG4gIFwi8J+PuVwiLFxuICBcIvCfj7pcIixcbiAgXCLwn4+7XCIsXG4gIFwi8J+PvFwiLFxuICBcIvCfj71cIixcbiAgXCLwn4++XCIsXG4gIFwi8J+Pv1wiLFxuICBcIvCfkIBcIixcbiAgXCLwn5CBXCIsXG4gIFwi8J+QglwiLFxuICBcIvCfkINcIixcbiAgXCLwn5CEXCIsXG4gIFwi8J+QhVwiLFxuICBcIvCfkIZcIixcbiAgXCLwn5CHXCIsXG4gIFwi8J+QiFwiLFxuICBcIvCfkIlcIixcbiAgXCLwn5CKXCIsXG4gIFwi8J+Qi1wiLFxuICBcIvCfkIxcIixcbiAgXCLwn5CNXCIsXG4gIFwi8J+QjlwiLFxuICBcIvCfkI9cIixcbiAgXCLwn5CQXCIsXG4gIFwi8J+QkVwiLFxuICBcIvCfkJJcIixcbiAgXCLwn5CTXCIsXG4gIFwi8J+QlFwiLFxuICBcIvCfkJVcIixcbiAgXCLwn5CWXCIsXG4gIFwi8J+Ql1wiLFxuICBcIvCfkJhcIixcbiAgXCLwn5CZXCIsXG4gIFwi8J+QmlwiLFxuICBcIvCfkJtcIixcbiAgXCLwn5CcXCIsXG4gIFwi8J+QnVwiLFxuICBcIvCfkJ5cIixcbiAgXCLwn5CfXCIsXG4gIFwi8J+QoFwiLFxuICBcIvCfkKFcIixcbiAgXCLwn5CiXCIsXG4gIFwi8J+Qo1wiLFxuICBcIvCfkKRcIixcbiAgXCLwn5ClXCIsXG4gIFwi8J+QplwiLFxuICBcIvCfkKdcIixcbiAgXCLwn5CoXCIsXG4gIFwi8J+QqVwiLFxuICBcIvCfkKpcIixcbiAgXCLwn5CrXCIsXG4gIFwi8J+QrFwiLFxuICBcIvCfkK1cIixcbiAgXCLwn5CuXCIsXG4gIFwi8J+Qr1wiLFxuICBcIvCfkLBcIixcbiAgXCLwn5CxXCIsXG4gIFwi8J+QslwiLFxuICBcIvCfkLNcIixcbiAgXCLwn5C0XCIsXG4gIFwi8J+QtVwiLFxuICBcIvCfkLZcIixcbiAgXCLwn5C3XCIsXG4gIFwi8J+QuFwiLFxuICBcIvCfkLlcIixcbiAgXCLwn5C6XCIsXG4gIFwi8J+Qu1wiLFxuICBcIvCfkLxcIixcbiAgXCLwn5C9XCIsXG4gIFwi8J+QvlwiLFxuICBcIvCfkL9cIixcbiAgXCLwn5GAXCIsXG4gIFwi8J+RgeKAjfCfl6hcIixcbiAgXCLwn5GBXCIsXG4gIFwi8J+RgvCfj7tcIixcbiAgXCLwn5GC8J+PvFwiLFxuICBcIvCfkYLwn4+9XCIsXG4gIFwi8J+RgvCfj75cIixcbiAgXCLwn5GC8J+Pv1wiLFxuICBcIvCfkYJcIixcbiAgXCLwn5GD8J+Pu1wiLFxuICBcIvCfkYPwn4+8XCIsXG4gIFwi8J+Rg/Cfj71cIixcbiAgXCLwn5GD8J+PvlwiLFxuICBcIvCfkYPwn4+/XCIsXG4gIFwi8J+Rg1wiLFxuICBcIvCfkYRcIixcbiAgXCLwn5GFXCIsXG4gIFwi8J+RhvCfj7tcIixcbiAgXCLwn5GG8J+PvFwiLFxuICBcIvCfkYbwn4+9XCIsXG4gIFwi8J+RhvCfj75cIixcbiAgXCLwn5GG8J+Pv1wiLFxuICBcIvCfkYZcIixcbiAgXCLwn5GH8J+Pu1wiLFxuICBcIvCfkYfwn4+8XCIsXG4gIFwi8J+Rh/Cfj71cIixcbiAgXCLwn5GH8J+PvlwiLFxuICBcIvCfkYfwn4+/XCIsXG4gIFwi8J+Rh1wiLFxuICBcIvCfkYjwn4+7XCIsXG4gIFwi8J+RiPCfj7xcIixcbiAgXCLwn5GI8J+PvVwiLFxuICBcIvCfkYjwn4++XCIsXG4gIFwi8J+RiPCfj79cIixcbiAgXCLwn5GIXCIsXG4gIFwi8J+RifCfj7tcIixcbiAgXCLwn5GJ8J+PvFwiLFxuICBcIvCfkYnwn4+9XCIsXG4gIFwi8J+RifCfj75cIixcbiAgXCLwn5GJ8J+Pv1wiLFxuICBcIvCfkYlcIixcbiAgXCLwn5GK8J+Pu1wiLFxuICBcIvCfkYrwn4+8XCIsXG4gIFwi8J+RivCfj71cIixcbiAgXCLwn5GK8J+PvlwiLFxuICBcIvCfkYrwn4+/XCIsXG4gIFwi8J+RilwiLFxuICBcIvCfkYvwn4+7XCIsXG4gIFwi8J+Ri/Cfj7xcIixcbiAgXCLwn5GL8J+PvVwiLFxuICBcIvCfkYvwn4++XCIsXG4gIFwi8J+Ri/Cfj79cIixcbiAgXCLwn5GLXCIsXG4gIFwi8J+RjPCfj7tcIixcbiAgXCLwn5GM8J+PvFwiLFxuICBcIvCfkYzwn4+9XCIsXG4gIFwi8J+RjPCfj75cIixcbiAgXCLwn5GM8J+Pv1wiLFxuICBcIvCfkYxcIixcbiAgXCLwn5GN8J+Pu1wiLFxuICBcIvCfkY3wn4+8XCIsXG4gIFwi8J+RjfCfj71cIixcbiAgXCLwn5GN8J+PvlwiLFxuICBcIvCfkY3wn4+/XCIsXG4gIFwi8J+RjVwiLFxuICBcIvCfkY7wn4+7XCIsXG4gIFwi8J+RjvCfj7xcIixcbiAgXCLwn5GO8J+PvVwiLFxuICBcIvCfkY7wn4++XCIsXG4gIFwi8J+RjvCfj79cIixcbiAgXCLwn5GOXCIsXG4gIFwi8J+Rj/Cfj7tcIixcbiAgXCLwn5GP8J+PvFwiLFxuICBcIvCfkY/wn4+9XCIsXG4gIFwi8J+Rj/Cfj75cIixcbiAgXCLwn5GP8J+Pv1wiLFxuICBcIvCfkY9cIixcbiAgXCLwn5GQ8J+Pu1wiLFxuICBcIvCfkZDwn4+8XCIsXG4gIFwi8J+RkPCfj71cIixcbiAgXCLwn5GQ8J+PvlwiLFxuICBcIvCfkZDwn4+/XCIsXG4gIFwi8J+RkFwiLFxuICBcIvCfkZFcIixcbiAgXCLwn5GSXCIsXG4gIFwi8J+Rk1wiLFxuICBcIvCfkZRcIixcbiAgXCLwn5GVXCIsXG4gIFwi8J+RllwiLFxuICBcIvCfkZdcIixcbiAgXCLwn5GYXCIsXG4gIFwi8J+RmVwiLFxuICBcIvCfkZpcIixcbiAgXCLwn5GbXCIsXG4gIFwi8J+RnFwiLFxuICBcIvCfkZ1cIixcbiAgXCLwn5GeXCIsXG4gIFwi8J+Rn1wiLFxuICBcIvCfkaBcIixcbiAgXCLwn5GhXCIsXG4gIFwi8J+RolwiLFxuICBcIvCfkaNcIixcbiAgXCLwn5GkXCIsXG4gIFwi8J+RpVwiLFxuICBcIvCfkabwn4+7XCIsXG4gIFwi8J+RpvCfj7xcIixcbiAgXCLwn5Gm8J+PvVwiLFxuICBcIvCfkabwn4++XCIsXG4gIFwi8J+RpvCfj79cIixcbiAgXCLwn5GmXCIsXG4gIFwi8J+Rp/Cfj7tcIixcbiAgXCLwn5Gn8J+PvFwiLFxuICBcIvCfkafwn4+9XCIsXG4gIFwi8J+Rp/Cfj75cIixcbiAgXCLwn5Gn8J+Pv1wiLFxuICBcIvCfkadcIixcbiAgXCLwn5Go8J+Pu+KAjfCfjL5cIixcbiAgXCLwn5Go8J+Pu+KAjfCfjbNcIixcbiAgXCLwn5Go8J+Pu+KAjfCfjpNcIixcbiAgXCLwn5Go8J+Pu+KAjfCfjqRcIixcbiAgXCLwn5Go8J+Pu+KAjfCfjqhcIixcbiAgXCLwn5Go8J+Pu+KAjfCfj6tcIixcbiAgXCLwn5Go8J+Pu+KAjfCfj61cIixcbiAgXCLwn5Go8J+Pu+KAjfCfkrtcIixcbiAgXCLwn5Go8J+Pu+KAjfCfkrxcIixcbiAgXCLwn5Go8J+Pu+KAjfCflKdcIixcbiAgXCLwn5Go8J+Pu+KAjfCflKxcIixcbiAgXCLwn5Go8J+Pu+KAjfCfmoBcIixcbiAgXCLwn5Go8J+Pu+KAjfCfmpJcIixcbiAgXCLwn5Go8J+Pu+KAjeKale+4j1wiLFxuICBcIvCfkajwn4+74oCN4pqW77iPXCIsXG4gIFwi8J+RqPCfj7vigI3inIjvuI9cIixcbiAgXCLwn5Go8J+Pu1wiLFxuICBcIvCfkajwn4+84oCN8J+MvlwiLFxuICBcIvCfkajwn4+84oCN8J+Ns1wiLFxuICBcIvCfkajwn4+84oCN8J+Ok1wiLFxuICBcIvCfkajwn4+84oCN8J+OpFwiLFxuICBcIvCfkajwn4+84oCN8J+OqFwiLFxuICBcIvCfkajwn4+84oCN8J+Pq1wiLFxuICBcIvCfkajwn4+84oCN8J+PrVwiLFxuICBcIvCfkajwn4+84oCN8J+Su1wiLFxuICBcIvCfkajwn4+84oCN8J+SvFwiLFxuICBcIvCfkajwn4+84oCN8J+Up1wiLFxuICBcIvCfkajwn4+84oCN8J+UrFwiLFxuICBcIvCfkajwn4+84oCN8J+agFwiLFxuICBcIvCfkajwn4+84oCN8J+aklwiLFxuICBcIvCfkajwn4+84oCN4pqV77iPXCIsXG4gIFwi8J+RqPCfj7zigI3impbvuI9cIixcbiAgXCLwn5Go8J+PvOKAjeKciO+4j1wiLFxuICBcIvCfkajwn4+8XCIsXG4gIFwi8J+RqPCfj73igI3wn4y+XCIsXG4gIFwi8J+RqPCfj73igI3wn42zXCIsXG4gIFwi8J+RqPCfj73igI3wn46TXCIsXG4gIFwi8J+RqPCfj73igI3wn46kXCIsXG4gIFwi8J+RqPCfj73igI3wn46oXCIsXG4gIFwi8J+RqPCfj73igI3wn4+rXCIsXG4gIFwi8J+RqPCfj73igI3wn4+tXCIsXG4gIFwi8J+RqPCfj73igI3wn5K7XCIsXG4gIFwi8J+RqPCfj73igI3wn5K8XCIsXG4gIFwi8J+RqPCfj73igI3wn5SnXCIsXG4gIFwi8J+RqPCfj73igI3wn5SsXCIsXG4gIFwi8J+RqPCfj73igI3wn5qAXCIsXG4gIFwi8J+RqPCfj73igI3wn5qSXCIsXG4gIFwi8J+RqPCfj73igI3impXvuI9cIixcbiAgXCLwn5Go8J+PveKAjeKalu+4j1wiLFxuICBcIvCfkajwn4+94oCN4pyI77iPXCIsXG4gIFwi8J+RqPCfj71cIixcbiAgXCLwn5Go8J+PvuKAjfCfjL5cIixcbiAgXCLwn5Go8J+PvuKAjfCfjbNcIixcbiAgXCLwn5Go8J+PvuKAjfCfjpNcIixcbiAgXCLwn5Go8J+PvuKAjfCfjqRcIixcbiAgXCLwn5Go8J+PvuKAjfCfjqhcIixcbiAgXCLwn5Go8J+PvuKAjfCfj6tcIixcbiAgXCLwn5Go8J+PvuKAjfCfj61cIixcbiAgXCLwn5Go8J+PvuKAjfCfkrtcIixcbiAgXCLwn5Go8J+PvuKAjfCfkrxcIixcbiAgXCLwn5Go8J+PvuKAjfCflKdcIixcbiAgXCLwn5Go8J+PvuKAjfCflKxcIixcbiAgXCLwn5Go8J+PvuKAjfCfmoBcIixcbiAgXCLwn5Go8J+PvuKAjfCfmpJcIixcbiAgXCLwn5Go8J+PvuKAjeKale+4j1wiLFxuICBcIvCfkajwn4++4oCN4pqW77iPXCIsXG4gIFwi8J+RqPCfj77igI3inIjvuI9cIixcbiAgXCLwn5Go8J+PvlwiLFxuICBcIvCfkajwn4+/4oCN8J+MvlwiLFxuICBcIvCfkajwn4+/4oCN8J+Ns1wiLFxuICBcIvCfkajwn4+/4oCN8J+Ok1wiLFxuICBcIvCfkajwn4+/4oCN8J+OpFwiLFxuICBcIvCfkajwn4+/4oCN8J+OqFwiLFxuICBcIvCfkajwn4+/4oCN8J+Pq1wiLFxuICBcIvCfkajwn4+/4oCN8J+PrVwiLFxuICBcIvCfkajwn4+/4oCN8J+Su1wiLFxuICBcIvCfkajwn4+/4oCN8J+SvFwiLFxuICBcIvCfkajwn4+/4oCN8J+Up1wiLFxuICBcIvCfkajwn4+/4oCN8J+UrFwiLFxuICBcIvCfkajwn4+/4oCN8J+agFwiLFxuICBcIvCfkajwn4+/4oCN8J+aklwiLFxuICBcIvCfkajwn4+/4oCN4pqV77iPXCIsXG4gIFwi8J+RqPCfj7/igI3impbvuI9cIixcbiAgXCLwn5Go8J+Pv+KAjeKciO+4j1wiLFxuICBcIvCfkajwn4+/XCIsXG4gIFwi8J+RqOKAjfCfjL5cIixcbiAgXCLwn5Go4oCN8J+Ns1wiLFxuICBcIvCfkajigI3wn46TXCIsXG4gIFwi8J+RqOKAjfCfjqRcIixcbiAgXCLwn5Go4oCN8J+OqFwiLFxuICBcIvCfkajigI3wn4+rXCIsXG4gIFwi8J+RqOKAjfCfj61cIixcbiAgXCLwn5Go4oCN8J+RpuKAjfCfkaZcIixcbiAgXCLwn5Go4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Gn4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Gn4oCN8J+Rp1wiLFxuICBcIvCfkajigI3wn5GnXCIsXG4gIFwi8J+RqOKAjfCfkajigI3wn5Gm4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Go4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Go4oCN8J+Rp+KAjfCfkaZcIixcbiAgXCLwn5Go4oCN8J+RqOKAjfCfkafigI3wn5GnXCIsXG4gIFwi8J+RqOKAjfCfkajigI3wn5GnXCIsXG4gIFwi8J+RqOKAjfCfkanigI3wn5Gm4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Gp4oCN8J+RplwiLFxuICBcIvCfkajigI3wn5Gp4oCN8J+Rp+KAjfCfkaZcIixcbiAgXCLwn5Go4oCN8J+RqeKAjfCfkafigI3wn5GnXCIsXG4gIFwi8J+RqOKAjfCfkanigI3wn5GnXCIsXG4gIFwi8J+RqOKAjfCfkrtcIixcbiAgXCLwn5Go4oCN8J+SvFwiLFxuICBcIvCfkajigI3wn5SnXCIsXG4gIFwi8J+RqOKAjfCflKxcIixcbiAgXCLwn5Go4oCN8J+agFwiLFxuICBcIvCfkajigI3wn5qSXCIsXG4gIFwi8J+RqOKAjeKale+4j1wiLFxuICBcIvCfkajigI3impbvuI9cIixcbiAgXCLwn5Go4oCN4pyI77iPXCIsXG4gIFwi8J+RqOKAjeKdpO+4j+KAjfCfkahcIixcbiAgXCLwn5Go4oCN4p2k77iP4oCN8J+Si+KAjfCfkahcIixcbiAgXCLwn5GoXCIsXG4gIFwi8J+RqfCfj7vigI3wn4y+XCIsXG4gIFwi8J+RqfCfj7vigI3wn42zXCIsXG4gIFwi8J+RqfCfj7vigI3wn46TXCIsXG4gIFwi8J+RqfCfj7vigI3wn46kXCIsXG4gIFwi8J+RqfCfj7vigI3wn46oXCIsXG4gIFwi8J+RqfCfj7vigI3wn4+rXCIsXG4gIFwi8J+RqfCfj7vigI3wn4+tXCIsXG4gIFwi8J+RqfCfj7vigI3wn5K7XCIsXG4gIFwi8J+RqfCfj7vigI3wn5K8XCIsXG4gIFwi8J+RqfCfj7vigI3wn5SnXCIsXG4gIFwi8J+RqfCfj7vigI3wn5SsXCIsXG4gIFwi8J+RqfCfj7vigI3wn5qAXCIsXG4gIFwi8J+RqfCfj7vigI3wn5qSXCIsXG4gIFwi8J+RqfCfj7vigI3impXvuI9cIixcbiAgXCLwn5Gp8J+Pu+KAjeKalu+4j1wiLFxuICBcIvCfkanwn4+74oCN4pyI77iPXCIsXG4gIFwi8J+RqfCfj7tcIixcbiAgXCLwn5Gp8J+PvOKAjfCfjL5cIixcbiAgXCLwn5Gp8J+PvOKAjfCfjbNcIixcbiAgXCLwn5Gp8J+PvOKAjfCfjpNcIixcbiAgXCLwn5Gp8J+PvOKAjfCfjqRcIixcbiAgXCLwn5Gp8J+PvOKAjfCfjqhcIixcbiAgXCLwn5Gp8J+PvOKAjfCfj6tcIixcbiAgXCLwn5Gp8J+PvOKAjfCfj61cIixcbiAgXCLwn5Gp8J+PvOKAjfCfkrtcIixcbiAgXCLwn5Gp8J+PvOKAjfCfkrxcIixcbiAgXCLwn5Gp8J+PvOKAjfCflKdcIixcbiAgXCLwn5Gp8J+PvOKAjfCflKxcIixcbiAgXCLwn5Gp8J+PvOKAjfCfmoBcIixcbiAgXCLwn5Gp8J+PvOKAjfCfmpJcIixcbiAgXCLwn5Gp8J+PvOKAjeKale+4j1wiLFxuICBcIvCfkanwn4+84oCN4pqW77iPXCIsXG4gIFwi8J+RqfCfj7zigI3inIjvuI9cIixcbiAgXCLwn5Gp8J+PvFwiLFxuICBcIvCfkanwn4+94oCN8J+MvlwiLFxuICBcIvCfkanwn4+94oCN8J+Ns1wiLFxuICBcIvCfkanwn4+94oCN8J+Ok1wiLFxuICBcIvCfkanwn4+94oCN8J+OpFwiLFxuICBcIvCfkanwn4+94oCN8J+OqFwiLFxuICBcIvCfkanwn4+94oCN8J+Pq1wiLFxuICBcIvCfkanwn4+94oCN8J+PrVwiLFxuICBcIvCfkanwn4+94oCN8J+Su1wiLFxuICBcIvCfkanwn4+94oCN8J+SvFwiLFxuICBcIvCfkanwn4+94oCN8J+Up1wiLFxuICBcIvCfkanwn4+94oCN8J+UrFwiLFxuICBcIvCfkanwn4+94oCN8J+agFwiLFxuICBcIvCfkanwn4+94oCN8J+aklwiLFxuICBcIvCfkanwn4+94oCN4pqV77iPXCIsXG4gIFwi8J+RqfCfj73igI3impbvuI9cIixcbiAgXCLwn5Gp8J+PveKAjeKciO+4j1wiLFxuICBcIvCfkanwn4+9XCIsXG4gIFwi8J+RqfCfj77igI3wn4y+XCIsXG4gIFwi8J+RqfCfj77igI3wn42zXCIsXG4gIFwi8J+RqfCfj77igI3wn46TXCIsXG4gIFwi8J+RqfCfj77igI3wn46kXCIsXG4gIFwi8J+RqfCfj77igI3wn46oXCIsXG4gIFwi8J+RqfCfj77igI3wn4+rXCIsXG4gIFwi8J+RqfCfj77igI3wn4+tXCIsXG4gIFwi8J+RqfCfj77igI3wn5K7XCIsXG4gIFwi8J+RqfCfj77igI3wn5K8XCIsXG4gIFwi8J+RqfCfj77igI3wn5SnXCIsXG4gIFwi8J+RqfCfj77igI3wn5SsXCIsXG4gIFwi8J+RqfCfj77igI3wn5qAXCIsXG4gIFwi8J+RqfCfj77igI3wn5qSXCIsXG4gIFwi8J+RqfCfj77igI3impXvuI9cIixcbiAgXCLwn5Gp8J+PvuKAjeKalu+4j1wiLFxuICBcIvCfkanwn4++4oCN4pyI77iPXCIsXG4gIFwi8J+RqfCfj75cIixcbiAgXCLwn5Gp8J+Pv+KAjfCfjL5cIixcbiAgXCLwn5Gp8J+Pv+KAjfCfjbNcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfjpNcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfjqRcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfjqhcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfj6tcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfj61cIixcbiAgXCLwn5Gp8J+Pv+KAjfCfkrtcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfkrxcIixcbiAgXCLwn5Gp8J+Pv+KAjfCflKdcIixcbiAgXCLwn5Gp8J+Pv+KAjfCflKxcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfmoBcIixcbiAgXCLwn5Gp8J+Pv+KAjfCfmpJcIixcbiAgXCLwn5Gp8J+Pv+KAjeKale+4j1wiLFxuICBcIvCfkanwn4+/4oCN4pqW77iPXCIsXG4gIFwi8J+RqfCfj7/igI3inIjvuI9cIixcbiAgXCLwn5Gp8J+Pv1wiLFxuICBcIvCfkanigI3wn4y+XCIsXG4gIFwi8J+RqeKAjfCfjbNcIixcbiAgXCLwn5Gp4oCN8J+Ok1wiLFxuICBcIvCfkanigI3wn46kXCIsXG4gIFwi8J+RqeKAjfCfjqhcIixcbiAgXCLwn5Gp4oCN8J+Pq1wiLFxuICBcIvCfkanigI3wn4+tXCIsXG4gIFwi8J+RqeKAjfCfkabigI3wn5GmXCIsXG4gIFwi8J+RqeKAjfCfkaZcIixcbiAgXCLwn5Gp4oCN8J+Rp+KAjfCfkaZcIixcbiAgXCLwn5Gp4oCN8J+Rp+KAjfCfkadcIixcbiAgXCLwn5Gp4oCN8J+Rp1wiLFxuICBcIvCfkanigI3wn5Gp4oCN8J+RpuKAjfCfkaZcIixcbiAgXCLwn5Gp4oCN8J+RqeKAjfCfkaZcIixcbiAgXCLwn5Gp4oCN8J+RqeKAjfCfkafigI3wn5GmXCIsXG4gIFwi8J+RqeKAjfCfkanigI3wn5Gn4oCN8J+Rp1wiLFxuICBcIvCfkanigI3wn5Gp4oCN8J+Rp1wiLFxuICBcIvCfkanigI3wn5K7XCIsXG4gIFwi8J+RqeKAjfCfkrxcIixcbiAgXCLwn5Gp4oCN8J+Up1wiLFxuICBcIvCfkanigI3wn5SsXCIsXG4gIFwi8J+RqeKAjfCfmoBcIixcbiAgXCLwn5Gp4oCN8J+aklwiLFxuICBcIvCfkanigI3impXvuI9cIixcbiAgXCLwn5Gp4oCN4pqW77iPXCIsXG4gIFwi8J+RqeKAjeKciO+4j1wiLFxuICBcIvCfkanigI3inaTvuI/igI3wn5GoXCIsXG4gIFwi8J+RqeKAjeKdpO+4j+KAjfCfkalcIixcbiAgXCLwn5Gp4oCN4p2k77iP4oCN8J+Si+KAjfCfkahcIixcbiAgXCLwn5Gp4oCN4p2k77iP4oCN8J+Si+KAjfCfkalcIixcbiAgXCLwn5GpXCIsXG4gIFwi8J+RqvCfj7tcIixcbiAgXCLwn5Gq8J+PvFwiLFxuICBcIvCfkarwn4+9XCIsXG4gIFwi8J+RqvCfj75cIixcbiAgXCLwn5Gq8J+Pv1wiLFxuICBcIvCfkapcIixcbiAgXCLwn5Gr8J+Pu1wiLFxuICBcIvCfkavwn4+8XCIsXG4gIFwi8J+Rq/Cfj71cIixcbiAgXCLwn5Gr8J+PvlwiLFxuICBcIvCfkavwn4+/XCIsXG4gIFwi8J+Rq1wiLFxuICBcIvCfkazwn4+7XCIsXG4gIFwi8J+RrPCfj7xcIixcbiAgXCLwn5Gs8J+PvVwiLFxuICBcIvCfkazwn4++XCIsXG4gIFwi8J+RrPCfj79cIixcbiAgXCLwn5GsXCIsXG4gIFwi8J+RrfCfj7tcIixcbiAgXCLwn5Gt8J+PvFwiLFxuICBcIvCfka3wn4+9XCIsXG4gIFwi8J+RrfCfj75cIixcbiAgXCLwn5Gt8J+Pv1wiLFxuICBcIvCfka1cIixcbiAgXCLwn5Gu8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfka7wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+RrvCfj7tcIixcbiAgXCLwn5Gu8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfka7wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+RrvCfj7xcIixcbiAgXCLwn5Gu8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfka7wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+RrvCfj71cIixcbiAgXCLwn5Gu8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfka7wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+RrvCfj75cIixcbiAgXCLwn5Gu8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfka7wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+RrvCfj79cIixcbiAgXCLwn5Gu4oCN4pmA77iPXCIsXG4gIFwi8J+RruKAjeKZgu+4j1wiLFxuICBcIvCfka5cIixcbiAgXCLwn5Gv8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfka/wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+Rr/Cfj7tcIixcbiAgXCLwn5Gv8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfka/wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+Rr/Cfj7xcIixcbiAgXCLwn5Gv8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfka/wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+Rr/Cfj71cIixcbiAgXCLwn5Gv8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfka/wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+Rr/Cfj75cIixcbiAgXCLwn5Gv8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfka/wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+Rr/Cfj79cIixcbiAgXCLwn5Gv4oCN4pmA77iPXCIsXG4gIFwi8J+Rr+KAjeKZgu+4j1wiLFxuICBcIvCfka9cIixcbiAgXCLwn5Gw8J+Pu1wiLFxuICBcIvCfkbDwn4+8XCIsXG4gIFwi8J+RsPCfj71cIixcbiAgXCLwn5Gw8J+PvlwiLFxuICBcIvCfkbDwn4+/XCIsXG4gIFwi8J+RsFwiLFxuICBcIvCfkbHwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+RsfCfj7vigI3imYLvuI9cIixcbiAgXCLwn5Gx8J+Pu1wiLFxuICBcIvCfkbHwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+RsfCfj7zigI3imYLvuI9cIixcbiAgXCLwn5Gx8J+PvFwiLFxuICBcIvCfkbHwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+RsfCfj73igI3imYLvuI9cIixcbiAgXCLwn5Gx8J+PvVwiLFxuICBcIvCfkbHwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+RsfCfj77igI3imYLvuI9cIixcbiAgXCLwn5Gx8J+PvlwiLFxuICBcIvCfkbHwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+RsfCfj7/igI3imYLvuI9cIixcbiAgXCLwn5Gx8J+Pv1wiLFxuICBcIvCfkbHigI3imYDvuI9cIixcbiAgXCLwn5Gx4oCN4pmC77iPXCIsXG4gIFwi8J+RsVwiLFxuICBcIvCfkbLwn4+7XCIsXG4gIFwi8J+RsvCfj7xcIixcbiAgXCLwn5Gy8J+PvVwiLFxuICBcIvCfkbLwn4++XCIsXG4gIFwi8J+RsvCfj79cIixcbiAgXCLwn5GyXCIsXG4gIFwi8J+Rs/Cfj7vigI3imYDvuI9cIixcbiAgXCLwn5Gz8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfkbPwn4+7XCIsXG4gIFwi8J+Rs/Cfj7zigI3imYDvuI9cIixcbiAgXCLwn5Gz8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfkbPwn4+8XCIsXG4gIFwi8J+Rs/Cfj73igI3imYDvuI9cIixcbiAgXCLwn5Gz8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfkbPwn4+9XCIsXG4gIFwi8J+Rs/Cfj77igI3imYDvuI9cIixcbiAgXCLwn5Gz8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfkbPwn4++XCIsXG4gIFwi8J+Rs/Cfj7/igI3imYDvuI9cIixcbiAgXCLwn5Gz8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfkbPwn4+/XCIsXG4gIFwi8J+Rs+KAjeKZgO+4j1wiLFxuICBcIvCfkbPigI3imYLvuI9cIixcbiAgXCLwn5GzXCIsXG4gIFwi8J+RtPCfj7tcIixcbiAgXCLwn5G08J+PvFwiLFxuICBcIvCfkbTwn4+9XCIsXG4gIFwi8J+RtPCfj75cIixcbiAgXCLwn5G08J+Pv1wiLFxuICBcIvCfkbRcIixcbiAgXCLwn5G18J+Pu1wiLFxuICBcIvCfkbXwn4+8XCIsXG4gIFwi8J+RtfCfj71cIixcbiAgXCLwn5G18J+PvlwiLFxuICBcIvCfkbXwn4+/XCIsXG4gIFwi8J+RtVwiLFxuICBcIvCfkbbwn4+7XCIsXG4gIFwi8J+RtvCfj7xcIixcbiAgXCLwn5G28J+PvVwiLFxuICBcIvCfkbbwn4++XCIsXG4gIFwi8J+RtvCfj79cIixcbiAgXCLwn5G2XCIsXG4gIFwi8J+Rt/Cfj7vigI3imYDvuI9cIixcbiAgXCLwn5G38J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfkbfwn4+7XCIsXG4gIFwi8J+Rt/Cfj7zigI3imYDvuI9cIixcbiAgXCLwn5G38J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfkbfwn4+8XCIsXG4gIFwi8J+Rt/Cfj73igI3imYDvuI9cIixcbiAgXCLwn5G38J+PveKAjeKZgu+4j1wiLFxuICBcIvCfkbfwn4+9XCIsXG4gIFwi8J+Rt/Cfj77igI3imYDvuI9cIixcbiAgXCLwn5G38J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfkbfwn4++XCIsXG4gIFwi8J+Rt/Cfj7/igI3imYDvuI9cIixcbiAgXCLwn5G38J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfkbfwn4+/XCIsXG4gIFwi8J+Rt+KAjeKZgO+4j1wiLFxuICBcIvCfkbfigI3imYLvuI9cIixcbiAgXCLwn5G3XCIsXG4gIFwi8J+RuPCfj7tcIixcbiAgXCLwn5G48J+PvFwiLFxuICBcIvCfkbjwn4+9XCIsXG4gIFwi8J+RuPCfj75cIixcbiAgXCLwn5G48J+Pv1wiLFxuICBcIvCfkbhcIixcbiAgXCLwn5G5XCIsXG4gIFwi8J+RulwiLFxuICBcIvCfkbtcIixcbiAgXCLwn5G88J+Pu1wiLFxuICBcIvCfkbzwn4+8XCIsXG4gIFwi8J+RvPCfj71cIixcbiAgXCLwn5G88J+PvlwiLFxuICBcIvCfkbzwn4+/XCIsXG4gIFwi8J+RvFwiLFxuICBcIvCfkb1cIixcbiAgXCLwn5G+XCIsXG4gIFwi8J+Rv1wiLFxuICBcIvCfkoBcIixcbiAgXCLwn5KB8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfkoHwn4+74oCN4pmC77iPXCIsXG4gIFwi8J+SgfCfj7tcIixcbiAgXCLwn5KB8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfkoHwn4+84oCN4pmC77iPXCIsXG4gIFwi8J+SgfCfj7xcIixcbiAgXCLwn5KB8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfkoHwn4+94oCN4pmC77iPXCIsXG4gIFwi8J+SgfCfj71cIixcbiAgXCLwn5KB8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfkoHwn4++4oCN4pmC77iPXCIsXG4gIFwi8J+SgfCfj75cIixcbiAgXCLwn5KB8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfkoHwn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+SgfCfj79cIixcbiAgXCLwn5KB4oCN4pmA77iPXCIsXG4gIFwi8J+SgeKAjeKZgu+4j1wiLFxuICBcIvCfkoFcIixcbiAgXCLwn5KC8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfkoLwn4+74oCN4pmC77iPXCIsXG4gIFwi8J+SgvCfj7tcIixcbiAgXCLwn5KC8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfkoLwn4+84oCN4pmC77iPXCIsXG4gIFwi8J+SgvCfj7xcIixcbiAgXCLwn5KC8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfkoLwn4+94oCN4pmC77iPXCIsXG4gIFwi8J+SgvCfj71cIixcbiAgXCLwn5KC8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfkoLwn4++4oCN4pmC77iPXCIsXG4gIFwi8J+SgvCfj75cIixcbiAgXCLwn5KC8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfkoLwn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+SgvCfj79cIixcbiAgXCLwn5KC4oCN4pmA77iPXCIsXG4gIFwi8J+SguKAjeKZgu+4j1wiLFxuICBcIvCfkoJcIixcbiAgXCLwn5KD8J+Pu1wiLFxuICBcIvCfkoPwn4+8XCIsXG4gIFwi8J+Sg/Cfj71cIixcbiAgXCLwn5KD8J+PvlwiLFxuICBcIvCfkoPwn4+/XCIsXG4gIFwi8J+Sg1wiLFxuICBcIvCfkoRcIixcbiAgXCLwn5KF8J+Pu1wiLFxuICBcIvCfkoXwn4+8XCIsXG4gIFwi8J+ShfCfj71cIixcbiAgXCLwn5KF8J+PvlwiLFxuICBcIvCfkoXwn4+/XCIsXG4gIFwi8J+ShVwiLFxuICBcIvCfkobwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+ShvCfj7vigI3imYLvuI9cIixcbiAgXCLwn5KG8J+Pu1wiLFxuICBcIvCfkobwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+ShvCfj7zigI3imYLvuI9cIixcbiAgXCLwn5KG8J+PvFwiLFxuICBcIvCfkobwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+ShvCfj73igI3imYLvuI9cIixcbiAgXCLwn5KG8J+PvVwiLFxuICBcIvCfkobwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+ShvCfj77igI3imYLvuI9cIixcbiAgXCLwn5KG8J+PvlwiLFxuICBcIvCfkobwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+ShvCfj7/igI3imYLvuI9cIixcbiAgXCLwn5KG8J+Pv1wiLFxuICBcIvCfkobigI3imYDvuI9cIixcbiAgXCLwn5KG4oCN4pmC77iPXCIsXG4gIFwi8J+ShlwiLFxuICBcIvCfkofwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+Sh/Cfj7vigI3imYLvuI9cIixcbiAgXCLwn5KH8J+Pu1wiLFxuICBcIvCfkofwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+Sh/Cfj7zigI3imYLvuI9cIixcbiAgXCLwn5KH8J+PvFwiLFxuICBcIvCfkofwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+Sh/Cfj73igI3imYLvuI9cIixcbiAgXCLwn5KH8J+PvVwiLFxuICBcIvCfkofwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+Sh/Cfj77igI3imYLvuI9cIixcbiAgXCLwn5KH8J+PvlwiLFxuICBcIvCfkofwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+Sh/Cfj7/igI3imYLvuI9cIixcbiAgXCLwn5KH8J+Pv1wiLFxuICBcIvCfkofigI3imYDvuI9cIixcbiAgXCLwn5KH4oCN4pmC77iPXCIsXG4gIFwi8J+Sh1wiLFxuICBcIvCfkohcIixcbiAgXCLwn5KJXCIsXG4gIFwi8J+SilwiLFxuICBcIvCfkotcIixcbiAgXCLwn5KMXCIsXG4gIFwi8J+SjVwiLFxuICBcIvCfko5cIixcbiAgXCLwn5KPXCIsXG4gIFwi8J+SkFwiLFxuICBcIvCfkpFcIixcbiAgXCLwn5KSXCIsXG4gIFwi8J+Sk1wiLFxuICBcIvCfkpRcIixcbiAgXCLwn5KVXCIsXG4gIFwi8J+SllwiLFxuICBcIvCfkpdcIixcbiAgXCLwn5KYXCIsXG4gIFwi8J+SmVwiLFxuICBcIvCfkppcIixcbiAgXCLwn5KbXCIsXG4gIFwi8J+SnFwiLFxuICBcIvCfkp1cIixcbiAgXCLwn5KeXCIsXG4gIFwi8J+Sn1wiLFxuICBcIvCfkqBcIixcbiAgXCLwn5KhXCIsXG4gIFwi8J+SolwiLFxuICBcIvCfkqNcIixcbiAgXCLwn5KkXCIsXG4gIFwi8J+SpVwiLFxuICBcIvCfkqZcIixcbiAgXCLwn5KnXCIsXG4gIFwi8J+SqFwiLFxuICBcIvCfkqlcIixcbiAgXCLwn5Kq8J+Pu1wiLFxuICBcIvCfkqrwn4+8XCIsXG4gIFwi8J+SqvCfj71cIixcbiAgXCLwn5Kq8J+PvlwiLFxuICBcIvCfkqrwn4+/XCIsXG4gIFwi8J+SqlwiLFxuICBcIvCfkqtcIixcbiAgXCLwn5KsXCIsXG4gIFwi8J+SrVwiLFxuICBcIvCfkq5cIixcbiAgXCLwn5KvXCIsXG4gIFwi8J+SsFwiLFxuICBcIvCfkrFcIixcbiAgXCLwn5KyXCIsXG4gIFwi8J+Ss1wiLFxuICBcIvCfkrRcIixcbiAgXCLwn5K1XCIsXG4gIFwi8J+StlwiLFxuICBcIvCfkrdcIixcbiAgXCLwn5K4XCIsXG4gIFwi8J+SuVwiLFxuICBcIvCfkrpcIixcbiAgXCLwn5K7XCIsXG4gIFwi8J+SvFwiLFxuICBcIvCfkr1cIixcbiAgXCLwn5K+XCIsXG4gIFwi8J+Sv1wiLFxuICBcIvCfk4BcIixcbiAgXCLwn5OBXCIsXG4gIFwi8J+TglwiLFxuICBcIvCfk4NcIixcbiAgXCLwn5OEXCIsXG4gIFwi8J+ThVwiLFxuICBcIvCfk4ZcIixcbiAgXCLwn5OHXCIsXG4gIFwi8J+TiFwiLFxuICBcIvCfk4lcIixcbiAgXCLwn5OKXCIsXG4gIFwi8J+Ti1wiLFxuICBcIvCfk4xcIixcbiAgXCLwn5ONXCIsXG4gIFwi8J+TjlwiLFxuICBcIvCfk49cIixcbiAgXCLwn5OQXCIsXG4gIFwi8J+TkVwiLFxuICBcIvCfk5JcIixcbiAgXCLwn5OTXCIsXG4gIFwi8J+TlFwiLFxuICBcIvCfk5VcIixcbiAgXCLwn5OWXCIsXG4gIFwi8J+Tl1wiLFxuICBcIvCfk5hcIixcbiAgXCLwn5OZXCIsXG4gIFwi8J+TmlwiLFxuICBcIvCfk5tcIixcbiAgXCLwn5OcXCIsXG4gIFwi8J+TnVwiLFxuICBcIvCfk55cIixcbiAgXCLwn5OfXCIsXG4gIFwi8J+ToFwiLFxuICBcIvCfk6FcIixcbiAgXCLwn5OiXCIsXG4gIFwi8J+To1wiLFxuICBcIvCfk6RcIixcbiAgXCLwn5OlXCIsXG4gIFwi8J+TplwiLFxuICBcIvCfk6dcIixcbiAgXCLwn5OoXCIsXG4gIFwi8J+TqVwiLFxuICBcIvCfk6pcIixcbiAgXCLwn5OrXCIsXG4gIFwi8J+TrFwiLFxuICBcIvCfk61cIixcbiAgXCLwn5OuXCIsXG4gIFwi8J+Tr1wiLFxuICBcIvCfk7BcIixcbiAgXCLwn5OxXCIsXG4gIFwi8J+TslwiLFxuICBcIvCfk7NcIixcbiAgXCLwn5O0XCIsXG4gIFwi8J+TtVwiLFxuICBcIvCfk7ZcIixcbiAgXCLwn5O3XCIsXG4gIFwi8J+TuFwiLFxuICBcIvCfk7lcIixcbiAgXCLwn5O6XCIsXG4gIFwi8J+Tu1wiLFxuICBcIvCfk7xcIixcbiAgXCLwn5O9XCIsXG4gIFwi8J+Tv1wiLFxuICBcIvCflIBcIixcbiAgXCLwn5SBXCIsXG4gIFwi8J+UglwiLFxuICBcIvCflINcIixcbiAgXCLwn5SEXCIsXG4gIFwi8J+UhVwiLFxuICBcIvCflIZcIixcbiAgXCLwn5SHXCIsXG4gIFwi8J+UiFwiLFxuICBcIvCflIlcIixcbiAgXCLwn5SKXCIsXG4gIFwi8J+Ui1wiLFxuICBcIvCflIxcIixcbiAgXCLwn5SNXCIsXG4gIFwi8J+UjlwiLFxuICBcIvCflI9cIixcbiAgXCLwn5SQXCIsXG4gIFwi8J+UkVwiLFxuICBcIvCflJJcIixcbiAgXCLwn5STXCIsXG4gIFwi8J+UlFwiLFxuICBcIvCflJVcIixcbiAgXCLwn5SWXCIsXG4gIFwi8J+Ul1wiLFxuICBcIvCflJhcIixcbiAgXCLwn5SZXCIsXG4gIFwi8J+UmlwiLFxuICBcIvCflJtcIixcbiAgXCLwn5ScXCIsXG4gIFwi8J+UnVwiLFxuICBcIvCflJ5cIixcbiAgXCLwn5SfXCIsXG4gIFwi8J+UoFwiLFxuICBcIvCflKFcIixcbiAgXCLwn5SiXCIsXG4gIFwi8J+Uo1wiLFxuICBcIvCflKRcIixcbiAgXCLwn5SlXCIsXG4gIFwi8J+UplwiLFxuICBcIvCflKdcIixcbiAgXCLwn5SoXCIsXG4gIFwi8J+UqVwiLFxuICBcIvCflKpcIixcbiAgXCLwn5SrXCIsXG4gIFwi8J+UrFwiLFxuICBcIvCflK1cIixcbiAgXCLwn5SuXCIsXG4gIFwi8J+Ur1wiLFxuICBcIvCflLBcIixcbiAgXCLwn5SxXCIsXG4gIFwi8J+UslwiLFxuICBcIvCflLNcIixcbiAgXCLwn5S0XCIsXG4gIFwi8J+UtVwiLFxuICBcIvCflLZcIixcbiAgXCLwn5S3XCIsXG4gIFwi8J+UuFwiLFxuICBcIvCflLlcIixcbiAgXCLwn5S6XCIsXG4gIFwi8J+Uu1wiLFxuICBcIvCflLxcIixcbiAgXCLwn5S9XCIsXG4gIFwi8J+ViVwiLFxuICBcIvCflYpcIixcbiAgXCLwn5WLXCIsXG4gIFwi8J+VjFwiLFxuICBcIvCflY1cIixcbiAgXCLwn5WOXCIsXG4gIFwi8J+VkFwiLFxuICBcIvCflZFcIixcbiAgXCLwn5WSXCIsXG4gIFwi8J+Vk1wiLFxuICBcIvCflZRcIixcbiAgXCLwn5WVXCIsXG4gIFwi8J+VllwiLFxuICBcIvCflZdcIixcbiAgXCLwn5WYXCIsXG4gIFwi8J+VmVwiLFxuICBcIvCflZpcIixcbiAgXCLwn5WbXCIsXG4gIFwi8J+VnFwiLFxuICBcIvCflZ1cIixcbiAgXCLwn5WeXCIsXG4gIFwi8J+Vn1wiLFxuICBcIvCflaBcIixcbiAgXCLwn5WhXCIsXG4gIFwi8J+VolwiLFxuICBcIvCflaNcIixcbiAgXCLwn5WkXCIsXG4gIFwi8J+VpVwiLFxuICBcIvCflaZcIixcbiAgXCLwn5WnXCIsXG4gIFwi8J+Vr1wiLFxuICBcIvCflbBcIixcbiAgXCLwn5WzXCIsXG4gIFwi8J+VtPCfj7tcIixcbiAgXCLwn5W08J+PvFwiLFxuICBcIvCflbTwn4+9XCIsXG4gIFwi8J+VtPCfj75cIixcbiAgXCLwn5W08J+Pv1wiLFxuICBcIvCflbRcIixcbiAgXCLwn5W18J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCflbXwn4+74oCN4pmC77iPXCIsXG4gIFwi8J+VtfCfj7tcIixcbiAgXCLwn5W18J+PvOKAjeKZgO+4j1wiLFxuICBcIvCflbXwn4+84oCN4pmC77iPXCIsXG4gIFwi8J+VtfCfj7xcIixcbiAgXCLwn5W18J+PveKAjeKZgO+4j1wiLFxuICBcIvCflbXwn4+94oCN4pmC77iPXCIsXG4gIFwi8J+VtfCfj71cIixcbiAgXCLwn5W18J+PvuKAjeKZgO+4j1wiLFxuICBcIvCflbXwn4++4oCN4pmC77iPXCIsXG4gIFwi8J+VtfCfj75cIixcbiAgXCLwn5W18J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCflbXwn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+VtfCfj79cIixcbiAgXCLwn5W177iP4oCN4pmA77iPXCIsXG4gIFwi8J+Vte+4j+KAjeKZgu+4j1wiLFxuICBcIvCflbVcIixcbiAgXCLwn5W2XCIsXG4gIFwi8J+Vt1wiLFxuICBcIvCflbhcIixcbiAgXCLwn5W5XCIsXG4gIFwi8J+VuvCfj7tcIixcbiAgXCLwn5W68J+PvFwiLFxuICBcIvCflbrwn4+9XCIsXG4gIFwi8J+VuvCfj75cIixcbiAgXCLwn5W68J+Pv1wiLFxuICBcIvCflbpcIixcbiAgXCLwn5aHXCIsXG4gIFwi8J+WilwiLFxuICBcIvCflotcIixcbiAgXCLwn5aMXCIsXG4gIFwi8J+WjVwiLFxuICBcIvCflpDwn4+7XCIsXG4gIFwi8J+WkPCfj7xcIixcbiAgXCLwn5aQ8J+PvVwiLFxuICBcIvCflpDwn4++XCIsXG4gIFwi8J+WkPCfj79cIixcbiAgXCLwn5aQXCIsXG4gIFwi8J+WlfCfj7tcIixcbiAgXCLwn5aV8J+PvFwiLFxuICBcIvCflpXwn4+9XCIsXG4gIFwi8J+WlfCfj75cIixcbiAgXCLwn5aV8J+Pv1wiLFxuICBcIvCflpVcIixcbiAgXCLwn5aW8J+Pu1wiLFxuICBcIvCflpbwn4+8XCIsXG4gIFwi8J+WlvCfj71cIixcbiAgXCLwn5aW8J+PvlwiLFxuICBcIvCflpbwn4+/XCIsXG4gIFwi8J+WllwiLFxuICBcIvCflqRcIixcbiAgXCLwn5alXCIsXG4gIFwi8J+WqFwiLFxuICBcIvCflrFcIixcbiAgXCLwn5ayXCIsXG4gIFwi8J+WvFwiLFxuICBcIvCfl4JcIixcbiAgXCLwn5eDXCIsXG4gIFwi8J+XhFwiLFxuICBcIvCfl5FcIixcbiAgXCLwn5eSXCIsXG4gIFwi8J+Xk1wiLFxuICBcIvCfl5xcIixcbiAgXCLwn5edXCIsXG4gIFwi8J+XnlwiLFxuICBcIvCfl6FcIixcbiAgXCLwn5ejXCIsXG4gIFwi8J+XqFwiLFxuICBcIvCfl69cIixcbiAgXCLwn5ezXCIsXG4gIFwi8J+XulwiLFxuICBcIvCfl7tcIixcbiAgXCLwn5e8XCIsXG4gIFwi8J+XvVwiLFxuICBcIvCfl75cIixcbiAgXCLwn5e/XCIsXG4gIFwi8J+YgFwiLFxuICBcIvCfmIFcIixcbiAgXCLwn5iCXCIsXG4gIFwi8J+Yg1wiLFxuICBcIvCfmIRcIixcbiAgXCLwn5iFXCIsXG4gIFwi8J+YhlwiLFxuICBcIvCfmIdcIixcbiAgXCLwn5iIXCIsXG4gIFwi8J+YiVwiLFxuICBcIvCfmIpcIixcbiAgXCLwn5iLXCIsXG4gIFwi8J+YjFwiLFxuICBcIvCfmI1cIixcbiAgXCLwn5iOXCIsXG4gIFwi8J+Yj1wiLFxuICBcIvCfmJBcIixcbiAgXCLwn5iRXCIsXG4gIFwi8J+YklwiLFxuICBcIvCfmJNcIixcbiAgXCLwn5iUXCIsXG4gIFwi8J+YlVwiLFxuICBcIvCfmJZcIixcbiAgXCLwn5iXXCIsXG4gIFwi8J+YmFwiLFxuICBcIvCfmJlcIixcbiAgXCLwn5iaXCIsXG4gIFwi8J+Ym1wiLFxuICBcIvCfmJxcIixcbiAgXCLwn5idXCIsXG4gIFwi8J+YnlwiLFxuICBcIvCfmJ9cIixcbiAgXCLwn5igXCIsXG4gIFwi8J+YoVwiLFxuICBcIvCfmKJcIixcbiAgXCLwn5ijXCIsXG4gIFwi8J+YpFwiLFxuICBcIvCfmKVcIixcbiAgXCLwn5imXCIsXG4gIFwi8J+Yp1wiLFxuICBcIvCfmKhcIixcbiAgXCLwn5ipXCIsXG4gIFwi8J+YqlwiLFxuICBcIvCfmKtcIixcbiAgXCLwn5isXCIsXG4gIFwi8J+YrVwiLFxuICBcIvCfmK5cIixcbiAgXCLwn5ivXCIsXG4gIFwi8J+YsFwiLFxuICBcIvCfmLFcIixcbiAgXCLwn5iyXCIsXG4gIFwi8J+Ys1wiLFxuICBcIvCfmLRcIixcbiAgXCLwn5i1XCIsXG4gIFwi8J+YtlwiLFxuICBcIvCfmLdcIixcbiAgXCLwn5i4XCIsXG4gIFwi8J+YuVwiLFxuICBcIvCfmLpcIixcbiAgXCLwn5i7XCIsXG4gIFwi8J+YvFwiLFxuICBcIvCfmL1cIixcbiAgXCLwn5i+XCIsXG4gIFwi8J+Yv1wiLFxuICBcIvCfmYBcIixcbiAgXCLwn5mBXCIsXG4gIFwi8J+ZglwiLFxuICBcIvCfmYNcIixcbiAgXCLwn5mEXCIsXG4gIFwi8J+ZhfCfj7vigI3imYDvuI9cIixcbiAgXCLwn5mF8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfmYXwn4+7XCIsXG4gIFwi8J+ZhfCfj7zigI3imYDvuI9cIixcbiAgXCLwn5mF8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfmYXwn4+8XCIsXG4gIFwi8J+ZhfCfj73igI3imYDvuI9cIixcbiAgXCLwn5mF8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfmYXwn4+9XCIsXG4gIFwi8J+ZhfCfj77igI3imYDvuI9cIixcbiAgXCLwn5mF8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfmYXwn4++XCIsXG4gIFwi8J+ZhfCfj7/igI3imYDvuI9cIixcbiAgXCLwn5mF8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfmYXwn4+/XCIsXG4gIFwi8J+ZheKAjeKZgO+4j1wiLFxuICBcIvCfmYXigI3imYLvuI9cIixcbiAgXCLwn5mFXCIsXG4gIFwi8J+ZhvCfj7vigI3imYDvuI9cIixcbiAgXCLwn5mG8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfmYbwn4+7XCIsXG4gIFwi8J+ZhvCfj7zigI3imYDvuI9cIixcbiAgXCLwn5mG8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfmYbwn4+8XCIsXG4gIFwi8J+ZhvCfj73igI3imYDvuI9cIixcbiAgXCLwn5mG8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfmYbwn4+9XCIsXG4gIFwi8J+ZhvCfj77igI3imYDvuI9cIixcbiAgXCLwn5mG8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfmYbwn4++XCIsXG4gIFwi8J+ZhvCfj7/igI3imYDvuI9cIixcbiAgXCLwn5mG8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfmYbwn4+/XCIsXG4gIFwi8J+ZhuKAjeKZgO+4j1wiLFxuICBcIvCfmYbigI3imYLvuI9cIixcbiAgXCLwn5mGXCIsXG4gIFwi8J+Zh/Cfj7vigI3imYDvuI9cIixcbiAgXCLwn5mH8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfmYfwn4+7XCIsXG4gIFwi8J+Zh/Cfj7zigI3imYDvuI9cIixcbiAgXCLwn5mH8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfmYfwn4+8XCIsXG4gIFwi8J+Zh/Cfj73igI3imYDvuI9cIixcbiAgXCLwn5mH8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfmYfwn4+9XCIsXG4gIFwi8J+Zh/Cfj77igI3imYDvuI9cIixcbiAgXCLwn5mH8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfmYfwn4++XCIsXG4gIFwi8J+Zh/Cfj7/igI3imYDvuI9cIixcbiAgXCLwn5mH8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfmYfwn4+/XCIsXG4gIFwi8J+Zh+KAjeKZgO+4j1wiLFxuICBcIvCfmYfigI3imYLvuI9cIixcbiAgXCLwn5mHXCIsXG4gIFwi8J+ZiFwiLFxuICBcIvCfmYlcIixcbiAgXCLwn5mKXCIsXG4gIFwi8J+Zi/Cfj7vigI3imYDvuI9cIixcbiAgXCLwn5mL8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfmYvwn4+7XCIsXG4gIFwi8J+Zi/Cfj7zigI3imYDvuI9cIixcbiAgXCLwn5mL8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfmYvwn4+8XCIsXG4gIFwi8J+Zi/Cfj73igI3imYDvuI9cIixcbiAgXCLwn5mL8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfmYvwn4+9XCIsXG4gIFwi8J+Zi/Cfj77igI3imYDvuI9cIixcbiAgXCLwn5mL8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfmYvwn4++XCIsXG4gIFwi8J+Zi/Cfj7/igI3imYDvuI9cIixcbiAgXCLwn5mL8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfmYvwn4+/XCIsXG4gIFwi8J+Zi+KAjeKZgO+4j1wiLFxuICBcIvCfmYvigI3imYLvuI9cIixcbiAgXCLwn5mLXCIsXG4gIFwi8J+ZjPCfj7tcIixcbiAgXCLwn5mM8J+PvFwiLFxuICBcIvCfmYzwn4+9XCIsXG4gIFwi8J+ZjPCfj75cIixcbiAgXCLwn5mM8J+Pv1wiLFxuICBcIvCfmYxcIixcbiAgXCLwn5mN8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfmY3wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+ZjfCfj7tcIixcbiAgXCLwn5mN8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfmY3wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+ZjfCfj7xcIixcbiAgXCLwn5mN8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfmY3wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+ZjfCfj71cIixcbiAgXCLwn5mN8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfmY3wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+ZjfCfj75cIixcbiAgXCLwn5mN8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfmY3wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+ZjfCfj79cIixcbiAgXCLwn5mN4oCN4pmA77iPXCIsXG4gIFwi8J+ZjeKAjeKZgu+4j1wiLFxuICBcIvCfmY1cIixcbiAgXCLwn5mO8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfmY7wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+ZjvCfj7tcIixcbiAgXCLwn5mO8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfmY7wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+ZjvCfj7xcIixcbiAgXCLwn5mO8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfmY7wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+ZjvCfj71cIixcbiAgXCLwn5mO8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfmY7wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+ZjvCfj75cIixcbiAgXCLwn5mO8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfmY7wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+ZjvCfj79cIixcbiAgXCLwn5mO4oCN4pmA77iPXCIsXG4gIFwi8J+ZjuKAjeKZgu+4j1wiLFxuICBcIvCfmY5cIixcbiAgXCLwn5mP8J+Pu1wiLFxuICBcIvCfmY/wn4+8XCIsXG4gIFwi8J+Zj/Cfj71cIixcbiAgXCLwn5mP8J+PvlwiLFxuICBcIvCfmY/wn4+/XCIsXG4gIFwi8J+Zj1wiLFxuICBcIvCfmoBcIixcbiAgXCLwn5qBXCIsXG4gIFwi8J+aglwiLFxuICBcIvCfmoNcIixcbiAgXCLwn5qEXCIsXG4gIFwi8J+ahVwiLFxuICBcIvCfmoZcIixcbiAgXCLwn5qHXCIsXG4gIFwi8J+aiFwiLFxuICBcIvCfmolcIixcbiAgXCLwn5qKXCIsXG4gIFwi8J+ai1wiLFxuICBcIvCfmoxcIixcbiAgXCLwn5qNXCIsXG4gIFwi8J+ajlwiLFxuICBcIvCfmo9cIixcbiAgXCLwn5qQXCIsXG4gIFwi8J+akVwiLFxuICBcIvCfmpJcIixcbiAgXCLwn5qTXCIsXG4gIFwi8J+alFwiLFxuICBcIvCfmpVcIixcbiAgXCLwn5qWXCIsXG4gIFwi8J+al1wiLFxuICBcIvCfmphcIixcbiAgXCLwn5qZXCIsXG4gIFwi8J+amlwiLFxuICBcIvCfmptcIixcbiAgXCLwn5qcXCIsXG4gIFwi8J+anVwiLFxuICBcIvCfmp5cIixcbiAgXCLwn5qfXCIsXG4gIFwi8J+aoFwiLFxuICBcIvCfmqFcIixcbiAgXCLwn5qiXCIsXG4gIFwi8J+ao/Cfj7vigI3imYDvuI9cIixcbiAgXCLwn5qj8J+Pu+KAjeKZgu+4j1wiLFxuICBcIvCfmqPwn4+7XCIsXG4gIFwi8J+ao/Cfj7zigI3imYDvuI9cIixcbiAgXCLwn5qj8J+PvOKAjeKZgu+4j1wiLFxuICBcIvCfmqPwn4+8XCIsXG4gIFwi8J+ao/Cfj73igI3imYDvuI9cIixcbiAgXCLwn5qj8J+PveKAjeKZgu+4j1wiLFxuICBcIvCfmqPwn4+9XCIsXG4gIFwi8J+ao/Cfj77igI3imYDvuI9cIixcbiAgXCLwn5qj8J+PvuKAjeKZgu+4j1wiLFxuICBcIvCfmqPwn4++XCIsXG4gIFwi8J+ao/Cfj7/igI3imYDvuI9cIixcbiAgXCLwn5qj8J+Pv+KAjeKZgu+4j1wiLFxuICBcIvCfmqPwn4+/XCIsXG4gIFwi8J+ao+KAjeKZgO+4j1wiLFxuICBcIvCfmqPigI3imYLvuI9cIixcbiAgXCLwn5qjXCIsXG4gIFwi8J+apFwiLFxuICBcIvCfmqVcIixcbiAgXCLwn5qmXCIsXG4gIFwi8J+ap1wiLFxuICBcIvCfmqhcIixcbiAgXCLwn5qpXCIsXG4gIFwi8J+aqlwiLFxuICBcIvCfmqtcIixcbiAgXCLwn5qsXCIsXG4gIFwi8J+arVwiLFxuICBcIvCfmq5cIixcbiAgXCLwn5qvXCIsXG4gIFwi8J+asFwiLFxuICBcIvCfmrFcIixcbiAgXCLwn5qyXCIsXG4gIFwi8J+as1wiLFxuICBcIvCfmrTwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+atPCfj7vigI3imYLvuI9cIixcbiAgXCLwn5q08J+Pu1wiLFxuICBcIvCfmrTwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+atPCfj7zigI3imYLvuI9cIixcbiAgXCLwn5q08J+PvFwiLFxuICBcIvCfmrTwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+atPCfj73igI3imYLvuI9cIixcbiAgXCLwn5q08J+PvVwiLFxuICBcIvCfmrTwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+atPCfj77igI3imYLvuI9cIixcbiAgXCLwn5q08J+PvlwiLFxuICBcIvCfmrTwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+atPCfj7/igI3imYLvuI9cIixcbiAgXCLwn5q08J+Pv1wiLFxuICBcIvCfmrTigI3imYDvuI9cIixcbiAgXCLwn5q04oCN4pmC77iPXCIsXG4gIFwi8J+atFwiLFxuICBcIvCfmrXwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+atfCfj7vigI3imYLvuI9cIixcbiAgXCLwn5q18J+Pu1wiLFxuICBcIvCfmrXwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+atfCfj7zigI3imYLvuI9cIixcbiAgXCLwn5q18J+PvFwiLFxuICBcIvCfmrXwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+atfCfj73igI3imYLvuI9cIixcbiAgXCLwn5q18J+PvVwiLFxuICBcIvCfmrXwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+atfCfj77igI3imYLvuI9cIixcbiAgXCLwn5q18J+PvlwiLFxuICBcIvCfmrXwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+atfCfj7/igI3imYLvuI9cIixcbiAgXCLwn5q18J+Pv1wiLFxuICBcIvCfmrXigI3imYDvuI9cIixcbiAgXCLwn5q14oCN4pmC77iPXCIsXG4gIFwi8J+atVwiLFxuICBcIvCfmrbwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+atvCfj7vigI3imYLvuI9cIixcbiAgXCLwn5q28J+Pu1wiLFxuICBcIvCfmrbwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+atvCfj7zigI3imYLvuI9cIixcbiAgXCLwn5q28J+PvFwiLFxuICBcIvCfmrbwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+atvCfj73igI3imYLvuI9cIixcbiAgXCLwn5q28J+PvVwiLFxuICBcIvCfmrbwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+atvCfj77igI3imYLvuI9cIixcbiAgXCLwn5q28J+PvlwiLFxuICBcIvCfmrbwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+atvCfj7/igI3imYLvuI9cIixcbiAgXCLwn5q28J+Pv1wiLFxuICBcIvCfmrbigI3imYDvuI9cIixcbiAgXCLwn5q24oCN4pmC77iPXCIsXG4gIFwi8J+atlwiLFxuICBcIvCfmrdcIixcbiAgXCLwn5q4XCIsXG4gIFwi8J+auVwiLFxuICBcIvCfmrpcIixcbiAgXCLwn5q7XCIsXG4gIFwi8J+avFwiLFxuICBcIvCfmr1cIixcbiAgXCLwn5q+XCIsXG4gIFwi8J+av1wiLFxuICBcIvCfm4Dwn4+7XCIsXG4gIFwi8J+bgPCfj7xcIixcbiAgXCLwn5uA8J+PvVwiLFxuICBcIvCfm4Dwn4++XCIsXG4gIFwi8J+bgPCfj79cIixcbiAgXCLwn5uAXCIsXG4gIFwi8J+bgVwiLFxuICBcIvCfm4JcIixcbiAgXCLwn5uDXCIsXG4gIFwi8J+bhFwiLFxuICBcIvCfm4VcIixcbiAgXCLwn5uLXCIsXG4gIFwi8J+bjPCfj7tcIixcbiAgXCLwn5uM8J+PvFwiLFxuICBcIvCfm4zwn4+9XCIsXG4gIFwi8J+bjPCfj75cIixcbiAgXCLwn5uM8J+Pv1wiLFxuICBcIvCfm4xcIixcbiAgXCLwn5uNXCIsXG4gIFwi8J+bjlwiLFxuICBcIvCfm49cIixcbiAgXCLwn5uQXCIsXG4gIFwi8J+bkVwiLFxuICBcIvCfm5JcIixcbiAgXCLwn5ugXCIsXG4gIFwi8J+boVwiLFxuICBcIvCfm6JcIixcbiAgXCLwn5ujXCIsXG4gIFwi8J+bpFwiLFxuICBcIvCfm6VcIixcbiAgXCLwn5upXCIsXG4gIFwi8J+bq1wiLFxuICBcIvCfm6xcIixcbiAgXCLwn5uwXCIsXG4gIFwi8J+bs1wiLFxuICBcIvCfm7RcIixcbiAgXCLwn5u1XCIsXG4gIFwi8J+btlwiLFxuICBcIvCfpJBcIixcbiAgXCLwn6SRXCIsXG4gIFwi8J+kklwiLFxuICBcIvCfpJNcIixcbiAgXCLwn6SUXCIsXG4gIFwi8J+klVwiLFxuICBcIvCfpJZcIixcbiAgXCLwn6SXXCIsXG4gIFwi8J+kmPCfj7tcIixcbiAgXCLwn6SY8J+PvFwiLFxuICBcIvCfpJjwn4+9XCIsXG4gIFwi8J+kmPCfj75cIixcbiAgXCLwn6SY8J+Pv1wiLFxuICBcIvCfpJhcIixcbiAgXCLwn6SZ8J+Pu1wiLFxuICBcIvCfpJnwn4+8XCIsXG4gIFwi8J+kmfCfj71cIixcbiAgXCLwn6SZ8J+PvlwiLFxuICBcIvCfpJnwn4+/XCIsXG4gIFwi8J+kmVwiLFxuICBcIvCfpJrwn4+7XCIsXG4gIFwi8J+kmvCfj7xcIixcbiAgXCLwn6Sa8J+PvVwiLFxuICBcIvCfpJrwn4++XCIsXG4gIFwi8J+kmvCfj79cIixcbiAgXCLwn6SaXCIsXG4gIFwi8J+km/Cfj7tcIixcbiAgXCLwn6Sb8J+PvFwiLFxuICBcIvCfpJvwn4+9XCIsXG4gIFwi8J+km/Cfj75cIixcbiAgXCLwn6Sb8J+Pv1wiLFxuICBcIvCfpJtcIixcbiAgXCLwn6Sc8J+Pu1wiLFxuICBcIvCfpJzwn4+8XCIsXG4gIFwi8J+knPCfj71cIixcbiAgXCLwn6Sc8J+PvlwiLFxuICBcIvCfpJzwn4+/XCIsXG4gIFwi8J+knFwiLFxuICBcIvCfpJ3wn4+7XCIsXG4gIFwi8J+knfCfj7xcIixcbiAgXCLwn6Sd8J+PvVwiLFxuICBcIvCfpJ3wn4++XCIsXG4gIFwi8J+knfCfj79cIixcbiAgXCLwn6SdXCIsXG4gIFwi8J+knvCfj7tcIixcbiAgXCLwn6Se8J+PvFwiLFxuICBcIvCfpJ7wn4+9XCIsXG4gIFwi8J+knvCfj75cIixcbiAgXCLwn6Se8J+Pv1wiLFxuICBcIvCfpJ5cIixcbiAgXCLwn6SgXCIsXG4gIFwi8J+koVwiLFxuICBcIvCfpKJcIixcbiAgXCLwn6SjXCIsXG4gIFwi8J+kpFwiLFxuICBcIvCfpKVcIixcbiAgXCLwn6Sm8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfpKbwn4+74oCN4pmC77iPXCIsXG4gIFwi8J+kpvCfj7tcIixcbiAgXCLwn6Sm8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfpKbwn4+84oCN4pmC77iPXCIsXG4gIFwi8J+kpvCfj7xcIixcbiAgXCLwn6Sm8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfpKbwn4+94oCN4pmC77iPXCIsXG4gIFwi8J+kpvCfj71cIixcbiAgXCLwn6Sm8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfpKbwn4++4oCN4pmC77iPXCIsXG4gIFwi8J+kpvCfj75cIixcbiAgXCLwn6Sm8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfpKbwn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+kpvCfj79cIixcbiAgXCLwn6Sm4oCN4pmA77iPXCIsXG4gIFwi8J+kpuKAjeKZgu+4j1wiLFxuICBcIvCfpKZcIixcbiAgXCLwn6SnXCIsXG4gIFwi8J+ksPCfj7tcIixcbiAgXCLwn6Sw8J+PvFwiLFxuICBcIvCfpLDwn4+9XCIsXG4gIFwi8J+ksPCfj75cIixcbiAgXCLwn6Sw8J+Pv1wiLFxuICBcIvCfpLBcIixcbiAgXCLwn6Sz8J+Pu1wiLFxuICBcIvCfpLPwn4+8XCIsXG4gIFwi8J+ks/Cfj71cIixcbiAgXCLwn6Sz8J+PvlwiLFxuICBcIvCfpLPwn4+/XCIsXG4gIFwi8J+ks1wiLFxuICBcIvCfpLTwn4+7XCIsXG4gIFwi8J+ktPCfj7xcIixcbiAgXCLwn6S08J+PvVwiLFxuICBcIvCfpLTwn4++XCIsXG4gIFwi8J+ktPCfj79cIixcbiAgXCLwn6S0XCIsXG4gIFwi8J+ktfCfj7tcIixcbiAgXCLwn6S18J+PvFwiLFxuICBcIvCfpLXwn4+9XCIsXG4gIFwi8J+ktfCfj75cIixcbiAgXCLwn6S18J+Pv1wiLFxuICBcIvCfpLVcIixcbiAgXCLwn6S28J+Pu1wiLFxuICBcIvCfpLbwn4+8XCIsXG4gIFwi8J+ktvCfj71cIixcbiAgXCLwn6S28J+PvlwiLFxuICBcIvCfpLbwn4+/XCIsXG4gIFwi8J+ktlwiLFxuICBcIvCfpLfwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+kt/Cfj7vigI3imYLvuI9cIixcbiAgXCLwn6S38J+Pu1wiLFxuICBcIvCfpLfwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+kt/Cfj7zigI3imYLvuI9cIixcbiAgXCLwn6S38J+PvFwiLFxuICBcIvCfpLfwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+kt/Cfj73igI3imYLvuI9cIixcbiAgXCLwn6S38J+PvVwiLFxuICBcIvCfpLfwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+kt/Cfj77igI3imYLvuI9cIixcbiAgXCLwn6S38J+PvlwiLFxuICBcIvCfpLfwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+kt/Cfj7/igI3imYLvuI9cIixcbiAgXCLwn6S38J+Pv1wiLFxuICBcIvCfpLfigI3imYDvuI9cIixcbiAgXCLwn6S34oCN4pmC77iPXCIsXG4gIFwi8J+kt1wiLFxuICBcIvCfpLjwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+kuPCfj7vigI3imYLvuI9cIixcbiAgXCLwn6S48J+Pu1wiLFxuICBcIvCfpLjwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+kuPCfj7zigI3imYLvuI9cIixcbiAgXCLwn6S48J+PvFwiLFxuICBcIvCfpLjwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+kuPCfj73igI3imYLvuI9cIixcbiAgXCLwn6S48J+PvVwiLFxuICBcIvCfpLjwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+kuPCfj77igI3imYLvuI9cIixcbiAgXCLwn6S48J+PvlwiLFxuICBcIvCfpLjwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+kuPCfj7/igI3imYLvuI9cIixcbiAgXCLwn6S48J+Pv1wiLFxuICBcIvCfpLjigI3imYDvuI9cIixcbiAgXCLwn6S44oCN4pmC77iPXCIsXG4gIFwi8J+kuFwiLFxuICBcIvCfpLnwn4+74oCN4pmA77iPXCIsXG4gIFwi8J+kufCfj7vigI3imYLvuI9cIixcbiAgXCLwn6S58J+Pu1wiLFxuICBcIvCfpLnwn4+84oCN4pmA77iPXCIsXG4gIFwi8J+kufCfj7zigI3imYLvuI9cIixcbiAgXCLwn6S58J+PvFwiLFxuICBcIvCfpLnwn4+94oCN4pmA77iPXCIsXG4gIFwi8J+kufCfj73igI3imYLvuI9cIixcbiAgXCLwn6S58J+PvVwiLFxuICBcIvCfpLnwn4++4oCN4pmA77iPXCIsXG4gIFwi8J+kufCfj77igI3imYLvuI9cIixcbiAgXCLwn6S58J+PvlwiLFxuICBcIvCfpLnwn4+/4oCN4pmA77iPXCIsXG4gIFwi8J+kufCfj7/igI3imYLvuI9cIixcbiAgXCLwn6S58J+Pv1wiLFxuICBcIvCfpLnigI3imYDvuI9cIixcbiAgXCLwn6S54oCN4pmC77iPXCIsXG4gIFwi8J+kuVwiLFxuICBcIvCfpLpcIixcbiAgXCLwn6S88J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfpLzwn4+74oCN4pmC77iPXCIsXG4gIFwi8J+kvPCfj7tcIixcbiAgXCLwn6S88J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfpLzwn4+84oCN4pmC77iPXCIsXG4gIFwi8J+kvPCfj7xcIixcbiAgXCLwn6S88J+PveKAjeKZgO+4j1wiLFxuICBcIvCfpLzwn4+94oCN4pmC77iPXCIsXG4gIFwi8J+kvPCfj71cIixcbiAgXCLwn6S88J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfpLzwn4++4oCN4pmC77iPXCIsXG4gIFwi8J+kvPCfj75cIixcbiAgXCLwn6S88J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfpLzwn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+kvPCfj79cIixcbiAgXCLwn6S84oCN4pmA77iPXCIsXG4gIFwi8J+kvOKAjeKZgu+4j1wiLFxuICBcIvCfpLxcIixcbiAgXCLwn6S98J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfpL3wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+kvfCfj7tcIixcbiAgXCLwn6S98J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfpL3wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+kvfCfj7xcIixcbiAgXCLwn6S98J+PveKAjeKZgO+4j1wiLFxuICBcIvCfpL3wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+kvfCfj71cIixcbiAgXCLwn6S98J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfpL3wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+kvfCfj75cIixcbiAgXCLwn6S98J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfpL3wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+kvfCfj79cIixcbiAgXCLwn6S94oCN4pmA77iPXCIsXG4gIFwi8J+kveKAjeKZgu+4j1wiLFxuICBcIvCfpL1cIixcbiAgXCLwn6S+8J+Pu+KAjeKZgO+4j1wiLFxuICBcIvCfpL7wn4+74oCN4pmC77iPXCIsXG4gIFwi8J+kvvCfj7tcIixcbiAgXCLwn6S+8J+PvOKAjeKZgO+4j1wiLFxuICBcIvCfpL7wn4+84oCN4pmC77iPXCIsXG4gIFwi8J+kvvCfj7xcIixcbiAgXCLwn6S+8J+PveKAjeKZgO+4j1wiLFxuICBcIvCfpL7wn4+94oCN4pmC77iPXCIsXG4gIFwi8J+kvvCfj71cIixcbiAgXCLwn6S+8J+PvuKAjeKZgO+4j1wiLFxuICBcIvCfpL7wn4++4oCN4pmC77iPXCIsXG4gIFwi8J+kvvCfj75cIixcbiAgXCLwn6S+8J+Pv+KAjeKZgO+4j1wiLFxuICBcIvCfpL7wn4+/4oCN4pmC77iPXCIsXG4gIFwi8J+kvvCfj79cIixcbiAgXCLwn6S+4oCN4pmA77iPXCIsXG4gIFwi8J+kvuKAjeKZgu+4j1wiLFxuICBcIvCfpL5cIixcbiAgXCLwn6WAXCIsXG4gIFwi8J+lgVwiLFxuICBcIvCfpYJcIixcbiAgXCLwn6WDXCIsXG4gIFwi8J+lhFwiLFxuICBcIvCfpYVcIixcbiAgXCLwn6WHXCIsXG4gIFwi8J+liFwiLFxuICBcIvCfpYlcIixcbiAgXCLwn6WKXCIsXG4gIFwi8J+li1wiLFxuICBcIvCfpZBcIixcbiAgXCLwn6WRXCIsXG4gIFwi8J+lklwiLFxuICBcIvCfpZNcIixcbiAgXCLwn6WUXCIsXG4gIFwi8J+llVwiLFxuICBcIvCfpZZcIixcbiAgXCLwn6WXXCIsXG4gIFwi8J+lmFwiLFxuICBcIvCfpZlcIixcbiAgXCLwn6WaXCIsXG4gIFwi8J+lm1wiLFxuICBcIvCfpZxcIixcbiAgXCLwn6WdXCIsXG4gIFwi8J+lnlwiLFxuICBcIvCfpoBcIixcbiAgXCLwn6aBXCIsXG4gIFwi8J+mglwiLFxuICBcIvCfpoNcIixcbiAgXCLwn6aEXCIsXG4gIFwi8J+mhVwiLFxuICBcIvCfpoZcIixcbiAgXCLwn6aHXCIsXG4gIFwi8J+miFwiLFxuICBcIvCfpolcIixcbiAgXCLwn6aKXCIsXG4gIFwi8J+mi1wiLFxuICBcIvCfpoxcIixcbiAgXCLwn6aNXCIsXG4gIFwi8J+mjlwiLFxuICBcIvCfpo9cIixcbiAgXCLwn6aQXCIsXG4gIFwi8J+mkVwiLFxuICBcIvCfp4BcIixcbiAgXCLigLxcIixcbiAgXCLigYlcIixcbiAgXCLihKJcIixcbiAgXCLihLlcIixcbiAgXCLihpRcIixcbiAgXCLihpVcIixcbiAgXCLihpZcIixcbiAgXCLihpdcIixcbiAgXCLihphcIixcbiAgXCLihplcIixcbiAgXCLihqlcIixcbiAgXCLihqpcIixcbiAgXCIj4oOjXCIsXG4gIFwi4oyaXCIsXG4gIFwi4oybXCIsXG4gIFwi4oyoXCIsXG4gIFwi4o+PXCIsXG4gIFwi4o+pXCIsXG4gIFwi4o+qXCIsXG4gIFwi4o+rXCIsXG4gIFwi4o+sXCIsXG4gIFwi4o+tXCIsXG4gIFwi4o+uXCIsXG4gIFwi4o+vXCIsXG4gIFwi4o+wXCIsXG4gIFwi4o+xXCIsXG4gIFwi4o+yXCIsXG4gIFwi4o+zXCIsXG4gIFwi4o+4XCIsXG4gIFwi4o+5XCIsXG4gIFwi4o+6XCIsXG4gIFwi4pOCXCIsXG4gIFwi4paqXCIsXG4gIFwi4parXCIsXG4gIFwi4pa2XCIsXG4gIFwi4peAXCIsXG4gIFwi4pe7XCIsXG4gIFwi4pe8XCIsXG4gIFwi4pe9XCIsXG4gIFwi4pe+XCIsXG4gIFwi4piAXCIsXG4gIFwi4piBXCIsXG4gIFwi4piCXCIsXG4gIFwi4piDXCIsXG4gIFwi4piEXCIsXG4gIFwi4piOXCIsXG4gIFwi4piRXCIsXG4gIFwi4piUXCIsXG4gIFwi4piVXCIsXG4gIFwi4piYXCIsXG4gIFwi4pid8J+Pu1wiLFxuICBcIuKYnfCfj7xcIixcbiAgXCLimJ3wn4+9XCIsXG4gIFwi4pid8J+PvlwiLFxuICBcIuKYnfCfj79cIixcbiAgXCLimJ1cIixcbiAgXCLimKBcIixcbiAgXCLimKJcIixcbiAgXCLimKNcIixcbiAgXCLimKZcIixcbiAgXCLimKpcIixcbiAgXCLimK5cIixcbiAgXCLimK9cIixcbiAgXCLimLhcIixcbiAgXCLimLlcIixcbiAgXCLimLpcIixcbiAgXCLimYBcIixcbiAgXCLimYJcIixcbiAgXCLimYhcIixcbiAgXCLimYlcIixcbiAgXCLimYpcIixcbiAgXCLimYtcIixcbiAgXCLimYxcIixcbiAgXCLimY1cIixcbiAgXCLimY5cIixcbiAgXCLimY9cIixcbiAgXCLimZBcIixcbiAgXCLimZFcIixcbiAgXCLimZJcIixcbiAgXCLimZNcIixcbiAgXCLimaBcIixcbiAgXCLimaNcIixcbiAgXCLimaVcIixcbiAgXCLimaZcIixcbiAgXCLimahcIixcbiAgXCLimbtcIixcbiAgXCLimb9cIixcbiAgXCLimpJcIixcbiAgXCLimpNcIixcbiAgXCLimpRcIixcbiAgXCLimpVcIixcbiAgXCLimpZcIixcbiAgXCLimpdcIixcbiAgXCLimplcIixcbiAgXCLimptcIixcbiAgXCLimpxcIixcbiAgXCLimqBcIixcbiAgXCLimqFcIixcbiAgXCLimqpcIixcbiAgXCLimqtcIixcbiAgXCLimrBcIixcbiAgXCLimrFcIixcbiAgXCLimr1cIixcbiAgXCLimr5cIixcbiAgXCLim4RcIixcbiAgXCLim4VcIixcbiAgXCLim4hcIixcbiAgXCLim45cIixcbiAgXCLim49cIixcbiAgXCLim5FcIixcbiAgXCLim5NcIixcbiAgXCLim5RcIixcbiAgXCLim6lcIixcbiAgXCLim6pcIixcbiAgXCLim7BcIixcbiAgXCLim7FcIixcbiAgXCLim7JcIixcbiAgXCLim7NcIixcbiAgXCLim7RcIixcbiAgXCLim7VcIixcbiAgXCLim7fwn4+7XCIsXG4gIFwi4pu38J+PvFwiLFxuICBcIuKbt/Cfj71cIixcbiAgXCLim7fwn4++XCIsXG4gIFwi4pu38J+Pv1wiLFxuICBcIuKbt1wiLFxuICBcIuKbuFwiLFxuICBcIuKbufCfj7vigI3imYDvuI9cIixcbiAgXCLim7nwn4+74oCN4pmC77iPXCIsXG4gIFwi4pu58J+Pu1wiLFxuICBcIuKbufCfj7zigI3imYDvuI9cIixcbiAgXCLim7nwn4+84oCN4pmC77iPXCIsXG4gIFwi4pu58J+PvFwiLFxuICBcIuKbufCfj73igI3imYDvuI9cIixcbiAgXCLim7nwn4+94oCN4pmC77iPXCIsXG4gIFwi4pu58J+PvVwiLFxuICBcIuKbufCfj77igI3imYDvuI9cIixcbiAgXCLim7nwn4++4oCN4pmC77iPXCIsXG4gIFwi4pu58J+PvlwiLFxuICBcIuKbufCfj7/igI3imYDvuI9cIixcbiAgXCLim7nwn4+/4oCN4pmC77iPXCIsXG4gIFwi4pu58J+Pv1wiLFxuICBcIuKbue+4j+KAjeKZgO+4j1wiLFxuICBcIuKbue+4j+KAjeKZgu+4j1wiLFxuICBcIuKbuVwiLFxuICBcIuKbulwiLFxuICBcIuKbvVwiLFxuICBcIuKcglwiLFxuICBcIuKchVwiLFxuICBcIuKciFwiLFxuICBcIuKciVwiLFxuICBcIuKcivCfj7tcIixcbiAgXCLinIrwn4+8XCIsXG4gIFwi4pyK8J+PvVwiLFxuICBcIuKcivCfj75cIixcbiAgXCLinIrwn4+/XCIsXG4gIFwi4pyKXCIsXG4gIFwi4pyL8J+Pu1wiLFxuICBcIuKci/Cfj7xcIixcbiAgXCLinIvwn4+9XCIsXG4gIFwi4pyL8J+PvlwiLFxuICBcIuKci/Cfj79cIixcbiAgXCLinItcIixcbiAgXCLinIzwn4+7XCIsXG4gIFwi4pyM8J+PvFwiLFxuICBcIuKcjPCfj71cIixcbiAgXCLinIzwn4++XCIsXG4gIFwi4pyM8J+Pv1wiLFxuICBcIuKcjFwiLFxuICBcIuKcjfCfj7tcIixcbiAgXCLinI3wn4+8XCIsXG4gIFwi4pyN8J+PvVwiLFxuICBcIuKcjfCfj75cIixcbiAgXCLinI3wn4+/XCIsXG4gIFwi4pyNXCIsXG4gIFwi4pyPXCIsXG4gIFwi4pySXCIsXG4gIFwi4pyUXCIsXG4gIFwi4pyWXCIsXG4gIFwi4pydXCIsXG4gIFwi4pyhXCIsXG4gIFwi4pyoXCIsXG4gIFwi4pyzXCIsXG4gIFwi4py0XCIsXG4gIFwi4p2EXCIsXG4gIFwi4p2HXCIsXG4gIFwi4p2MXCIsXG4gIFwi4p2OXCIsXG4gIFwi4p2TXCIsXG4gIFwi4p2UXCIsXG4gIFwi4p2VXCIsXG4gIFwi4p2XXCIsXG4gIFwi4p2jXCIsXG4gIFwi4p2kXCIsXG4gIFwi4p6VXCIsXG4gIFwi4p6WXCIsXG4gIFwi4p6XXCIsXG4gIFwi4p6hXCIsXG4gIFwi4p6wXCIsXG4gIFwi4p6/XCIsXG4gIFwi4qS0XCIsXG4gIFwi4qS1XCIsXG4gIFwiKuKDo1wiLFxuICBcIuKshVwiLFxuICBcIuKshlwiLFxuICBcIuKsh1wiLFxuICBcIuKsm1wiLFxuICBcIuKsnFwiLFxuICBcIuKtkFwiLFxuICBcIuKtlVwiLFxuICBcIjDig6NcIixcbiAgXCLjgLBcIixcbiAgXCLjgL1cIixcbiAgXCIx4oOjXCIsXG4gIFwiMuKDo1wiLFxuICBcIuOKl1wiLFxuICBcIuOKmVwiLFxuICBcIjPig6NcIixcbiAgXCI04oOjXCIsXG4gIFwiNeKDo1wiLFxuICBcIjbig6NcIixcbiAgXCI34oOjXCIsXG4gIFwiOOKDo1wiLFxuICBcIjnig6NcIixcbiAgXCLCqVwiLFxuICBcIsKuXCIsXG4gIFwi7pSKXCJcbl0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5Qml0cywgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgaWYgKHNhbHQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKVxuICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGtleUxlbiA9IGtleUJpdHMgLyA4XG4gIHZhciBrZXkgPSBCdWZmZXIuYWxsb2Moa2V5TGVuKVxuICB2YXIgaXYgPSBCdWZmZXIuYWxsb2MoaXZMZW4gfHwgMClcbiAgdmFyIHRtcCA9IEJ1ZmZlci5hbGxvYygwKVxuXG4gIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkge1xuICAgIHZhciBoYXNoID0gbmV3IE1ENSgpXG4gICAgaGFzaC51cGRhdGUodG1wKVxuICAgIGhhc2gudXBkYXRlKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSBoYXNoLnVwZGF0ZShzYWx0KVxuICAgIHRtcCA9IGhhc2guZGlnZXN0KClcblxuICAgIHZhciB1c2VkID0gMFxuXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHZhciBrZXlTdGFydCA9IGtleS5sZW5ndGggLSBrZXlMZW5cbiAgICAgIHVzZWQgPSBNYXRoLm1pbihrZXlMZW4sIHRtcC5sZW5ndGgpXG4gICAgICB0bXAuY29weShrZXksIGtleVN0YXJ0LCAwLCB1c2VkKVxuICAgICAga2V5TGVuIC09IHVzZWRcbiAgICB9XG5cbiAgICBpZiAodXNlZCA8IHRtcC5sZW5ndGggJiYgaXZMZW4gPiAwKSB7XG4gICAgICB2YXIgaXZTdGFydCA9IGl2Lmxlbmd0aCAtIGl2TGVuXG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oaXZMZW4sIHRtcC5sZW5ndGggLSB1c2VkKVxuICAgICAgdG1wLmNvcHkoaXYsIGl2U3RhcnQsIHVzZWQsIHVzZWQgKyBsZW5ndGgpXG4gICAgICBpdkxlbiAtPSBsZW5ndGhcbiAgICB9XG4gIH1cblxuICB0bXAuZmlsbCgwKVxuICByZXR1cm4geyBrZXk6IGtleSwgaXY6IGl2IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYXJyQSA9IGlzQXJyYXkoYSlcbiAgICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAgICwgaVxuICAgICAgLCBsZW5ndGhcbiAgICAgICwga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICwgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhIT09YSAmJiBiIT09Yjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRhdGEsIG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIG9wdHMgPSB7IGNtcDogb3B0cyB9O1xuICAgIHZhciBjeWNsZXMgPSAodHlwZW9mIG9wdHMuY3ljbGVzID09PSAnYm9vbGVhbicpID8gb3B0cy5jeWNsZXMgOiBmYWxzZTtcblxuICAgIHZhciBjbXAgPSBvcHRzLmNtcCAmJiAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW9iaiA9IHsga2V5OiBhLCB2YWx1ZTogbm9kZVthXSB9O1xuICAgICAgICAgICAgICAgIHZhciBib2JqID0geyBrZXk6IGIsIHZhbHVlOiBub2RlW2JdIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYW9iaiwgYm9iaik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pKG9wdHMuY21wKTtcblxuICAgIHZhciBzZWVuID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdHJpbmdpZnkgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS50b0pTT04gJiYgdHlwZW9mIG5vZGUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS50b0pTT04oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlID09ICdudW1iZXInKSByZXR1cm4gaXNGaW5pdGUobm9kZSkgPyAnJyArIG5vZGUgOiAnbnVsbCc7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHJldHVybiBKU09OLnN0cmluZ2lmeShub2RlKTtcblxuICAgICAgICB2YXIgaSwgb3V0O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgICAgICAgb3V0ID0gJ1snO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSkgb3V0ICs9ICcsJztcbiAgICAgICAgICAgICAgICBvdXQgKz0gc3RyaW5naWZ5KG5vZGVbaV0pIHx8ICdudWxsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQgKyAnXSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcblxuICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKGN5Y2xlcykgcmV0dXJuIEpTT04uc3RyaW5naWZ5KCdfX2N5Y2xlX18nKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT04nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLnB1c2gobm9kZSkgLSAxO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5vZGUpLnNvcnQoY21wICYmIGNtcChub2RlKSk7XG4gICAgICAgIG91dCA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHJpbmdpZnkobm9kZVtrZXldKTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAob3V0KSBvdXQgKz0gJywnO1xuICAgICAgICAgICAgb3V0ICs9IEpTT04uc3RyaW5naWZ5KGtleSkgKyAnOicgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZWVuLnNwbGljZShzZWVuSW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gJ3snICsgb3V0ICsgJ30nO1xuICAgIH0pKGRhdGEpO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsInZhciBoYXNoID0gZXhwb3J0cztcblxuaGFzaC51dGlscyA9IHJlcXVpcmUoJy4vaGFzaC91dGlscycpO1xuaGFzaC5jb21tb24gPSByZXF1aXJlKCcuL2hhc2gvY29tbW9uJyk7XG5oYXNoLnNoYSA9IHJlcXVpcmUoJy4vaGFzaC9zaGEnKTtcbmhhc2gucmlwZW1kID0gcmVxdWlyZSgnLi9oYXNoL3JpcGVtZCcpO1xuaGFzaC5obWFjID0gcmVxdWlyZSgnLi9oYXNoL2htYWMnKTtcblxuLy8gUHJveHkgaGFzaCBmdW5jdGlvbnMgdG8gdGhlIG1haW4gb2JqZWN0XG5oYXNoLnNoYTEgPSBoYXNoLnNoYS5zaGExO1xuaGFzaC5zaGEyNTYgPSBoYXNoLnNoYS5zaGEyNTY7XG5oYXNoLnNoYTIyNCA9IGhhc2guc2hhLnNoYTIyNDtcbmhhc2guc2hhMzg0ID0gaGFzaC5zaGEuc2hhMzg0O1xuaGFzaC5zaGE1MTIgPSBoYXNoLnNoYS5zaGE1MTI7XG5oYXNoLnJpcGVtZDE2MCA9IGhhc2gucmlwZW1kLnJpcGVtZDE2MDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWMoaGFzaCwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoLCBrZXksIGVuYyk7XG4gIHRoaXMuSGFzaCA9IGhhc2g7XG4gIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoLm91dFNpemUgLyA4O1xuICB0aGlzLmlubmVyID0gbnVsbDtcbiAgdGhpcy5vdXRlciA9IG51bGw7XG5cbiAgdGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSwgZW5jKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWM7XG5cbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZFxuICBpZiAoa2V5Lmxlbmd0aCA+IHRoaXMuYmxvY2tTaXplKVxuICAgIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTtcbiAgYXNzZXJ0KGtleS5sZW5ndGggPD0gdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIEFkZCBwYWRkaW5nIHRvIGtleVxuICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAga2V5LnB1c2goMCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHg2YTtcbiAgdGhpcy5vdXRlciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbn07XG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICB0aGlzLmlubmVyLnVwZGF0ZShtc2csIGVuYyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGEvMScpO1xuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYS8yMjQnKTtcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEvMjU2Jyk7XG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhLzM4NCcpO1xuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYS81MTInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbiAgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFQxID0gc3VtMzJfNShoLCBzMV8yNTYoZSksIGNoMzIoZSwgZiwgZyksIHRoaXMua1tpXSwgV1tpXSk7XG4gICAgdmFyIFQyID0gc3VtMzIoczBfMjU2KGEpLCBtYWozMihhLCBiLCBjKSk7XG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IHN1bTMyKGQsIFQxKTtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gc3VtMzIoVDEsIFQyKTtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyKHRoaXMuaFs2XSwgZyk7XG4gIHRoaXMuaFs3XSA9IHN1bTMyKHRoaXMuaFs3XSwgaCk7XG59O1xuXG5TSEEyNTYucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgcm90cjY0X2hpID0gdXRpbHMucm90cjY0X2hpO1xudmFyIHJvdHI2NF9sbyA9IHV0aWxzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzLnNocjY0X2hpO1xudmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87XG52YXIgc3VtNjQgPSB1dGlscy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzLnN1bTY0X2hpO1xudmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87XG52YXIgc3VtNjRfNF9oaSA9IHV0aWxzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzLnN1bTY0XzRfbG87XG52YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0XzVfaGk7XG52YXIgc3VtNjRfNV9sbyA9IHV0aWxzLnN1bTY0XzVfbG87XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgsXG4gICAgMHhiYjY3YWU4NSwgMHg4NGNhYTczYixcbiAgICAweDNjNmVmMzcyLCAweGZlOTRmODJiLFxuICAgIDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEsXG4gICAgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSxcbiAgICAweDliMDU2ODhjLCAweDJiM2U2YzFmLFxuICAgIDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIsXG4gICAgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscy5pbmhlcml0cyhTSEE1MTIsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTUxMjtcblxuU0hBNTEyLmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEE1MTIub3V0U2l6ZSA9IDUxMjtcblNIQTUxMi5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2sgPSBmdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgLy8gMzIgeCAzMmJpdCB3b3Jkc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgIC8vIGkgLSAyXG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdOyAgLy8gaSAtIDdcbiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107XG4gICAgdmFyIGMyX2hpID0gZzBfNTEyX2hpKFdbaSAtIDMwXSwgV1tpIC0gMjldKTsgIC8vIGkgLSAxNVxuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAgLy8gaSAtIDE2XG4gICAgdmFyIGMzX2xvID0gV1tpIC0gMzFdO1xuXG4gICAgV1tpXSA9IHN1bTY0XzRfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoeGggJiB6aCkgXiAoeWggJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICh4bCAmIHpsKSBeICh5bCAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5leHBvcnRzLmZ0XzEgPSBmdF8xO1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuZXhwb3J0cy5jaDMyID0gY2gzMjtcblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuZXhwb3J0cy5tYWozMiA9IG1hajMyO1xuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuZXhwb3J0cy5wMzIgPSBwMzI7XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cbmV4cG9ydHMuczBfMjU2ID0gczBfMjU2O1xuXG5mdW5jdGlvbiBzMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDYpIF4gcm90cjMyKHgsIDExKSBeIHJvdHIzMih4LCAyNSk7XG59XG5leHBvcnRzLnMxXzI1NiA9IHMxXzI1NjtcblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5leHBvcnRzLmcwXzI1NiA9IGcwXzI1NjtcblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cbmV4cG9ydHMuZzFfMjU2ID0gZzFfMjU2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5pbmhlcml0cyA9IGluaGVyaXRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFlbmMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICAgIGlmIChoaSlcbiAgICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXggPSB0b0hleDtcblxuZnVuY3Rpb24gaHRvbmwodykge1xuICB2YXIgcmVzID0gKHcgPj4+IDI0KSB8XG4gICAgICAgICAgICAoKHcgPj4+IDgpICYgMHhmZjAwKSB8XG4gICAgICAgICAgICAoKHcgPDwgOCkgJiAweGZmMDAwMCkgfFxuICAgICAgICAgICAgKCh3ICYgMHhmZikgPDwgMjQpO1xuICByZXR1cm4gcmVzID4+PiAwO1xufVxuZXhwb3J0cy5odG9ubCA9IGh0b25sO1xuXG5mdW5jdGlvbiB0b0hleDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdyA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnbGl0dGxlJylcbiAgICAgIHcgPSBodG9ubCh3KTtcbiAgICByZXMgKz0gemVybzgody50b1N0cmluZygxNikpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4MzIgPSB0b0hleDMyO1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB6ZXJvOCh3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gNylcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDYpXG4gICAgcmV0dXJuICcwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNSlcbiAgICByZXR1cm4gJzAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNClcbiAgICByZXR1cm4gJzAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDMpXG4gICAgcmV0dXJuICcwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMilcbiAgICByZXR1cm4gJzAwMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAwMDAwMDAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxuZXhwb3J0cy56ZXJvOCA9IHplcm84O1xuXG5mdW5jdGlvbiBqb2luMzIobXNnLCBzdGFydCwgZW5kLCBlbmRpYW4pIHtcbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0O1xuICBhc3NlcnQobGVuICUgNCA9PT0gMCk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuIC8gNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gc3RhcnQ7IGkgPCByZXMubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciB3O1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKVxuICAgICAgdyA9IChtc2dba10gPDwgMjQpIHwgKG1zZ1trICsgMV0gPDwgMTYpIHwgKG1zZ1trICsgMl0gPDwgOCkgfCBtc2dbayArIDNdO1xuICAgIGVsc2VcbiAgICAgIHcgPSAobXNnW2sgKyAzXSA8PCAyNCkgfCAobXNnW2sgKyAyXSA8PCAxNikgfCAobXNnW2sgKyAxXSA8PCA4KSB8IG1zZ1trXTtcbiAgICByZXNbaV0gPSB3ID4+PiAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLmpvaW4zMiA9IGpvaW4zMjtcblxuZnVuY3Rpb24gc3BsaXQzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gbmV3IEFycmF5KG1zZy5sZW5ndGggKiA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgbSA9IG1zZ1tpXTtcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJykge1xuICAgICAgcmVzW2tdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trICsgM10gPSBtICYgMHhmZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2sgKyAzXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNba10gPSBtICYgMHhmZjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuc3BsaXQzMiA9IHNwbGl0MzI7XG5cbmZ1bmN0aW9uIHJvdHIzMih3LCBiKSB7XG4gIHJldHVybiAodyA+Pj4gYikgfCAodyA8PCAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdHIzMiA9IHJvdHIzMjtcblxuZnVuY3Rpb24gcm90bDMyKHcsIGIpIHtcbiAgcmV0dXJuICh3IDw8IGIpIHwgKHcgPj4+ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90bDMyID0gcm90bDMyO1xuXG5mdW5jdGlvbiBzdW0zMihhLCBiKSB7XG4gIHJldHVybiAoYSArIGIpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMiA9IHN1bTMyO1xuXG5mdW5jdGlvbiBzdW0zMl8zKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhICsgYiArIGMpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl8zID0gc3VtMzJfMztcblxuZnVuY3Rpb24gc3VtMzJfNChhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzQgPSBzdW0zMl80O1xuXG5mdW5jdGlvbiBzdW0zMl81KGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkICsgZSkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzUgPSBzdW0zMl81O1xuXG5mdW5jdGlvbiBzdW02NChidWYsIHBvcywgYWgsIGFsKSB7XG4gIHZhciBiaCA9IGJ1Zltwb3NdO1xuICB2YXIgYmwgPSBidWZbcG9zICsgMV07XG5cbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIGJ1Zltwb3NdID0gaGkgPj4+IDA7XG4gIGJ1Zltwb3MgKyAxXSA9IGxvO1xufVxuZXhwb3J0cy5zdW02NCA9IHN1bTY0O1xuXG5mdW5jdGlvbiBzdW02NF9oaShhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9oaSA9IHN1bTY0X2hpO1xuXG5mdW5jdGlvbiBzdW02NF9sbyhhaCwgYWwsIGJoLCBibCkge1xuICB2YXIgbG8gPSBhbCArIGJsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2xvID0gc3VtNjRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9oaSA9IHN1bTY0XzRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsO1xuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfbG8gPSBzdW02NF80X2xvO1xuXG5mdW5jdGlvbiBzdW02NF81X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBjYXJyeSA9IDA7XG4gIHZhciBsbyA9IGFsO1xuICBsbyA9IChsbyArIGJsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBhbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGNsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBjbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGRsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBkbCA/IDEgOiAwO1xuICBsbyA9IChsbyArIGVsKSA+Pj4gMDtcbiAgY2FycnkgKz0gbG8gPCBlbCA/IDEgOiAwO1xuXG4gIHZhciBoaSA9IGFoICsgYmggKyBjaCArIGRoICsgZWggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2hpID0gc3VtNjRfNV9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNV9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbCArIGVsO1xuXG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9sbyA9IHN1bTY0XzVfbG87XG5cbmZ1bmN0aW9uIHJvdHI2NF9oaShhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhbCA8PCAoMzIgLSBudW0pKSB8IChhaCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9oaSA9IHJvdHI2NF9oaTtcblxuZnVuY3Rpb24gcm90cjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2xvID0gcm90cjY0X2xvO1xuXG5mdW5jdGlvbiBzaHI2NF9oaShhaCwgYWwsIG51bSkge1xuICByZXR1cm4gYWggPj4+IG51bTtcbn1cbmV4cG9ydHMuc2hyNjRfaGkgPSBzaHI2NF9oaTtcblxuZnVuY3Rpb24gc2hyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5zaHI2NF9sbyA9IHNocjY0X2xvO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMuX3Jlc2VlZCA9IG51bGw7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLksgPSBudWxsO1xuICB0aGlzLlYgPSBudWxsO1xuXG4gIHZhciBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShvcHRpb25zLmVudHJvcHksIG9wdGlvbnMuZW50cm9weUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBub25jZSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5ub25jZSwgb3B0aW9ucy5ub25jZUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBwZXJzID0gdXRpbHMudG9BcnJheShvcHRpb25zLnBlcnMsIG9wdGlvbnMucGVyc0VuYyB8fCAnaGV4Jyk7XG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG4gIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjRFJCRztcblxuSG1hY0RSQkcucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChlbnRyb3B5LCBub25jZSwgcGVycykge1xuICB2YXIgc2VlZCA9IGVudHJvcHkuY29uY2F0KG5vbmNlKS5jb25jYXQocGVycyk7XG5cbiAgdGhpcy5LID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIHRoaXMuViA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuVi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuS1tpXSA9IDB4MDA7XG4gICAgdGhpcy5WW2ldID0gMHgwMTtcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZShzZWVkKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShlbnRyb3B5LCBlbnRyb3B5RW5jKTtcbiAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyk7XG5cbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcblxuICB0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkIHx8IFtdKSk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4sIGVuYywgYWRkLCBhZGRFbmMpIHtcbiAgaWYgKHRoaXMuX3Jlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMgfHwgJ2hleCcpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMuX3Jlc2VlZCsrO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyYXZlcnNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2NoZW1hLCBvcHRzLCBjYikge1xuICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdjAuMy4xIGFuZCBlYXJsaWVyLlxuICBpZiAodHlwZW9mIG9wdHMgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICBjYiA9IG9wdHMuY2IgfHwgY2I7XG4gIHZhciBwcmUgPSAodHlwZW9mIGNiID09ICdmdW5jdGlvbicpID8gY2IgOiBjYi5wcmUgfHwgZnVuY3Rpb24oKSB7fTtcbiAgdmFyIHBvc3QgPSBjYi5wb3N0IHx8IGZ1bmN0aW9uKCkge307XG5cbiAgX3RyYXZlcnNlKG9wdHMsIHByZSwgcG9zdCwgc2NoZW1hLCAnJywgc2NoZW1hKTtcbn07XG5cblxudHJhdmVyc2Uua2V5d29yZHMgPSB7XG4gIGFkZGl0aW9uYWxJdGVtczogdHJ1ZSxcbiAgaXRlbXM6IHRydWUsXG4gIGNvbnRhaW5zOiB0cnVlLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogdHJ1ZSxcbiAgcHJvcGVydHlOYW1lczogdHJ1ZSxcbiAgbm90OiB0cnVlXG59O1xuXG50cmF2ZXJzZS5hcnJheUtleXdvcmRzID0ge1xuICBpdGVtczogdHJ1ZSxcbiAgYWxsT2Y6IHRydWUsXG4gIGFueU9mOiB0cnVlLFxuICBvbmVPZjogdHJ1ZVxufTtcblxudHJhdmVyc2UucHJvcHNLZXl3b3JkcyA9IHtcbiAgZGVmaW5pdGlvbnM6IHRydWUsXG4gIHByb3BlcnRpZXM6IHRydWUsXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzOiB0cnVlLFxuICBkZXBlbmRlbmNpZXM6IHRydWVcbn07XG5cbnRyYXZlcnNlLnNraXBLZXl3b3JkcyA9IHtcbiAgZGVmYXVsdDogdHJ1ZSxcbiAgZW51bTogdHJ1ZSxcbiAgY29uc3Q6IHRydWUsXG4gIHJlcXVpcmVkOiB0cnVlLFxuICBtYXhpbXVtOiB0cnVlLFxuICBtaW5pbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNYXhpbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNaW5pbXVtOiB0cnVlLFxuICBtdWx0aXBsZU9mOiB0cnVlLFxuICBtYXhMZW5ndGg6IHRydWUsXG4gIG1pbkxlbmd0aDogdHJ1ZSxcbiAgcGF0dGVybjogdHJ1ZSxcbiAgZm9ybWF0OiB0cnVlLFxuICBtYXhJdGVtczogdHJ1ZSxcbiAgbWluSXRlbXM6IHRydWUsXG4gIHVuaXF1ZUl0ZW1zOiB0cnVlLFxuICBtYXhQcm9wZXJ0aWVzOiB0cnVlLFxuICBtaW5Qcm9wZXJ0aWVzOiB0cnVlXG59O1xuXG5cbmZ1bmN0aW9uIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCkge1xuICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgIHByZShzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIHZhciBzY2ggPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0cmF2ZXJzZS5hcnJheUtleXdvcmRzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNjaC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtpXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2UucHJvcHNLZXl3b3Jkcykge1xuICAgICAgICBpZiAoc2NoICYmIHR5cGVvZiBzY2ggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaClcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtwcm9wXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGVzY2FwZUpzb25QdHIocHJvcCksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2Uua2V5d29yZHMgfHwgKG9wdHMuYWxsS2V5cyAmJiAhKGtleSBpbiB0cmF2ZXJzZS5za2lwS2V5d29yZHMpKSkge1xuICAgICAgICBfdHJhdmVyc2Uob3B0cywgcHJlLCBwb3N0LCBzY2gsIGpzb25QdHIgKyAnLycgKyBrZXksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zdChzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZXNjYXBlSnNvblB0cihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cbiIsIi8vIGpzb241LmpzXG4vLyBNb2Rlcm4gSlNPTi4gU2VlIFJFQURNRS5tZCBmb3IgZGV0YWlscy5cbi8vXG4vLyBUaGlzIGZpbGUgaXMgYmFzZWQgZGlyZWN0bHkgb2ZmIG9mIERvdWdsYXMgQ3JvY2tmb3JkJ3MganNvbl9wYXJzZS5qczpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kb3VnbGFzY3JvY2tmb3JkL0pTT04tanMvYmxvYi9tYXN0ZXIvanNvbl9wYXJzZS5qc1xuXG52YXIgSlNPTjUgPSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHt9KTtcblxuSlNPTjUucGFyc2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdGhhdCBjYW4gcGFyc2UgYSBKU09ONSB0ZXh0LCBwcm9kdWNpbmcgYSBKYXZhU2NyaXB0XG4vLyBkYXRhIHN0cnVjdHVyZS4gSXQgaXMgYSBzaW1wbGUsIHJlY3Vyc2l2ZSBkZXNjZW50IHBhcnNlci4gSXQgZG9lcyBub3QgdXNlXG4vLyBldmFsIG9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIHNvIGl0IGNhbiBiZSB1c2VkIGFzIGEgbW9kZWwgZm9yIGltcGxlbWVudGluZ1xuLy8gYSBKU09ONSBwYXJzZXIgaW4gb3RoZXIgbGFuZ3VhZ2VzLlxuXG4vLyBXZSBhcmUgZGVmaW5pbmcgdGhlIGZ1bmN0aW9uIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uIHRvIGF2b2lkIGNyZWF0aW5nXG4vLyBnbG9iYWwgdmFyaWFibGVzLlxuXG4gICAgdmFyIGF0LCAgICAgICAgICAgLy8gVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IGNoYXJhY3RlclxuICAgICAgICBsaW5lTnVtYmVyLCAgIC8vIFRoZSBjdXJyZW50IGxpbmUgbnVtYmVyXG4gICAgICAgIGNvbHVtbk51bWJlciwgLy8gVGhlIGN1cnJlbnQgY29sdW1uIG51bWJlclxuICAgICAgICBjaCwgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IGNoYXJhY3RlclxuICAgICAgICBlc2NhcGVlID0ge1xuICAgICAgICAgICAgXCInXCI6ICBcIidcIixcbiAgICAgICAgICAgICdcIic6ICAnXCInLFxuICAgICAgICAgICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgICAgICAgICAnLyc6ICAnLycsXG4gICAgICAgICAgICAnXFxuJzogJycsICAgICAgIC8vIFJlcGxhY2UgZXNjYXBlZCBuZXdsaW5lcyBpbiBzdHJpbmdzIHcvIGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgYjogICAgJ1xcYicsXG4gICAgICAgICAgICBmOiAgICAnXFxmJyxcbiAgICAgICAgICAgIG46ICAgICdcXG4nLFxuICAgICAgICAgICAgcjogICAgJ1xccicsXG4gICAgICAgICAgICB0OiAgICAnXFx0J1xuICAgICAgICB9LFxuICAgICAgICB3cyA9IFtcbiAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICdcXHQnLFxuICAgICAgICAgICAgJ1xccicsXG4gICAgICAgICAgICAnXFxuJyxcbiAgICAgICAgICAgICdcXHYnLFxuICAgICAgICAgICAgJ1xcZicsXG4gICAgICAgICAgICAnXFx4QTAnLFxuICAgICAgICAgICAgJ1xcdUZFRkYnXG4gICAgICAgIF0sXG4gICAgICAgIHRleHQsXG5cbiAgICAgICAgcmVuZGVyQ2hhciA9IGZ1bmN0aW9uIChjaHIpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHIgPT09ICcnID8gJ0VPRicgOiBcIidcIiArIGNociArIFwiJ1wiO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVycm9yID0gZnVuY3Rpb24gKG0pIHtcblxuLy8gQ2FsbCBlcnJvciB3aGVuIHNvbWV0aGluZyBpcyB3cm9uZy5cblxuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IFN5bnRheEVycm9yKCk7XG4gICAgICAgICAgICAvLyBiZWdpbm5pbmcgb2YgbWVzc2FnZSBzdWZmaXggdG8gYWdyZWUgd2l0aCB0aGF0IHByb3ZpZGVkIGJ5IEdlY2tvIC0gc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0pTT04vcGFyc2VcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBtICsgXCIgYXQgbGluZSBcIiArIGxpbmVOdW1iZXIgKyBcIiBjb2x1bW4gXCIgKyBjb2x1bW5OdW1iZXIgKyBcIiBvZiB0aGUgSlNPTjUgZGF0YS4gU3RpbGwgdG8gcmVhZDogXCIgKyBKU09OLnN0cmluZ2lmeSh0ZXh0LnN1YnN0cmluZyhhdCAtIDEsIGF0ICsgMTkpKTtcbiAgICAgICAgICAgIGVycm9yLmF0ID0gYXQ7XG4gICAgICAgICAgICAvLyBUaGVzZSB0d28gcHJvcGVydHkgbmFtZXMgaGF2ZSBiZWVuIGNob3NlbiB0byBhZ3JlZSB3aXRoIHRoZSBvbmVzIGluIEdlY2tvLCB0aGUgb25seSBwb3B1bGFyXG4gICAgICAgICAgICAvLyBlbnZpcm9ubWVudCB3aGljaCBzZWVtcyB0byBzdXBwbHkgdGhpcyBpbmZvIG9uIEpTT04ucGFyc2VcbiAgICAgICAgICAgIGVycm9yLmxpbmVOdW1iZXIgPSBsaW5lTnVtYmVyO1xuICAgICAgICAgICAgZXJyb3IuY29sdW1uTnVtYmVyID0gY29sdW1uTnVtYmVyO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIChjKSB7XG5cbi8vIElmIGEgYyBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQsIHZlcmlmeSB0aGF0IGl0IG1hdGNoZXMgdGhlIGN1cnJlbnQgY2hhcmFjdGVyLlxuXG4gICAgICAgICAgICBpZiAoYyAmJiBjICE9PSBjaCkge1xuICAgICAgICAgICAgICAgIGVycm9yKFwiRXhwZWN0ZWQgXCIgKyByZW5kZXJDaGFyKGMpICsgXCIgaW5zdGVhZCBvZiBcIiArIHJlbmRlckNoYXIoY2gpKTtcbiAgICAgICAgICAgIH1cblxuLy8gR2V0IHRoZSBuZXh0IGNoYXJhY3Rlci4gV2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBjaGFyYWN0ZXJzLFxuLy8gcmV0dXJuIHRoZSBlbXB0eSBzdHJpbmcuXG5cbiAgICAgICAgICAgIGNoID0gdGV4dC5jaGFyQXQoYXQpO1xuICAgICAgICAgICAgYXQrKztcbiAgICAgICAgICAgIGNvbHVtbk51bWJlcisrO1xuICAgICAgICAgICAgaWYgKGNoID09PSAnXFxuJyB8fCBjaCA9PT0gJ1xccicgJiYgcGVlaygpICE9PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXIrKztcbiAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBlZWsgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIEdldCB0aGUgbmV4dCBjaGFyYWN0ZXIgd2l0aG91dCBjb25zdW1pbmcgaXQgb3Jcbi8vIGFzc2lnbmluZyBpdCB0byB0aGUgY2ggdmFyYWlibGUuXG5cbiAgICAgICAgICAgIHJldHVybiB0ZXh0LmNoYXJBdChhdCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYW4gaWRlbnRpZmllci4gTm9ybWFsbHksIHJlc2VydmVkIHdvcmRzIGFyZSBkaXNhbGxvd2VkIGhlcmUsIGJ1dCB3ZVxuLy8gb25seSB1c2UgdGhpcyBmb3IgdW5xdW90ZWQgb2JqZWN0IGtleXMsIHdoZXJlIHJlc2VydmVkIHdvcmRzIGFyZSBhbGxvd2VkLFxuLy8gc28gd2UgZG9uJ3QgY2hlY2sgZm9yIHRob3NlIGhlcmUuIFJlZmVyZW5jZXM6XG4vLyAtIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDcuNlxuLy8gLSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X0d1aWRlL0NvcmVfTGFuZ3VhZ2VfRmVhdHVyZXMjVmFyaWFibGVzXG4vLyAtIGh0dHA6Ly9kb2NzdG9yZS5taWsudWEvb3JlbGx5L3dlYnByb2cvanNjcmlwdC9jaDAyXzA3Lmh0bVxuLy8gVE9ETyBJZGVudGlmaWVycyBjYW4gaGF2ZSBVbmljb2RlIFwibGV0dGVyc1wiIGluIHRoZW07IGFkZCBzdXBwb3J0IGZvciB0aG9zZS5cblxuICAgICAgICAgICAgdmFyIGtleSA9IGNoO1xuXG4gICAgICAgICAgICAvLyBJZGVudGlmaWVycyBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIsIF8gb3IgJC5cbiAgICAgICAgICAgIGlmICgoY2ggIT09ICdfJyAmJiBjaCAhPT0gJyQnKSAmJlxuICAgICAgICAgICAgICAgICAgICAoY2ggPCAnYScgfHwgY2ggPiAneicpICYmXG4gICAgICAgICAgICAgICAgICAgIChjaCA8ICdBJyB8fCBjaCA+ICdaJykpIHtcbiAgICAgICAgICAgICAgICBlcnJvcihcIkJhZCBpZGVudGlmaWVyIGFzIHVucXVvdGVkIGtleVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3Vic2VxdWVudCBjaGFyYWN0ZXJzIGNhbiBjb250YWluIGRpZ2l0cy5cbiAgICAgICAgICAgIHdoaWxlIChuZXh0KCkgJiYgKFxuICAgICAgICAgICAgICAgICAgICBjaCA9PT0gJ18nIHx8IGNoID09PSAnJCcgfHxcbiAgICAgICAgICAgICAgICAgICAgKGNoID49ICdhJyAmJiBjaCA8PSAneicpIHx8XG4gICAgICAgICAgICAgICAgICAgIChjaCA+PSAnQScgJiYgY2ggPD0gJ1onKSB8fFxuICAgICAgICAgICAgICAgICAgICAoY2ggPj0gJzAnICYmIGNoIDw9ICc5JykpKSB7XG4gICAgICAgICAgICAgICAga2V5ICs9IGNoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9LFxuXG4gICAgICAgIG51bWJlciA9IGZ1bmN0aW9uICgpIHtcblxuLy8gUGFyc2UgYSBudW1iZXIgdmFsdWUuXG5cbiAgICAgICAgICAgIHZhciBudW1iZXIsXG4gICAgICAgICAgICAgICAgc2lnbiA9ICcnLFxuICAgICAgICAgICAgICAgIHN0cmluZyA9ICcnLFxuICAgICAgICAgICAgICAgIGJhc2UgPSAxMDtcblxuICAgICAgICAgICAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykge1xuICAgICAgICAgICAgICAgIHNpZ24gPSBjaDtcbiAgICAgICAgICAgICAgICBuZXh0KGNoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3VwcG9ydCBmb3IgSW5maW5pdHkgKGNvdWxkIHR3ZWFrIHRvIGFsbG93IG90aGVyIHdvcmRzKTpcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ0knKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gd29yZCgpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtYmVyICE9PSAnbnVtYmVyJyB8fCBpc05hTihudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yKCdVbmV4cGVjdGVkIHdvcmQgZm9yIG51bWJlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKHNpZ24gPT09ICctJykgPyAtbnVtYmVyIDogbnVtYmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzdXBwb3J0IGZvciBOYU5cbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ04nICkge1xuICAgICAgICAgICAgICBudW1iZXIgPSB3b3JkKCk7XG4gICAgICAgICAgICAgIGlmICghaXNOYU4obnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIGVycm9yKCdleHBlY3RlZCB3b3JkIHRvIGJlIE5hTicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGlnbm9yZSBzaWduIGFzIC1OYU4gYWxzbyBpcyBOYU5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ3gnIHx8IGNoID09PSAnWCcpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSAxNjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID49ICcwJyAmJiBjaCA8PSAnOScpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoJ09jdGFsIGxpdGVyYWwnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3aXRjaCAoYmFzZSkge1xuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2ggPj0gJzAnICYmIGNoIDw9ICc5JyApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJy4nKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSAnLic7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0KCkgJiYgY2ggPj0gJzAnICYmIGNoIDw9ICc5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ2UnIHx8IGNoID09PSAnRScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2ggPj0gJzAnICYmIGNoIDw9ICc5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2ggPj0gJzAnICYmIGNoIDw9ICc5JyB8fCBjaCA+PSAnQScgJiYgY2ggPD0gJ0YnIHx8IGNoID49ICdhJyAmJiBjaCA8PSAnZicpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihzaWduID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSAtc3RyaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSArc3RyaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICBlcnJvcihcIkJhZCBudW1iZXJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXG4vLyBQYXJzZSBhIHN0cmluZyB2YWx1ZS5cblxuICAgICAgICAgICAgdmFyIGhleCxcbiAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgIHN0cmluZyA9ICcnLFxuICAgICAgICAgICAgICAgIGRlbGltLCAgICAgIC8vIGRvdWJsZSBxdW90ZSBvciBzaW5nbGUgcXVvdGVcbiAgICAgICAgICAgICAgICB1ZmZmZjtcblxuLy8gV2hlbiBwYXJzaW5nIGZvciBzdHJpbmcgdmFsdWVzLCB3ZSBtdXN0IGxvb2sgZm9yICcgb3IgXCIgYW5kIFxcIGNoYXJhY3RlcnMuXG5cbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gXCInXCIpIHtcbiAgICAgICAgICAgICAgICBkZWxpbSA9IGNoO1xuICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSBkZWxpbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICd1Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVmZmZmID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhleCA9IHBhcnNlSW50KG5leHQoKSwgMTYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmluaXRlKGhleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVmZmZmID0gdWZmZmYgKiAxNiArIGhleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodWZmZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVlaygpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXNjYXBlZVtjaF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGVzY2FwZWVbY2hdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVuZXNjYXBlZCBuZXdsaW5lcyBhcmUgaW52YWxpZDsgc2VlOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FzZWVtay9qc29uNS9pc3N1ZXMvMjRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBmZWVscyBzcGVjaWFsLWNhc2VkOyBhcmUgdGhlcmUgb3RoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWQgdW5lc2NhcGVkIGNoYXJzP1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gY2g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvcihcIkJhZCBzdHJpbmdcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5saW5lQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gU2tpcCBhbiBpbmxpbmUgY29tbWVudCwgYXNzdW1pbmcgdGhpcyBpcyBvbmUuIFRoZSBjdXJyZW50IGNoYXJhY3RlciBzaG91bGRcbi8vIGJlIHRoZSBzZWNvbmQgLyBjaGFyYWN0ZXIgaW4gdGhlIC8vIHBhaXIgdGhhdCBiZWdpbnMgdGhpcyBpbmxpbmUgY29tbWVudC5cbi8vIFRvIGZpbmlzaCB0aGUgaW5saW5lIGNvbW1lbnQsIHdlIGxvb2sgZm9yIGEgbmV3bGluZSBvciB0aGUgZW5kIG9mIHRoZSB0ZXh0LlxuXG4gICAgICAgICAgICBpZiAoY2ggIT09ICcvJykge1xuICAgICAgICAgICAgICAgIGVycm9yKFwiTm90IGFuIGlubGluZSBjb21tZW50XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHInKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGNoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBibG9ja0NvbW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIFNraXAgYSBibG9jayBjb21tZW50LCBhc3N1bWluZyB0aGlzIGlzIG9uZS4gVGhlIGN1cnJlbnQgY2hhcmFjdGVyIHNob3VsZCBiZVxuLy8gdGhlICogY2hhcmFjdGVyIGluIHRoZSAvKiBwYWlyIHRoYXQgYmVnaW5zIHRoaXMgYmxvY2sgY29tbWVudC5cbi8vIFRvIGZpbmlzaCB0aGUgYmxvY2sgY29tbWVudCwgd2UgbG9vayBmb3IgYW4gZW5kaW5nICovIHBhaXIgb2YgY2hhcmFjdGVycyxcbi8vIGJ1dCB3ZSBhbHNvIHdhdGNoIGZvciB0aGUgZW5kIG9mIHRleHQgYmVmb3JlIHRoZSBjb21tZW50IGlzIHRlcm1pbmF0ZWQuXG5cbiAgICAgICAgICAgIGlmIChjaCAhPT0gJyonKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoXCJOb3QgYSBibG9jayBjb21tZW50XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoJyonKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGNoKTtcblxuICAgICAgICAgICAgZXJyb3IoXCJVbnRlcm1pbmF0ZWQgYmxvY2sgY29tbWVudFwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjb21tZW50ID0gZnVuY3Rpb24gKCkge1xuXG4vLyBTa2lwIGEgY29tbWVudCwgd2hldGhlciBpbmxpbmUgb3IgYmxvY2stbGV2ZWwsIGFzc3VtaW5nIHRoaXMgaXMgb25lLlxuLy8gQ29tbWVudHMgYWx3YXlzIGJlZ2luIHdpdGggYSAvIGNoYXJhY3Rlci5cblxuICAgICAgICAgICAgaWYgKGNoICE9PSAnLycpIHtcbiAgICAgICAgICAgICAgICBlcnJvcihcIk5vdCBhIGNvbW1lbnRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5leHQoJy8nKTtcblxuICAgICAgICAgICAgaWYgKGNoID09PSAnLycpIHtcbiAgICAgICAgICAgICAgICBpbmxpbmVDb21tZW50KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09PSAnKicpIHtcbiAgICAgICAgICAgICAgICBibG9ja0NvbW1lbnQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoXCJVbnJlY29nbml6ZWQgY29tbWVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB3aGl0ZSA9IGZ1bmN0aW9uICgpIHtcblxuLy8gU2tpcCB3aGl0ZXNwYWNlIGFuZCBjb21tZW50cy5cbi8vIE5vdGUgdGhhdCB3ZSdyZSBkZXRlY3RpbmcgY29tbWVudHMgYnkgb25seSBhIHNpbmdsZSAvIGNoYXJhY3Rlci5cbi8vIFRoaXMgd29ya3Mgc2luY2UgcmVndWxhciBleHByZXNzaW9ucyBhcmUgbm90IHZhbGlkIEpTT04oNSksIGJ1dCB0aGlzIHdpbGxcbi8vIGJyZWFrIGlmIHRoZXJlIGFyZSBvdGhlciB2YWxpZCB2YWx1ZXMgdGhhdCBiZWdpbiB3aXRoIGEgLyBjaGFyYWN0ZXIhXG5cbiAgICAgICAgICAgIHdoaWxlIChjaCkge1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdzLmluZGV4T2YoY2gpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgd29yZCA9IGZ1bmN0aW9uICgpIHtcblxuLy8gdHJ1ZSwgZmFsc2UsIG9yIG51bGwuXG5cbiAgICAgICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgIG5leHQoJ3QnKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdyJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgndScpO1xuICAgICAgICAgICAgICAgIG5leHQoJ2UnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgIG5leHQoJ2YnKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdhJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgnbCcpO1xuICAgICAgICAgICAgICAgIG5leHQoJ3MnKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgbmV4dCgnbicpO1xuICAgICAgICAgICAgICAgIG5leHQoJ3UnKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdsJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgnbCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY2FzZSAnSSc6XG4gICAgICAgICAgICAgICAgbmV4dCgnSScpO1xuICAgICAgICAgICAgICAgIG5leHQoJ24nKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdmJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgnaScpO1xuICAgICAgICAgICAgICAgIG5leHQoJ24nKTtcbiAgICAgICAgICAgICAgICBuZXh0KCdpJyk7XG4gICAgICAgICAgICAgICAgbmV4dCgndCcpO1xuICAgICAgICAgICAgICAgIG5leHQoJ3knKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAgICAgbmV4dCggJ04nICk7XG4gICAgICAgICAgICAgIG5leHQoICdhJyApO1xuICAgICAgICAgICAgICBuZXh0KCAnTicgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVycm9yKFwiVW5leHBlY3RlZCBcIiArIHJlbmRlckNoYXIoY2gpKTtcbiAgICAgICAgfSxcblxuICAgICAgICB2YWx1ZSwgIC8vIFBsYWNlIGhvbGRlciBmb3IgdGhlIHZhbHVlIGZ1bmN0aW9uLlxuXG4gICAgICAgIGFycmF5ID0gZnVuY3Rpb24gKCkge1xuXG4vLyBQYXJzZSBhbiBhcnJheSB2YWx1ZS5cblxuICAgICAgICAgICAgdmFyIGFycmF5ID0gW107XG5cbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1snKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgnWycpO1xuICAgICAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ10nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCddJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7ICAgLy8gUG90ZW50aWFsbHkgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBFUzUgYWxsb3dzIG9taXR0aW5nIGVsZW1lbnRzIGluIGFycmF5cywgZS5nLiBbLF0gYW5kXG4gICAgICAgICAgICAgICAgICAgIC8vIFssbnVsbF0uIFdlIGRvbid0IGFsbG93IHRoaXMgaW4gSlNPTjUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJywnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihcIk1pc3NpbmcgYXJyYXkgZWxlbWVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBjb21tYSBhZnRlciB0aGlzIHZhbHVlLCB0aGlzIG5lZWRzIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlIHRoZSBlbmQgb2YgdGhlIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT09ICcsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgnXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvcihcIkJhZCBhcnJheVwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvYmplY3QgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIFBhcnNlIGFuIG9iamVjdCB2YWx1ZS5cblxuICAgICAgICAgICAgdmFyIGtleSxcbiAgICAgICAgICAgICAgICBvYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgaWYgKGNoID09PSAneycpIHtcbiAgICAgICAgICAgICAgICBuZXh0KCd7Jyk7XG4gICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnfScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoJ30nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7ICAgLy8gUG90ZW50aWFsbHkgZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBLZXlzIGNhbiBiZSB1bnF1b3RlZC4gSWYgdGhleSBhcmUsIHRoZXkgbmVlZCB0byBiZVxuICAgICAgICAgICAgICAgICAgICAvLyB2YWxpZCBKUyBpZGVudGlmaWVycy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXCInIHx8IGNoID09PSBcIidcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBpZGVudGlmaWVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB3aGl0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0KCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtrZXldID0gdmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBjb21tYSBhZnRlciB0aGlzIHBhaXIsIHRoaXMgbmVlZHMgdG8gYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVuZCBvZiB0aGUgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggIT09ICcsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgnfScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0KCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyb3IoXCJCYWQgb2JqZWN0XCIpO1xuICAgICAgICB9O1xuXG4gICAgdmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cbi8vIFBhcnNlIGEgSlNPTiB2YWx1ZS4gSXQgY291bGQgYmUgYW4gb2JqZWN0LCBhbiBhcnJheSwgYSBzdHJpbmcsIGEgbnVtYmVyLFxuLy8gb3IgYSB3b3JkLlxuXG4gICAgICAgIHdoaXRlKCk7XG4gICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0KCk7XG4gICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgcmV0dXJuIGFycmF5KCk7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoKTtcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgIGNhc2UgJysnOlxuICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIoKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjaCA+PSAnMCcgJiYgY2ggPD0gJzknID8gbnVtYmVyKCkgOiB3b3JkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4vLyBSZXR1cm4gdGhlIGpzb25fcGFyc2UgZnVuY3Rpb24uIEl0IHdpbGwgaGF2ZSBhY2Nlc3MgdG8gYWxsIG9mIHRoZSBhYm92ZVxuLy8gZnVuY3Rpb25zIGFuZCB2YXJpYWJsZXMuXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgcmV2aXZlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIHRleHQgPSBTdHJpbmcoc291cmNlKTtcbiAgICAgICAgYXQgPSAwO1xuICAgICAgICBsaW5lTnVtYmVyID0gMTtcbiAgICAgICAgY29sdW1uTnVtYmVyID0gMTtcbiAgICAgICAgY2ggPSAnICc7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlKCk7XG4gICAgICAgIHdoaXRlKCk7XG4gICAgICAgIGlmIChjaCkge1xuICAgICAgICAgICAgZXJyb3IoXCJTeW50YXggZXJyb3JcIik7XG4gICAgICAgIH1cblxuLy8gSWYgdGhlcmUgaXMgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSByZWN1cnNpdmVseSB3YWxrIHRoZSBuZXcgc3RydWN0dXJlLFxuLy8gcGFzc2luZyBlYWNoIG5hbWUvdmFsdWUgcGFpciB0byB0aGUgcmV2aXZlciBmdW5jdGlvbiBmb3IgcG9zc2libGVcbi8vIHRyYW5zZm9ybWF0aW9uLCBzdGFydGluZyB3aXRoIGEgdGVtcG9yYXJ5IHJvb3Qgb2JqZWN0IHRoYXQgaG9sZHMgdGhlIHJlc3VsdFxuLy8gaW4gYW4gZW1wdHkga2V5LiBJZiB0aGVyZSBpcyBub3QgYSByZXZpdmVyIGZ1bmN0aW9uLCB3ZSBzaW1wbHkgcmV0dXJuIHRoZVxuLy8gcmVzdWx0LlxuXG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJyA/IChmdW5jdGlvbiB3YWxrKGhvbGRlciwga2V5KSB7XG4gICAgICAgICAgICB2YXIgaywgdiwgdmFsdWUgPSBob2xkZXJba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChrIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGspKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gd2Fsayh2YWx1ZSwgayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVba10gPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdmFsdWVba107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV2aXZlci5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH0oeycnOiByZXN1bHR9LCAnJykpIDogcmVzdWx0O1xuICAgIH07XG59KCkpO1xuXG4vLyBKU09ONSBzdHJpbmdpZnkgd2lsbCBub3QgcXVvdGUga2V5cyB3aGVyZSBhcHByb3ByaWF0ZVxuSlNPTjUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaiwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgaWYgKHJlcGxhY2VyICYmICh0eXBlb2YocmVwbGFjZXIpICE9PSBcImZ1bmN0aW9uXCIgJiYgIWlzQXJyYXkocmVwbGFjZXIpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcGxhY2VyIG11c3QgYmUgYSBmdW5jdGlvbiBvciBhbiBhcnJheScpO1xuICAgIH1cbiAgICB2YXIgZ2V0UmVwbGFjZWRWYWx1ZU9yVW5kZWZpbmVkID0gZnVuY3Rpb24oaG9sZGVyLCBrZXksIGlzVG9wTGV2ZWwpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaG9sZGVyW2tleV07XG5cbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgdmFsdWUgd2l0aCBpdHMgdG9KU09OIHZhbHVlIGZpcnN0LCBpZiBwb3NzaWJsZVxuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUudG9KU09OICYmIHR5cGVvZiB2YWx1ZS50b0pTT04gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0pTT04oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSB1c2VyLXN1cHBsaWVkIHJlcGxhY2VyIGlmIGEgZnVuY3Rpb24sIGNhbGwgaXQuIElmIGl0J3MgYW4gYXJyYXksIGNoZWNrIG9iamVjdHMnIHN0cmluZyBrZXlzIGZvclxuICAgICAgICAvLyBwcmVzZW5jZSBpbiB0aGUgYXJyYXkgKHJlbW92aW5nIHRoZSBrZXkvdmFsdWUgcGFpciBmcm9tIHRoZSByZXN1bHRpbmcgSlNPTiBpZiB0aGUga2V5IGlzIG1pc3NpbmcpLlxuICAgICAgICBpZiAodHlwZW9mKHJlcGxhY2VyKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZXIuY2FsbChob2xkZXIsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYocmVwbGFjZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1RvcExldmVsIHx8IGlzQXJyYXkoaG9sZGVyKSB8fCByZXBsYWNlci5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc1dvcmRDaGFyKGMpIHtcbiAgICAgICAgcmV0dXJuIChjID49ICdhJyAmJiBjIDw9ICd6JykgfHxcbiAgICAgICAgICAgIChjID49ICdBJyAmJiBjIDw9ICdaJykgfHxcbiAgICAgICAgICAgIChjID49ICcwJyAmJiBjIDw9ICc5JykgfHxcbiAgICAgICAgICAgIGMgPT09ICdfJyB8fCBjID09PSAnJCc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNXb3JkU3RhcnQoYykge1xuICAgICAgICByZXR1cm4gKGMgPj0gJ2EnICYmIGMgPD0gJ3onKSB8fFxuICAgICAgICAgICAgKGMgPj0gJ0EnICYmIGMgPD0gJ1onKSB8fFxuICAgICAgICAgICAgYyA9PT0gJ18nIHx8IGMgPT09ICckJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1dvcmQoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNXb3JkU3RhcnQoa2V5WzBdKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gMSwgbGVuZ3RoID0ga2V5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghaXNXb3JkQ2hhcihrZXlbaV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGV4cG9ydCBmb3IgdXNlIGluIHRlc3RzXG4gICAgSlNPTjUuaXNXb3JkID0gaXNXb3JkO1xuXG4gICAgLy8gcG9seWZpbGxzXG4gICAgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUob2JqKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICAgIH1cblxuICAgIHZhciBvYmpTdGFjayA9IFtdO1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yQ2lyY3VsYXIob2JqKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqU3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChvYmpTdGFja1tpXSA9PT0gb2JqKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT05cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlSW5kZW50KHN0ciwgbnVtLCBub05ld0xpbmUpIHtcbiAgICAgICAgaWYgKCFzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluZGVudGF0aW9uIG5vIG1vcmUgdGhhbiAxMCBjaGFyc1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA+IDEwKSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmRlbnQgPSBub05ld0xpbmUgPyBcIlwiIDogXCJcXG5cIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgaW5kZW50ICs9IHN0cjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRlbnQ7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudFN0cjtcbiAgICBpZiAoc3BhY2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaW5kZW50U3RyID0gc3BhY2U7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlID09PSBcIm51bWJlclwiICYmIHNwYWNlID49IDApIHtcbiAgICAgICAgICAgIGluZGVudFN0ciA9IG1ha2VJbmRlbnQoXCIgXCIsIHNwYWNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBzcGFjZSBwYXJhbWV0ZXJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvcGllZCBmcm9tIENyb2tmb3JkJ3MgaW1wbGVtZW50YXRpb24gb2YgSlNPTlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZG91Z2xhc2Nyb2NrZm9yZC9KU09OLWpzL2Jsb2IvZTM5ZGI0YjdlNjI0OWYwNGExOTVlN2RkMDg0MGU2MTBjYzllOTQxZS9qc29uMi5qcyNMMTk1XG4gICAgLy8gQmVnaW5cbiAgICB2YXIgY3ggPSAvW1xcdTAwMDBcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxcbiAgICAgICAgZXNjYXBhYmxlID0gL1tcXFxcXFxcIlxceDAwLVxceDFmXFx4N2YtXFx4OWZcXHUwMGFkXFx1MDYwMC1cXHUwNjA0XFx1MDcwZlxcdTE3YjRcXHUxN2I1XFx1MjAwYy1cXHUyMDBmXFx1MjAyOC1cXHUyMDJmXFx1MjA2MC1cXHUyMDZmXFx1ZmVmZlxcdWZmZjAtXFx1ZmZmZl0vZyxcbiAgICAgICAgbWV0YSA9IHsgLy8gdGFibGUgb2YgY2hhcmFjdGVyIHN1YnN0aXR1dGlvbnNcbiAgICAgICAgJ1xcYic6ICdcXFxcYicsXG4gICAgICAgICdcXHQnOiAnXFxcXHQnLFxuICAgICAgICAnXFxuJzogJ1xcXFxuJyxcbiAgICAgICAgJ1xcZic6ICdcXFxcZicsXG4gICAgICAgICdcXHInOiAnXFxcXHInLFxuICAgICAgICAnXCInIDogJ1xcXFxcIicsXG4gICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJ1xuICAgIH07XG4gICAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cmluZykge1xuXG4vLyBJZiB0aGUgc3RyaW5nIGNvbnRhaW5zIG5vIGNvbnRyb2wgY2hhcmFjdGVycywgbm8gcXVvdGUgY2hhcmFjdGVycywgYW5kIG5vXG4vLyBiYWNrc2xhc2ggY2hhcmFjdGVycywgdGhlbiB3ZSBjYW4gc2FmZWx5IHNsYXAgc29tZSBxdW90ZXMgYXJvdW5kIGl0LlxuLy8gT3RoZXJ3aXNlIHdlIG11c3QgYWxzbyByZXBsYWNlIHRoZSBvZmZlbmRpbmcgY2hhcmFjdGVycyB3aXRoIHNhZmUgZXNjYXBlXG4vLyBzZXF1ZW5jZXMuXG4gICAgICAgIGVzY2FwYWJsZS5sYXN0SW5kZXggPSAwO1xuICAgICAgICByZXR1cm4gZXNjYXBhYmxlLnRlc3Qoc3RyaW5nKSA/ICdcIicgKyBzdHJpbmcucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICB2YXIgYyA9IG1ldGFbYV07XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICAgICBjIDpcbiAgICAgICAgICAgICAgICAnXFxcXHUnICsgKCcwMDAwJyArIGEuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KTtcbiAgICAgICAgfSkgKyAnXCInIDogJ1wiJyArIHN0cmluZyArICdcIic7XG4gICAgfVxuICAgIC8vIEVuZFxuXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxTdHJpbmdpZnkoaG9sZGVyLCBrZXksIGlzVG9wTGV2ZWwpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciwgcmVzO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgdGhlIHZhbHVlLCBpZiBuZWNlc3NhcnlcbiAgICAgICAgdmFyIG9ial9wYXJ0ID0gZ2V0UmVwbGFjZWRWYWx1ZU9yVW5kZWZpbmVkKGhvbGRlciwga2V5LCBpc1RvcExldmVsKTtcblxuICAgICAgICBpZiAob2JqX3BhcnQgJiYgIWlzRGF0ZShvYmpfcGFydCkpIHtcbiAgICAgICAgICAgIC8vIHVuYm94IG9iamVjdHNcbiAgICAgICAgICAgIC8vIGRvbid0IHVuYm94IGRhdGVzLCBzaW5jZSB3aWxsIHR1cm4gaXQgaW50byBudW1iZXJcbiAgICAgICAgICAgIG9ial9wYXJ0ID0gb2JqX3BhcnQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCh0eXBlb2Ygb2JqX3BhcnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ial9wYXJ0LnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4ob2JqX3BhcnQpIHx8ICFpc0Zpbml0ZShvYmpfcGFydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqX3BhcnQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVTdHJpbmcob2JqX3BhcnQudG9TdHJpbmcoKSk7XG5cbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICBpZiAob2JqX3BhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpfcGFydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tGb3JDaXJjdWxhcihvYmpfcGFydCk7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IFwiW1wiO1xuICAgICAgICAgICAgICAgICAgICBvYmpTdGFjay5wdXNoKG9ial9wYXJ0KTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9ial9wYXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBpbnRlcm5hbFN0cmluZ2lmeShvYmpfcGFydCwgaSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyICs9IG1ha2VJbmRlbnQoaW5kZW50U3RyLCBvYmpTdGFjay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcyA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyICs9IFwibnVsbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgKz0gcmVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBvYmpfcGFydC5sZW5ndGgtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciArPSBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZW50U3RyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyICs9IFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2JqU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmpfcGFydC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciArPSBtYWtlSW5kZW50KGluZGVudFN0ciwgb2JqU3RhY2subGVuZ3RoLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciArPSBcIl1cIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0ZvckNpcmN1bGFyKG9ial9wYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gXCJ7XCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub25FbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvYmpTdGFjay5wdXNoKG9ial9wYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmpfcGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ial9wYXJ0Lmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaW50ZXJuYWxTdHJpbmdpZnkob2JqX3BhcnQsIHByb3AsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RvcExldmVsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgKz0gbWFrZUluZGVudChpbmRlbnRTdHIsIG9ialN0YWNrLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbkVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gaXNXb3JkKHByb3ApID8gcHJvcCA6IGVzY2FwZVN0cmluZyhwcm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyICs9IGtleSArIFwiOlwiICsgKGluZGVudFN0ciA/ICcgJyA6ICcnKSArIHZhbHVlICsgXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9ialN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm9uRW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJzdHJpbmcoMCwgYnVmZmVyLmxlbmd0aC0xKSArIG1ha2VJbmRlbnQoaW5kZW50U3RyLCBvYmpTdGFjay5sZW5ndGgpICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSAne30nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9ucyBhbmQgdW5kZWZpbmVkIHNob3VsZCBiZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNwZWNpYWwgY2FzZS4uLndoZW4gdW5kZWZpbmVkIGlzIHVzZWQgaW5zaWRlIG9mXG4gICAgLy8gYSBjb21wb3VuZCBvYmplY3QvYXJyYXksIHJldHVybiBudWxsLlxuICAgIC8vIGJ1dCB3aGVuIHRvcC1sZXZlbCwgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHZhciB0b3BMZXZlbEhvbGRlciA9IHtcIlwiOm9ian07XG4gICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBnZXRSZXBsYWNlZFZhbHVlT3JVbmRlZmluZWQodG9wTGV2ZWxIb2xkZXIsICcnLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVybmFsU3RyaW5naWZ5KHRvcExldmVsSG9sZGVyLCAnJywgdHJ1ZSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRSZXF1ZXN0KGxvYWRlckNvbnRleHQpIHtcblx0aWYobG9hZGVyQ29udGV4dC5jdXJyZW50UmVxdWVzdClcblx0XHRyZXR1cm4gbG9hZGVyQ29udGV4dC5jdXJyZW50UmVxdWVzdDtcblx0Y29uc3QgcmVxdWVzdCA9IGxvYWRlckNvbnRleHQubG9hZGVyc1xuXHRcdC5zbGljZShsb2FkZXJDb250ZXh0LmxvYWRlckluZGV4KVxuXHRcdC5tYXAob2JqID0+IG9iai5yZXF1ZXN0KVxuXHRcdC5jb25jYXQoW2xvYWRlckNvbnRleHQucmVzb3VyY2VdKTtcblx0cmV0dXJuIHJlcXVlc3Quam9pbihcIiFcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q3VycmVudFJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgYmFzZUVuY29kZVRhYmxlcyA9IHtcblx0MjY6IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixcblx0MzI6IFwiMTIzNDU2Nzg5YWJjZGVmZ2hqa21ucHFyc3R1dnd4eXpcIiwgLy8gbm8gMGxpb1xuXHQzNjogXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixcblx0NDk6IFwiYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ekFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWlwiLCAvLyBubyBsSU9cblx0NTI6IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLFxuXHQ1ODogXCIxMjM0NTY3ODlhYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaXCIsIC8vIG5vIDBsSU9cblx0NjI6IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIixcblx0NjQ6IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVotX1wiXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVCdWZmZXJUb0Jhc2UoYnVmZmVyLCBiYXNlKSB7XG5cdGNvbnN0IGVuY29kZVRhYmxlID0gYmFzZUVuY29kZVRhYmxlc1tiYXNlXTtcblx0aWYoIWVuY29kZVRhYmxlKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGVuY29kaW5nIGJhc2VcIiArIGJhc2UpO1xuXG5cdGNvbnN0IHJlYWRMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuXG5cdGNvbnN0IEJpZyA9IHJlcXVpcmUoXCJiaWcuanNcIik7XG5cdEJpZy5STSA9IEJpZy5EUCA9IDA7XG5cdGxldCBiID0gbmV3IEJpZygwKTtcblx0Zm9yKGxldCBpID0gcmVhZExlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0YiA9IGIudGltZXMoMjU2KS5wbHVzKGJ1ZmZlcltpXSk7XG5cdH1cblxuXHRsZXQgb3V0cHV0ID0gXCJcIjtcblx0d2hpbGUoYi5ndCgwKSkge1xuXHRcdG91dHB1dCA9IGVuY29kZVRhYmxlW2IubW9kKGJhc2UpXSArIG91dHB1dDtcblx0XHRiID0gYi5kaXYoYmFzZSk7XG5cdH1cblxuXHRCaWcuRFAgPSAyMDtcblx0QmlnLlJNID0gMTtcblxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoRGlnZXN0KGJ1ZmZlciwgaGFzaFR5cGUsIGRpZ2VzdFR5cGUsIG1heExlbmd0aCkge1xuXHRoYXNoVHlwZSA9IGhhc2hUeXBlIHx8IFwibWQ1XCI7XG5cdG1heExlbmd0aCA9IG1heExlbmd0aCB8fCA5OTk5O1xuXHRjb25zdCBoYXNoID0gcmVxdWlyZShcImNyeXB0b1wiKS5jcmVhdGVIYXNoKGhhc2hUeXBlKTtcblx0aGFzaC51cGRhdGUoYnVmZmVyKTtcblx0aWYoZGlnZXN0VHlwZSA9PT0gXCJiYXNlMjZcIiB8fCBkaWdlc3RUeXBlID09PSBcImJhc2UzMlwiIHx8IGRpZ2VzdFR5cGUgPT09IFwiYmFzZTM2XCIgfHxcblx0XHRkaWdlc3RUeXBlID09PSBcImJhc2U0OVwiIHx8IGRpZ2VzdFR5cGUgPT09IFwiYmFzZTUyXCIgfHwgZGlnZXN0VHlwZSA9PT0gXCJiYXNlNThcIiB8fFxuXHRcdGRpZ2VzdFR5cGUgPT09IFwiYmFzZTYyXCIgfHwgZGlnZXN0VHlwZSA9PT0gXCJiYXNlNjRcIikge1xuXHRcdHJldHVybiBlbmNvZGVCdWZmZXJUb0Jhc2UoaGFzaC5kaWdlc3QoKSwgZGlnZXN0VHlwZS5zdWJzdHIoNCkpLnN1YnN0cigwLCBtYXhMZW5ndGgpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBoYXNoLmRpZ2VzdChkaWdlc3RUeXBlIHx8IFwiaGV4XCIpLnN1YnN0cigwLCBtYXhMZW5ndGgpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SGFzaERpZ2VzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXJzZVF1ZXJ5ID0gcmVxdWlyZShcIi4vcGFyc2VRdWVyeVwiKTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9ucyhsb2FkZXJDb250ZXh0KSB7XG5cdGNvbnN0IHF1ZXJ5ID0gbG9hZGVyQ29udGV4dC5xdWVyeTtcblx0aWYodHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiICYmIHF1ZXJ5ICE9PSBcIlwiKSB7XG5cdFx0cmV0dXJuIHBhcnNlUXVlcnkobG9hZGVyQ29udGV4dC5xdWVyeSk7XG5cdH1cblx0aWYoIXF1ZXJ5IHx8IHR5cGVvZiBxdWVyeSAhPT0gXCJvYmplY3RcIikge1xuXHRcdC8vIE5vdCBvYmplY3QtbGlrZSBxdWVyaWVzIGFyZSBub3Qgc3VwcG9ydGVkLlxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHJldHVybiBxdWVyeTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRPcHRpb25zO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGdldFJlbWFpbmluZ1JlcXVlc3QobG9hZGVyQ29udGV4dCkge1xuXHRpZihsb2FkZXJDb250ZXh0LnJlbWFpbmluZ1JlcXVlc3QpXG5cdFx0cmV0dXJuIGxvYWRlckNvbnRleHQucmVtYWluaW5nUmVxdWVzdDtcblx0Y29uc3QgcmVxdWVzdCA9IGxvYWRlckNvbnRleHQubG9hZGVyc1xuXHRcdC5zbGljZShsb2FkZXJDb250ZXh0LmxvYWRlckluZGV4ICsgMSlcblx0XHQubWFwKG9iaiA9PiBvYmoucmVxdWVzdClcblx0XHQuY29uY2F0KFtsb2FkZXJDb250ZXh0LnJlc291cmNlXSk7XG5cdHJldHVybiByZXF1ZXN0LmpvaW4oXCIhXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJlbWFpbmluZ1JlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgZ2V0T3B0aW9ucyA9IHJlcXVpcmUoXCIuL2dldE9wdGlvbnNcIik7XG5jb25zdCBwYXJzZVF1ZXJ5ID0gcmVxdWlyZShcIi4vcGFyc2VRdWVyeVwiKTtcbmNvbnN0IHN0cmluZ2lmeVJlcXVlc3QgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnlSZXF1ZXN0XCIpO1xuY29uc3QgZ2V0UmVtYWluaW5nUmVxdWVzdCA9IHJlcXVpcmUoXCIuL2dldFJlbWFpbmluZ1JlcXVlc3RcIik7XG5jb25zdCBnZXRDdXJyZW50UmVxdWVzdCA9IHJlcXVpcmUoXCIuL2dldEN1cnJlbnRSZXF1ZXN0XCIpO1xuY29uc3QgaXNVcmxSZXF1ZXN0ID0gcmVxdWlyZShcIi4vaXNVcmxSZXF1ZXN0XCIpO1xuY29uc3QgdXJsVG9SZXF1ZXN0ID0gcmVxdWlyZShcIi4vdXJsVG9SZXF1ZXN0XCIpO1xuY29uc3QgcGFyc2VTdHJpbmcgPSByZXF1aXJlKFwiLi9wYXJzZVN0cmluZ1wiKTtcbmNvbnN0IGdldEhhc2hEaWdlc3QgPSByZXF1aXJlKFwiLi9nZXRIYXNoRGlnZXN0XCIpO1xuY29uc3QgaW50ZXJwb2xhdGVOYW1lID0gcmVxdWlyZShcIi4vaW50ZXJwb2xhdGVOYW1lXCIpO1xuXG5leHBvcnRzLmdldE9wdGlvbnMgPSBnZXRPcHRpb25zO1xuZXhwb3J0cy5wYXJzZVF1ZXJ5ID0gcGFyc2VRdWVyeTtcbmV4cG9ydHMuc3RyaW5naWZ5UmVxdWVzdCA9IHN0cmluZ2lmeVJlcXVlc3Q7XG5leHBvcnRzLmdldFJlbWFpbmluZ1JlcXVlc3QgPSBnZXRSZW1haW5pbmdSZXF1ZXN0O1xuZXhwb3J0cy5nZXRDdXJyZW50UmVxdWVzdCA9IGdldEN1cnJlbnRSZXF1ZXN0O1xuZXhwb3J0cy5pc1VybFJlcXVlc3QgPSBpc1VybFJlcXVlc3Q7XG5leHBvcnRzLnVybFRvUmVxdWVzdCA9IHVybFRvUmVxdWVzdDtcbmV4cG9ydHMucGFyc2VTdHJpbmcgPSBwYXJzZVN0cmluZztcbmV4cG9ydHMuZ2V0SGFzaERpZ2VzdCA9IGdldEhhc2hEaWdlc3Q7XG5leHBvcnRzLmludGVycG9sYXRlTmFtZSA9IGludGVycG9sYXRlTmFtZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBlbW9qaXNMaXN0ID0gcmVxdWlyZShcImVtb2ppcy1saXN0XCIpO1xuY29uc3QgZ2V0SGFzaERpZ2VzdCA9IHJlcXVpcmUoXCIuL2dldEhhc2hEaWdlc3RcIik7XG5cbmNvbnN0IGVtb2ppUmVnZXggPSAvW1xcdUQ4MDAtXFx1REZGRl0uLztcbmNvbnN0IGVtb2ppTGlzdCA9IGVtb2ppc0xpc3QuZmlsdGVyKGVtb2ppID0+IGVtb2ppUmVnZXgudGVzdChlbW9qaSkpO1xuY29uc3QgZW1vamlDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBlbmNvZGVTdHJpbmdUb0Vtb2ppKGNvbnRlbnQsIGxlbmd0aCkge1xuXHRpZihlbW9qaUNhY2hlW2NvbnRlbnRdKSByZXR1cm4gZW1vamlDYWNoZVtjb250ZW50XTtcblx0bGVuZ3RoID0gbGVuZ3RoIHx8IDE7XG5cdGNvbnN0IGVtb2ppcyA9IFtdO1xuXHRkbyB7XG5cdFx0Y29uc3QgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBlbW9qaUxpc3QubGVuZ3RoKTtcblx0XHRlbW9qaXMucHVzaChlbW9qaUxpc3RbaW5kZXhdKTtcblx0XHRlbW9qaUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcblx0fSB3aGlsZSgtLWxlbmd0aCA+IDApO1xuXHRjb25zdCBlbW9qaUVuY29kaW5nID0gZW1vamlzLmpvaW4oXCJcIik7XG5cdGVtb2ppQ2FjaGVbY29udGVudF0gPSBlbW9qaUVuY29kaW5nO1xuXHRyZXR1cm4gZW1vamlFbmNvZGluZztcbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVOYW1lKGxvYWRlckNvbnRleHQsIG5hbWUsIG9wdGlvbnMpIHtcblx0bGV0IGZpbGVuYW1lO1xuXHRpZih0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0ZmlsZW5hbWUgPSBuYW1lKGxvYWRlckNvbnRleHQucmVzb3VyY2VQYXRoKTtcblx0fSBlbHNlIHtcblx0XHRmaWxlbmFtZSA9IG5hbWUgfHwgXCJbaGFzaF0uW2V4dF1cIjtcblx0fVxuXHRjb25zdCBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0O1xuXHRjb25zdCBjb250ZW50ID0gb3B0aW9ucy5jb250ZW50O1xuXHRjb25zdCByZWdFeHAgPSBvcHRpb25zLnJlZ0V4cDtcblx0bGV0IGV4dCA9IFwiYmluXCI7XG5cdGxldCBiYXNlbmFtZSA9IFwiZmlsZVwiO1xuXHRsZXQgZGlyZWN0b3J5ID0gXCJcIjtcblx0bGV0IGZvbGRlciA9IFwiXCI7XG5cdGlmKGxvYWRlckNvbnRleHQucmVzb3VyY2VQYXRoKSB7XG5cdFx0Y29uc3QgcGFyc2VkID0gcGF0aC5wYXJzZShsb2FkZXJDb250ZXh0LnJlc291cmNlUGF0aCk7XG5cdFx0bGV0IHJlc291cmNlUGF0aCA9IGxvYWRlckNvbnRleHQucmVzb3VyY2VQYXRoO1xuXG5cdFx0aWYocGFyc2VkLmV4dCkge1xuXHRcdFx0ZXh0ID0gcGFyc2VkLmV4dC5zdWJzdHIoMSk7XG5cdFx0fVxuXHRcdGlmKHBhcnNlZC5kaXIpIHtcblx0XHRcdGJhc2VuYW1lID0gcGFyc2VkLm5hbWU7XG5cdFx0XHRyZXNvdXJjZVBhdGggPSBwYXJzZWQuZGlyICsgcGF0aC5zZXA7XG5cdFx0fVxuXHRcdGlmKHR5cGVvZiBjb250ZXh0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRkaXJlY3RvcnkgPSBwYXRoLnJlbGF0aXZlKGNvbnRleHQsIHJlc291cmNlUGF0aCArIFwiX1wiKS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKS5yZXBsYWNlKC9cXC5cXC4oXFwvKT8vZywgXCJfJDFcIik7XG5cdFx0XHRkaXJlY3RvcnkgPSBkaXJlY3Rvcnkuc3Vic3RyKDAsIGRpcmVjdG9yeS5sZW5ndGggLSAxKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlyZWN0b3J5ID0gcmVzb3VyY2VQYXRoLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpLnJlcGxhY2UoL1xcLlxcLihcXC8pPy9nLCBcIl8kMVwiKTtcblx0XHR9XG5cdFx0aWYoZGlyZWN0b3J5Lmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0ZGlyZWN0b3J5ID0gXCJcIjtcblx0XHR9IGVsc2UgaWYoZGlyZWN0b3J5Lmxlbmd0aCA+IDEpIHtcblx0XHRcdGZvbGRlciA9IHBhdGguYmFzZW5hbWUoZGlyZWN0b3J5KTtcblx0XHR9XG5cdH1cblx0bGV0IHVybCA9IGZpbGVuYW1lO1xuXHRpZihjb250ZW50KSB7XG5cdFx0Ly8gTWF0Y2ggaGFzaCB0ZW1wbGF0ZVxuXHRcdHVybCA9IHVybFxuXHRcdFx0LnJlcGxhY2UoXG5cdFx0XHRcdC9cXFsoPzooXFx3Kyk6KT9oYXNoKD86OihbYS16XStcXGQqKSk/KD86OihcXGQrKSk/XFxdL2lnLFxuXHRcdFx0XHQoYWxsLCBoYXNoVHlwZSwgZGlnZXN0VHlwZSwgbWF4TGVuZ3RoKSA9PiBnZXRIYXNoRGlnZXN0KGNvbnRlbnQsIGhhc2hUeXBlLCBkaWdlc3RUeXBlLCBwYXJzZUludChtYXhMZW5ndGgsIDEwKSlcblx0XHRcdClcblx0XHRcdC5yZXBsYWNlKFxuXHRcdFx0XHQvXFxbZW1vamkoPzo6KFxcZCspKT9cXF0vaWcsXG5cdFx0XHRcdChhbGwsIGxlbmd0aCkgPT4gZW5jb2RlU3RyaW5nVG9FbW9qaShjb250ZW50LCBsZW5ndGgpXG5cdFx0XHQpO1xuXHR9XG5cdHVybCA9IHVybFxuXHRcdC5yZXBsYWNlKC9cXFtleHRcXF0vaWcsICgpID0+IGV4dClcblx0XHQucmVwbGFjZSgvXFxbbmFtZVxcXS9pZywgKCkgPT4gYmFzZW5hbWUpXG5cdFx0LnJlcGxhY2UoL1xcW3BhdGhcXF0vaWcsICgpID0+IGRpcmVjdG9yeSlcblx0XHQucmVwbGFjZSgvXFxbZm9sZGVyXFxdL2lnLCAoKSA9PiBmb2xkZXIpO1xuXHRpZihyZWdFeHAgJiYgbG9hZGVyQ29udGV4dC5yZXNvdXJjZVBhdGgpIHtcblx0XHRjb25zdCBtYXRjaCA9IGxvYWRlckNvbnRleHQucmVzb3VyY2VQYXRoLm1hdGNoKG5ldyBSZWdFeHAocmVnRXhwKSk7XG5cdFx0bWF0Y2ggJiYgbWF0Y2guZm9yRWFjaCgobWF0Y2hlZCwgaSkgPT4ge1xuXHRcdFx0dXJsID0gdXJsLnJlcGxhY2UoXG5cdFx0XHRcdG5ldyBSZWdFeHAoXCJcXFxcW1wiICsgaSArIFwiXFxcXF1cIiwgXCJpZ1wiKSxcblx0XHRcdFx0bWF0Y2hlZFxuXHRcdFx0KTtcblx0XHR9KTtcblx0fVxuXHRpZih0eXBlb2YgbG9hZGVyQ29udGV4dC5vcHRpb25zID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBsb2FkZXJDb250ZXh0Lm9wdGlvbnMuY3VzdG9tSW50ZXJwb2xhdGVOYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHR1cmwgPSBsb2FkZXJDb250ZXh0Lm9wdGlvbnMuY3VzdG9tSW50ZXJwb2xhdGVOYW1lLmNhbGwobG9hZGVyQ29udGV4dCwgdXJsLCBuYW1lLCBvcHRpb25zKTtcblx0fVxuXHRyZXR1cm4gdXJsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVycG9sYXRlTmFtZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBpc1VybFJlcXVlc3QodXJsLCByb290KSB7XG5cdC8vIEFuIFVSTCBpcyBub3QgYW4gcmVxdWVzdCBpZlxuXHQvLyAxLiBpdCdzIGEgRGF0YSBVcmxcblx0Ly8gMi4gaXQncyBhbiBhYnNvbHV0ZSB1cmwgb3IgYW5kIHByb3RvY29sLXJlbGF0aXZlXG5cdC8vIDMuIGl0J3Mgc29tZSBraW5kIG9mIHVybCBmb3IgYSB0ZW1wbGF0ZVxuXHRpZigvXmRhdGE6fF5jaHJvbWUtZXh0ZW5zaW9uOnxeKGh0dHBzPzopP1xcL1xcL3xeW1xce1xcfVxcW1xcXSMqOywnwqdcXCQlJlxcKD0/YMK0XFxewrA8Pl0vLnRlc3QodXJsKSkgcmV0dXJuIGZhbHNlO1xuXHQvLyA0LiBJdCdzIGFsc28gbm90IGFuIHJlcXVlc3QgaWYgcm9vdCBpc24ndCBzZXQgYW5kIGl0J3MgYSByb290LXJlbGF0aXZlIHVybFxuXHRpZigocm9vdCA9PT0gdW5kZWZpbmVkIHx8IHJvb3QgPT09IGZhbHNlKSAmJiAvXlxcLy8udGVzdCh1cmwpKSByZXR1cm4gZmFsc2U7XG5cdHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVXJsUmVxdWVzdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBKU09ONSA9IHJlcXVpcmUoXCJqc29uNVwiKTtcblxuY29uc3Qgc3BlY2lhbFZhbHVlcyA9IHtcblx0XCJudWxsXCI6IG51bGwsXG5cdFwidHJ1ZVwiOiB0cnVlLFxuXHRcImZhbHNlXCI6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBwYXJzZVF1ZXJ5KHF1ZXJ5KSB7XG5cdGlmKHF1ZXJ5LnN1YnN0cigwLCAxKSAhPT0gXCI/XCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJBIHZhbGlkIHF1ZXJ5IHN0cmluZyBwYXNzZWQgdG8gcGFyc2VRdWVyeSBzaG91bGQgYmVnaW4gd2l0aCAnPydcIik7XG5cdH1cblx0cXVlcnkgPSBxdWVyeS5zdWJzdHIoMSk7XG5cdGlmKCFxdWVyeSkge1xuXHRcdHJldHVybiB7fTtcblx0fVxuXHRpZihxdWVyeS5zdWJzdHIoMCwgMSkgPT09IFwie1wiICYmIHF1ZXJ5LnN1YnN0cigtMSkgPT09IFwifVwiKSB7XG5cdFx0cmV0dXJuIEpTT041LnBhcnNlKHF1ZXJ5KTtcblx0fVxuXHRjb25zdCBxdWVyeUFyZ3MgPSBxdWVyeS5zcGxpdCgvWywmXS9nKTtcblx0Y29uc3QgcmVzdWx0ID0ge307XG5cdHF1ZXJ5QXJncy5mb3JFYWNoKGFyZyA9PiB7XG5cdFx0Y29uc3QgaWR4ID0gYXJnLmluZGV4T2YoXCI9XCIpO1xuXHRcdGlmKGlkeCA+PSAwKSB7XG5cdFx0XHRsZXQgbmFtZSA9IGFyZy5zdWJzdHIoMCwgaWR4KTtcblx0XHRcdGxldCB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChhcmcuc3Vic3RyKGlkeCArIDEpKTtcblx0XHRcdGlmKHNwZWNpYWxWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlID0gc3BlY2lhbFZhbHVlc1t2YWx1ZV07XG5cdFx0XHR9XG5cdFx0XHRpZihuYW1lLnN1YnN0cigtMikgPT09IFwiW11cIikge1xuXHRcdFx0XHRuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gMikpO1xuXHRcdFx0XHRpZighQXJyYXkuaXNBcnJheShyZXN1bHRbbmFtZV0pKVxuXHRcdFx0XHRcdHJlc3VsdFtuYW1lXSA9IFtdO1xuXHRcdFx0XHRyZXN1bHRbbmFtZV0ucHVzaCh2YWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xuXHRcdFx0XHRyZXN1bHRbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYoYXJnLnN1YnN0cigwLCAxKSA9PT0gXCItXCIpIHtcblx0XHRcdFx0cmVzdWx0W2RlY29kZVVSSUNvbXBvbmVudChhcmcuc3Vic3RyKDEpKV0gPSBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZihhcmcuc3Vic3RyKDAsIDEpID09PSBcIitcIikge1xuXHRcdFx0XHRyZXN1bHRbZGVjb2RlVVJJQ29tcG9uZW50KGFyZy5zdWJzdHIoMSkpXSA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHRbZGVjb2RlVVJJQ29tcG9uZW50KGFyZyldID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlUXVlcnk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcoc3RyKSB7XG5cdHRyeSB7XG5cdFx0aWYoc3RyWzBdID09PSBcIlxcXCJcIikgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcblx0XHRpZihzdHJbMF0gPT09IFwiJ1wiICYmIHN0ci5zdWJzdHIoc3RyLmxlbmd0aCAtIDEpID09PSBcIidcIikge1xuXHRcdFx0cmV0dXJuIHBhcnNlU3RyaW5nKFxuXHRcdFx0XHRzdHJcblx0XHRcdFx0XHQucmVwbGFjZSgvXFxcXC58XCIvZywgeCA9PiB4ID09PSBcIlxcXCJcIiA/IFwiXFxcXFxcXCJcIiA6IHgpXG5cdFx0XHRcdFx0LnJlcGxhY2UoL14nfCckL2csIFwiXFxcIlwiKVxuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoXCJcXFwiXCIgKyBzdHIgKyBcIlxcXCJcIik7XG5cdH0gY2F0Y2goZSkge1xuXHRcdHJldHVybiBzdHI7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVN0cmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbmNvbnN0IG1hdGNoUmVsYXRpdmVQYXRoID0gL15cXC5cXC4/Wy9cXFxcXS87XG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoKHN0cikge1xuXHRyZXR1cm4gcGF0aC5wb3NpeC5pc0Fic29sdXRlKHN0cikgfHwgcGF0aC53aW4zMi5pc0Fic29sdXRlKHN0cik7XG59XG5cbmZ1bmN0aW9uIGlzUmVsYXRpdmVQYXRoKHN0cikge1xuXHRyZXR1cm4gbWF0Y2hSZWxhdGl2ZVBhdGgudGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlSZXF1ZXN0KGxvYWRlckNvbnRleHQsIHJlcXVlc3QpIHtcblx0Y29uc3Qgc3BsaXR0ZWQgPSByZXF1ZXN0LnNwbGl0KFwiIVwiKTtcblx0Y29uc3QgY29udGV4dCA9IGxvYWRlckNvbnRleHQuY29udGV4dCB8fCAobG9hZGVyQ29udGV4dC5vcHRpb25zICYmIGxvYWRlckNvbnRleHQub3B0aW9ucy5jb250ZXh0KTtcblx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHNwbGl0dGVkLm1hcChwYXJ0ID0+IHtcblx0XHQvLyBGaXJzdCwgc2VwYXJhdGUgc2luZ2xlUGF0aCBmcm9tIHF1ZXJ5LCBiZWNhdXNlIHRoZSBxdWVyeSBtaWdodCBjb250YWluIHBhdGhzIGFnYWluXG5cdFx0Y29uc3Qgc3BsaXR0ZWRQYXJ0ID0gcGFydC5tYXRjaCgvXiguKj8pKFxcPy4qKS8pO1xuXHRcdGxldCBzaW5nbGVQYXRoID0gc3BsaXR0ZWRQYXJ0ID8gc3BsaXR0ZWRQYXJ0WzFdIDogcGFydDtcblx0XHRjb25zdCBxdWVyeSA9IHNwbGl0dGVkUGFydCA/IHNwbGl0dGVkUGFydFsyXSA6IFwiXCI7XG5cdFx0aWYoaXNBYnNvbHV0ZVBhdGgoc2luZ2xlUGF0aCkgJiYgY29udGV4dCkge1xuXHRcdFx0c2luZ2xlUGF0aCA9IHBhdGgucmVsYXRpdmUoY29udGV4dCwgc2luZ2xlUGF0aCk7XG5cdFx0XHRpZihpc0Fic29sdXRlUGF0aChzaW5nbGVQYXRoKSkge1xuXHRcdFx0XHQvLyBJZiBzaW5nbGVQYXRoIHN0aWxsIG1hdGNoZXMgYW4gYWJzb2x1dGUgcGF0aCwgc2luZ2xlUGF0aCB3YXMgb24gYSBkaWZmZXJlbnQgZHJpdmUgdGhhbiBjb250ZXh0LlxuXHRcdFx0XHQvLyBJbiB0aGlzIGNhc2UsIHdlIGxlYXZlIHRoZSBwYXRoIHBsYXRmb3JtLXNwZWNpZmljIHdpdGhvdXQgcmVwbGFjaW5nIGFueSBzZXBhcmF0b3JzLlxuXHRcdFx0XHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL2xvYWRlci11dGlscy9wdWxsLzE0XG5cdFx0XHRcdHJldHVybiBzaW5nbGVQYXRoICsgcXVlcnk7XG5cdFx0XHR9XG5cdFx0XHRpZihpc1JlbGF0aXZlUGF0aChzaW5nbGVQYXRoKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgdGhlIHJlbGF0aXZlIHBhdGggc3RhcnRzIGF0IGxlYXN0IHdpdGggLi8gb3RoZXJ3aXNlIGl0IHdvdWxkIGJlIGEgcmVxdWVzdCBpbnRvIHRoZSBtb2R1bGVzIGRpcmVjdG9yeSAobGlrZSBub2RlX21vZHVsZXMpLlxuXHRcdFx0XHRzaW5nbGVQYXRoID0gXCIuL1wiICsgc2luZ2xlUGF0aDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHNpbmdsZVBhdGgucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikgKyBxdWVyeTtcblx0fSkuam9pbihcIiFcIikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVJlcXVlc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gd2UgY2FuJ3QgdXNlIHBhdGgud2luMzIuaXNBYnNvbHV0ZSBiZWNhdXNlIGl0IGFsc28gbWF0Y2hlcyBwYXRocyBzdGFydGluZyB3aXRoIGEgZm9yd2FyZCBzbGFzaFxuY29uc3QgbWF0Y2hOYXRpdmVXaW4zMlBhdGggPSAvXltBLVpdOlsvXFxcXF18XlxcXFxcXFxcL2k7XG5cbmZ1bmN0aW9uIHVybFRvUmVxdWVzdCh1cmwsIHJvb3QpIHtcblx0Y29uc3QgbW9kdWxlUmVxdWVzdFJlZ2V4ID0gL15bXj9dKn4vO1xuXHRsZXQgcmVxdWVzdDtcblxuXHRpZihtYXRjaE5hdGl2ZVdpbjMyUGF0aC50ZXN0KHVybCkpIHtcblx0XHQvLyBhYnNvbHV0ZSB3aW5kb3dzIHBhdGgsIGtlZXAgaXRcblx0XHRyZXF1ZXN0ID0gdXJsO1xuXHR9IGVsc2UgaWYocm9vdCAhPT0gdW5kZWZpbmVkICYmIHJvb3QgIT09IGZhbHNlICYmIC9eXFwvLy50ZXN0KHVybCkpIHtcblx0XHQvLyBpZiByb290IGlzIHNldCBhbmQgdGhlIHVybCBpcyByb290LXJlbGF0aXZlXG5cdFx0c3dpdGNoKHR5cGVvZiByb290KSB7XG5cdFx0XHQvLyAxLiByb290IGlzIGEgc3RyaW5nOiByb290IGlzIHByZWZpeGVkIHRvIHRoZSB1cmxcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBgfmAgcm9vdHMgY29udmVydCB0byBtb2R1bGUgcmVxdWVzdFxuXHRcdFx0XHRpZihtb2R1bGVSZXF1ZXN0UmVnZXgudGVzdChyb290KSkge1xuXHRcdFx0XHRcdHJlcXVlc3QgPSByb290LnJlcGxhY2UoLyhbXn5cXC9dKSQvLCBcIiQxL1wiKSArIHVybC5zbGljZSgxKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXF1ZXN0ID0gcm9vdCArIHVybDtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdC8vIDIuIHJvb3QgaXMgYHRydWVgOiBhYnNvbHV0ZSBwYXRocyBhcmUgYWxsb3dlZFxuXHRcdFx0Ly8gICAgKm5peCBvbmx5LCB3aW5kb3dzLXN0eWxlIGFic29sdXRlIHBhdGhzIGFyZSBhbHdheXMgYWxsb3dlZCBhcyB0aGV5IGRvZXNuJ3Qgc3RhcnQgd2l0aCBhIGAvYFxuXHRcdFx0Y2FzZSBcImJvb2xlYW5cIjpcblx0XHRcdFx0cmVxdWVzdCA9IHVybDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHBhcmFtZXRlcnMgdG8gbG9hZGVyLXV0aWxzICd1cmxUb1JlcXVlc3QnOiB1cmwgPSBcIiArIHVybCArIFwiLCByb290ID0gXCIgKyByb290ICsgXCIuXCIpO1xuXHRcdH1cblx0fSBlbHNlIGlmKC9eXFwuXFwuP1xcLy8udGVzdCh1cmwpKSB7XG5cdFx0Ly8gQSByZWxhdGl2ZSB1cmwgc3RheXNcblx0XHRyZXF1ZXN0ID0gdXJsO1xuXHR9IGVsc2Uge1xuXHRcdC8vIGV2ZXJ5IG90aGVyIHVybCBpcyB0aHJlYWRlZCBsaWtlIGEgcmVsYXRpdmUgdXJsXG5cdFx0cmVxdWVzdCA9IFwiLi9cIiArIHVybDtcblx0fVxuXG5cdC8vIEEgYH5gIG1ha2VzIHRoZSB1cmwgYW4gbW9kdWxlXG5cdGlmKG1vZHVsZVJlcXVlc3RSZWdleC50ZXN0KHJlcXVlc3QpKSB7XG5cdFx0cmVxdWVzdCA9IHJlcXVlc3QucmVwbGFjZShtb2R1bGVSZXF1ZXN0UmVnZXgsIFwiXCIpO1xuXHR9XG5cblx0cmV0dXJuIHJlcXVlc3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdXJsVG9SZXF1ZXN0O1xuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaEJhc2UgPSByZXF1aXJlKCdoYXNoLWJhc2UnKVxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKDE2KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbkYgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuRyAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBkKSB8IChjICYgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5IIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArIChiIF4gYyBeIGQpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5JIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYyBeIChiIHwgKH5kKSkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTUQ1XG4iLCJ2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGJyb3JhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5cbmZ1bmN0aW9uIE1pbGxlclJhYmluKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZCB8fCBuZXcgYnJvcmFuZC5SYW5kKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxlclJhYmluO1xuXG5NaWxsZXJSYWJpbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmFuZCkge1xuICByZXR1cm4gbmV3IE1pbGxlclJhYmluKHJhbmQpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kYmVsb3cgPSBmdW5jdGlvbiBfcmFuZGJlbG93KG4pIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciBtaW5fYnl0ZXMgPSBNYXRoLmNlaWwobGVuIC8gOCk7XG5cbiAgLy8gR2VuZXJhZ2UgcmFuZG9tIGJ5dGVzIHVudGlsIGEgbnVtYmVyIGxlc3MgdGhhbiBuIGlzIGZvdW5kLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCAwLi5uLTEgaGF2ZSBhbiBlcXVhbCBwcm9iYWJpbGl0eSBvZiBiZWluZyBzZWxlY3RlZC5cbiAgZG9cbiAgICB2YXIgYSA9IG5ldyBibih0aGlzLnJhbmQuZ2VuZXJhdGUobWluX2J5dGVzKSk7XG4gIHdoaWxlIChhLmNtcChuKSA+PSAwKTtcblxuICByZXR1cm4gYTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZHJhbmdlID0gZnVuY3Rpb24gX3JhbmRyYW5nZShzdGFydCwgc3RvcCkge1xuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHN0YXJ0IGFuZCBsZXNzIHRoYW4gc3RvcC5cbiAgdmFyIHNpemUgPSBzdG9wLnN1YihzdGFydCk7XG4gIHJldHVybiBzdGFydC5hZGQodGhpcy5fcmFuZGJlbG93KHNpemUpKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICB2YXIgcHJpbWUgPSB0cnVlO1xuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuICAgIGlmIChjYilcbiAgICAgIGNiKGEpO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHByaW1lO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLmdldERpdmlzb3IgPSBmdW5jdGlvbiBnZXREaXZpc29yKG4sIGspIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcblxuICAgIHZhciBnID0gbi5nY2QoYSk7XG4gICAgaWYgKGcuY21wbigxKSAhPT0gMClcbiAgICAgIHJldHVybiBnO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcbiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvSGV4ID0gdG9IZXg7XG5cbnV0aWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShhcnIsIGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdG9IZXgoYXJyKTtcbiAgZWxzZVxuICAgIHJldHVybiBhcnI7XG59O1xuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9hc24xLmpzXG4vLyBGZWRvciwgeW91IGFyZSBhbWF6aW5nLlxuJ3VzZSBzdHJpY3QnXG5cbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbmV4cG9ydHMuY2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJylcblxudmFyIFJTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnUlNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMicpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2NvZWZmaWNpZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHJpdmF0ZUtleSA9IFJTQVByaXZhdGVLZXlcblxudmFyIFJTQVB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdSU0FQdWJsaWNLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHVibGljS2V5ID0gUlNBUHVibGljS2V5XG5cbnZhciBQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5QdWJsaWNLZXkgPSBQdWJsaWNLZXlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24xLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ25vbmUnKS5udWxsXygpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdnJykuaW50KClcbiAgICApLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ1ByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHJpdmF0ZUtleSA9IFByaXZhdGVLZXlJbmZvXG52YXIgRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgdGhpcy5rZXkoJ2RlY3J5cHQnKS5zZXEoKS5vYmooXG4gICAgICAgIHRoaXMua2V5KCdrZGUnKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgna2RlcGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgICAgICAgdGhpcy5rZXkoJ3NhbHQnKS5vY3RzdHIoKSxcbiAgICAgICAgICAgIHRoaXMua2V5KCdpdGVycycpLmludCgpXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmtleSgnY2lwaGVyJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdhbGdvJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgnaXYnKS5vY3RzdHIoKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuXG5leHBvcnRzLkVuY3J5cHRlZFByaXZhdGVLZXkgPSBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mb1xuXG52YXIgRFNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdEU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJfa2V5JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZfa2V5JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuRFNBUHJpdmF0ZUtleSA9IERTQVByaXZhdGVLZXlcblxuZXhwb3J0cy5EU0FwYXJhbSA9IGFzbjEuZGVmaW5lKCdEU0FwYXJhbScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnQoKVxufSlcblxudmFyIEVDUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdFQ1ByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVLZXknKS5vY3RzdHIoKSxcbiAgICB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCkuZXhwbGljaXQoMCkudXNlKEVDUGFyYW1ldGVycyksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0tleScpLm9wdGlvbmFsKCkuZXhwbGljaXQoMSkuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuRUNQcml2YXRlS2V5ID0gRUNQcml2YXRlS2V5XG5cbnZhciBFQ1BhcmFtZXRlcnMgPSBhc24xLmRlZmluZSgnRUNQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgbmFtZWRDdXJ2ZTogdGhpcy5vYmppZCgpXG4gIH0pXG59KVxuXG5leHBvcnRzLnNpZ25hdHVyZSA9IGFzbjEuZGVmaW5lKCdzaWduYXR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3MnKS5pbnQoKVxuICApXG59KVxuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUmFudGFuZW4vbm9kZS1kdGxzL2Jsb2IvMjVhN2RjODYxYmRhMzhjZmVhYzkzYTcyMzUwMGVlYTRmMGFjMmU4Ni9DZXJ0aWZpY2F0ZS5qc1xuLy8gdGhhbmtzIHRvIEBSYW50YW5lblxuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbiA9IHJlcXVpcmUoJ2FzbjEuanMnKVxuXG52YXIgVGltZSA9IGFzbi5kZWZpbmUoJ1RpbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICB1dGNUaW1lOiB0aGlzLnV0Y3RpbWUoKSxcbiAgICBnZW5lcmFsVGltZTogdGhpcy5nZW50aW1lKClcbiAgfSlcbn0pXG5cbnZhciBBdHRyaWJ1dGVUeXBlVmFsdWUgPSBhc24uZGVmaW5lKCdBdHRyaWJ1dGVUeXBlVmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0eXBlJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgndmFsdWUnKS5hbnkoKVxuICApXG59KVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbi5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgU3ViamVjdFB1YmxpY0tleUluZm8gPSBhc24uZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5cbnZhciBSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lID0gYXNuLmRlZmluZSgnUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXRvZihBdHRyaWJ1dGVUeXBlVmFsdWUpXG59KVxuXG52YXIgUkROU2VxdWVuY2UgPSBhc24uZGVmaW5lKCdSRE5TZXF1ZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXFvZihSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lKVxufSlcblxudmFyIE5hbWUgPSBhc24uZGVmaW5lKCdOYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgcmRuU2VxdWVuY2U6IHRoaXMudXNlKFJETlNlcXVlbmNlKVxuICB9KVxufSlcblxudmFyIFZhbGlkaXR5ID0gYXNuLmRlZmluZSgnVmFsaWRpdHknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdub3RCZWZvcmUnKS51c2UoVGltZSksXG4gICAgdGhpcy5rZXkoJ25vdEFmdGVyJykudXNlKFRpbWUpXG4gIClcbn0pXG5cbnZhciBFeHRlbnNpb24gPSBhc24uZGVmaW5lKCdFeHRlbnNpb24nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdleHRuSUQnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdjcml0aWNhbCcpLmJvb2woKS5kZWYoZmFsc2UpLFxuICAgIHRoaXMua2V5KCdleHRuVmFsdWUnKS5vY3RzdHIoKVxuICApXG59KVxuXG52YXIgVEJTQ2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdUQlNDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5leHBsaWNpdCgwKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2VyaWFsTnVtYmVyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyJykudXNlKE5hbWUpLFxuICAgIHRoaXMua2V5KCd2YWxpZGl0eScpLnVzZShWYWxpZGl0eSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3QnKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXlJbmZvJykudXNlKFN1YmplY3RQdWJsaWNLZXlJbmZvKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyVW5pcXVlSUQnKS5pbXBsaWNpdCgxKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0VW5pcXVlSUQnKS5pbXBsaWNpdCgyKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdleHRlbnNpb25zJykuZXhwbGljaXQoMykuc2Vxb2YoRXh0ZW5zaW9uKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBYNTA5Q2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdYNTA5Q2VydGlmaWNhdGUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0YnNDZXJ0aWZpY2F0ZScpLnVzZShUQlNDZXJ0aWZpY2F0ZSksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZUFsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlVmFsdWUnKS5iaXRzdHIoKVxuICApXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFg1MDlDZXJ0aWZpY2F0ZVxuIiwiLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGF0aWwvcGVtc3RyaXBcbnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEW1xcblxccl0rREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVtcXG5cXHJdKyhbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspW1xcblxccl0rL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKiBLRVkpfENFUlRJRklDQVRFKS0tLS0tL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qIEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0oWzAtOUEtelxcblxcclxcK1xcL1xcPV0rKS0tLS0tRU5EIFxcMS0tLS0tJC9tXG52YXIgZXZwID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChva2V5LCBwYXNzd29yZCkge1xuICB2YXIga2V5ID0gb2tleS50b1N0cmluZygpXG4gIHZhciBtYXRjaCA9IGtleS5tYXRjaChmaW5kUHJvYylcbiAgdmFyIGRlY3J5cHRlZFxuICBpZiAoIW1hdGNoKSB7XG4gICAgdmFyIG1hdGNoMiA9IGtleS5tYXRjaChmdWxsUmVnZXgpXG4gICAgZGVjcnlwdGVkID0gbmV3IEJ1ZmZlcihtYXRjaDJbMl0ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3VpdGUgPSAnYWVzJyArIG1hdGNoWzFdXG4gICAgdmFyIGl2ID0gbmV3IEJ1ZmZlcihtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBuZXcgQnVmZmVyKG1hdGNoWzNdLnJlcGxhY2UoL1tcXHJcXG5dL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ0VSVElGSUNBVEUnOlxuICAgICAgbmRhdGEgPSBhc24xLmNlcnRpZmljYXRlLmRlY29kZShkYXRhLCAnZGVyJykudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIGlmICghbmRhdGEpIHtcbiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgbmRhdGEuc3ViamVjdFByaXZhdGVLZXkgPSBuZGF0YS5zdWJqZWN0UHVibGljS2V5XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlYycsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHViX2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdFTkNSWVBURUQgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRW5jcnlwdGVkUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBkYXRhID0gZGVjcnlwdChkYXRhLCBwYXNzd29yZClcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQUklWQVRFIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnZlOiBuZGF0YS5hbGdvcml0aG0uY3VydmUsXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKS5wcml2YXRlS2V5XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBwYXJhbXM6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnZlOiBkYXRhLnBhcmFtZXRlcnMudmFsdWUsXG4gICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleVxuICAgICAgfVxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgfVxufVxucGFyc2VLZXlzLnNpZ25hdHVyZSA9IGFzbjEuc2lnbmF0dXJlXG5mdW5jdGlvbiBkZWNyeXB0IChkYXRhLCBwYXNzd29yZCkge1xuICB2YXIgc2FsdCA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5zYWx0XG4gIHZhciBpdGVycyA9IHBhcnNlSW50KGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLCAxMClcbiAgdmFyIGFsZ28gPSBhZXNpZFtkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5hbGdvLmpvaW4oJy4nKV1cbiAgdmFyIGl2ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuaXZcbiAgdmFyIGNpcGhlclRleHQgPSBkYXRhLnN1YmplY3RQcml2YXRlS2V5XG4gIHZhciBrZXlsZW4gPSBwYXJzZUludChhbGdvLnNwbGl0KCctJylbMV0sIDEwKSAvIDhcbiAgdmFyIGtleSA9IGNvbXBhdC5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVycywga2V5bGVuKVxuICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KGFsZ28sIGtleSwgaXYpXG4gIHZhciBvdXQgPSBbXVxuICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIHJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCBhcnJheSB3aXRoIGRpcmVjdG9yeSBuYW1lcyB0aGVyZVxuLy8gbXVzdCBiZSBubyBzbGFzaGVzLCBlbXB0eSBlbGVtZW50cywgb3IgZGV2aWNlIG5hbWVzIChjOlxcKSBpbiB0aGUgYXJyYXlcbi8vIChzbyBhbHNvIG5vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMgLSBpdCBkb2VzIG5vdCBkaXN0aW5ndWlzaFxuLy8gcmVsYXRpdmUgYW5kIGFic29sdXRlIHBhdGhzKVxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7XG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYXN0ID0gcGFydHNbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKGFsbG93QWJvdmVSb290KSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBwYXJ0cy51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuLy8gU3BsaXQgYSBmaWxlbmFtZSBpbnRvIFtyb290LCBkaXIsIGJhc2VuYW1lLCBleHRdLCB1bml4IHZlcnNpb25cbi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuXG52YXIgc3BsaXRQYXRoUmUgPVxuICAgIC9eKFxcLz98KShbXFxzXFxTXSo/KSgoPzpcXC57MSwyfXxbXlxcL10rP3wpKFxcLlteLlxcL10qfCkpKD86W1xcL10qKSQvO1xudmFyIHNwbGl0UGF0aCA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTtcbn07XG5cbi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsXG4gICAgICByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHtcbiAgICB2YXIgcGF0aCA9IChpID49IDApID8gYXJndW1lbnRzW2ldIDogcHJvY2Vzcy5jd2QoKTtcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCksXG4gICAgICB0cmFpbGluZ1NsYXNoID0gc3Vic3RyKHBhdGgsIC0xKSA9PT0gJy8nO1xuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICBwYXRoID0gbm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhaXNBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHBhdGggPSAnLic7XG4gIH1cbiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkge1xuICAgIHBhdGggKz0gJy8nO1xuICB9XG5cbiAgcmV0dXJuIChpc0Fic29sdXRlID8gJy8nIDogJycpICsgcGF0aDtcbn07XG5cbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMuaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmpvaW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhdGhzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIHAgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5qb2luIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfSkuam9pbignLycpKTtcbn07XG5cblxuLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bylcbi8vIHBvc2l4IHZlcnNpb25cbmV4cG9ydHMucmVsYXRpdmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTtcbiAgdG8gPSBleHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn07XG5cbmV4cG9ydHMuc2VwID0gJy8nO1xuZXhwb3J0cy5kZWxpbWl0ZXIgPSAnOic7XG5cbmV4cG9ydHMuZGlybmFtZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgdmFyIHJlc3VsdCA9IHNwbGl0UGF0aChwYXRoKSxcbiAgICAgIHJvb3QgPSByZXN1bHRbMF0sXG4gICAgICBkaXIgPSByZXN1bHRbMV07XG5cbiAgaWYgKCFyb290ICYmICFkaXIpIHtcbiAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICByZXR1cm4gJy4nO1xuICB9XG5cbiAgaWYgKGRpcikge1xuICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoXG4gICAgZGlyID0gZGlyLnN1YnN0cigwLCBkaXIubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gcm9vdCArIGRpcjtcbn07XG5cblxuZXhwb3J0cy5iYXNlbmFtZSA9IGZ1bmN0aW9uKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTtcbiAgLy8gVE9ETzogbWFrZSB0aGlzIGNvbXBhcmlzb24gY2FzZS1pbnNlbnNpdGl2ZSBvbiB3aW5kb3dzP1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuXG5leHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBzcGxpdFBhdGgocGF0aClbM107XG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIgKHhzLCBmKSB7XG4gICAgaWYgKHhzLmZpbHRlcikgcmV0dXJuIHhzLmZpbHRlcihmKTtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZih4c1tpXSwgaSwgeHMpKSByZXMucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUuc3Vic3RyIC0gbmVnYXRpdmUgaW5kZXggZG9uJ3Qgd29yayBpbiBJRThcbnZhciBzdWJzdHIgPSAnYWInLnN1YnN0cigtMSkgPT09ICdiJ1xuICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9XG4gICAgOiBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7XG4gICAgICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gc3RyLmxlbmd0aCArIHN0YXJ0O1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTtcbiAgICB9XG47XG4iLCJleHBvcnRzLnBia2RmMiA9IHJlcXVpcmUoJy4vbGliL2FzeW5jJylcbmV4cG9ydHMucGJrZGYyU3luYyA9IHJlcXVpcmUoJy4vbGliL3N5bmMnKVxuIiwidmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gICdzaGEnOiAnU0hBLTEnLFxuICAnc2hhLTEnOiAnU0hBLTEnLFxuICAnc2hhMSc6ICdTSEEtMScsXG4gICdzaGEyNTYnOiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS01MTInOiAnU0hBLTUxMicsXG4gICdzaGE1MTInOiAnU0hBLTUxMidcbn1cbnZhciBjaGVja3MgPSBbXVxuZnVuY3Rpb24gY2hlY2tOYXRpdmUgKGFsZ28pIHtcbiAgaWYgKGdsb2JhbC5wcm9jZXNzICYmICFnbG9iYWwucHJvY2Vzcy5icm93c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmIChjaGVja3NbYWxnb10gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGVja3NbYWxnb11cbiAgfVxuICBaRVJPX0JVRiA9IFpFUk9fQlVGIHx8IEJ1ZmZlci5hbGxvYyg4KVxuICB2YXIgcHJvbSA9IGJyb3dzZXJQYmtkZjIoWkVST19CVUYsIFpFUk9fQlVGLCAxMCwgMTI4LCBhbGdvKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgY2hlY2tzW2FsZ29dID0gcHJvbVxuICByZXR1cm4gcHJvbVxufVxuXG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvdXQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZSlcbiAgICB9KVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG4gIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghYWxnbyB8fCB0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3V0XG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfVxuXG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICByZXNvbHZlUHJvbWlzZShjaGVja05hdGl2ZShhbGdvKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgaWYgKHJlc3ApIHJldHVybiBicm93c2VyUGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pXG5cbiAgICByZXR1cm4gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIH0pLCBjYWxsYmFjaylcbn1cbiIsInZhciBkZWZhdWx0RW5jb2Rpbmdcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gIGRlZmF1bHRFbmNvZGluZyA9ICd1dGYtOCdcbn0gZWxzZSB7XG4gIHZhciBwVmVyc2lvbk1ham9yID0gcGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9uLnNwbGl0KCcuJylbMF0uc2xpY2UoMSksIDEwKVxuXG4gIGRlZmF1bHRFbmNvZGluZyA9IHBWZXJzaW9uTWFqb3IgPj0gNiA/ICd1dGYtOCcgOiAnYmluYXJ5J1xufVxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0RW5jb2RpbmdcbiIsInZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5mdW5jdGlvbiBjaGVja0J1ZmZlciAoYnVmLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgYnVmICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKG5hbWUgKyAnIG11c3QgYmUgYSBidWZmZXIgb3Igc3RyaW5nJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKSB7XG4gIGNoZWNrQnVmZmVyKHBhc3N3b3JkLCAnUGFzc3dvcmQnKVxuICBjaGVja0J1ZmZlcihzYWx0LCAnU2FsdCcpXG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBzaXplcyA9IHtcbiAgbWQ1OiAxNixcbiAgc2hhMTogMjAsXG4gIHNoYTIyNDogMjgsXG4gIHNoYTI1NjogMzIsXG4gIHNoYTM4NDogNDgsXG4gIHNoYTUxMjogNjQsXG4gIHJtZDE2MDogMjAsXG4gIHJpcGVtZDE2MDogMjBcbn1cblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXksIHNhbHRMZW4pIHtcbiAgdmFyIGhhc2ggPSBnZXREaWdlc3QoYWxnKVxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gaGFzaChrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICB2YXIgb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdmFyIGlwYWQxID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNhbHRMZW4gKyA0KVxuICBpcGFkLmNvcHkoaXBhZDEsIDAsIDAsIGJsb2Nrc2l6ZSlcbiAgdGhpcy5pcGFkMSA9IGlwYWQxXG4gIHRoaXMuaXBhZDIgPSBpcGFkXG4gIHRoaXMub3BhZCA9IG9wYWRcbiAgdGhpcy5hbGcgPSBhbGdcbiAgdGhpcy5ibG9ja3NpemUgPSBibG9ja3NpemVcbiAgdGhpcy5oYXNoID0gaGFzaFxuICB0aGlzLnNpemUgPSBzaXplc1thbGddXG59XG5cbkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7XG4gIGRhdGEuY29weShpcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgdmFyIGggPSB0aGlzLmhhc2goaXBhZClcbiAgaC5jb3B5KHRoaXMub3BhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHJldHVybiB0aGlzLmhhc2godGhpcy5vcGFkKVxufVxuXG5mdW5jdGlvbiBnZXREaWdlc3QgKGFsZykge1xuICBmdW5jdGlvbiBzaGFGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG5cbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIHJtZDE2MFxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNVxuICByZXR1cm4gc2hhRnVuY1xufVxuXG5mdW5jdGlvbiBwYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkge1xuICBjaGVja1BhcmFtZXRlcnMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbilcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCBkZWZhdWx0RW5jb2RpbmcpXG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuXG4gIHZhciBobWFjID0gbmV3IEhtYWMoZGlnZXN0LCBwYXNzd29yZCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIERLID0gQnVmZmVyLmFsbG9jVW5zYWZlKGtleWxlbilcbiAgdmFyIGJsb2NrMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzYWx0Lmxlbmd0aCArIDQpXG4gIHNhbHQuY29weShibG9jazEsIDAsIDAsIHNhbHQubGVuZ3RoKVxuXG4gIHZhciBkZXN0UG9zID0gMFxuICB2YXIgaExlbiA9IHNpemVzW2RpZ2VzdF1cbiAgdmFyIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcblxuICBmb3IgKHZhciBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICBibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aClcblxuICAgIHZhciBUID0gaG1hYy5ydW4oYmxvY2sxLCBobWFjLmlwYWQxKVxuICAgIHZhciBVID0gVFxuXG4gICAgZm9yICh2YXIgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgIFUgPSBobWFjLnJ1bihVLCBobWFjLmlwYWQyKVxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBoTGVuOyBrKyspIFRba10gXj0gVVtrXVxuICAgIH1cblxuICAgIFQuY29weShESywgZGVzdFBvcylcbiAgICBkZXN0UG9zICs9IGhMZW5cbiAgfVxuXG4gIHJldHVybiBES1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBia2RmMlxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0Jyk7XG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcmVxdWlyZSgnLi9wcml2YXRlRGVjcnlwdCcpO1xuXG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gZnVuY3Rpb24gcHJpdmF0ZUVuY3J5cHQoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHVibGljRW5jcnlwdChrZXksIGJ1ZiwgdHJ1ZSk7XG59O1xuXG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBmdW5jdGlvbiBwdWJsaWNEZWNyeXB0KGtleSwgYnVmKSB7XG4gIHJldHVybiBleHBvcnRzLnByaXZhdGVEZWNyeXB0KGtleSwgYnVmLCB0cnVlKTtcbn07IiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gbmV3IEJ1ZmZlcignJyk7XG4gIHZhciAgaSA9IDAsIGM7XG4gIHdoaWxlICh0Lmxlbmd0aCA8IGxlbikge1xuICAgIGMgPSBpMm9wcyhpKyspO1xuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pO1xuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbik7XG59O1xuXG5mdW5jdGlvbiBpMm9wcyhjKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKDQpO1xuICBvdXQud3JpdGVVSW50MzJCRShjLDApO1xuICByZXR1cm4gb3V0O1xufSIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJyk7XG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKTtcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpO1xudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJpdmF0ZURlY3J5cHQocHJpdmF0ZV9rZXksIGVuYywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZztcbiAgaWYgKHByaXZhdGVfa2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHJpdmF0ZV9rZXkucGFkZGluZztcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDQ7XG4gIH1cbiAgXG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHJpdmF0ZV9rZXkpO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBibihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHZhciBtc2c7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgbXNnID0gd2l0aFB1YmxpYyhuZXcgYm4oZW5jKSwga2V5KTtcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBjcnQoZW5jLCBrZXkpO1xuICB9XG4gIHZhciB6QnVmZmVyID0gbmV3IEJ1ZmZlcihrIC0gbXNnLmxlbmd0aCk7XG4gIHpCdWZmZXIuZmlsbCgwKTtcbiAgbXNnID0gQnVmZmVyLmNvbmNhdChbekJ1ZmZlciwgbXNnXSwgayk7XG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcmV0dXJuIG9hZXAoa2V5LCBtc2cpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICByZXR1cm4gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICByZXR1cm4gbXNnO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpe1xuICB2YXIgbiA9IGtleS5tb2R1bHVzO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKG5ldyBCdWZmZXIoJycpKS5kaWdlc3QoKTtcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7XG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuO1xuICBpZiAobXNnWzBdICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwgaExlbiArIDEpO1xuICB2YXIgbWFza2VkRGIgPSAgbXNnLnNsaWNlKGhMZW4gKyAxKTtcbiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7XG4gIHZhciBkYiA9IHhvcihtYXNrZWREYiwgbWdmKHNlZWQsIGsgLSBoTGVuIC0gMSkpO1xuICBpZiAoY29tcGFyZShpSGFzaCwgZGIuc2xpY2UoMCwgaExlbikpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIGkgPSBoTGVuO1xuICB3aGlsZSAoZGJbaV0gPT09IDApIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGRiW2krK10gIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gZGIuc2xpY2UoaSk7XG59XG5cbmZ1bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKXtcbiAgdmFyIHAxID0gbXNnLnNsaWNlKDAsIDIpO1xuICB2YXIgaSA9IDI7XG4gIHZhciBzdGF0dXMgPSAwO1xuICB3aGlsZSAobXNnW2krK10gIT09IDApIHtcbiAgICBpZiAoaSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgICBzdGF0dXMrKztcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgcHMgPSBtc2cuc2xpY2UoMiwgaSAtIDEpO1xuICB2YXIgcDIgPSBtc2cuc2xpY2UoaSAtIDEsIGkpO1xuXG4gIGlmICgocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMicgJiYgIXJldmVyc2UpIHx8IChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAxJyAmJiByZXZlcnNlKSl7XG4gICAgc3RhdHVzKys7XG4gIH1cbiAgaWYgKHBzLmxlbmd0aCA8IDgpIHtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAoc3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuICBtc2cuc2xpY2UoaSk7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpe1xuICBhID0gbmV3IEJ1ZmZlcihhKTtcbiAgYiA9IG5ldyBCdWZmZXIoYik7XG4gIHZhciBkaWYgPSAwO1xuICB2YXIgbGVuID0gYS5sZW5ndGg7XG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWYrKztcbiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpO1xuICB9XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBkaWYgKz0gKGFbaV0gXiBiW2ldKTtcbiAgfVxuICByZXR1cm4gZGlmO1xufSIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJyk7XG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKTtcbnZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG5cbnZhciBjb25zdGFudHMgPSB7XG4gIFJTQV9QS0NTMV9PQUVQX1BBRERJTkc6IDQsXG4gIFJTQV9QS0NTMV9QQURESU46IDEsXG4gIFJTQV9OT19QQURESU5HOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQocHVibGljX2tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHVibGljX2tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY19rZXkucGFkZGluZztcbiAgfSBlbHNlIGlmIChyZXZlcnNlKSB7XG4gICAgcGFkZGluZyA9IDE7XG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDQ7XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNfa2V5KTtcbiAgdmFyIHBhZGRlZE1zZztcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKTtcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAxKSB7XG4gICAgcGFkZGVkTXNnID0gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgYm4obXNnKTtcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJyk7XG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9hZXAoa2V5LCBtc2cpe1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKG5ldyBCdWZmZXIoJycpKS5kaWdlc3QoKTtcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGg7XG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuO1xuICBpZiAobUxlbiA+IGsgLSBoTGVuMiAtIDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gaExlbjIgLSAyKTtcbiAgcHMuZmlsbCgwKTtcbiAgdmFyIGRibGVuID0gayAtIGhMZW4gLSAxO1xuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pO1xuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBuZXcgQnVmZmVyKFsxXSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSk7XG4gIHZhciBtYXNrZWRTZWVkID0geG9yKHNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpO1xuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzBdKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSk7XG59XG5mdW5jdGlvbiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSl7XG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aDtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJyk7XG4gIH1cbiAgdmFyIHBzO1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gbmV3IEJ1ZmZlcihrIC0gbUxlbiAtIDMpO1xuICAgIHBzLmZpbGwoMHhmZik7XG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBibihCdWZmZXIuY29uY2F0KFtuZXcgQnVmZmVyKFswLCByZXZlcnNlPzE6Ml0pLCBwcywgbmV3IEJ1ZmZlcihbMF0pLCBtc2ddLCBrKSk7XG59XG5mdW5jdGlvbiBub25aZXJvKGxlbiwgY3J5cHRvKSB7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGxlbik7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICB2YXIgY3VyID0gMDtcbiAgdmFyIG51bTtcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuKjIpO1xuICAgICAgY3VyID0gMDtcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdO1xuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0O1xufSIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5mdW5jdGlvbiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHBhZGRlZE1zZ1xuICAgIC50b1JlZChibi5tb250KGtleS5tb2R1bHVzKSlcbiAgICAucmVkUG93KG5ldyBibihrZXkucHVibGljRXhwb25lbnQpKVxuICAgIC5mcm9tUmVkKClcbiAgICAudG9BcnJheSgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yKGEsIGIpIHtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldO1xuICB9XG4gIHJldHVybiBhXG59OyIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlxcblVzZSBDaHJvbWUsIEZpcmVmb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xuXG5pZiAoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByYW5kb21CeXRlc1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBvbGRCcm93c2VyXG59XG5cbmZ1bmN0aW9uIHJhbmRvbUJ5dGVzIChzaXplLCBjYikge1xuICAvLyBwaGFudG9tanMgbmVlZHMgdG8gdGhyb3dcbiAgaWYgKHNpemUgPiA2NTUzNikgdGhyb3cgbmV3IEVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcbiAgLy8gaW4gY2FzZSBicm93c2VyaWZ5ICBpc24ndCB1c2luZyB0aGUgVWludDhBcnJheSB2ZXJzaW9uXG4gIHZhciByYXdCeXRlcyA9IG5ldyBnbG9iYWwuVWludDhBcnJheShzaXplKVxuXG4gIC8vIFRoaXMgd2lsbCBub3Qgd29yayBpbiBvbGRlciBicm93c2Vycy5cbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHJhd0J5dGVzKVxuICB9XG5cbiAgLy8gWFhYOiBwaGFudG9tanMgZG9lc24ndCBsaWtlIGEgYnVmZmVyIGJlaW5nIHBhc3NlZCBoZXJlXG4gIHZhciBieXRlcyA9IEJ1ZmZlci5mcm9tKHJhd0J5dGVzLmJ1ZmZlcilcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2IobnVsbCwgYnl0ZXMpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG51c2UgY2hyb21lLCBGaXJlRm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cbnZhciBzYWZlQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKVxudmFyIHJhbmRvbWJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxudmFyIEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyXG52YXIga0J1ZmZlck1heExlbmd0aCA9IHNhZmVCdWZmZXIua01heExlbmd0aFxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG52YXIga01heFVpbnQzMiA9IE1hdGgucG93KDIsIDMyKSAtIDFcbmZ1bmN0aW9uIGFzc2VydE9mZnNldCAob2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgIT09ICdudW1iZXInIHx8IG9mZnNldCAhPT0gb2Zmc2V0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtNYXhVaW50MzIgfHwgb2Zmc2V0IDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrQnVmZmVyTWF4TGVuZ3RoIHx8IG9mZnNldCA+IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgb3V0IG9mIHJhbmdlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplLCBvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInIHx8IHNpemUgIT09IHNpemUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHNpemUgPiBrTWF4VWludDMyIHx8IHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgdWludDMyJylcbiAgfVxuXG4gIGlmIChzaXplICsgb2Zmc2V0ID4gbGVuZ3RoIHx8IHNpemUgPiBrQnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2J1ZmZlciB0b28gc21hbGwnKVxuICB9XG59XG5pZiAoKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB8fCAhcHJvY2Vzcy5icm93c2VyKSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IHJhbmRvbUZpbGxcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IHJhbmRvbUZpbGxTeW5jXG59IGVsc2Uge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSBvbGRCcm93c2VyXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSBvbGRCcm93c2VyXG59XG5mdW5jdGlvbiByYW5kb21GaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvZmZzZXRcbiAgICBvZmZzZXQgPSAwXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGhcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gc2l6ZVxuICAgIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYlwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpXG4gIH1cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYilcbn1cblxuZnVuY3Rpb24gYWN0dWFsRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICB2YXIgb3VyQnVmID0gYnVmLmJ1ZmZlclxuICAgIHZhciB1aW50ID0gbmV3IFVpbnQ4QXJyYXkob3VyQnVmLCBvZmZzZXQsIHNpemUpXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1aW50KVxuICAgIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG4gIGlmIChjYikge1xuICAgIHJhbmRvbWJ5dGVzKHNpemUsIGZ1bmN0aW9uIChlcnIsIGJ5dGVzKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpXG4gICAgICB9XG4gICAgICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICAgICAgY2IobnVsbCwgYnVmKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGJ5dGVzID0gcmFuZG9tYnl0ZXMoc2l6ZSlcbiAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgcmV0dXJuIGJ1ZlxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbFN5bmMgKGJ1Ziwgb2Zmc2V0LCBzaXplKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAndW5kZWZpbmVkJykge1xuICAgIG9mZnNldCA9IDBcbiAgfVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgYXNzZXJ0T2Zmc2V0KG9mZnNldCwgYnVmLmxlbmd0aClcblxuICBpZiAoc2l6ZSA9PT0gdW5kZWZpbmVkKSBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIHJldHVybiBhY3R1YWxGaWxsKGJ1Ziwgb2Zmc2V0LCBzaXplKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwbmEubmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG51dGlsLmluaGVyaXRzKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciB3cml0YWJsZUh3bSA9IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHdyaXRhYmxlSHdtIHx8IHdyaXRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gd3JpdGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRvby5cbiAgLy8gYHJlYWxIYXNJbnN0YW5jZWAgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdXNpbmcgcGxhaW4gYGluc3RhbmNlb2ZgXG4gIC8vIHdvdWxkIHJldHVybiBmYWxzZSwgYXMgbm8gYF93cml0YWJsZVN0YXRlYCBwcm9wZXJ0eSBpcyBhdHRhY2hlZC5cblxuICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGVcbiAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yXG4gIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkge1xuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maW5hbCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmluYWwgPSBvcHRpb25zLmZpbmFsO1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJykpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVBZnRlckVuZChzdHJlYW0sIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG59XG5cbi8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcbiAgdmFyIGlzQnVmID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgX2lzVWludDhBcnJheShjaHVuayk7XG5cbiAgaWYgKGlzQnVmICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0J1ZikgZW5jb2RpbmcgPSAnYnVmZmVyJztlbHNlIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIGNiID0gbm9wO1xuXG4gIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAoaXNCdWYgfHwgdmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkge1xuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBzdGF0ZS5jb3JrZWQrKztcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZC0tO1xuXG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpO1xuICB9XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nID0gZnVuY3Rpb24gc2V0RGVmYXVsdEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIC8vIG5vZGU6OlBhcnNlRW5jb2RpbmcoKSByZXF1aXJlcyBsb3dlciBjYXNlLlxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIShbJ2hleCcsICd1dGY4JywgJ3V0Zi04JywgJ2FzY2lpJywgJ2JpbmFyeScsICdiYXNlNjQnLCAndWNzMicsICd1Y3MtMicsICd1dGYxNmxlJywgJ3V0Zi0xNmxlJywgJ3JhdyddLmluZGV4T2YoKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkpID4gLTEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmRlZmF1bHRFbmNvZGluZyA9IGVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHtcbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwbmEubmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50LS07XG4gICAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgICAgLy8gaXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXQgZG9lcy5cbiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwbmEubmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHBuYS5uZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFZhbGlkYXRpb25FcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKFZhbGlkYXRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoZXJyb3JzLCBuYW1lKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZhbGlkYXRpb25FcnJvcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVmFsaWRhdGlvbkVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVmFsaWRhdGlvbkVycm9yKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7XG5cbiAgICBfdGhpcy5tZXNzYWdlID0gYCR7bmFtZSB8fCAnJ30gSW52YWxpZCBPcHRpb25zXFxuXFxuYDtcblxuICAgIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIF90aGlzLm1lc3NhZ2UgKz0gYG9wdGlvbnMke2Vyci5kYXRhUGF0aH0gJHtlcnIubWVzc2FnZX1cXG5gO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX3RoaXMsIF90aGlzLmNvbnN0cnVjdG9yKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gVmFsaWRhdGlvbkVycm9yO1xufShFcnJvcik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZhbGlkYXRpb25FcnJvcjsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbmRleCcpLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3ZhbGlkYXRlT3B0aW9ucyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVPcHRpb25zJyk7XG5cbnZhciBfdmFsaWRhdGVPcHRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlT3B0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF92YWxpZGF0ZU9wdGlvbnMyLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3BhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbnZhciBfcGF0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wYXRoKTtcblxudmFyIF9mcyA9IHJlcXVpcmUoJ2ZzJyk7XG5cbnZhciBfZnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnMpO1xuXG52YXIgX2FqdiA9IHJlcXVpcmUoJ2FqdicpO1xuXG52YXIgX2FqdjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hanYpO1xuXG52YXIgX2FqdktleXdvcmRzID0gcmVxdWlyZSgnYWp2LWtleXdvcmRzJyk7XG5cbnZhciBfYWp2S2V5d29yZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWp2S2V5d29yZHMpO1xuXG52YXIgX1ZhbGlkYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vVmFsaWRhdGlvbkVycm9yJyk7XG5cbnZhciBfVmFsaWRhdGlvbkVycm9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZhbGlkYXRpb25FcnJvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBhanYgPSBuZXcgX2FqdjIuZGVmYXVsdCh7XG4gIGFsbEVycm9yczogdHJ1ZSxcbiAgdXNlRGVmYXVsdHM6IHRydWUsXG4gIGVycm9yRGF0YVBhdGg6ICdwcm9wZXJ0eSdcbn0pO1xuXG4oMCwgX2FqdktleXdvcmRzMi5kZWZhdWx0KShhanYsIFsnaW5zdGFuY2VvZicsICd0eXBlb2YnXSk7XG5cbnZhciB2YWxpZGF0ZU9wdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoc2NoZW1hLCBvcHRpb25zLCBuYW1lKSB7XG4gIGlmICh0eXBlb2Ygc2NoZW1hID09PSAnc3RyaW5nJykge1xuICAgIHNjaGVtYSA9IF9mczIuZGVmYXVsdC5yZWFkRmlsZVN5bmMoX3BhdGgyLmRlZmF1bHQucmVzb2x2ZShzY2hlbWEpLCAndXRmOCcpO1xuICAgIHNjaGVtYSA9IEpTT04ucGFyc2Uoc2NoZW1hKTtcbiAgfVxuXG4gIGlmICghYWp2LnZhbGlkYXRlKHNjaGVtYSwgb3B0aW9ucykpIHtcbiAgICB0aHJvdyBuZXcgX1ZhbGlkYXRpb25FcnJvcjIuZGVmYXVsdChhanYuZXJyb3JzLCBuYW1lKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdGVPcHRpb25zOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG4vLyBwcm90b3R5cGUgY2xhc3MgZm9yIGhhc2ggZnVuY3Rpb25zXG5mdW5jdGlvbiBIYXNoIChibG9ja1NpemUsIGZpbmFsU2l6ZSkge1xuICB0aGlzLl9ibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpXG4gIHRoaXMuX2ZpbmFsU2l6ZSA9IGZpbmFsU2l6ZVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fbGVuID0gMFxufVxuXG5IYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEsIGVuYylcbiAgfVxuXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBibG9ja1NpemUgPSB0aGlzLl9ibG9ja1NpemVcbiAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoXG4gIHZhciBhY2N1bSA9IHRoaXMuX2xlblxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGxlbmd0aDspIHtcbiAgICB2YXIgYXNzaWduZWQgPSBhY2N1bSAlIGJsb2NrU2l6ZVxuICAgIHZhciByZW1haW5kZXIgPSBNYXRoLm1pbihsZW5ndGggLSBvZmZzZXQsIGJsb2NrU2l6ZSAtIGFzc2lnbmVkKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKykge1xuICAgICAgYmxvY2tbYXNzaWduZWQgKyBpXSA9IGRhdGFbb2Zmc2V0ICsgaV1cbiAgICB9XG5cbiAgICBhY2N1bSArPSByZW1haW5kZXJcbiAgICBvZmZzZXQgKz0gcmVtYWluZGVyXG5cbiAgICBpZiAoKGFjY3VtICUgYmxvY2tTaXplKSA9PT0gMCkge1xuICAgICAgdGhpcy5fdXBkYXRlKGJsb2NrKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2xlbiArPSBsZW5ndGhcbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuYykge1xuICB2YXIgcmVtID0gdGhpcy5fbGVuICUgdGhpcy5fYmxvY2tTaXplXG5cbiAgdGhpcy5fYmxvY2tbcmVtXSA9IDB4ODBcblxuICAvLyB6ZXJvIChyZW0gKyAxKSB0cmFpbGluZyBiaXRzLCB3aGVyZSAocmVtICsgMSkgaXMgdGhlIHNtYWxsZXN0XG4gIC8vIG5vbi1uZWdhdGl2ZSBzb2x1dGlvbiB0byB0aGUgZXF1YXRpb24gKGxlbmd0aCArIDEgKyAocmVtICsgMSkpID09PSBmaW5hbFNpemUgbW9kIGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9jay5maWxsKDAsIHJlbSArIDEpXG5cbiAgaWYgKHJlbSA+PSB0aGlzLl9maW5hbFNpemUpIHtcbiAgICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gICAgdGhpcy5fYmxvY2suZmlsbCgwKVxuICB9XG5cbiAgdmFyIGJpdHMgPSB0aGlzLl9sZW4gKiA4XG5cbiAgLy8gdWludDMyXG4gIGlmIChiaXRzIDw9IDB4ZmZmZmZmZmYpIHtcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG5cbiAgLy8gdWludDY0XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxvd0JpdHMgPSAoYml0cyAmIDB4ZmZmZmZmZmYpID4+PiAwXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhMzg0ICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTM4NCwgU0hBNTEyKVxuXG5TaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHhjYmJiOWQ1ZFxuICB0aGlzLl9iaCA9IDB4NjI5YTI5MmFcbiAgdGhpcy5fY2ggPSAweDkxNTkwMTVhXG4gIHRoaXMuX2RoID0gMHgxNTJmZWNkOFxuICB0aGlzLl9laCA9IDB4NjczMzI2NjdcbiAgdGhpcy5fZmggPSAweDhlYjQ0YTg3XG4gIHRoaXMuX2doID0gMHhkYjBjMmUwZFxuICB0aGlzLl9oaCA9IDB4NDdiNTQ4MWRcblxuICB0aGlzLl9hbCA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2NsID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kbCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2ZsID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nbCA9IDB4NjRmOThmYTdcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNDgpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMzg0XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG52YXIgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuXG52YXIgbG9hZGVyVXRpbHMgPSByZXF1aXJlKFwibG9hZGVyLXV0aWxzXCIpO1xudmFyIHZhbGlkYXRlT3B0aW9ucyA9IHJlcXVpcmUoJ3NjaGVtYS11dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHt9O1xuXG5tb2R1bGUuZXhwb3J0cy5waXRjaCA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdGlmICh0aGlzLmNhY2hlYWJsZSkgdGhpcy5jYWNoZWFibGUoKTtcblxuXHR2YXIgb3B0aW9ucyA9IGxvYWRlclV0aWxzLmdldE9wdGlvbnModGhpcykgfHwge307XG5cblx0dmFsaWRhdGVPcHRpb25zKHJlcXVpcmUoJy4vb3B0aW9ucy5qc29uJyksIG9wdGlvbnMsICdTdHlsZSBMb2FkZXInKVxuXG5cdG9wdGlvbnMuaG1yID0gdHlwZW9mIG9wdGlvbnMuaG1yID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmhtcjtcblxuXHQvLyBUaGUgdmFyaWFibGUgaXMgbmVlZGVkLCBiZWNhdXNlIHRoZSBmdW5jdGlvbiBzaG91bGQgYmUgaW5saW5lZC5cblx0Ly8gSWYgaXMganVzdCBzdG9yZWQgaXQgaW4gb3B0aW9ucywgSlNPTi5zdHJpbmdpZnkgd2lsbCBxdW90ZVxuXHQvLyB0aGUgZnVuY3Rpb24gYW5kIGl0IHdvdWxkIGJlIGp1c3QgYSBzdHJpbmcgYXQgcnVudGltZVxuXHR2YXIgaW5zZXJ0SW50bztcblxuXHRpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0SW50byA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0aW5zZXJ0SW50byA9IG9wdGlvbnMuaW5zZXJ0SW50by50b1N0cmluZygpO1xuXHR9XG5cblx0Ly8gV2UgbmVlZCB0byBjaGVjayBpZiBpdCBhIHN0cmluZywgb3IgdmFyaWFibGUgd2lsbCBiZSBcInVuZGVmaW5lZFwiXG5cdC8vIGFuZCB0aGUgbG9hZGVyIGNyYXNoZXNcblx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEludG8gPT09IFwic3RyaW5nXCIpIHtcblx0XHRpbnNlcnRJbnRvID0gJ1wiJyArIG9wdGlvbnMuaW5zZXJ0SW50byArICdcIic7XG5cdH1cblxuXHR2YXIgaG1yID0gW1xuXHRcdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQsXG5cdFx0XCJpZihtb2R1bGUuaG90KSB7XCIsXG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRcIlx0bW9kdWxlLmhvdC5hY2NlcHQoXCIgKyBsb2FkZXJVdGlscy5zdHJpbmdpZnlSZXF1ZXN0KHRoaXMsIFwiISFcIiArIHJlcXVlc3QpICsgXCIsIGZ1bmN0aW9uKCkge1wiLFxuXHRcdFwiXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiArIGxvYWRlclV0aWxzLnN0cmluZ2lmeVJlcXVlc3QodGhpcywgXCIhIVwiICsgcmVxdWVzdCkgKyBcIik7XCIsXG5cdFx0XCJcIixcblx0XHRcIlx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcIixcblx0XHRcIlwiLFxuXHRcdFwiXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1wiLFxuXHRcdFwiXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcIixcblx0XHRcIlwiLFxuXHRcdFwiXHRcdFx0Zm9yKGtleSBpbiBhKSB7XCIsXG5cdFx0XCJcdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XCIsXG5cdFx0XCJcdFx0XHRcdGlkeCsrO1wiLFxuXHRcdFwiXHRcdFx0fVwiLFxuXHRcdFwiXCIsXG5cdFx0XCJcdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1wiLFxuXHRcdFwiXCIsXG5cdFx0XCJcdFx0XHRyZXR1cm4gaWR4ID09PSAwO1wiLFxuXHRcdFwiXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XCIsXG5cdFx0XCJcIixcblx0XHQvLyBUaGlzIGVycm9yIGlzIGNhdWdodCBhbmQgbm90IHNob3duIGFuZCBjYXVzZXMgYSBmdWxsIHJlbG9hZFxuXHRcdFwiXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XCIsXG5cdFx0XCJcIixcblx0XHRcIlx0XHR1cGRhdGUobmV3Q29udGVudCk7XCIsXG5cdFx0XCJcdH0pO1wiLFxuXHRcdFwiXCIsXG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdFwiXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcIixcblx0XHRcIn1cIlxuXHRdLmpvaW4oXCJcXG5cIik7XG5cblx0cmV0dXJuIFtcblx0XHQvLyBTdHlsZSBMb2FkZXJcblx0XHQvLyBBZGRzIENTUyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFx0XCJcIixcblx0XHQvLyBMb2FkIHN0eWxlc1xuXHRcdFwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiICsgbG9hZGVyVXRpbHMuc3RyaW5naWZ5UmVxdWVzdCh0aGlzLCBcIiEhXCIgKyByZXF1ZXN0KSArIFwiKTtcIixcblx0XHRcIlwiLFxuXHRcdFwiaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XCIsXG5cdFx0XCJcIixcblx0XHQvLyBUcmFuc2Zvcm0gc3R5bGVzXCIsXG5cdFx0XCJ2YXIgdHJhbnNmb3JtO1wiLFxuXHRcdFwidmFyIGluc2VydEludG87XCIsXG5cdFx0XCJcIixcblx0XHRvcHRpb25zLnRyYW5zZm9ybSA/IFwidHJhbnNmb3JtID0gcmVxdWlyZShcIiArIGxvYWRlclV0aWxzLnN0cmluZ2lmeVJlcXVlc3QodGhpcywgXCIhXCIgKyBwYXRoLnJlc29sdmUob3B0aW9ucy50cmFuc2Zvcm0pKSArIFwiKTtcIiA6IFwiXCIsXG4gXHRcdFwiXCIsXG5cdFx0XCJ2YXIgb3B0aW9ucyA9IFwiICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyksXG5cdFx0XCJcIixcblx0XHRcIm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXCIsXG5cdFx0XCJvcHRpb25zLmluc2VydEludG8gPSBcIiArIGluc2VydEludG8gKyBcIjtcIixcblx0XHRcIlwiLFxuXHRcdC8vIEFkZCBzdHlsZXMgdG8gdGhlIERPTVxuXHRcdFwidmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIgKyBsb2FkZXJVdGlscy5zdHJpbmdpZnlSZXF1ZXN0KHRoaXMsIFwiIVwiICsgcGF0aC5qb2luKF9fZGlybmFtZSwgXCJsaWJcIiwgXCJhZGRTdHlsZXMuanNcIikpICsgXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1wiLFxuXHRcdFwiXCIsXG5cdFx0XCJpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcIixcblx0XHRcIlwiLFxuXHRcdG9wdGlvbnMuaG1yID8gaG1yIDogXCJcIlxuXHRdLmpvaW4oXCJcXG5cIik7XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIvKiogQGxpY2Vuc2UgVVJJLmpzIHY0LjIuMSAoYykgMjAxMSBHYXJ5IENvdXJ0LiBMaWNlbnNlOiBodHRwOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvdXJpLWpzICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwuVVJJID0gZ2xvYmFsLlVSSSB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHNldHMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc2V0c1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoc2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHNldHNbMF0gPSBzZXRzWzBdLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgdmFyIHhsID0gc2V0cy5sZW5ndGggLSAxO1xuICAgICAgICBmb3IgKHZhciB4ID0gMTsgeCA8IHhsOyArK3gpIHtcbiAgICAgICAgICAgIHNldHNbeF0gPSBzZXRzW3hdLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRzW3hsXSA9IHNldHNbeGxdLnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gc2V0cy5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2V0c1swXTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJleHAoc3RyKSB7XG4gICAgcmV0dXJuIFwiKD86XCIgKyBzdHIgKyBcIilcIjtcbn1cbmZ1bmN0aW9uIHR5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8gPT09IHVuZGVmaW5lZCA/IFwidW5kZWZpbmVkXCIgOiBvID09PSBudWxsID8gXCJudWxsXCIgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc3BsaXQoXCIgXCIpLnBvcCgpLnNwbGl0KFwiXVwiKS5zaGlmdCgpLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiB0b1VwcGVyQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG59XG5mdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICAgIHJldHVybiBvYmogIT09IHVuZGVmaW5lZCAmJiBvYmogIT09IG51bGwgPyBvYmogaW5zdGFuY2VvZiBBcnJheSA/IG9iaiA6IHR5cGVvZiBvYmoubGVuZ3RoICE9PSBcIm51bWJlclwiIHx8IG9iai5zcGxpdCB8fCBvYmouc2V0SW50ZXJ2YWwgfHwgb2JqLmNhbGwgPyBbb2JqXSA6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaikgOiBbXTtcbn1cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBvYmogPSB0YXJnZXQ7XG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRXhwcyhpc0lSSSkge1xuICAgIHZhciBBTFBIQSQkID0gXCJbQS1aYS16XVwiLFxuICAgICAgICBDUiQgPSBcIltcXFxceDBEXVwiLFxuICAgICAgICBESUdJVCQkID0gXCJbMC05XVwiLFxuICAgICAgICBEUVVPVEUkJCA9IFwiW1xcXFx4MjJdXCIsXG4gICAgICAgIEhFWERJRyQkID0gbWVyZ2UoRElHSVQkJCwgXCJbQS1GYS1mXVwiKSxcbiAgICAgICAgLy9jYXNlLWluc2Vuc2l0aXZlXG4gICAgTEYkJCA9IFwiW1xcXFx4MEFdXCIsXG4gICAgICAgIFNQJCQgPSBcIltcXFxceDIwXVwiLFxuICAgICAgICBQQ1RfRU5DT0RFRCQgPSBzdWJleHAoc3ViZXhwKFwiJVtFRmVmXVwiICsgSEVYRElHJCQgKyBcIiVcIiArIEhFWERJRyQkICsgSEVYRElHJCQgKyBcIiVcIiArIEhFWERJRyQkICsgSEVYRElHJCQpICsgXCJ8XCIgKyBzdWJleHAoXCIlWzg5QS1GYS1mXVwiICsgSEVYRElHJCQgKyBcIiVcIiArIEhFWERJRyQkICsgSEVYRElHJCQpICsgXCJ8XCIgKyBzdWJleHAoXCIlXCIgKyBIRVhESUckJCArIEhFWERJRyQkKSksXG4gICAgICAgIC8vZXhwYW5kZWRcbiAgICBHRU5fREVMSU1TJCQgPSBcIltcXFxcOlxcXFwvXFxcXD9cXFxcI1xcXFxbXFxcXF1cXFxcQF1cIixcbiAgICAgICAgU1VCX0RFTElNUyQkID0gXCJbXFxcXCFcXFxcJFxcXFwmXFxcXCdcXFxcKFxcXFwpXFxcXCpcXFxcK1xcXFwsXFxcXDtcXFxcPV1cIixcbiAgICAgICAgUkVTRVJWRUQkJCA9IG1lcmdlKEdFTl9ERUxJTVMkJCwgU1VCX0RFTElNUyQkKSxcbiAgICAgICAgVUNTQ0hBUiQkID0gaXNJUkkgPyBcIltcXFxceEEwLVxcXFx1MjAwRFxcXFx1MjAxMC1cXFxcdTIwMjlcXFxcdTIwMkYtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRUZdXCIgOiBcIltdXCIsXG4gICAgICAgIC8vc3Vic2V0LCBleGNsdWRlcyBiaWRpIGNvbnRyb2wgY2hhcmFjdGVyc1xuICAgIElQUklWQVRFJCQgPSBpc0lSSSA/IFwiW1xcXFx1RTAwMC1cXFxcdUY4RkZdXCIgOiBcIltdXCIsXG4gICAgICAgIC8vc3Vic2V0XG4gICAgVU5SRVNFUlZFRCQkID0gbWVyZ2UoQUxQSEEkJCwgRElHSVQkJCwgXCJbXFxcXC1cXFxcLlxcXFxfXFxcXH5dXCIsIFVDU0NIQVIkJCksXG4gICAgICAgIFNDSEVNRSQgPSBzdWJleHAoQUxQSEEkJCArIG1lcmdlKEFMUEhBJCQsIERJR0lUJCQsIFwiW1xcXFwrXFxcXC1cXFxcLl1cIikgKyBcIipcIiksXG4gICAgICAgIFVTRVJJTkZPJCA9IHN1YmV4cChzdWJleHAoUENUX0VOQ09ERUQkICsgXCJ8XCIgKyBtZXJnZShVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCwgXCJbXFxcXDpdXCIpKSArIFwiKlwiKSxcbiAgICAgICAgREVDX09DVEVUJCA9IHN1YmV4cChzdWJleHAoXCIyNVswLTVdXCIpICsgXCJ8XCIgKyBzdWJleHAoXCIyWzAtNF1cIiArIERJR0lUJCQpICsgXCJ8XCIgKyBzdWJleHAoXCIxXCIgKyBESUdJVCQkICsgRElHSVQkJCkgKyBcInxcIiArIHN1YmV4cChcIlsxLTldXCIgKyBESUdJVCQkKSArIFwifFwiICsgRElHSVQkJCksXG4gICAgICAgIERFQ19PQ1RFVF9SRUxBWEVEJCA9IHN1YmV4cChzdWJleHAoXCIyNVswLTVdXCIpICsgXCJ8XCIgKyBzdWJleHAoXCIyWzAtNF1cIiArIERJR0lUJCQpICsgXCJ8XCIgKyBzdWJleHAoXCIxXCIgKyBESUdJVCQkICsgRElHSVQkJCkgKyBcInxcIiArIHN1YmV4cChcIjA/WzEtOV1cIiArIERJR0lUJCQpICsgXCJ8MD8wP1wiICsgRElHSVQkJCksXG4gICAgICAgIC8vcmVsYXhlZCBwYXJzaW5nIHJ1bGVzXG4gICAgSVBWNEFERFJFU1MkID0gc3ViZXhwKERFQ19PQ1RFVF9SRUxBWEVEJCArIFwiXFxcXC5cIiArIERFQ19PQ1RFVF9SRUxBWEVEJCArIFwiXFxcXC5cIiArIERFQ19PQ1RFVF9SRUxBWEVEJCArIFwiXFxcXC5cIiArIERFQ19PQ1RFVF9SRUxBWEVEJCksXG4gICAgICAgIEgxNiQgPSBzdWJleHAoSEVYRElHJCQgKyBcInsxLDR9XCIpLFxuICAgICAgICBMUzMyJCA9IHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIiArIEgxNiQpICsgXCJ8XCIgKyBJUFY0QUREUkVTUyQpLFxuICAgICAgICBJUFY2QUREUkVTUzEkID0gc3ViZXhwKHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezZ9XCIgKyBMUzMyJCksXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgNiggaDE2IFwiOlwiICkgbHMzMlxuICAgIElQVjZBRERSRVNTMiQgPSBzdWJleHAoXCJcXFxcOlxcXFw6XCIgKyBzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcIns1fVwiICsgTFMzMiQpLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICBcIjo6XCIgNSggaDE2IFwiOlwiICkgbHMzMlxuICAgIElQVjZBRERSRVNTMyQgPSBzdWJleHAoc3ViZXhwKEgxNiQpICsgXCI/XFxcXDpcXFxcOlwiICsgc3ViZXhwKEgxNiQgKyBcIlxcXFw6XCIpICsgXCJ7NH1cIiArIExTMzIkKSxcbiAgICAgICAgLy9bICAgICAgICAgICAgICAgaDE2IF0gXCI6OlwiIDQoIGgxNiBcIjpcIiApIGxzMzJcbiAgICBJUFY2QUREUkVTUzQkID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDF9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiArIHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezN9XCIgKyBMUzMyJCksXG4gICAgICAgIC8vWyAqMSggaDE2IFwiOlwiICkgaDE2IF0gXCI6OlwiIDMoIGgxNiBcIjpcIiApIGxzMzJcbiAgICBJUFY2QUREUkVTUzUkID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDJ9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiArIHN1YmV4cChIMTYkICsgXCJcXFxcOlwiKSArIFwiezJ9XCIgKyBMUzMyJCksXG4gICAgICAgIC8vWyAqMiggaDE2IFwiOlwiICkgaDE2IF0gXCI6OlwiIDIoIGgxNiBcIjpcIiApIGxzMzJcbiAgICBJUFY2QUREUkVTUzYkID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDN9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiArIEgxNiQgKyBcIlxcXFw6XCIgKyBMUzMyJCksXG4gICAgICAgIC8vWyAqMyggaDE2IFwiOlwiICkgaDE2IF0gXCI6OlwiICAgIGgxNiBcIjpcIiAgIGxzMzJcbiAgICBJUFY2QUREUkVTUzckID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDR9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiArIExTMzIkKSxcbiAgICAgICAgLy9bICo0KCBoMTYgXCI6XCIgKSBoMTYgXSBcIjo6XCIgICAgICAgICAgICAgIGxzMzJcbiAgICBJUFY2QUREUkVTUzgkID0gc3ViZXhwKHN1YmV4cChzdWJleHAoSDE2JCArIFwiXFxcXDpcIikgKyBcInswLDV9XCIgKyBIMTYkKSArIFwiP1xcXFw6XFxcXDpcIiArIEgxNiQpLFxuICAgICAgICAvL1sgKjUoIGgxNiBcIjpcIiApIGgxNiBdIFwiOjpcIiAgICAgICAgICAgICAgaDE2XG4gICAgSVBWNkFERFJFU1M5JCA9IHN1YmV4cChzdWJleHAoc3ViZXhwKEgxNiQgKyBcIlxcXFw6XCIpICsgXCJ7MCw2fVwiICsgSDE2JCkgKyBcIj9cXFxcOlxcXFw6XCIpLFxuICAgICAgICAvL1sgKjYoIGgxNiBcIjpcIiApIGgxNiBdIFwiOjpcIlxuICAgIElQVjZBRERSRVNTJCA9IHN1YmV4cChbSVBWNkFERFJFU1MxJCwgSVBWNkFERFJFU1MyJCwgSVBWNkFERFJFU1MzJCwgSVBWNkFERFJFU1M0JCwgSVBWNkFERFJFU1M1JCwgSVBWNkFERFJFU1M2JCwgSVBWNkFERFJFU1M3JCwgSVBWNkFERFJFU1M4JCwgSVBWNkFERFJFU1M5JF0uam9pbihcInxcIikpLFxuICAgICAgICBaT05FSUQkID0gc3ViZXhwKHN1YmV4cChVTlJFU0VSVkVEJCQgKyBcInxcIiArIFBDVF9FTkNPREVEJCkgKyBcIitcIiksXG4gICAgICAgIC8vUkZDIDY4NzRcbiAgICBJUFY2QUREUlokID0gc3ViZXhwKElQVjZBRERSRVNTJCArIFwiXFxcXCUyNVwiICsgWk9ORUlEJCksXG4gICAgICAgIC8vUkZDIDY4NzRcbiAgICBJUFY2QUREUlpfUkVMQVhFRCQgPSBzdWJleHAoSVBWNkFERFJFU1MkICsgc3ViZXhwKFwiXFxcXCUyNXxcXFxcJSg/IVwiICsgSEVYRElHJCQgKyBcInsyfSlcIikgKyBaT05FSUQkKSxcbiAgICAgICAgLy9SRkMgNjg3NCwgd2l0aCByZWxheGVkIHBhcnNpbmcgcnVsZXNcbiAgICBJUFZGVVRVUkUkID0gc3ViZXhwKFwiW3ZWXVwiICsgSEVYRElHJCQgKyBcIitcXFxcLlwiICsgbWVyZ2UoVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQsIFwiW1xcXFw6XVwiKSArIFwiK1wiKSxcbiAgICAgICAgSVBfTElURVJBTCQgPSBzdWJleHAoXCJcXFxcW1wiICsgc3ViZXhwKElQVjZBRERSWl9SRUxBWEVEJCArIFwifFwiICsgSVBWNkFERFJFU1MkICsgXCJ8XCIgKyBJUFZGVVRVUkUkKSArIFwiXFxcXF1cIiksXG4gICAgICAgIC8vUkZDIDY4NzRcbiAgICBSRUdfTkFNRSQgPSBzdWJleHAoc3ViZXhwKFBDVF9FTkNPREVEJCArIFwifFwiICsgbWVyZ2UoVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpKSArIFwiKlwiKSxcbiAgICAgICAgSE9TVCQgPSBzdWJleHAoSVBfTElURVJBTCQgKyBcInxcIiArIElQVjRBRERSRVNTJCArIFwiKD8hXCIgKyBSRUdfTkFNRSQgKyBcIilcIiArIFwifFwiICsgUkVHX05BTUUkKSxcbiAgICAgICAgUE9SVCQgPSBzdWJleHAoRElHSVQkJCArIFwiKlwiKSxcbiAgICAgICAgQVVUSE9SSVRZJCA9IHN1YmV4cChzdWJleHAoVVNFUklORk8kICsgXCJAXCIpICsgXCI/XCIgKyBIT1NUJCArIHN1YmV4cChcIlxcXFw6XCIgKyBQT1JUJCkgKyBcIj9cIiksXG4gICAgICAgIFBDSEFSJCA9IHN1YmV4cChQQ1RfRU5DT0RFRCQgKyBcInxcIiArIG1lcmdlKFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkLCBcIltcXFxcOlxcXFxAXVwiKSksXG4gICAgICAgIFNFR01FTlQkID0gc3ViZXhwKFBDSEFSJCArIFwiKlwiKSxcbiAgICAgICAgU0VHTUVOVF9OWiQgPSBzdWJleHAoUENIQVIkICsgXCIrXCIpLFxuICAgICAgICBTRUdNRU5UX05aX05DJCA9IHN1YmV4cChzdWJleHAoUENUX0VOQ09ERUQkICsgXCJ8XCIgKyBtZXJnZShVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCwgXCJbXFxcXEBdXCIpKSArIFwiK1wiKSxcbiAgICAgICAgUEFUSF9BQkVNUFRZJCA9IHN1YmV4cChzdWJleHAoXCJcXFxcL1wiICsgU0VHTUVOVCQpICsgXCIqXCIpLFxuICAgICAgICBQQVRIX0FCU09MVVRFJCA9IHN1YmV4cChcIlxcXFwvXCIgKyBzdWJleHAoU0VHTUVOVF9OWiQgKyBQQVRIX0FCRU1QVFkkKSArIFwiP1wiKSxcbiAgICAgICAgLy9zaW1wbGlmaWVkXG4gICAgUEFUSF9OT1NDSEVNRSQgPSBzdWJleHAoU0VHTUVOVF9OWl9OQyQgKyBQQVRIX0FCRU1QVFkkKSxcbiAgICAgICAgLy9zaW1wbGlmaWVkXG4gICAgUEFUSF9ST09UTEVTUyQgPSBzdWJleHAoU0VHTUVOVF9OWiQgKyBQQVRIX0FCRU1QVFkkKSxcbiAgICAgICAgLy9zaW1wbGlmaWVkXG4gICAgUEFUSF9FTVBUWSQgPSBcIig/IVwiICsgUENIQVIkICsgXCIpXCIsXG4gICAgICAgIFBBVEgkID0gc3ViZXhwKFBBVEhfQUJFTVBUWSQgKyBcInxcIiArIFBBVEhfQUJTT0xVVEUkICsgXCJ8XCIgKyBQQVRIX05PU0NIRU1FJCArIFwifFwiICsgUEFUSF9ST09UTEVTUyQgKyBcInxcIiArIFBBVEhfRU1QVFkkKSxcbiAgICAgICAgUVVFUlkkID0gc3ViZXhwKHN1YmV4cChQQ0hBUiQgKyBcInxcIiArIG1lcmdlKFwiW1xcXFwvXFxcXD9dXCIsIElQUklWQVRFJCQpKSArIFwiKlwiKSxcbiAgICAgICAgRlJBR01FTlQkID0gc3ViZXhwKHN1YmV4cChQQ0hBUiQgKyBcInxbXFxcXC9cXFxcP11cIikgKyBcIipcIiksXG4gICAgICAgIEhJRVJfUEFSVCQgPSBzdWJleHAoc3ViZXhwKFwiXFxcXC9cXFxcL1wiICsgQVVUSE9SSVRZJCArIFBBVEhfQUJFTVBUWSQpICsgXCJ8XCIgKyBQQVRIX0FCU09MVVRFJCArIFwifFwiICsgUEFUSF9ST09UTEVTUyQgKyBcInxcIiArIFBBVEhfRU1QVFkkKSxcbiAgICAgICAgVVJJJCA9IHN1YmV4cChTQ0hFTUUkICsgXCJcXFxcOlwiICsgSElFUl9QQVJUJCArIHN1YmV4cChcIlxcXFw/XCIgKyBRVUVSWSQpICsgXCI/XCIgKyBzdWJleHAoXCJcXFxcI1wiICsgRlJBR01FTlQkKSArIFwiP1wiKSxcbiAgICAgICAgUkVMQVRJVkVfUEFSVCQgPSBzdWJleHAoc3ViZXhwKFwiXFxcXC9cXFxcL1wiICsgQVVUSE9SSVRZJCArIFBBVEhfQUJFTVBUWSQpICsgXCJ8XCIgKyBQQVRIX0FCU09MVVRFJCArIFwifFwiICsgUEFUSF9OT1NDSEVNRSQgKyBcInxcIiArIFBBVEhfRU1QVFkkKSxcbiAgICAgICAgUkVMQVRJVkUkID0gc3ViZXhwKFJFTEFUSVZFX1BBUlQkICsgc3ViZXhwKFwiXFxcXD9cIiArIFFVRVJZJCkgKyBcIj9cIiArIHN1YmV4cChcIlxcXFwjXCIgKyBGUkFHTUVOVCQpICsgXCI/XCIpLFxuICAgICAgICBVUklfUkVGRVJFTkNFJCA9IHN1YmV4cChVUkkkICsgXCJ8XCIgKyBSRUxBVElWRSQpLFxuICAgICAgICBBQlNPTFVURV9VUkkkID0gc3ViZXhwKFNDSEVNRSQgKyBcIlxcXFw6XCIgKyBISUVSX1BBUlQkICsgc3ViZXhwKFwiXFxcXD9cIiArIFFVRVJZJCkgKyBcIj9cIiksXG4gICAgICAgIEdFTkVSSUNfUkVGJCA9IFwiXihcIiArIFNDSEVNRSQgKyBcIilcXFxcOlwiICsgc3ViZXhwKHN1YmV4cChcIlxcXFwvXFxcXC8oXCIgKyBzdWJleHAoXCIoXCIgKyBVU0VSSU5GTyQgKyBcIilAXCIpICsgXCI/KFwiICsgSE9TVCQgKyBcIilcIiArIHN1YmV4cChcIlxcXFw6KFwiICsgUE9SVCQgKyBcIilcIikgKyBcIj8pXCIpICsgXCI/KFwiICsgUEFUSF9BQkVNUFRZJCArIFwifFwiICsgUEFUSF9BQlNPTFVURSQgKyBcInxcIiArIFBBVEhfUk9PVExFU1MkICsgXCJ8XCIgKyBQQVRIX0VNUFRZJCArIFwiKVwiKSArIHN1YmV4cChcIlxcXFw/KFwiICsgUVVFUlkkICsgXCIpXCIpICsgXCI/XCIgKyBzdWJleHAoXCJcXFxcIyhcIiArIEZSQUdNRU5UJCArIFwiKVwiKSArIFwiPyRcIixcbiAgICAgICAgUkVMQVRJVkVfUkVGJCA9IFwiXigpezB9XCIgKyBzdWJleHAoc3ViZXhwKFwiXFxcXC9cXFxcLyhcIiArIHN1YmV4cChcIihcIiArIFVTRVJJTkZPJCArIFwiKUBcIikgKyBcIj8oXCIgKyBIT1NUJCArIFwiKVwiICsgc3ViZXhwKFwiXFxcXDooXCIgKyBQT1JUJCArIFwiKVwiKSArIFwiPylcIikgKyBcIj8oXCIgKyBQQVRIX0FCRU1QVFkkICsgXCJ8XCIgKyBQQVRIX0FCU09MVVRFJCArIFwifFwiICsgUEFUSF9OT1NDSEVNRSQgKyBcInxcIiArIFBBVEhfRU1QVFkkICsgXCIpXCIpICsgc3ViZXhwKFwiXFxcXD8oXCIgKyBRVUVSWSQgKyBcIilcIikgKyBcIj9cIiArIHN1YmV4cChcIlxcXFwjKFwiICsgRlJBR01FTlQkICsgXCIpXCIpICsgXCI/JFwiLFxuICAgICAgICBBQlNPTFVURV9SRUYkID0gXCJeKFwiICsgU0NIRU1FJCArIFwiKVxcXFw6XCIgKyBzdWJleHAoc3ViZXhwKFwiXFxcXC9cXFxcLyhcIiArIHN1YmV4cChcIihcIiArIFVTRVJJTkZPJCArIFwiKUBcIikgKyBcIj8oXCIgKyBIT1NUJCArIFwiKVwiICsgc3ViZXhwKFwiXFxcXDooXCIgKyBQT1JUJCArIFwiKVwiKSArIFwiPylcIikgKyBcIj8oXCIgKyBQQVRIX0FCRU1QVFkkICsgXCJ8XCIgKyBQQVRIX0FCU09MVVRFJCArIFwifFwiICsgUEFUSF9ST09UTEVTUyQgKyBcInxcIiArIFBBVEhfRU1QVFkkICsgXCIpXCIpICsgc3ViZXhwKFwiXFxcXD8oXCIgKyBRVUVSWSQgKyBcIilcIikgKyBcIj8kXCIsXG4gICAgICAgIFNBTUVET0NfUkVGJCA9IFwiXlwiICsgc3ViZXhwKFwiXFxcXCMoXCIgKyBGUkFHTUVOVCQgKyBcIilcIikgKyBcIj8kXCIsXG4gICAgICAgIEFVVEhPUklUWV9SRUYkID0gXCJeXCIgKyBzdWJleHAoXCIoXCIgKyBVU0VSSU5GTyQgKyBcIilAXCIpICsgXCI/KFwiICsgSE9TVCQgKyBcIilcIiArIHN1YmV4cChcIlxcXFw6KFwiICsgUE9SVCQgKyBcIilcIikgKyBcIj8kXCI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgTk9UX1NDSEVNRTogbmV3IFJlZ0V4cChtZXJnZShcIlteXVwiLCBBTFBIQSQkLCBESUdJVCQkLCBcIltcXFxcK1xcXFwtXFxcXC5dXCIpLCBcImdcIiksXG4gICAgICAgIE5PVF9VU0VSSU5GTzogbmV3IFJlZ0V4cChtZXJnZShcIlteXFxcXCVcXFxcOl1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpLCBcImdcIiksXG4gICAgICAgIE5PVF9IT1NUOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJVxcXFxbXFxcXF1cXFxcOl1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpLCBcImdcIiksXG4gICAgICAgIE5PVF9QQVRIOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJVxcXFwvXFxcXDpcXFxcQF1cIiwgVU5SRVNFUlZFRCQkLCBTVUJfREVMSU1TJCQpLCBcImdcIiksXG4gICAgICAgIE5PVF9QQVRIX05PU0NIRU1FOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15cXFxcJVxcXFwvXFxcXEBdXCIsIFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkKSwgXCJnXCIpLFxuICAgICAgICBOT1RfUVVFUlk6IG5ldyBSZWdFeHAobWVyZ2UoXCJbXlxcXFwlXVwiLCBVTlJFU0VSVkVEJCQsIFNVQl9ERUxJTVMkJCwgXCJbXFxcXDpcXFxcQFxcXFwvXFxcXD9dXCIsIElQUklWQVRFJCQpLCBcImdcIiksXG4gICAgICAgIE5PVF9GUkFHTUVOVDogbmV3IFJlZ0V4cChtZXJnZShcIlteXFxcXCVdXCIsIFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkLCBcIltcXFxcOlxcXFxAXFxcXC9cXFxcP11cIiksIFwiZ1wiKSxcbiAgICAgICAgRVNDQVBFOiBuZXcgUmVnRXhwKG1lcmdlKFwiW15dXCIsIFVOUkVTRVJWRUQkJCwgU1VCX0RFTElNUyQkKSwgXCJnXCIpLFxuICAgICAgICBVTlJFU0VSVkVEOiBuZXcgUmVnRXhwKFVOUkVTRVJWRUQkJCwgXCJnXCIpLFxuICAgICAgICBPVEhFUl9DSEFSUzogbmV3IFJlZ0V4cChtZXJnZShcIlteXFxcXCVdXCIsIFVOUkVTRVJWRUQkJCwgUkVTRVJWRUQkJCksIFwiZ1wiKSxcbiAgICAgICAgUENUX0VOQ09ERUQ6IG5ldyBSZWdFeHAoUENUX0VOQ09ERUQkLCBcImdcIiksXG4gICAgICAgIElQVjRBRERSRVNTOiBuZXcgUmVnRXhwKFwiXihcIiArIElQVjRBRERSRVNTJCArIFwiKSRcIiksXG4gICAgICAgIElQVjZBRERSRVNTOiBuZXcgUmVnRXhwKFwiXlxcXFxbPyhcIiArIElQVjZBRERSRVNTJCArIFwiKVwiICsgc3ViZXhwKHN1YmV4cChcIlxcXFwlMjV8XFxcXCUoPyFcIiArIEhFWERJRyQkICsgXCJ7Mn0pXCIpICsgXCIoXCIgKyBaT05FSUQkICsgXCIpXCIpICsgXCI/XFxcXF0/JFwiKSAvL1JGQyA2ODc0LCB3aXRoIHJlbGF4ZWQgcGFyc2luZyBydWxlc1xuICAgIH07XG59XG52YXIgVVJJX1BST1RPQ09MID0gYnVpbGRFeHBzKGZhbHNlKTtcblxudmFyIElSSV9QUk9UT0NPTCA9IGJ1aWxkRXhwcyh0cnVlKTtcblxudmFyIHNsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KCk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciB0b0NvbnN1bWFibGVBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICB9XG59O1xuXG4vKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cbi8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcblxuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cbnZhciByZWdleFB1bnljb2RlID0gL154bi0tLztcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxceDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuLyoqIEVycm9yIG1lc3NhZ2VzICovXG52YXIgZXJyb3JzID0ge1xuXHQnb3ZlcmZsb3cnOiAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnLFxuXHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xufTtcblxuLyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8qKlxuICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIGVycm9yJDEodHlwZSkge1xuXHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xufVxuXG4vKipcbiAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcbiAqIGl0ZW0uXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG4gKiBhZGRyZXNzZXMuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuICogY2hhcmFjdGVyLlxuICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHQvLyB0aGUgbG9jYWwgcGFydCAoaS5lLiBldmVyeXRoaW5nIHVwIHRvIGBAYCkgaW50YWN0LlxuXHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHR9XG5cdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0dmFyIGxhYmVscyA9IHN0cmluZy5zcGxpdCgnLicpO1xuXHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHR2YXIgb3V0cHV0ID0gW107XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0dmFyIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuXHRcdFx0dmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkge1xuXHRcdFx0XHQvLyBMb3cgc3Vycm9nYXRlLlxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcblx0XHRcdFx0Ly8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHNlZSBgcHVueWNvZGUudWNzMi5kZWNvZGVgXG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZW5jb2RlXG4gKiBAcGFyYW0ge0FycmF5fSBjb2RlUG9pbnRzIFRoZSBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuICovXG52YXIgdWNzMmVuY29kZSA9IGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZywgdG9Db25zdW1hYmxlQXJyYXkoYXJyYXkpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluXG4gKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG4gKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cbiAqL1xudmFyIGJhc2ljVG9EaWdpdCA9IGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0aWYgKGNvZGVQb2ludCAtIDB4MzAgPCAweDBBKSB7XG5cdFx0cmV0dXJuIGNvZGVQb2ludCAtIDB4MTY7XG5cdH1cblx0aWYgKGNvZGVQb2ludCAtIDB4NDEgPCAweDFBKSB7XG5cdFx0cmV0dXJuIGNvZGVQb2ludCAtIDB4NDE7XG5cdH1cblx0aWYgKGNvZGVQb2ludCAtIDB4NjEgPCAweDFBKSB7XG5cdFx0cmV0dXJuIGNvZGVQb2ludCAtIDB4NjE7XG5cdH1cblx0cmV0dXJuIGJhc2U7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2VcbiAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcbiAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG4gKi9cbnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHtcblx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7XG59O1xuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICogQHByaXZhdGVcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdHZhciBrID0gMDtcblx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRmb3IgKDsgLyogbm8gaW5pdGlhbGl6YXRpb24gKi9kZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0fVxuXHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcbiAqIHN5bWJvbHMuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqL1xudmFyIGRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHQvLyBEb24ndCB1c2UgVUNTLTIuXG5cdHZhciBvdXRwdXQgPSBbXTtcblx0dmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXHR2YXIgaSA9IDA7XG5cdHZhciBuID0gaW5pdGlhbE47XG5cdHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdC8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LlxuXG5cdHZhciBiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdGlmIChiYXNpYyA8IDApIHtcblx0XHRiYXNpYyA9IDA7XG5cdH1cblxuXHRmb3IgKHZhciBqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG5cdFx0XHRlcnJvciQxKCdub3QtYmFzaWMnKTtcblx0XHR9XG5cdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdH1cblxuXHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0Zm9yICh2YXIgaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOykgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqL3tcblxuXHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0Ly8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXJcblx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0dmFyIG9sZGkgPSBpO1xuXHRcdGZvciAodmFyIHcgPSAxLCBrID0gYmFzZTs7IC8qIG5vIGNvbmRpdGlvbiAqL2sgKz0gYmFzZSkge1xuXG5cdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0ZXJyb3IkMSgnaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0ZXJyb3IkMSgnb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHR2YXIgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiBrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzO1xuXG5cdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRlcnJvciQxKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXG5cdFx0XHR3ICo9IGJhc2VNaW51c1Q7XG5cdFx0fVxuXG5cdFx0dmFyIG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdGVycm9yJDEoJ292ZXJmbG93Jyk7XG5cdFx0fVxuXG5cdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRpICU9IG91dDtcblxuXHRcdC8vIEluc2VydCBgbmAgYXQgcG9zaXRpb24gYGlgIG9mIHRoZSBvdXRwdXQuXG5cdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXHR9XG5cblx0cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZywgb3V0cHV0KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGFcbiAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHR2YXIgb3V0cHV0ID0gW107XG5cblx0Ly8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cblx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHQvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuXHR2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG5cdHZhciBuID0gaW5pdGlhbE47XG5cdHZhciBkZWx0YSA9IDA7XG5cdHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cblx0dmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHR2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0dmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG5cdHRyeSB7XG5cdFx0Zm9yICh2YXIgX2l0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdFx0XHR2YXIgX2N1cnJlbnRWYWx1ZTIgPSBfc3RlcC52YWx1ZTtcblxuXHRcdFx0aWYgKF9jdXJyZW50VmFsdWUyIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoX2N1cnJlbnRWYWx1ZTIpKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcblx0XHRfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0fSBmaW5hbGx5IHtcblx0XHR0cnkge1xuXHRcdFx0aWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0XHRcdFx0X2l0ZXJhdG9yLnJldHVybigpO1xuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0XHRcdFx0dGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblx0dmFyIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGg7XG5cblx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuXHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHR9XG5cblx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0dmFyIG0gPSBtYXhJbnQ7XG5cdFx0dmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0XHR2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG5cdFx0dmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuXHRcdHRyeSB7XG5cdFx0XHRmb3IgKHZhciBfaXRlcmF0b3IyID0gaW5wdXRbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRWYWx1ZSA9IF9zdGVwMi52YWx1ZTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuXHRcdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdFx0Ly8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuXHRcdFx0X2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG5cdFx0XHRcdFx0X2l0ZXJhdG9yMi5yZXR1cm4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0aWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuXHRcdFx0XHRcdHRocm93IF9pdGVyYXRvckVycm9yMjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdGVycm9yJDEoJ292ZXJmbG93Jyk7XG5cdFx0fVxuXG5cdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRuID0gbTtcblxuXHRcdHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG5cdFx0dmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuXHRcdHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cblx0XHR0cnkge1xuXHRcdFx0Zm9yICh2YXIgX2l0ZXJhdG9yMyA9IGlucHV0W1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG5cdFx0XHRcdHZhciBfY3VycmVudFZhbHVlID0gX3N0ZXAzLnZhbHVlO1xuXG5cdFx0XHRcdGlmIChfY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IkMSgnb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2N1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG5cdFx0XHRcdFx0dmFyIHEgPSBkZWx0YTtcblx0XHRcdFx0XHRmb3IgKHZhciBrID0gYmFzZTs7IC8qIG5vIGNvbmRpdGlvbiAqL2sgKz0gYmFzZSkge1xuXHRcdFx0XHRcdFx0dmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcztcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBxTWludXNUID0gcSAtIHQ7XG5cdFx0XHRcdFx0XHR2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QsIDApKSk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuXHRcdFx0X2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG5cdFx0XHRcdFx0X2l0ZXJhdG9yMy5yZXR1cm4oKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0aWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuXHRcdFx0XHRcdHRocm93IF9pdGVyYXRvckVycm9yMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdCsrZGVsdGE7XG5cdFx0KytuO1xuXHR9XG5cdHJldHVybiBvdXRwdXQuam9pbignJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3NcbiAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cbiAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuICogY29udmVydGVkIHRvIFVuaWNvZGUuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cbiAqIGNvbnZlcnQgdG8gVW5pY29kZS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuICogc3RyaW5nLlxuICovXG52YXIgdG9Vbmljb2RlID0gZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZykgPyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpIDogc3RyaW5nO1xuXHR9KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG4gKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcbiAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuICogQVNDSUkuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG4gKiBVbmljb2RlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3JcbiAqIGVtYWlsIGFkZHJlc3MuXG4gKi9cbnZhciB0b0FTQ0lJID0gZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbiAoc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpID8gJ3huLS0nICsgZW5jb2RlKHN0cmluZykgOiBzdHJpbmc7XG5cdH0pO1xufTtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8qKiBEZWZpbmUgdGhlIHB1YmxpYyBBUEkgKi9cbnZhciBwdW55Y29kZSA9IHtcblx0LyoqXG4gICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IFB1bnljb2RlLmpzIHZlcnNpb24gbnVtYmVyLlxuICAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICAqIEB0eXBlIFN0cmluZ1xuICAqL1xuXHQndmVyc2lvbic6ICcyLjEuMCcsXG5cdC8qKlxuICAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG4gICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cbiAgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cbiAgKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAgKiBAdHlwZSBPYmplY3RcbiAgKi9cblx0J3VjczInOiB7XG5cdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0fSxcblx0J2RlY29kZSc6IGRlY29kZSxcblx0J2VuY29kZSc6IGVuY29kZSxcblx0J3RvQVNDSUknOiB0b0FTQ0lJLFxuXHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG59O1xuXG4vKipcbiAqIFVSSS5qc1xuICpcbiAqIEBmaWxlb3ZlcnZpZXcgQW4gUkZDIDM5ODYgY29tcGxpYW50LCBzY2hlbWUgZXh0ZW5kYWJsZSBVUkkgcGFyc2luZy92YWxpZGF0aW5nL3Jlc29sdmluZyBsaWJyYXJ5IGZvciBKYXZhU2NyaXB0LlxuICogQGF1dGhvciA8YSBocmVmPVwibWFpbHRvOmdhcnkuY291cnRAZ21haWwuY29tXCI+R2FyeSBDb3VydDwvYT5cbiAqIEBzZWUgaHR0cDovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L3VyaS1qc1xuICovXG4vKipcbiAqIENvcHlyaWdodCAyMDExIEdhcnkgQ291cnQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlXG4gKiBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqXG4gKiAgICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxuICogICAgICAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICpcbiAqICAgIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0XG4gKiAgICAgICBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFsc1xuICogICAgICAgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgR0FSWSBDT1VSVCBgYEFTIElTJycgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRURcbiAqIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBHQVJZIENPVVJUIE9SXG4gKiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUlxuICogU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTlxuICogQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICogTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGXG4gKiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiBUaGUgdmlld3MgYW5kIGNvbmNsdXNpb25zIGNvbnRhaW5lZCBpbiB0aGUgc29mdHdhcmUgYW5kIGRvY3VtZW50YXRpb24gYXJlIHRob3NlIG9mIHRoZVxuICogYXV0aG9ycyBhbmQgc2hvdWxkIG5vdCBiZSBpbnRlcnByZXRlZCBhcyByZXByZXNlbnRpbmcgb2ZmaWNpYWwgcG9saWNpZXMsIGVpdGhlciBleHByZXNzZWRcbiAqIG9yIGltcGxpZWQsIG9mIEdhcnkgQ291cnQuXG4gKi9cbnZhciBTQ0hFTUVTID0ge307XG5mdW5jdGlvbiBwY3RFbmNDaGFyKGNocikge1xuICAgIHZhciBjID0gY2hyLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGUgPSB2b2lkIDA7XG4gICAgaWYgKGMgPCAxNikgZSA9IFwiJTBcIiArIGMudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7ZWxzZSBpZiAoYyA8IDEyOCkgZSA9IFwiJVwiICsgYy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtlbHNlIGlmIChjIDwgMjA0OCkgZSA9IFwiJVwiICsgKGMgPj4gNiB8IDE5MikudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyBcIiVcIiArIChjICYgNjMgfCAxMjgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO2Vsc2UgZSA9IFwiJVwiICsgKGMgPj4gMTIgfCAyMjQpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgXCIlXCIgKyAoYyA+PiA2ICYgNjMgfCAxMjgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgXCIlXCIgKyAoYyAmIDYzIHwgMTI4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIHBjdERlY0NoYXJzKHN0cikge1xuICAgIHZhciBuZXdTdHIgPSBcIlwiO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgaWwgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpIDwgaWwpIHtcbiAgICAgICAgdmFyIGMgPSBwYXJzZUludChzdHIuc3Vic3RyKGkgKyAxLCAyKSwgMTYpO1xuICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgICAgbmV3U3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgICAgICBpICs9IDM7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA+PSAxOTQgJiYgYyA8IDIyNCkge1xuICAgICAgICAgICAgaWYgKGlsIC0gaSA+PSA2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGMyID0gcGFyc2VJbnQoc3RyLnN1YnN0cihpICsgNCwgMiksIDE2KTtcbiAgICAgICAgICAgICAgICBuZXdTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYyAmIDMxKSA8PCA2IHwgYzIgJiA2Myk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1N0ciArPSBzdHIuc3Vic3RyKGksIDYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSArPSA2O1xuICAgICAgICB9IGVsc2UgaWYgKGMgPj0gMjI0KSB7XG4gICAgICAgICAgICBpZiAoaWwgLSBpID49IDkpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2MgPSBwYXJzZUludChzdHIuc3Vic3RyKGkgKyA0LCAyKSwgMTYpO1xuICAgICAgICAgICAgICAgIHZhciBjMyA9IHBhcnNlSW50KHN0ci5zdWJzdHIoaSArIDcsIDIpLCAxNik7XG4gICAgICAgICAgICAgICAgbmV3U3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGMgJiAxNSkgPDwgMTIgfCAoX2MgJiA2MykgPDwgNiB8IGMzICYgNjMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTdHIgKz0gc3RyLnN1YnN0cihpLCA5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgKz0gOTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0ciArPSBzdHIuc3Vic3RyKGksIDMpO1xuICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHI7XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcoY29tcG9uZW50cywgcHJvdG9jb2wpIHtcbiAgICBmdW5jdGlvbiBkZWNvZGVVbnJlc2VydmVkKHN0cikge1xuICAgICAgICB2YXIgZGVjU3RyID0gcGN0RGVjQ2hhcnMoc3RyKTtcbiAgICAgICAgcmV0dXJuICFkZWNTdHIubWF0Y2gocHJvdG9jb2wuVU5SRVNFUlZFRCkgPyBzdHIgOiBkZWNTdHI7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnNjaGVtZSkgY29tcG9uZW50cy5zY2hlbWUgPSBTdHJpbmcoY29tcG9uZW50cy5zY2hlbWUpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnRvTG93ZXJDYXNlKCkucmVwbGFjZShwcm90b2NvbC5OT1RfU0NIRU1FLCBcIlwiKTtcbiAgICBpZiAoY29tcG9uZW50cy51c2VyaW5mbyAhPT0gdW5kZWZpbmVkKSBjb21wb25lbnRzLnVzZXJpbmZvID0gU3RyaW5nKGNvbXBvbmVudHMudXNlcmluZm8pLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnJlcGxhY2UocHJvdG9jb2wuTk9UX1VTRVJJTkZPLCBwY3RFbmNDaGFyKS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCB0b1VwcGVyQ2FzZSk7XG4gICAgaWYgKGNvbXBvbmVudHMuaG9zdCAhPT0gdW5kZWZpbmVkKSBjb21wb25lbnRzLmhvc3QgPSBTdHJpbmcoY29tcG9uZW50cy5ob3N0KS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCBkZWNvZGVVbnJlc2VydmVkKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocHJvdG9jb2wuTk9UX0hPU1QsIHBjdEVuY0NoYXIpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKTtcbiAgICBpZiAoY29tcG9uZW50cy5wYXRoICE9PSB1bmRlZmluZWQpIGNvbXBvbmVudHMucGF0aCA9IFN0cmluZyhjb21wb25lbnRzLnBhdGgpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnJlcGxhY2UoY29tcG9uZW50cy5zY2hlbWUgPyBwcm90b2NvbC5OT1RfUEFUSCA6IHByb3RvY29sLk5PVF9QQVRIX05PU0NIRU1FLCBwY3RFbmNDaGFyKS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCB0b1VwcGVyQ2FzZSk7XG4gICAgaWYgKGNvbXBvbmVudHMucXVlcnkgIT09IHVuZGVmaW5lZCkgY29tcG9uZW50cy5xdWVyeSA9IFN0cmluZyhjb21wb25lbnRzLnF1ZXJ5KS5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCBkZWNvZGVVbnJlc2VydmVkKS5yZXBsYWNlKHByb3RvY29sLk5PVF9RVUVSWSwgcGN0RW5jQ2hhcikucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpO1xuICAgIGlmIChjb21wb25lbnRzLmZyYWdtZW50ICE9PSB1bmRlZmluZWQpIGNvbXBvbmVudHMuZnJhZ21lbnQgPSBTdHJpbmcoY29tcG9uZW50cy5mcmFnbWVudCkucmVwbGFjZShwcm90b2NvbC5QQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShwcm90b2NvbC5OT1RfRlJBR01FTlQsIHBjdEVuY0NoYXIpLnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKTtcbiAgICByZXR1cm4gY29tcG9uZW50cztcbn1cblxuZnVuY3Rpb24gX3N0cmlwTGVhZGluZ1plcm9zKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXjAqKC4qKS8sIFwiJDFcIikgfHwgXCIwXCI7XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplSVB2NChob3N0LCBwcm90b2NvbCkge1xuICAgIHZhciBtYXRjaGVzID0gaG9zdC5tYXRjaChwcm90b2NvbC5JUFY0QUREUkVTUykgfHwgW107XG5cbiAgICB2YXIgX21hdGNoZXMgPSBzbGljZWRUb0FycmF5KG1hdGNoZXMsIDIpLFxuICAgICAgICBhZGRyZXNzID0gX21hdGNoZXNbMV07XG5cbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gYWRkcmVzcy5zcGxpdChcIi5cIikubWFwKF9zdHJpcExlYWRpbmdaZXJvcykuam9pbihcIi5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUlQdjYoaG9zdCwgcHJvdG9jb2wpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IGhvc3QubWF0Y2gocHJvdG9jb2wuSVBWNkFERFJFU1MpIHx8IFtdO1xuXG4gICAgdmFyIF9tYXRjaGVzMiA9IHNsaWNlZFRvQXJyYXkobWF0Y2hlcywgMyksXG4gICAgICAgIGFkZHJlc3MgPSBfbWF0Y2hlczJbMV0sXG4gICAgICAgIHpvbmUgPSBfbWF0Y2hlczJbMl07XG5cbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgICB2YXIgX2FkZHJlc3MkdG9Mb3dlckNhc2UkID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpLnNwbGl0KCc6OicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgIF9hZGRyZXNzJHRvTG93ZXJDYXNlJDIgPSBzbGljZWRUb0FycmF5KF9hZGRyZXNzJHRvTG93ZXJDYXNlJCwgMiksXG4gICAgICAgICAgICBsYXN0ID0gX2FkZHJlc3MkdG9Mb3dlckNhc2UkMlswXSxcbiAgICAgICAgICAgIGZpcnN0ID0gX2FkZHJlc3MkdG9Mb3dlckNhc2UkMlsxXTtcblxuICAgICAgICB2YXIgZmlyc3RGaWVsZHMgPSBmaXJzdCA/IGZpcnN0LnNwbGl0KFwiOlwiKS5tYXAoX3N0cmlwTGVhZGluZ1plcm9zKSA6IFtdO1xuICAgICAgICB2YXIgbGFzdEZpZWxkcyA9IGxhc3Quc3BsaXQoXCI6XCIpLm1hcChfc3RyaXBMZWFkaW5nWmVyb3MpO1xuICAgICAgICB2YXIgaXNMYXN0RmllbGRJUHY0QWRkcmVzcyA9IHByb3RvY29sLklQVjRBRERSRVNTLnRlc3QobGFzdEZpZWxkc1tsYXN0RmllbGRzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgdmFyIGZpZWxkQ291bnQgPSBpc0xhc3RGaWVsZElQdjRBZGRyZXNzID8gNyA6IDg7XG4gICAgICAgIHZhciBsYXN0RmllbGRzU3RhcnQgPSBsYXN0RmllbGRzLmxlbmd0aCAtIGZpZWxkQ291bnQ7XG4gICAgICAgIHZhciBmaWVsZHMgPSBBcnJheShmaWVsZENvdW50KTtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBmaWVsZENvdW50OyArK3gpIHtcbiAgICAgICAgICAgIGZpZWxkc1t4XSA9IGZpcnN0RmllbGRzW3hdIHx8IGxhc3RGaWVsZHNbbGFzdEZpZWxkc1N0YXJ0ICsgeF0gfHwgJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTGFzdEZpZWxkSVB2NEFkZHJlc3MpIHtcbiAgICAgICAgICAgIGZpZWxkc1tmaWVsZENvdW50IC0gMV0gPSBfbm9ybWFsaXplSVB2NChmaWVsZHNbZmllbGRDb3VudCAtIDFdLCBwcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFsbFplcm9GaWVsZHMgPSBmaWVsZHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZpZWxkLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKCFmaWVsZCB8fCBmaWVsZCA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdExvbmdlc3QgPSBhY2NbYWNjLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TG9uZ2VzdCAmJiBsYXN0TG9uZ2VzdC5pbmRleCArIGxhc3RMb25nZXN0Lmxlbmd0aCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExvbmdlc3QubGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjLnB1c2goeyBpbmRleDogaW5kZXgsIGxlbmd0aDogMSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHZhciBsb25nZXN0WmVyb0ZpZWxkcyA9IGFsbFplcm9GaWVsZHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH0pWzBdO1xuICAgICAgICB2YXIgbmV3SG9zdCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGxvbmdlc3RaZXJvRmllbGRzICYmIGxvbmdlc3RaZXJvRmllbGRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBuZXdGaXJzdCA9IGZpZWxkcy5zbGljZSgwLCBsb25nZXN0WmVyb0ZpZWxkcy5pbmRleCk7XG4gICAgICAgICAgICB2YXIgbmV3TGFzdCA9IGZpZWxkcy5zbGljZShsb25nZXN0WmVyb0ZpZWxkcy5pbmRleCArIGxvbmdlc3RaZXJvRmllbGRzLmxlbmd0aCk7XG4gICAgICAgICAgICBuZXdIb3N0ID0gbmV3Rmlyc3Quam9pbihcIjpcIikgKyBcIjo6XCIgKyBuZXdMYXN0LmpvaW4oXCI6XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3SG9zdCA9IGZpZWxkcy5qb2luKFwiOlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoem9uZSkge1xuICAgICAgICAgICAgbmV3SG9zdCArPSBcIiVcIiArIHpvbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0hvc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxufVxudmFyIFVSSV9QQVJTRSA9IC9eKD86KFteOlxcLz8jXSspOik/KD86XFwvXFwvKCg/OihbXlxcLz8jQF0qKUApPyhcXFtbXlxcLz8jXFxdXStcXF18W15cXC8/IzpdKikoPzpcXDooXFxkKikpPykpPyhbXj8jXSopKD86XFw/KFteI10qKSk/KD86IygoPzoufFxcbnxcXHIpKikpPy9pO1xudmFyIE5PX01BVENIX0lTX1VOREVGSU5FRCA9IFwiXCIubWF0Y2goLygpezB9LylbMV0gPT09IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIHBhcnNlKHVyaVN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBjb21wb25lbnRzID0ge307XG4gICAgdmFyIHByb3RvY29sID0gb3B0aW9ucy5pcmkgIT09IGZhbHNlID8gSVJJX1BST1RPQ09MIDogVVJJX1BST1RPQ09MO1xuICAgIGlmIChvcHRpb25zLnJlZmVyZW5jZSA9PT0gXCJzdWZmaXhcIikgdXJpU3RyaW5nID0gKG9wdGlvbnMuc2NoZW1lID8gb3B0aW9ucy5zY2hlbWUgKyBcIjpcIiA6IFwiXCIpICsgXCIvL1wiICsgdXJpU3RyaW5nO1xuICAgIHZhciBtYXRjaGVzID0gdXJpU3RyaW5nLm1hdGNoKFVSSV9QQVJTRSk7XG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKE5PX01BVENIX0lTX1VOREVGSU5FRCkge1xuICAgICAgICAgICAgLy9zdG9yZSBlYWNoIGNvbXBvbmVudFxuICAgICAgICAgICAgY29tcG9uZW50cy5zY2hlbWUgPSBtYXRjaGVzWzFdO1xuICAgICAgICAgICAgY29tcG9uZW50cy51c2VyaW5mbyA9IG1hdGNoZXNbM107XG4gICAgICAgICAgICBjb21wb25lbnRzLmhvc3QgPSBtYXRjaGVzWzRdO1xuICAgICAgICAgICAgY29tcG9uZW50cy5wb3J0ID0gcGFyc2VJbnQobWF0Y2hlc1s1XSwgMTApO1xuICAgICAgICAgICAgY29tcG9uZW50cy5wYXRoID0gbWF0Y2hlc1s2XSB8fCBcIlwiO1xuICAgICAgICAgICAgY29tcG9uZW50cy5xdWVyeSA9IG1hdGNoZXNbN107XG4gICAgICAgICAgICBjb21wb25lbnRzLmZyYWdtZW50ID0gbWF0Y2hlc1s4XTtcbiAgICAgICAgICAgIC8vZml4IHBvcnQgbnVtYmVyXG4gICAgICAgICAgICBpZiAoaXNOYU4oY29tcG9uZW50cy5wb3J0KSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucG9ydCA9IG1hdGNoZXNbNV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL0lFIEZJWCBmb3IgaW1wcm9wZXIgUmVnRXhwIG1hdGNoaW5nXG4gICAgICAgICAgICAvL3N0b3JlIGVhY2ggY29tcG9uZW50XG4gICAgICAgICAgICBjb21wb25lbnRzLnNjaGVtZSA9IG1hdGNoZXNbMV0gfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29tcG9uZW50cy51c2VyaW5mbyA9IHVyaVN0cmluZy5pbmRleE9mKFwiQFwiKSAhPT0gLTEgPyBtYXRjaGVzWzNdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29tcG9uZW50cy5ob3N0ID0gdXJpU3RyaW5nLmluZGV4T2YoXCIvL1wiKSAhPT0gLTEgPyBtYXRjaGVzWzRdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29tcG9uZW50cy5wb3J0ID0gcGFyc2VJbnQobWF0Y2hlc1s1XSwgMTApO1xuICAgICAgICAgICAgY29tcG9uZW50cy5wYXRoID0gbWF0Y2hlc1s2XSB8fCBcIlwiO1xuICAgICAgICAgICAgY29tcG9uZW50cy5xdWVyeSA9IHVyaVN0cmluZy5pbmRleE9mKFwiP1wiKSAhPT0gLTEgPyBtYXRjaGVzWzddIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29tcG9uZW50cy5mcmFnbWVudCA9IHVyaVN0cmluZy5pbmRleE9mKFwiI1wiKSAhPT0gLTEgPyBtYXRjaGVzWzhdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgLy9maXggcG9ydCBudW1iZXJcbiAgICAgICAgICAgIGlmIChpc05hTihjb21wb25lbnRzLnBvcnQpKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50cy5wb3J0ID0gdXJpU3RyaW5nLm1hdGNoKC9cXC9cXC8oPzoufFxcbikqXFw6KD86XFwvfFxcP3xcXCN8JCkvKSA/IG1hdGNoZXNbNF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBvbmVudHMuaG9zdCkge1xuICAgICAgICAgICAgLy9ub3JtYWxpemUgSVAgaG9zdHNcbiAgICAgICAgICAgIGNvbXBvbmVudHMuaG9zdCA9IF9ub3JtYWxpemVJUHY2KF9ub3JtYWxpemVJUHY0KGNvbXBvbmVudHMuaG9zdCwgcHJvdG9jb2wpLCBwcm90b2NvbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9kZXRlcm1pbmUgcmVmZXJlbmNlIHR5cGVcbiAgICAgICAgaWYgKGNvbXBvbmVudHMuc2NoZW1lID09PSB1bmRlZmluZWQgJiYgY29tcG9uZW50cy51c2VyaW5mbyA9PT0gdW5kZWZpbmVkICYmIGNvbXBvbmVudHMuaG9zdCA9PT0gdW5kZWZpbmVkICYmIGNvbXBvbmVudHMucG9ydCA9PT0gdW5kZWZpbmVkICYmICFjb21wb25lbnRzLnBhdGggJiYgY29tcG9uZW50cy5xdWVyeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnJlZmVyZW5jZSA9IFwic2FtZS1kb2N1bWVudFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudHMuc2NoZW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucmVmZXJlbmNlID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudHMuZnJhZ21lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5yZWZlcmVuY2UgPSBcImFic29sdXRlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLnJlZmVyZW5jZSA9IFwidXJpXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy9jaGVjayBmb3IgcmVmZXJlbmNlIGVycm9yc1xuICAgICAgICBpZiAob3B0aW9ucy5yZWZlcmVuY2UgJiYgb3B0aW9ucy5yZWZlcmVuY2UgIT09IFwic3VmZml4XCIgJiYgb3B0aW9ucy5yZWZlcmVuY2UgIT09IGNvbXBvbmVudHMucmVmZXJlbmNlKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLmVycm9yID0gY29tcG9uZW50cy5lcnJvciB8fCBcIlVSSSBpcyBub3QgYSBcIiArIG9wdGlvbnMucmVmZXJlbmNlICsgXCIgcmVmZXJlbmNlLlwiO1xuICAgICAgICB9XG4gICAgICAgIC8vZmluZCBzY2hlbWUgaGFuZGxlclxuICAgICAgICB2YXIgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbKG9wdGlvbnMuc2NoZW1lIHx8IGNvbXBvbmVudHMuc2NoZW1lIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICAvL2NoZWNrIGlmIHNjaGVtZSBjYW4ndCBoYW5kbGUgSVJJc1xuICAgICAgICBpZiAoIW9wdGlvbnMudW5pY29kZVN1cHBvcnQgJiYgKCFzY2hlbWVIYW5kbGVyIHx8ICFzY2hlbWVIYW5kbGVyLnVuaWNvZGVTdXBwb3J0KSkge1xuICAgICAgICAgICAgLy9pZiBob3N0IGNvbXBvbmVudCBpcyBhIGRvbWFpbiBuYW1lXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50cy5ob3N0ICYmIChvcHRpb25zLmRvbWFpbkhvc3QgfHwgc2NoZW1lSGFuZGxlciAmJiBzY2hlbWVIYW5kbGVyLmRvbWFpbkhvc3QpKSB7XG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IFVuaWNvZGUgSUROIC0+IEFTQ0lJIElETlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuaG9zdCA9IHB1bnljb2RlLnRvQVNDSUkoY29tcG9uZW50cy5ob3N0LnJlcGxhY2UocHJvdG9jb2wuUENUX0VOQ09ERUQsIHBjdERlY0NoYXJzKS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuZXJyb3IgPSBjb21wb25lbnRzLmVycm9yIHx8IFwiSG9zdCdzIGRvbWFpbiBuYW1lIGNhbiBub3QgYmUgY29udmVydGVkIHRvIEFTQ0lJIHZpYSBwdW55Y29kZTogXCIgKyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vY29udmVydCBJUkkgLT4gVVJJXG4gICAgICAgICAgICBfbm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcoY29tcG9uZW50cywgVVJJX1BST1RPQ09MKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vbm9ybWFsaXplIGVuY29kaW5nc1xuICAgICAgICAgICAgX25vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nKGNvbXBvbmVudHMsIHByb3RvY29sKTtcbiAgICAgICAgfVxuICAgICAgICAvL3BlcmZvcm0gc2NoZW1lIHNwZWNpZmljIHBhcnNpbmdcbiAgICAgICAgaWYgKHNjaGVtZUhhbmRsZXIgJiYgc2NoZW1lSGFuZGxlci5wYXJzZSkge1xuICAgICAgICAgICAgc2NoZW1lSGFuZGxlci5wYXJzZShjb21wb25lbnRzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudHMuZXJyb3IgPSBjb21wb25lbnRzLmVycm9yIHx8IFwiVVJJIGNhbiBub3QgYmUgcGFyc2VkLlwiO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50cztcbn1cblxuZnVuY3Rpb24gX3JlY29tcG9zZUF1dGhvcml0eShjb21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgdmFyIHByb3RvY29sID0gb3B0aW9ucy5pcmkgIT09IGZhbHNlID8gSVJJX1BST1RPQ09MIDogVVJJX1BST1RPQ09MO1xuICAgIHZhciB1cmlUb2tlbnMgPSBbXTtcbiAgICBpZiAoY29tcG9uZW50cy51c2VyaW5mbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMudXNlcmluZm8pO1xuICAgICAgICB1cmlUb2tlbnMucHVzaChcIkBcIik7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvL25vcm1hbGl6ZSBJUCBob3N0cywgYWRkIGJyYWNrZXRzIGFuZCBlc2NhcGUgem9uZSBzZXBhcmF0b3IgZm9yIElQdjZcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goX25vcm1hbGl6ZUlQdjYoX25vcm1hbGl6ZUlQdjQoU3RyaW5nKGNvbXBvbmVudHMuaG9zdCksIHByb3RvY29sKSwgcHJvdG9jb2wpLnJlcGxhY2UocHJvdG9jb2wuSVBWNkFERFJFU1MsIGZ1bmN0aW9uIChfLCAkMSwgJDIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIltcIiArICQxICsgKCQyID8gXCIlMjVcIiArICQyIDogXCJcIikgKyBcIl1cIjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudHMucG9ydCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB1cmlUb2tlbnMucHVzaChcIjpcIik7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMucG9ydC50b1N0cmluZygxMCkpO1xuICAgIH1cbiAgICByZXR1cm4gdXJpVG9rZW5zLmxlbmd0aCA/IHVyaVRva2Vucy5qb2luKFwiXCIpIDogdW5kZWZpbmVkO1xufVxuXG52YXIgUkRTMSA9IC9eXFwuXFwuP1xcLy87XG52YXIgUkRTMiA9IC9eXFwvXFwuKFxcL3wkKS87XG52YXIgUkRTMyA9IC9eXFwvXFwuXFwuKFxcL3wkKS87XG52YXIgUkRTNSA9IC9eXFwvPyg/Oi58XFxuKSo/KD89XFwvfCQpLztcbmZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKGlucHV0KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdO1xuICAgIHdoaWxlIChpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKFJEUzEpKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMSwgXCJcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQubWF0Y2goUkRTMikpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShSRFMyLCBcIi9cIik7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQubWF0Y2goUkRTMykpIHtcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShSRFMzLCBcIi9cIik7XG4gICAgICAgICAgICBvdXRwdXQucG9wKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IFwiLlwiIHx8IGlucHV0ID09PSBcIi4uXCIpIHtcbiAgICAgICAgICAgIGlucHV0ID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbSA9IGlucHV0Lm1hdGNoKFJEUzUpO1xuICAgICAgICAgICAgaWYgKGltKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBpbVswXTtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKHMubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBkb3Qgc2VnbWVudCBjb25kaXRpb25cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemUoY29tcG9uZW50cykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBwcm90b2NvbCA9IG9wdGlvbnMuaXJpID8gSVJJX1BST1RPQ09MIDogVVJJX1BST1RPQ09MO1xuICAgIHZhciB1cmlUb2tlbnMgPSBbXTtcbiAgICAvL2ZpbmQgc2NoZW1lIGhhbmRsZXJcbiAgICB2YXIgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbKG9wdGlvbnMuc2NoZW1lIHx8IGNvbXBvbmVudHMuc2NoZW1lIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCldO1xuICAgIC8vcGVyZm9ybSBzY2hlbWUgc3BlY2lmaWMgc2VyaWFsaXphdGlvblxuICAgIGlmIChzY2hlbWVIYW5kbGVyICYmIHNjaGVtZUhhbmRsZXIuc2VyaWFsaXplKSBzY2hlbWVIYW5kbGVyLnNlcmlhbGl6ZShjb21wb25lbnRzLCBvcHRpb25zKTtcbiAgICBpZiAoY29tcG9uZW50cy5ob3N0KSB7XG4gICAgICAgIC8vaWYgaG9zdCBjb21wb25lbnQgaXMgYW4gSVB2NiBhZGRyZXNzXG4gICAgICAgIGlmIChwcm90b2NvbC5JUFY2QUREUkVTUy50ZXN0KGNvbXBvbmVudHMuaG9zdCkpIHt9XG4gICAgICAgIC8vVE9ETzogbm9ybWFsaXplIElQdjYgYWRkcmVzcyBhcyBwZXIgUkZDIDU5NTJcblxuICAgICAgICAvL2lmIGhvc3QgY29tcG9uZW50IGlzIGEgZG9tYWluIG5hbWVcbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5kb21haW5Ib3N0IHx8IHNjaGVtZUhhbmRsZXIgJiYgc2NoZW1lSGFuZGxlci5kb21haW5Ib3N0KSB7XG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IElETiB2aWEgcHVueWNvZGVcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzLmhvc3QgPSAhb3B0aW9ucy5pcmkgPyBwdW55Y29kZS50b0FTQ0lJKGNvbXBvbmVudHMuaG9zdC5yZXBsYWNlKHByb3RvY29sLlBDVF9FTkNPREVELCBwY3REZWNDaGFycykudG9Mb3dlckNhc2UoKSkgOiBwdW55Y29kZS50b1VuaWNvZGUoY29tcG9uZW50cy5ob3N0KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMuZXJyb3IgPSBjb21wb25lbnRzLmVycm9yIHx8IFwiSG9zdCdzIGRvbWFpbiBuYW1lIGNhbiBub3QgYmUgY29udmVydGVkIHRvIFwiICsgKCFvcHRpb25zLmlyaSA/IFwiQVNDSUlcIiA6IFwiVW5pY29kZVwiKSArIFwiIHZpYSBwdW55Y29kZTogXCIgKyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgLy9ub3JtYWxpemUgZW5jb2RpbmdcbiAgICBfbm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcoY29tcG9uZW50cywgcHJvdG9jb2wpO1xuICAgIGlmIChvcHRpb25zLnJlZmVyZW5jZSAhPT0gXCJzdWZmaXhcIiAmJiBjb21wb25lbnRzLnNjaGVtZSkge1xuICAgICAgICB1cmlUb2tlbnMucHVzaChjb21wb25lbnRzLnNjaGVtZSk7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKFwiOlwiKTtcbiAgICB9XG4gICAgdmFyIGF1dGhvcml0eSA9IF9yZWNvbXBvc2VBdXRob3JpdHkoY29tcG9uZW50cywgb3B0aW9ucyk7XG4gICAgaWYgKGF1dGhvcml0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnJlZmVyZW5jZSAhPT0gXCJzdWZmaXhcIikge1xuICAgICAgICAgICAgdXJpVG9rZW5zLnB1c2goXCIvL1wiKTtcbiAgICAgICAgfVxuICAgICAgICB1cmlUb2tlbnMucHVzaChhdXRob3JpdHkpO1xuICAgICAgICBpZiAoY29tcG9uZW50cy5wYXRoICYmIGNvbXBvbmVudHMucGF0aC5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICAgICAgICB1cmlUb2tlbnMucHVzaChcIi9cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMucGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBzID0gY29tcG9uZW50cy5wYXRoO1xuICAgICAgICBpZiAoIW9wdGlvbnMuYWJzb2x1dGVQYXRoICYmICghc2NoZW1lSGFuZGxlciB8fCAhc2NoZW1lSGFuZGxlci5hYnNvbHV0ZVBhdGgpKSB7XG4gICAgICAgICAgICBzID0gcmVtb3ZlRG90U2VnbWVudHMocyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF1dGhvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKC9eXFwvXFwvLywgXCIvJTJGXCIpOyAvL2Rvbid0IGFsbG93IHRoZSBwYXRoIHRvIHN0YXJ0IHdpdGggXCIvL1wiXG4gICAgICAgIH1cbiAgICAgICAgdXJpVG9rZW5zLnB1c2gocyk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnRzLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXJpVG9rZW5zLnB1c2goXCI/XCIpO1xuICAgICAgICB1cmlUb2tlbnMucHVzaChjb21wb25lbnRzLnF1ZXJ5KTtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudHMuZnJhZ21lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cmlUb2tlbnMucHVzaChcIiNcIik7XG4gICAgICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMuZnJhZ21lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gdXJpVG9rZW5zLmpvaW4oXCJcIik7IC8vbWVyZ2UgdG9rZW5zIGludG8gYSBzdHJpbmdcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudHMoYmFzZSwgcmVsYXRpdmUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgdmFyIHNraXBOb3JtYWxpemF0aW9uID0gYXJndW1lbnRzWzNdO1xuXG4gICAgdmFyIHRhcmdldCA9IHt9O1xuICAgIGlmICghc2tpcE5vcm1hbGl6YXRpb24pIHtcbiAgICAgICAgYmFzZSA9IHBhcnNlKHNlcmlhbGl6ZShiYXNlLCBvcHRpb25zKSwgb3B0aW9ucyk7IC8vbm9ybWFsaXplIGJhc2UgY29tcG9uZW50c1xuICAgICAgICByZWxhdGl2ZSA9IHBhcnNlKHNlcmlhbGl6ZShyZWxhdGl2ZSwgb3B0aW9ucyksIG9wdGlvbnMpOyAvL25vcm1hbGl6ZSByZWxhdGl2ZSBjb21wb25lbnRzXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGlmICghb3B0aW9ucy50b2xlcmFudCAmJiByZWxhdGl2ZS5zY2hlbWUpIHtcbiAgICAgICAgdGFyZ2V0LnNjaGVtZSA9IHJlbGF0aXZlLnNjaGVtZTtcbiAgICAgICAgLy90YXJnZXQuYXV0aG9yaXR5ID0gcmVsYXRpdmUuYXV0aG9yaXR5O1xuICAgICAgICB0YXJnZXQudXNlcmluZm8gPSByZWxhdGl2ZS51c2VyaW5mbztcbiAgICAgICAgdGFyZ2V0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0O1xuICAgICAgICB0YXJnZXQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCB8fCBcIlwiKTtcbiAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlbGF0aXZlLnVzZXJpbmZvICE9PSB1bmRlZmluZWQgfHwgcmVsYXRpdmUuaG9zdCAhPT0gdW5kZWZpbmVkIHx8IHJlbGF0aXZlLnBvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy90YXJnZXQuYXV0aG9yaXR5ID0gcmVsYXRpdmUuYXV0aG9yaXR5O1xuICAgICAgICAgICAgdGFyZ2V0LnVzZXJpbmZvID0gcmVsYXRpdmUudXNlcmluZm87XG4gICAgICAgICAgICB0YXJnZXQuaG9zdCA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgICAgICB0YXJnZXQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgICAgICAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlbGF0aXZlLnBhdGggfHwgXCJcIik7XG4gICAgICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghcmVsYXRpdmUucGF0aCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gYmFzZS5wYXRoO1xuICAgICAgICAgICAgICAgIGlmIChyZWxhdGl2ZS5xdWVyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocmVsYXRpdmUucGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHMocmVsYXRpdmUucGF0aCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChiYXNlLnVzZXJpbmZvICE9PSB1bmRlZmluZWQgfHwgYmFzZS5ob3N0ICE9PSB1bmRlZmluZWQgfHwgYmFzZS5wb3J0ICE9PSB1bmRlZmluZWQpICYmICFiYXNlLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gXCIvXCIgKyByZWxhdGl2ZS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFiYXNlLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVsYXRpdmUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKDAsIGJhc2UucGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSArIHJlbGF0aXZlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyh0YXJnZXQucGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy90YXJnZXQuYXV0aG9yaXR5ID0gYmFzZS5hdXRob3JpdHk7XG4gICAgICAgICAgICB0YXJnZXQudXNlcmluZm8gPSBiYXNlLnVzZXJpbmZvO1xuICAgICAgICAgICAgdGFyZ2V0Lmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB0YXJnZXQucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgfVxuICAgIHRhcmdldC5mcmFnbWVudCA9IHJlbGF0aXZlLmZyYWdtZW50O1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUoYmFzZVVSSSwgcmVsYXRpdmVVUkksIG9wdGlvbnMpIHtcbiAgICB2YXIgc2NoZW1lbGVzc09wdGlvbnMgPSBhc3NpZ24oeyBzY2hlbWU6ICdudWxsJyB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gc2VyaWFsaXplKHJlc29sdmVDb21wb25lbnRzKHBhcnNlKGJhc2VVUkksIHNjaGVtZWxlc3NPcHRpb25zKSwgcGFyc2UocmVsYXRpdmVVUkksIHNjaGVtZWxlc3NPcHRpb25zKSwgc2NoZW1lbGVzc09wdGlvbnMsIHRydWUpLCBzY2hlbWVsZXNzT3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZSh1cmksIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB1cmkgPSBzZXJpYWxpemUocGFyc2UodXJpLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0eXBlT2YodXJpKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB1cmkgPSBwYXJzZShzZXJpYWxpemUodXJpLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB1cmk7XG59XG5cbmZ1bmN0aW9uIGVxdWFsKHVyaUEsIHVyaUIsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHVyaUEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdXJpQSA9IHNlcmlhbGl6ZShwYXJzZSh1cmlBLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0eXBlT2YodXJpQSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgdXJpQSA9IHNlcmlhbGl6ZSh1cmlBLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB1cmlCID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHVyaUIgPSBzZXJpYWxpemUocGFyc2UodXJpQiwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodHlwZU9mKHVyaUIpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHVyaUIgPSBzZXJpYWxpemUodXJpQiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB1cmlBID09PSB1cmlCO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVDb21wb25lbnQoc3RyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHN0ciAmJiBzdHIudG9TdHJpbmcoKS5yZXBsYWNlKCFvcHRpb25zIHx8ICFvcHRpb25zLmlyaSA/IFVSSV9QUk9UT0NPTC5FU0NBUEUgOiBJUklfUFJPVE9DT0wuRVNDQVBFLCBwY3RFbmNDaGFyKTtcbn1cblxuZnVuY3Rpb24gdW5lc2NhcGVDb21wb25lbnQoc3RyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHN0ciAmJiBzdHIudG9TdHJpbmcoKS5yZXBsYWNlKCFvcHRpb25zIHx8ICFvcHRpb25zLmlyaSA/IFVSSV9QUk9UT0NPTC5QQ1RfRU5DT0RFRCA6IElSSV9QUk9UT0NPTC5QQ1RfRU5DT0RFRCwgcGN0RGVjQ2hhcnMpO1xufVxuXG52YXIgaGFuZGxlciA9IHtcbiAgICBzY2hlbWU6IFwiaHR0cFwiLFxuICAgIGRvbWFpbkhvc3Q6IHRydWUsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLy9yZXBvcnQgbWlzc2luZyBob3N0XG4gICAgICAgIGlmICghY29tcG9uZW50cy5ob3N0KSB7XG4gICAgICAgICAgICBjb21wb25lbnRzLmVycm9yID0gY29tcG9uZW50cy5lcnJvciB8fCBcIkhUVFAgVVJJcyBtdXN0IGhhdmUgYSBob3N0LlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUoY29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICAvL25vcm1hbGl6ZSB0aGUgZGVmYXVsdCBwb3J0XG4gICAgICAgIGlmIChjb21wb25lbnRzLnBvcnQgPT09IChTdHJpbmcoY29tcG9uZW50cy5zY2hlbWUpLnRvTG93ZXJDYXNlKCkgIT09IFwiaHR0cHNcIiA/IDgwIDogNDQzKSB8fCBjb21wb25lbnRzLnBvcnQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucG9ydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvL25vcm1hbGl6ZSB0aGUgZW1wdHkgcGF0aFxuICAgICAgICBpZiAoIWNvbXBvbmVudHMucGF0aCkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wYXRoID0gXCIvXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy9OT1RFOiBXZSBkbyBub3QgcGFyc2UgcXVlcnkgc3RyaW5ncyBmb3IgSFRUUCBVUklzXG4gICAgICAgIC8vYXMgV1dXIEZvcm0gVXJsIEVuY29kZWQgcXVlcnkgc3RyaW5ncyBhcmUgcGFydCBvZiB0aGUgSFRNTDQrIHNwZWMsXG4gICAgICAgIC8vYW5kIG5vdCB0aGUgSFRUUCBzcGVjLlxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcbiAgICB9XG59O1xuXG52YXIgaGFuZGxlciQxID0ge1xuICAgIHNjaGVtZTogXCJodHRwc1wiLFxuICAgIGRvbWFpbkhvc3Q6IGhhbmRsZXIuZG9tYWluSG9zdCxcbiAgICBwYXJzZTogaGFuZGxlci5wYXJzZSxcbiAgICBzZXJpYWxpemU6IGhhbmRsZXIuc2VyaWFsaXplXG59O1xuXG52YXIgTyA9IHt9O1xudmFyIGlzSVJJID0gdHJ1ZTtcbi8vUkZDIDM5ODZcbnZhciBVTlJFU0VSVkVEJCQgPSBcIltBLVphLXowLTlcXFxcLVxcXFwuXFxcXF9cXFxcflwiICsgKGlzSVJJID8gXCJcXFxceEEwLVxcXFx1MjAwRFxcXFx1MjAxMC1cXFxcdTIwMjlcXFxcdTIwMkYtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRUZcIiA6IFwiXCIpICsgXCJdXCI7XG52YXIgSEVYRElHJCQgPSBcIlswLTlBLUZhLWZdXCI7IC8vY2FzZS1pbnNlbnNpdGl2ZVxudmFyIFBDVF9FTkNPREVEJCA9IHN1YmV4cChzdWJleHAoXCIlW0VGZWZdXCIgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCkgKyBcInxcIiArIHN1YmV4cChcIiVbODlBLUZhLWZdXCIgKyBIRVhESUckJCArIFwiJVwiICsgSEVYRElHJCQgKyBIRVhESUckJCkgKyBcInxcIiArIHN1YmV4cChcIiVcIiArIEhFWERJRyQkICsgSEVYRElHJCQpKTsgLy9leHBhbmRlZFxuLy9SRkMgNTMyMiwgZXhjZXB0IHRoZXNlIHN5bWJvbHMgYXMgcGVyIFJGQyA2MDY4OiBAIDogLyA/ICMgWyBdICYgOyA9XG4vL2NvbnN0IEFURVhUJCQgPSBcIltBLVphLXowLTlcXFxcIVxcXFwjXFxcXCRcXFxcJVxcXFwmXFxcXCdcXFxcKlxcXFwrXFxcXC1cXFxcL1xcXFw9XFxcXD9cXFxcXlxcXFxfXFxcXGBcXFxce1xcXFx8XFxcXH1cXFxcfl1cIjtcbi8vY29uc3QgV1NQJCQgPSBcIltcXFxceDIwXFxcXHgwOV1cIjtcbi8vY29uc3QgT0JTX1FURVhUJCQgPSBcIltcXFxceDAxLVxcXFx4MDhcXFxceDBCXFxcXHgwQ1xcXFx4MEUtXFxcXHgxRlxcXFx4N0ZdXCI7ICAvLyglZDEtOCAvICVkMTEtMTIgLyAlZDE0LTMxIC8gJWQxMjcpXG4vL2NvbnN0IFFURVhUJCQgPSBtZXJnZShcIltcXFxceDIxXFxcXHgyMy1cXFxceDVCXFxcXHg1RC1cXFxceDdFXVwiLCBPQlNfUVRFWFQkJCk7ICAvLyVkMzMgLyAlZDM1LTkxIC8gJWQ5My0xMjYgLyBvYnMtcXRleHRcbi8vY29uc3QgVkNIQVIkJCA9IFwiW1xcXFx4MjEtXFxcXHg3RV1cIjtcbi8vY29uc3QgV1NQJCQgPSBcIltcXFxceDIwXFxcXHgwOV1cIjtcbi8vY29uc3QgT0JTX1FQJCA9IHN1YmV4cChcIlxcXFxcXFxcXCIgKyBtZXJnZShcIltcXFxceDAwXFxcXHgwRFxcXFx4MEFdXCIsIE9CU19RVEVYVCQkKSk7ICAvLyVkMCAvIENSIC8gTEYgLyBvYnMtcXRleHRcbi8vY29uc3QgRldTJCA9IHN1YmV4cChzdWJleHAoV1NQJCQgKyBcIipcIiArIFwiXFxcXHgwRFxcXFx4MEFcIikgKyBcIj9cIiArIFdTUCQkICsgXCIrXCIpO1xuLy9jb25zdCBRVU9URURfUEFJUiQgPSBzdWJleHAoc3ViZXhwKFwiXFxcXFxcXFxcIiArIHN1YmV4cChWQ0hBUiQkICsgXCJ8XCIgKyBXU1AkJCkpICsgXCJ8XCIgKyBPQlNfUVAkKTtcbi8vY29uc3QgUVVPVEVEX1NUUklORyQgPSBzdWJleHAoJ1xcXFxcIicgKyBzdWJleHAoRldTJCArIFwiP1wiICsgUUNPTlRFTlQkKSArIFwiKlwiICsgRldTJCArIFwiP1wiICsgJ1xcXFxcIicpO1xudmFyIEFURVhUJCQgPSBcIltBLVphLXowLTlcXFxcIVxcXFwkXFxcXCVcXFxcJ1xcXFwqXFxcXCtcXFxcLVxcXFxeXFxcXF9cXFxcYFxcXFx7XFxcXHxcXFxcfVxcXFx+XVwiO1xudmFyIFFURVhUJCQgPSBcIltcXFxcIVxcXFwkXFxcXCVcXFxcJ1xcXFwoXFxcXClcXFxcKlxcXFwrXFxcXCxcXFxcLVxcXFwuMC05XFxcXDxcXFxcPkEtWlxcXFx4NUUtXFxcXHg3RV1cIjtcbnZhciBWQ0hBUiQkID0gbWVyZ2UoUVRFWFQkJCwgXCJbXFxcXFxcXCJcXFxcXFxcXF1cIik7XG52YXIgU09NRV9ERUxJTVMkJCA9IFwiW1xcXFwhXFxcXCRcXFxcJ1xcXFwoXFxcXClcXFxcKlxcXFwrXFxcXCxcXFxcO1xcXFw6XFxcXEBdXCI7XG52YXIgVU5SRVNFUlZFRCA9IG5ldyBSZWdFeHAoVU5SRVNFUlZFRCQkLCBcImdcIik7XG52YXIgUENUX0VOQ09ERUQgPSBuZXcgUmVnRXhwKFBDVF9FTkNPREVEJCwgXCJnXCIpO1xudmFyIE5PVF9MT0NBTF9QQVJUID0gbmV3IFJlZ0V4cChtZXJnZShcIlteXVwiLCBBVEVYVCQkLCBcIltcXFxcLl1cIiwgJ1tcXFxcXCJdJywgVkNIQVIkJCksIFwiZ1wiKTtcbnZhciBOT1RfSEZOQU1FID0gbmV3IFJlZ0V4cChtZXJnZShcIlteXVwiLCBVTlJFU0VSVkVEJCQsIFNPTUVfREVMSU1TJCQpLCBcImdcIik7XG52YXIgTk9UX0hGVkFMVUUgPSBOT1RfSEZOQU1FO1xuZnVuY3Rpb24gZGVjb2RlVW5yZXNlcnZlZChzdHIpIHtcbiAgICB2YXIgZGVjU3RyID0gcGN0RGVjQ2hhcnMoc3RyKTtcbiAgICByZXR1cm4gIWRlY1N0ci5tYXRjaChVTlJFU0VSVkVEKSA/IHN0ciA6IGRlY1N0cjtcbn1cbnZhciBoYW5kbGVyJDIgPSB7XG4gICAgc2NoZW1lOiBcIm1haWx0b1wiLFxuICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZSQkMShjb21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtYWlsdG9Db21wb25lbnRzID0gY29tcG9uZW50cztcbiAgICAgICAgdmFyIHRvID0gbWFpbHRvQ29tcG9uZW50cy50byA9IG1haWx0b0NvbXBvbmVudHMucGF0aCA/IG1haWx0b0NvbXBvbmVudHMucGF0aC5zcGxpdChcIixcIikgOiBbXTtcbiAgICAgICAgbWFpbHRvQ29tcG9uZW50cy5wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAobWFpbHRvQ29tcG9uZW50cy5xdWVyeSkge1xuICAgICAgICAgICAgdmFyIHVua25vd25IZWFkZXJzID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgdmFyIGhmaWVsZHMgPSBtYWlsdG9Db21wb25lbnRzLnF1ZXJ5LnNwbGl0KFwiJlwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwLCB4bCA9IGhmaWVsZHMubGVuZ3RoOyB4IDwgeGw7ICsreCkge1xuICAgICAgICAgICAgICAgIHZhciBoZmllbGQgPSBoZmllbGRzW3hdLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGhmaWVsZFswXSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidG9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b0FkZHJzID0gaGZpZWxkWzFdLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF94ID0gMCwgX3hsID0gdG9BZGRycy5sZW5ndGg7IF94IDwgX3hsOyArK194KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8ucHVzaCh0b0FkZHJzW194XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN1YmplY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haWx0b0NvbXBvbmVudHMuc3ViamVjdCA9IHVuZXNjYXBlQ29tcG9uZW50KGhmaWVsZFsxXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haWx0b0NvbXBvbmVudHMuYm9keSA9IHVuZXNjYXBlQ29tcG9uZW50KGhmaWVsZFsxXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHVua25vd25IZWFkZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbdW5lc2NhcGVDb21wb25lbnQoaGZpZWxkWzBdLCBvcHRpb25zKV0gPSB1bmVzY2FwZUNvbXBvbmVudChoZmllbGRbMV0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVua25vd25IZWFkZXJzKSBtYWlsdG9Db21wb25lbnRzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIG1haWx0b0NvbXBvbmVudHMucXVlcnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAodmFyIF94MiA9IDAsIF94bDIgPSB0by5sZW5ndGg7IF94MiA8IF94bDI7ICsrX3gyKSB7XG4gICAgICAgICAgICB2YXIgYWRkciA9IHRvW194Ml0uc3BsaXQoXCJAXCIpO1xuICAgICAgICAgICAgYWRkclswXSA9IHVuZXNjYXBlQ29tcG9uZW50KGFkZHJbMF0pO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnVuaWNvZGVTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IFVuaWNvZGUgSUROIC0+IEFTQ0lJIElETlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZHJbMV0gPSBwdW55Y29kZS50b0FTQ0lJKHVuZXNjYXBlQ29tcG9uZW50KGFkZHJbMV0sIG9wdGlvbnMpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbHRvQ29tcG9uZW50cy5lcnJvciA9IG1haWx0b0NvbXBvbmVudHMuZXJyb3IgfHwgXCJFbWFpbCBhZGRyZXNzJ3MgZG9tYWluIG5hbWUgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gQVNDSUkgdmlhIHB1bnljb2RlOiBcIiArIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRyWzFdID0gdW5lc2NhcGVDb21wb25lbnQoYWRkclsxXSwgb3B0aW9ucykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvW194Ml0gPSBhZGRyLmpvaW4oXCJAXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYWlsdG9Db21wb25lbnRzO1xuICAgIH0sXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbiBzZXJpYWxpemUkJDEobWFpbHRvQ29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICB2YXIgY29tcG9uZW50cyA9IG1haWx0b0NvbXBvbmVudHM7XG4gICAgICAgIHZhciB0byA9IHRvQXJyYXkobWFpbHRvQ29tcG9uZW50cy50byk7XG4gICAgICAgIGlmICh0bykge1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDAsIHhsID0gdG8ubGVuZ3RoOyB4IDwgeGw7ICsreCkge1xuICAgICAgICAgICAgICAgIHZhciB0b0FkZHIgPSBTdHJpbmcodG9beF0pO1xuICAgICAgICAgICAgICAgIHZhciBhdElkeCA9IHRvQWRkci5sYXN0SW5kZXhPZihcIkBcIik7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsUGFydCA9IHRvQWRkci5zbGljZSgwLCBhdElkeCkucmVwbGFjZShQQ1RfRU5DT0RFRCwgZGVjb2RlVW5yZXNlcnZlZCkucmVwbGFjZShQQ1RfRU5DT0RFRCwgdG9VcHBlckNhc2UpLnJlcGxhY2UoTk9UX0xPQ0FMX1BBUlQsIHBjdEVuY0NoYXIpO1xuICAgICAgICAgICAgICAgIHZhciBkb21haW4gPSB0b0FkZHIuc2xpY2UoYXRJZHggKyAxKTtcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgSUROIHZpYSBwdW55Y29kZVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbiA9ICFvcHRpb25zLmlyaSA/IHB1bnljb2RlLnRvQVNDSUkodW5lc2NhcGVDb21wb25lbnQoZG9tYWluLCBvcHRpb25zKS50b0xvd2VyQ2FzZSgpKSA6IHB1bnljb2RlLnRvVW5pY29kZShkb21haW4pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgXCJFbWFpbCBhZGRyZXNzJ3MgZG9tYWluIG5hbWUgY2FuIG5vdCBiZSBjb252ZXJ0ZWQgdG8gXCIgKyAoIW9wdGlvbnMuaXJpID8gXCJBU0NJSVwiIDogXCJVbmljb2RlXCIpICsgXCIgdmlhIHB1bnljb2RlOiBcIiArIGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvW3hdID0gbG9jYWxQYXJ0ICsgXCJAXCIgKyBkb21haW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnRzLnBhdGggPSB0by5qb2luKFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVycyA9IG1haWx0b0NvbXBvbmVudHMuaGVhZGVycyA9IG1haWx0b0NvbXBvbmVudHMuaGVhZGVycyB8fCB7fTtcbiAgICAgICAgaWYgKG1haWx0b0NvbXBvbmVudHMuc3ViamVjdCkgaGVhZGVyc1tcInN1YmplY3RcIl0gPSBtYWlsdG9Db21wb25lbnRzLnN1YmplY3Q7XG4gICAgICAgIGlmIChtYWlsdG9Db21wb25lbnRzLmJvZHkpIGhlYWRlcnNbXCJib2R5XCJdID0gbWFpbHRvQ29tcG9uZW50cy5ib2R5O1xuICAgICAgICB2YXIgZmllbGRzID0gW107XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gaGVhZGVycykge1xuICAgICAgICAgICAgaWYgKGhlYWRlcnNbbmFtZV0gIT09IE9bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChuYW1lLnJlcGxhY2UoUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnJlcGxhY2UoUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKS5yZXBsYWNlKE5PVF9IRk5BTUUsIHBjdEVuY0NoYXIpICsgXCI9XCIgKyBoZWFkZXJzW25hbWVdLnJlcGxhY2UoUENUX0VOQ09ERUQsIGRlY29kZVVucmVzZXJ2ZWQpLnJlcGxhY2UoUENUX0VOQ09ERUQsIHRvVXBwZXJDYXNlKS5yZXBsYWNlKE5PVF9IRlZBTFVFLCBwY3RFbmNDaGFyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHMucXVlcnkgPSBmaWVsZHMuam9pbihcIiZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHM7XG4gICAgfVxufTtcblxudmFyIFVSTl9QQVJTRSA9IC9eKFteXFw6XSspXFw6KC4qKS87XG4vL1JGQyAyMTQxXG52YXIgaGFuZGxlciQzID0ge1xuICAgIHNjaGVtZTogXCJ1cm5cIixcbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UkJDEoY29tcG9uZW50cywgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IGNvbXBvbmVudHMucGF0aCAmJiBjb21wb25lbnRzLnBhdGgubWF0Y2goVVJOX1BBUlNFKTtcbiAgICAgICAgdmFyIHVybkNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgdmFyIHNjaGVtZSA9IG9wdGlvbnMuc2NoZW1lIHx8IHVybkNvbXBvbmVudHMuc2NoZW1lIHx8IFwidXJuXCI7XG4gICAgICAgICAgICB2YXIgbmlkID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIG5zcyA9IG1hdGNoZXNbMl07XG4gICAgICAgICAgICB2YXIgdXJuU2NoZW1lID0gc2NoZW1lICsgXCI6XCIgKyAob3B0aW9ucy5uaWQgfHwgbmlkKTtcbiAgICAgICAgICAgIHZhciBzY2hlbWVIYW5kbGVyID0gU0NIRU1FU1t1cm5TY2hlbWVdO1xuICAgICAgICAgICAgdXJuQ29tcG9uZW50cy5uaWQgPSBuaWQ7XG4gICAgICAgICAgICB1cm5Db21wb25lbnRzLm5zcyA9IG5zcztcbiAgICAgICAgICAgIHVybkNvbXBvbmVudHMucGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzY2hlbWVIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdXJuQ29tcG9uZW50cyA9IHNjaGVtZUhhbmRsZXIucGFyc2UodXJuQ29tcG9uZW50cywgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cm5Db21wb25lbnRzLmVycm9yID0gdXJuQ29tcG9uZW50cy5lcnJvciB8fCBcIlVSTiBjYW4gbm90IGJlIHBhcnNlZC5cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJuQ29tcG9uZW50cztcbiAgICB9LFxuICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplJCQxKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNjaGVtZSA9IG9wdGlvbnMuc2NoZW1lIHx8IHVybkNvbXBvbmVudHMuc2NoZW1lIHx8IFwidXJuXCI7XG4gICAgICAgIHZhciBuaWQgPSB1cm5Db21wb25lbnRzLm5pZDtcbiAgICAgICAgdmFyIHVyblNjaGVtZSA9IHNjaGVtZSArIFwiOlwiICsgKG9wdGlvbnMubmlkIHx8IG5pZCk7XG4gICAgICAgIHZhciBzY2hlbWVIYW5kbGVyID0gU0NIRU1FU1t1cm5TY2hlbWVdO1xuICAgICAgICBpZiAoc2NoZW1lSGFuZGxlcikge1xuICAgICAgICAgICAgdXJuQ29tcG9uZW50cyA9IHNjaGVtZUhhbmRsZXIuc2VyaWFsaXplKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmlDb21wb25lbnRzID0gdXJuQ29tcG9uZW50cztcbiAgICAgICAgdmFyIG5zcyA9IHVybkNvbXBvbmVudHMubnNzO1xuICAgICAgICB1cmlDb21wb25lbnRzLnBhdGggPSAobmlkIHx8IG9wdGlvbnMubmlkKSArIFwiOlwiICsgbnNzO1xuICAgICAgICByZXR1cm4gdXJpQ29tcG9uZW50cztcbiAgICB9XG59O1xuXG52YXIgVVVJRCA9IC9eWzAtOUEtRmEtZl17OH0oPzpcXC1bMC05QS1GYS1mXXs0fSl7M31cXC1bMC05QS1GYS1mXXsxMn0kLztcbi8vUkZDIDQxMjJcbnZhciBoYW5kbGVyJDQgPSB7XG4gICAgc2NoZW1lOiBcInVybjp1dWlkXCIsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHV1aWRDb21wb25lbnRzID0gdXJuQ29tcG9uZW50cztcbiAgICAgICAgdXVpZENvbXBvbmVudHMudXVpZCA9IHV1aWRDb21wb25lbnRzLm5zcztcbiAgICAgICAgdXVpZENvbXBvbmVudHMubnNzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIW9wdGlvbnMudG9sZXJhbnQgJiYgKCF1dWlkQ29tcG9uZW50cy51dWlkIHx8ICF1dWlkQ29tcG9uZW50cy51dWlkLm1hdGNoKFVVSUQpKSkge1xuICAgICAgICAgICAgdXVpZENvbXBvbmVudHMuZXJyb3IgPSB1dWlkQ29tcG9uZW50cy5lcnJvciB8fCBcIlVVSUQgaXMgbm90IHZhbGlkLlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dWlkQ29tcG9uZW50cztcbiAgICB9LFxuICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplKHV1aWRDb21wb25lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciB1cm5Db21wb25lbnRzID0gdXVpZENvbXBvbmVudHM7XG4gICAgICAgIC8vbm9ybWFsaXplIFVVSURcbiAgICAgICAgdXJuQ29tcG9uZW50cy5uc3MgPSAodXVpZENvbXBvbmVudHMudXVpZCB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gdXJuQ29tcG9uZW50cztcbiAgICB9XG59O1xuXG5TQ0hFTUVTW2hhbmRsZXIuc2NoZW1lXSA9IGhhbmRsZXI7XG5TQ0hFTUVTW2hhbmRsZXIkMS5zY2hlbWVdID0gaGFuZGxlciQxO1xuU0NIRU1FU1toYW5kbGVyJDIuc2NoZW1lXSA9IGhhbmRsZXIkMjtcblNDSEVNRVNbaGFuZGxlciQzLnNjaGVtZV0gPSBoYW5kbGVyJDM7XG5TQ0hFTUVTW2hhbmRsZXIkNC5zY2hlbWVdID0gaGFuZGxlciQ0O1xuXG5leHBvcnRzLlNDSEVNRVMgPSBTQ0hFTUVTO1xuZXhwb3J0cy5wY3RFbmNDaGFyID0gcGN0RW5jQ2hhcjtcbmV4cG9ydHMucGN0RGVjQ2hhcnMgPSBwY3REZWNDaGFycztcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMucmVtb3ZlRG90U2VnbWVudHMgPSByZW1vdmVEb3RTZWdtZW50cztcbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuZXhwb3J0cy5yZXNvbHZlQ29tcG9uZW50cyA9IHJlc29sdmVDb21wb25lbnRzO1xuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZTtcbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuZXhwb3J0cy5lcXVhbCA9IGVxdWFsO1xuZXhwb3J0cy5lc2NhcGVDb21wb25lbnQgPSBlc2NhcGVDb21wb25lbnQ7XG5leHBvcnRzLnVuZXNjYXBlQ29tcG9uZW50ID0gdW5lc2NhcGVDb21wb25lbnQ7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmkuYWxsLmpzLm1hcFxuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwidmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7XG5cbnZhciBPYmplY3Rfa2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoT2JqZWN0LmtleXMpIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgcmVzLnB1c2goa2V5KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gKHhzLCBmbikge1xuICAgIGlmICh4cy5mb3JFYWNoKSByZXR1cm4geHMuZm9yRWFjaChmbilcbiAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oeHNbaV0sIGksIHhzKTtcbiAgICB9XG59O1xuXG52YXIgZGVmaW5lUHJvcCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdfJywge30pO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG59KCkpO1xuXG52YXIgZ2xvYmFscyA9IFsnQXJyYXknLCAnQm9vbGVhbicsICdEYXRlJywgJ0Vycm9yJywgJ0V2YWxFcnJvcicsICdGdW5jdGlvbicsXG4nSW5maW5pdHknLCAnSlNPTicsICdNYXRoJywgJ05hTicsICdOdW1iZXInLCAnT2JqZWN0JywgJ1JhbmdlRXJyb3InLFxuJ1JlZmVyZW5jZUVycm9yJywgJ1JlZ0V4cCcsICdTdHJpbmcnLCAnU3ludGF4RXJyb3InLCAnVHlwZUVycm9yJywgJ1VSSUVycm9yJyxcbidkZWNvZGVVUkknLCAnZGVjb2RlVVJJQ29tcG9uZW50JywgJ2VuY29kZVVSSScsICdlbmNvZGVVUklDb21wb25lbnQnLCAnZXNjYXBlJyxcbidldmFsJywgJ2lzRmluaXRlJywgJ2lzTmFOJywgJ3BhcnNlRmxvYXQnLCAncGFyc2VJbnQnLCAndW5kZWZpbmVkJywgJ3VuZXNjYXBlJ107XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7fVxuQ29udGV4dC5wcm90b3R5cGUgPSB7fTtcblxudmFyIFNjcmlwdCA9IGV4cG9ydHMuU2NyaXB0ID0gZnVuY3Rpb24gTm9kZVNjcmlwdCAoY29kZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY3JpcHQpKSByZXR1cm4gbmV3IFNjcmlwdChjb2RlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5JbkNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIGlmICghKGNvbnRleHQgaW5zdGFuY2VvZiBDb250ZXh0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZHMgYSAnY29udGV4dCcgYXJndW1lbnQuXCIpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWYgKCFpZnJhbWUuc3R5bGUpIGlmcmFtZS5zdHlsZSA9IHt9O1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBcbiAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgdmFyIHdFdmFsID0gd2luLmV2YWwsIHdFeGVjU2NyaXB0ID0gd2luLmV4ZWNTY3JpcHQ7XG5cbiAgICBpZiAoIXdFdmFsICYmIHdFeGVjU2NyaXB0KSB7XG4gICAgICAgIC8vIHdpbi5ldmFsKCkgbWFnaWNhbGx5IGFwcGVhcnMgd2hlbiB0aGlzIGlzIGNhbGxlZCBpbiBJRTpcbiAgICAgICAgd0V4ZWNTY3JpcHQuY2FsbCh3aW4sICdudWxsJyk7XG4gICAgICAgIHdFdmFsID0gd2luLmV2YWw7XG4gICAgfVxuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY29udGV4dCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgfSk7XG4gICAgZm9yRWFjaChnbG9iYWxzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjb250ZXh0W2tleV0pIHtcbiAgICAgICAgICAgIHdpbltrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgdmFyIHdpbktleXMgPSBPYmplY3Rfa2V5cyh3aW4pO1xuXG4gICAgdmFyIHJlcyA9IHdFdmFsLmNhbGwod2luLCB0aGlzLmNvZGUpO1xuICAgIFxuICAgIGZvckVhY2goT2JqZWN0X2tleXMod2luKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvLyBBdm9pZCBjb3B5aW5nIGNpcmN1bGFyIG9iamVjdHMgbGlrZSBgdG9wYCBhbmQgYHdpbmRvd2AgYnkgb25seVxuICAgICAgICAvLyB1cGRhdGluZyBleGlzdGluZyBjb250ZXh0IHByb3BlcnRpZXMgb3IgbmV3IHByb3BlcnRpZXMgaW4gdGhlIGB3aW5gXG4gICAgICAgIC8vIHRoYXQgd2FzIG9ubHkgaW50cm9kdWNlZCBhZnRlciB0aGUgZXZhbC5cbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0IHx8IGluZGV4T2Yod2luS2V5cywga2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHdpbltrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGNvbnRleHQpKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wKGNvbnRleHQsIGtleSwgd2luW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHJldHVybiByZXM7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluVGhpc0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGV2YWwodGhpcy5jb2RlKTsgLy8gbWF5YmUuLi5cbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5OZXdDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICB2YXIgY3R4ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQoY29udGV4dCk7XG4gICAgdmFyIHJlcyA9IHRoaXMucnVuSW5Db250ZXh0KGN0eCk7XG5cbiAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGN0eCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY29udGV4dFtrZXldID0gY3R4W2tleV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuZm9yRWFjaChPYmplY3Rfa2V5cyhTY3JpcHQucHJvdG90eXBlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBleHBvcnRzW25hbWVdID0gU2NyaXB0W25hbWVdID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgdmFyIHMgPSBTY3JpcHQoY29kZSk7XG4gICAgICAgIHJldHVybiBzW25hbWVdLmFwcGx5KHMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuU2NyaXB0KGNvZGUpO1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gU2NyaXB0LmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjb3B5ID0gbmV3IENvbnRleHQoKTtcbiAgICBpZih0eXBlb2YgY29udGV4dCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgY29weVtrZXldID0gY29udGV4dFtrZXldO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qIChpZ25vcmVkKSAqLyIsIi8qIChpZ25vcmVkKSAqLyIsIi8qIChpZ25vcmVkKSAqLyIsIi8qIChpZ25vcmVkKSAqLyJdLCJzb3VyY2VSb290IjoiIn0=